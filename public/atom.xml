<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Zero to Hero</title>
    <link rel="self" type="application/atom+xml" href="https://zerotohero.dev/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://zerotohero.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-07-13T00:00:00+00:00</updated>
    <id>https://zerotohero.dev/atom.xml</id>
    <entry xml:lang="en">
        <title>Snippet&#x2F;Draft: systemd-networkd-wait-online.service Waits Too Long During Ubuntu Startup</title>
        <published>2025-07-13T00:00:00+00:00</published>
        <updated>2025-07-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/snippet-systemd-network-wait-online-too-long/"/>
        <id>https://zerotohero.dev/inbox/snippet-systemd-network-wait-online-too-long/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/snippet-systemd-network-wait-online-too-long/">&lt;p&gt;Quick fix: Disable the service (if you don’t need to wait for network at boot):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo systemctl disable systemd-networkd-wait-online.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Better fixes:&lt;&#x2F;p&gt;
&lt;p&gt;Configure it to wait only for specific interfaces:&lt;&#x2F;p&gt;
&lt;p&gt;Edit the service:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo systemctl edit systemd-networkd-wait-online.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;ini[Service]
&lt;&#x2F;span&gt;&lt;span&gt;ExecStart=
&lt;&#x2F;span&gt;&lt;span&gt;ExecStart=&#x2F;lib&#x2F;systemd&#x2F;systemd-networkd-wait-online --interface=eth0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Reduce the timeout:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;[Service]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ExecStart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ExecStart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;lib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;systemd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;systemd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;networkd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;wait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;online &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Check which interfaces are causing delays:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hnetworkctl status
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Look for interfaces that are “configuring” or “pending”.&lt;&#x2F;p&gt;
&lt;p&gt;If you’re using NetworkManager instead of &lt;code&gt;systemd-networkd&lt;&#x2F;code&gt;, you can disable
this service and enable the NetworkManager equivalent:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo systemctl disable systemd-networkd-wait-online.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo systemctl enable NetworkManager-wait-online.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The most common cause is having network interfaces defined in &lt;code&gt;&#x2F;etc&#x2F;netplan&#x2F;&lt;&#x2F;code&gt; or
&lt;code&gt;&#x2F;etc&#x2F;network&#x2F;interfaces&lt;&#x2F;code&gt; that aren’t actually connected, causing the service
to wait for them unnecessarily.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Snippet&#x2F;Draft: Crypto in Go</title>
        <published>2025-07-12T00:00:00+00:00</published>
        <updated>2025-07-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/snippet-crypto-in-go/"/>
        <id>https://zerotohero.dev/inbox/snippet-crypto-in-go/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/snippet-crypto-in-go/">&lt;h2 id=&quot;encrypting-and-decrypting-with-aes-cbc&quot;&gt;Encrypting and Decrypting with AES CBC&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;aes&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;cipher&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;rand&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;encoding&#x2F;base64&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;io&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello, Go encryption!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;32-byte-key-for-AES-256-!!!!!!!!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 32 bytes for AES-256
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Encrypt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptAES&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Encryption error:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Ciphertext (base64): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StdEncoding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EncodeToString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Decrypt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decrypted&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decryptAES&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Decryption error:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Decrypted: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decrypted&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;encryptAES&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) ([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewCipher&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Pad plaintext to block size
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padding &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padtext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Repeat&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;)}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padtext&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;iv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadFull&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;iv&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cipher&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewCBCEncrypter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;iv&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mode&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CryptBlocks&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize&lt;&#x2F;span&gt;&lt;span&gt;:], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padtext&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;decryptAES&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) ([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewCipher&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;ciphertext too short&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;iv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize&lt;&#x2F;span&gt;&lt;span&gt;:]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cipher&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewCBCDecrypter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;iv&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mode&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CryptBlocks&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Unpad
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padding &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Output:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Ciphertext (base64): [base64 string varies due to random IV]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Decrypted: Hello, Go encryption!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Important:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Key length matters: Use 32 bytes for AES-256, 24 for AES-192, or 16 for AES-128.&lt;&#x2F;li&gt;
&lt;li&gt;IV is critical: It ensures each encryption is unique, even with the same key and plaintext.&lt;&#x2F;li&gt;
&lt;li&gt;Padding: AES requires data to be a multiple of the block size (16 bytes).
The example uses &lt;code&gt;PKCS#5&lt;&#x2F;code&gt; padding.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;aes-gcm-encryption-and-decryption&quot;&gt;AES GCM Encryption and Decryption&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;aes&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;cipher&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;rand&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;encoding&#x2F;base64&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;io&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Secure data with GCM!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;32-byte-key-for-AES-256-!!!!!!!!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 32 bytes for AES-256
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Encrypt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptGCM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Encryption error:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Ciphertext (base64): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StdEncoding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EncodeToString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Decrypt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decrypted&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decryptGCM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Decryption error:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Decrypted: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decrypted&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;encryptGCM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) ([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewCipher&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gcm&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cipher&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewGCM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonce &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gcm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NonceSize&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadFull&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonce&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gcm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Seal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonce&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonce&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;decryptGCM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) ([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewCipher&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gcm&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cipher&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewGCM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonceSize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gcm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NonceSize&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonceSize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;ciphertext too short&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonce&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonceSize&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonceSize&lt;&#x2F;span&gt;&lt;span&gt;:]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gcm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonce&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Output:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Ciphertext (base64): [base64 string varies due to random nonce]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Decrypted: Secure data with GCM!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Important:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Nonce: A unique value (like IV) for each encryption. GCM uses a 12-byte nonce by default.&lt;&#x2F;li&gt;
&lt;li&gt;Authentication: GCM verifies data integrity, rejecting tampered ciphertext.&lt;&#x2F;li&gt;
&lt;li&gt;No padding: GCM handles variable-length data natively.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;rsa-encryption-and-decryption&quot;&gt;RSA Encryption and Decryption&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;rand&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;rsa&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;sha256&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;encoding&#x2F;base64&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Generate key pair
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;privateKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rsa&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GenerateKey&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2048&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Key generation error:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;publicKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;privateKey&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PublicKey
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Encrypt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;RSA encryption in Go!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rsa&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EncryptOAEP&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;publicKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Encryption error:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Ciphertext (base64): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StdEncoding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EncodeToString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Decrypt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decrypted&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rsa&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DecryptOAEP&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;privateKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Decryption error:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Decrypted: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decrypted&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Output:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Ciphertext (base64): [base64 string varies due to random padding]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Decrypted: RSA encryption in Go!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Important:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Key size: Use at least 2048 bits for security.&lt;&#x2F;li&gt;
&lt;li&gt;OAEP padding: Go’s EncryptOAEP adds secure padding to prevent attacks.&lt;&#x2F;li&gt;
&lt;li&gt;Small data only: RSA can only encrypt data smaller than the key size.&lt;&#x2F;li&gt;
&lt;li&gt;Resource: Go’s crypto&#x2F;rsa documentation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;hashing-versus-encryption&quot;&gt;Hashing versus Encryption&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Feature&lt;&#x2F;th&gt;&lt;th&gt;Encryption&lt;&#x2F;th&gt;&lt;th&gt;Hashing&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Purpose&lt;&#x2F;td&gt;&lt;td&gt;Protect data confidentiality&lt;&#x2F;td&gt;&lt;td&gt;Verify data integrity&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Reversible?&lt;&#x2F;td&gt;&lt;td&gt;Yes (with key)&lt;&#x2F;td&gt;&lt;td&gt;No (one-way)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Go Package&lt;&#x2F;td&gt;&lt;td&gt;crypto&#x2F;aes, crypto&#x2F;rsa&lt;&#x2F;td&gt;&lt;td&gt;crypto&#x2F;sha256, crypto&#x2F;md5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Example Use&lt;&#x2F;td&gt;&lt;td&gt;Secure API payloads&lt;&#x2F;td&gt;&lt;td&gt;Password storage&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;sha-256-hash&quot;&gt;SHA-256 Hash&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;sha256&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;encoding&#x2F;hex&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hash this string!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sum256&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;SHA-256 Hash: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hex&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EncodeToString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span&gt;[:]))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Output:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; SHA-256 Hash: 2c7a6e66323c8f7a0e205803c763eb8a4e8b6f8b0b2c3f8a7e8f9d0b1e2c3d4e
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;generating-a-secure-random-key&quot;&gt;Generating a Secure Random Key&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;rand&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;encoding&#x2F;hex&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 32 bytes for AES-256
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Read&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Key generation error:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Generated key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hex&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EncodeToString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Output:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Generated key: [random 64-character hex string]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;common-encryption-pitfalls&quot;&gt;Common Encryption Pitfalls&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Pitfall&lt;&#x2F;th&gt;&lt;th&gt;Solution&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Reusing IV&#x2F;nonce&lt;&#x2F;td&gt;&lt;td&gt;Generate a unique IV&#x2F;nonce per encryption&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Weak key generation&lt;&#x2F;td&gt;&lt;td&gt;Use crypto&#x2F;rand for keys and IVs&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Hardcoding keys&lt;&#x2F;td&gt;&lt;td&gt;Store keys in secure storage&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Ignoring authentication&lt;&#x2F;td&gt;&lt;td&gt;Use AES-GCM for authenticated encryption&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;hybrid-encryption&quot;&gt;Hybrid Encryption&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;aes&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;cipher&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;rand&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;rsa&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;sha256&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;encoding&#x2F;base64&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;io&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Generate RSA key pair
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;privateKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rsa&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GenerateKey&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2048&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Key generation error:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;publicKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;privateKey&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PublicKey
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Generate AES key
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aesKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Read&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aesKey&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;AES key generation error:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Encrypt data with AES
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hybrid encryption in Go!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptAES&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aesKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;AES encryption error:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Encrypt AES key with RSA
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rsa&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EncryptOAEP&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;publicKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aesKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;RSA encryption error:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Encrypted AES key (base64): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StdEncoding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EncodeToString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedKey&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Ciphertext (base64): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StdEncoding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EncodeToString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Decrypt AES key with RSA
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decryptedKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rsa&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DecryptOAEP&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;privateKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;RSA decryption error:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Decrypt data with AES
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decrypted&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decryptAES&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decryptedKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;AES decryption error:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Decrypted: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decrypted&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;encryptAES&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) ([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewCipher&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padding &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padtext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;plaintext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Repeat&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;)}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padtext&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;iv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadFull&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;iv&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cipher&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewCBCEncrypter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;iv&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mode&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CryptBlocks&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize&lt;&#x2F;span&gt;&lt;span&gt;:], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padtext&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;decryptAES&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) ([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewCipher&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;ciphertext too short&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;iv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BlockSize&lt;&#x2F;span&gt;&lt;span&gt;:]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cipher&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewCBCDecrypter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;iv&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mode&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CryptBlocks&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padding &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Output:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Encrypted AES key (base64): [base64 string varies]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Ciphertext (base64): [base64 string varies]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Decrypted: Hybrid encryption in Go!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;what-to-use-when&quot;&gt;What to Use When&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;AES-CBC: Good for general-purpose encryption with manual padding.&lt;&#x2F;li&gt;
&lt;li&gt;AES-GCM: Best for authenticated encryption in secure communications.&lt;&#x2F;li&gt;
&lt;li&gt;RSA: Ideal for key exchange or small data encryption.&lt;&#x2F;li&gt;
&lt;li&gt;Hybrid encryption: Combines AES and RSA for large-scale secure data transfer.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Bulk Import Bookmarks to Shiori: A Simple Bash Script Solution</title>
        <published>2025-06-22T00:00:00+00:00</published>
        <updated>2025-06-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/shiori/"/>
        <id>https://zerotohero.dev/inbox/shiori/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/shiori/">&lt;p&gt;If you’re like me and have accumulated hundreds of bookmarks across various
services, migrating them to a self-hosted solution like
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;go-shiori&#x2F;shiori&quot;&gt;&lt;strong&gt;Shiori&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; can feel daunting. While
&lt;strong&gt;Shiori&lt;&#x2F;strong&gt;’s simplicity is one of its strengths, importing bookmarks one by one
through the web UI or CLI can be time-consuming.&lt;&#x2F;p&gt;
&lt;p&gt;In this post, I’ll share a bash script that automates the bulk import process,
making it easy to migrate your entire bookmark collection to &lt;strong&gt;Shiori&lt;&#x2F;strong&gt; in
minutes and finally break free from the “social” bookmarking ecosystem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-shiori&quot;&gt;What is Shiori?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;go-shiori&#x2F;shiori&quot;&gt;Shiori&lt;&#x2F;a&gt; is a simple, self-hosted bookmark
manager written in &lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;&quot;&gt;Go&lt;&#x2F;a&gt;. I like to call it my
“&lt;em&gt;antisocial bookmark manager&lt;&#x2F;em&gt;” because it’s the complete opposite of modern,
social-media-influenced bookmarking services. There are no social features,
no “trending” sections, no algorithmic recommendations, and definitely
no tracking.&lt;&#x2F;p&gt;
&lt;p&gt;It’s just you and your bookmarks, exactly how it should be.&lt;&#x2F;p&gt;
&lt;p&gt;Think of Shiori as your personal library: A quiet, private space where you can
save and organize content that matters to you, without the noise and
distractions of the modern web.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-i-chose-shiori-over-traditional-services&quot;&gt;Why I Chose Shiori Over Traditional Services&lt;&#x2F;h2&gt;
&lt;p&gt;After years of using various “&lt;em&gt;as a service&lt;&#x2F;em&gt;” bookmark managers
(Pocket, Instapaper, Pinboard, and others), I made the switch to &lt;strong&gt;Shiori&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is “why” in a nutshell:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;complete-privacy-and-control&quot;&gt;Complete Privacy and Control&lt;&#x2F;h3&gt;
&lt;p&gt;Your bookmarks reveal a lot about your interests, research, and thought
processes. With Shiori being self-hosted, your data never leaves your server,
or your laptop, if you prefer to host your bookmarks locally.&lt;&#x2F;p&gt;
&lt;p&gt;No company is analyzing your reading habits, selling your data, or using it to
train AI models.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;true-offline-access&quot;&gt;True Offline Access&lt;&#x2F;h3&gt;
&lt;p&gt;Shiori doesn’t just save links - it creates full offline archives of web pages.&lt;&#x2F;p&gt;
&lt;p&gt;This means:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Content remains accessible even if the original site goes down&lt;&#x2F;li&gt;
&lt;li&gt;No more “404 Page Not Found” disappointments&lt;&#x2F;li&gt;
&lt;li&gt;Read your saved articles without an internet connection
*Protection against content changes or removals&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;no-vendor-lock-in&quot;&gt;No Vendor Lock-in&lt;&#x2F;h3&gt;
&lt;p&gt;With traditional services, you’re at the mercy of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pricing changes (&lt;em&gt;remember when Pocket introduced Pocket Premium?&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Feature removals (&lt;em&gt;RIP Google Reader&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Service shutdowns (&lt;em&gt;Delicious, anyone?&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;API restrictions and rate limits&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With &lt;strong&gt;Shiori&lt;&#x2F;strong&gt;, you own your data and the software. It’s open source, so even
if development stops, your bookmarks remain accessible.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;clean-distraction-free-interface&quot;&gt;Clean, Distraction-Free Interface&lt;&#x2F;h3&gt;
&lt;p&gt;Unlike modern services that push “recommended content” or “what’s trending,”
&lt;strong&gt;Shiori&lt;&#x2F;strong&gt; presents only what you’ve saved. No algorithmic feed, no social
features trying to increase engagement—just a clean, searchable list of
your bookmarks.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lightweight-and-fast&quot;&gt;Lightweight and Fast&lt;&#x2F;h3&gt;
&lt;p&gt;Running on a simple SQLite database (&lt;em&gt;or, PostgreSQL&#x2F;MySQL, if you prefer&lt;&#x2F;em&gt;),
&lt;strong&gt;Shiori&lt;&#x2F;strong&gt; is incredibly lightweight. It runs comfortably on a
Raspberry Pi, doesn’t require complex infrastructure, and starts up in seconds.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;developer-friendly&quot;&gt;Developer-Friendly&lt;&#x2F;h3&gt;
&lt;p&gt;With a proper CLI interface and straightforward database schema, &lt;strong&gt;Shiori&lt;&#x2F;strong&gt;
plays well with scripts and automation. You can easily:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Bulk import&#x2F;export bookmarks&lt;&#x2F;li&gt;
&lt;li&gt;Integrate with other tools&lt;&#x2F;li&gt;
&lt;li&gt;Create custom workflows&lt;&#x2F;li&gt;
&lt;li&gt;Automate bookmark management&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-migration-challenge&quot;&gt;The Migration Challenge&lt;&#x2F;h2&gt;
&lt;p&gt;Shiori provides several ways to add bookmarks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Through the web interface (&lt;em&gt;one at a time&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Using the CLI command &lt;code&gt;shiori add &amp;lt;url&amp;gt;&lt;&#x2F;code&gt; (&lt;em&gt;also one at a time&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Importing from browsers (&lt;em&gt;limited format support&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But what if you have a simple text file with hundreds of URLs? Or what if
you’re migrating from another service that exports to a basic list format?&lt;&#x2F;p&gt;
&lt;p&gt;That’s where automation comes in handy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution-a-bulk-import-script&quot;&gt;The Solution: A Bulk Import Script&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve created a bash script that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Reads URLs from a text file (&lt;em&gt;one URL per line&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Adds each bookmark to Shiori automatically&lt;&#x2F;li&gt;
&lt;li&gt;Tracks success&#x2F;failure statistics&lt;&#x2F;li&gt;
&lt;li&gt;Logs errors for troubleshooting&lt;&#x2F;li&gt;
&lt;li&gt;Provides progress feedback during import&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s the complete script:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Script to bulk import links to Shiori
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Usage: .&#x2F;import.sh &amp;lt;links_file.txt&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LINKS_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;.&#x2F;links.txt&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$# -eq 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Usage: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt; &amp;lt;links_file.txt&amp;gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Defaulting to .&#x2F;links.txt&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LINKS_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Check if the file exists
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LINKS_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: File &amp;#39;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LINKS_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39; not found!&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Check if shiori is in PATH
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;command &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-v shiori &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; &#x2F;dev&#x2F;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: shiori command not found in PATH!&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Please ensure shiori binary is accessible&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Counter variables
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;success&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Log file for errors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ERROR_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;shiori_import_errors_$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;date +%Y%m%d_%H%M%S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;).log&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Starting Shiori import from: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LINKS_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Errors will be logged to: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ERROR_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;----------------------------------------&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Read the file line by line
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;IFS= read -r url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Skip empty lines and lines starting with #
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;:space:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Trim whitespace
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;xargs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ((total&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;[$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;] Adding: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt; ... &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Add bookmark to Shiori
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shiori add &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;SUCCESS&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ((success&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Extract bookmark ID from output (macOS compatible)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bookmark_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;grep -o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;ID:[[:space:]]*[0-9]*&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;grep -o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;[0-9]*&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;grep -o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;Added bookmark with ID [0-9]*&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;grep -o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;[0-9]*$&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;grep -o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;[0-9]\+&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;head -1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bookmark_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;   → Bookmark ID: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bookmark_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;FAILED&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ((failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;[$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;] Failed to add: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ERROR_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ERROR_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;----------------------------------------&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ERROR_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Small delay to avoid overwhelming the server
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sleep 0.5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;done &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LINKS_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;----------------------------------------&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Import completed!&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Total processed: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Successful: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;success&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Failed: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$failed -gt 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Check $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ERROR_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt; for details on failed imports&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;how-to-use-the-script&quot;&gt;How to Use the Script&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-prerequisites&quot;&gt;1. Prerequisites&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shiori&lt;&#x2F;strong&gt; installed and accessible in your &lt;code&gt;$PATH&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;A text file containing URLs (&lt;em&gt;one per line&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Bash shell (&lt;em&gt;works on Linux, macOS, and WSL&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-prepare-your-url-list&quot;&gt;2. Prepare Your URL List&lt;&#x2F;h3&gt;
&lt;p&gt;Create a file called &lt;code&gt;links.txt&lt;&#x2F;code&gt; with your bookmarks:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;https:&#x2F;&#x2F;github.com&#x2F;go-shiori&#x2F;shiori
&lt;&#x2F;span&gt;&lt;span&gt;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;https:&#x2F;&#x2F;example.com&#x2F;article
&lt;&#x2F;span&gt;&lt;span&gt;# This is a comment - it will be skipped
&lt;&#x2F;span&gt;&lt;span&gt;https:&#x2F;&#x2F;another-site.com&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Empty lines are also skipped
&lt;&#x2F;span&gt;&lt;span&gt;https:&#x2F;&#x2F;final-url.com&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-run-the-script&quot;&gt;3. Run the Script&lt;&#x2F;h3&gt;
&lt;p&gt;Save the script as &lt;code&gt;import.sh&lt;&#x2F;code&gt;, make it executable, and run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod +x import.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&#x2F;import.sh links.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or use the default &lt;code&gt;links.txt&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&#x2F;import.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-monitor-progress&quot;&gt;4. Monitor Progress&lt;&#x2F;h3&gt;
&lt;p&gt;The script provides real-time feedback:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;Starting Shiori import from: .&#x2F;links.txt
&lt;&#x2F;span&gt;&lt;span&gt;Errors will be logged to: shiori_import_errors_20250622_184441.log
&lt;&#x2F;span&gt;&lt;span&gt;----------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;[1] Adding: https:&#x2F;&#x2F;github.com&#x2F;go-shiori&#x2F;shiori ... SUCCESS
&lt;&#x2F;span&gt;&lt;span&gt;   → Bookmark ID: 1
&lt;&#x2F;span&gt;&lt;span&gt;[2] Adding: https:&#x2F;&#x2F;news.ycombinator.com&#x2F; ... SUCCESS
&lt;&#x2F;span&gt;&lt;span&gt;   → Bookmark ID: 2
&lt;&#x2F;span&gt;&lt;span&gt;[3] Adding: https:&#x2F;&#x2F;invalid-url ... FAILED
&lt;&#x2F;span&gt;&lt;span&gt;----------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;Import completed!
&lt;&#x2F;span&gt;&lt;span&gt;Total processed: 3
&lt;&#x2F;span&gt;&lt;span&gt;Successful: 2
&lt;&#x2F;span&gt;&lt;span&gt;Failed: 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Check shiori_import_errors_20250622_184441.log \
&lt;&#x2F;span&gt;&lt;span&gt;  for details on failed imports
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;key-features&quot;&gt;Key Features&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;error-handling&quot;&gt;Error Handling&lt;&#x2F;h3&gt;
&lt;p&gt;The script creates a timestamped log file for any failures, making it easy to
identify and retry problematic URLs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;progress-tracking&quot;&gt;Progress Tracking&lt;&#x2F;h3&gt;
&lt;p&gt;Real-time feedback shows exactly which URLs are being processed and their
import status.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;comment-support&quot;&gt;Comment Support&lt;&#x2F;h3&gt;
&lt;p&gt;Lines starting with &lt;code&gt;#&lt;&#x2F;code&gt; are treated as comments and skipped, allowing you to
annotate your URL list.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rate-limiting&quot;&gt;Rate Limiting&lt;&#x2F;h3&gt;
&lt;p&gt;A 0.5-second delay between imports prevents overwhelming your Shiori instance.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cross-platform-compatibility&quot;&gt;Cross-Platform Compatibility&lt;&#x2F;h3&gt;
&lt;p&gt;The script uses POSIX-compliant commands and works on Linux, macOS,
and Windows (&lt;em&gt;via WSL&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extending-the-script&quot;&gt;Extending the Script&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;adding-tags&quot;&gt;Adding Tags&lt;&#x2F;h3&gt;
&lt;p&gt;To add tags during import, modify the shiori command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shiori add &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; -t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;imported,to-read&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;creating-offline-archives&quot;&gt;Creating Offline Archives&lt;&#x2F;h3&gt;
&lt;p&gt;Depending on your Shiori version, you might be able to create offline 4
archives during import. Check available options with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shiori add --help
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shiori update --help
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;parallel-processing&quot;&gt;Parallel Processing&lt;&#x2F;h3&gt;
&lt;p&gt;For faster imports with large lists, you could modify the script to use
GNU parallel:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cat links.txt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;parallel -j 4 shiori add {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;command-not-found&quot;&gt;Command Not Found&lt;&#x2F;h3&gt;
&lt;p&gt;If you get “shiori: command not found”, ensure Shiori is in your &lt;code&gt;$PATH&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;which shiori
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Should output something like: &#x2F;usr&#x2F;local&#x2F;bin&#x2F;shiori
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;permission-denied&quot;&gt;Permission Denied&lt;&#x2F;h3&gt;
&lt;p&gt;Make sure the script is executable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod +x import.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;special-characters-in-urls&quot;&gt;Special Characters in URLs&lt;&#x2F;h3&gt;
&lt;p&gt;The script handles most URLs correctly, but if you have URLs with special
characters, ensure they’re properly encoded.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This simple bash script has saved me hours of manual work when migrating
bookmarks to Shiori. It’s a great example of how a little automation can
streamline repetitive tasks.&lt;&#x2F;p&gt;
&lt;p&gt;The script is intentionally kept simple and focused on the core functionality.
Feel free to modify it for your specific needs - perhaps adding custom titles,
excerpts, or integrating with other tools in your workflow.&lt;&#x2F;p&gt;
&lt;p&gt;Happy bookmarking 🔖.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Shamir&#x27;s Secret Sharing Scheme with SPIFFE and SPIKE</title>
        <published>2024-12-28T00:00:00+00:00</published>
        <updated>2024-12-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/spike/shamir-secrets-sharing/"/>
        <id>https://zerotohero.dev/spire/spike/shamir-secrets-sharing/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/spike/shamir-secrets-sharing/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Secure secrets management&lt;&#x2F;strong&gt; is a critical aspect of any modern distributed
system’s infrastructure. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spike&quot;&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;Secure
Production Identity for Key Encryption&lt;&#x2F;em&gt;) is a system that achieves secure
secrets management through a &lt;strong&gt;distributed&lt;&#x2F;strong&gt;, &lt;strong&gt;zero-trust&lt;&#x2F;strong&gt; architecture.&lt;&#x2F;p&gt;
&lt;p&gt;To learn more about &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;, you can visit&lt;a href=&quot;https:&#x2F;&#x2F;spike.ist&#x2F;&quot;&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;’s website&lt;&#x2F;a&gt;
or check out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spike&quot;&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;’s GitHub repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-video-is-a-worth-a-million-words&quot;&gt;A Video is a Worth a Million Words&lt;&#x2F;h2&gt;
&lt;p&gt;Here is a video that goes over what we discuss in this article:&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;&lt;iframe src=&quot;https:&#x2F;&#x2F;player.vimeo.com&#x2F;video&#x2F;1042946784?badge=0&amp;amp;autopause=0&amp;amp;player_id=0&amp;amp;app_id=58479&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture; clipboard-write&quot; style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot; title=&quot;SPIKE’s Shamir Secrets Sharing with SPIFFE mTLS&quot;&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;&lt;script src=&quot;https:&#x2F;&#x2F;player.vimeo.com&#x2F;api&#x2F;player.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;h2 id=&quot;keeping-the-root-key-secret&quot;&gt;Keeping the Root Key Secret&lt;&#x2F;h2&gt;
&lt;p&gt;In &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; architecture, &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; is the central secret store.
&lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; requires a &lt;strong&gt;root key&lt;&#x2F;strong&gt; to save its secrets to its
&lt;em&gt;backing store&lt;&#x2F;em&gt; in encrypted form. That’s why the &lt;strong&gt;root key&lt;&#x2F;strong&gt; is a critical
secret that must always be kept secure.&lt;&#x2F;p&gt;
&lt;p&gt;This article discusses how &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; securely manages the &lt;strong&gt;root key&lt;&#x2F;strong&gt; using
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;&lt;strong&gt;Shamir’s Secret Sharing&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; scheme.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introducing-shamir-s-secret-sharing&quot;&gt;Introducing Shamir’s Secret Sharing&lt;&#x2F;h2&gt;
&lt;p&gt;Our design relies upon several layers of security to ensure the root key remains
secure:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We leverage &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE-based mTLS encryption&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to secure communication
between various &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; components.&lt;&#x2F;li&gt;
&lt;li&gt;We use &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;&lt;strong&gt;Shamir’s Secret Sharing&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to split the root key into
multiple shares. This ensures that no single entity can access the full
key anytime.&lt;&#x2F;li&gt;
&lt;li&gt;The Shamir &lt;strong&gt;shares&lt;&#x2F;strong&gt; are never stored on disk.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s generate one share per Keeper; however, a single share is
not enough to reconstruct the root key. So even in the unlikely event that
a &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; is compromised, the root key remains secure.&lt;&#x2F;li&gt;
&lt;li&gt;Only &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; can compose the root key from the shares; once created,
it remains in the memory. The root key is &lt;strong&gt;never&lt;&#x2F;strong&gt; stored on disk
and &lt;strong&gt;never&lt;&#x2F;strong&gt; leaves the network perimeter.&lt;&#x2F;li&gt;
&lt;li&gt;In addition, there is no API or programmatic access that can reveal the root
key. The attacker will need admin privileges and sophisticated memory forensics
to extract the root key from the &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt;, which is a significant
security barrier.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This article further discusses the architecture and design choices that make
&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;’s &lt;strong&gt;Nexus&lt;&#x2F;strong&gt; and &lt;strong&gt;Keeper&lt;&#x2F;strong&gt; interaction an excellent model for secure
key management.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;How about Disaster Recovery?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the case of all &lt;strong&gt;SPIKE Keepers&lt;&#x2F;strong&gt; simultaneously crashing, the root key is
lost.&lt;&#x2F;p&gt;
&lt;p&gt;We have secure and sophisticated ideas to help teams recover from an unlikely
doomsday scenario by requiring multi-party approval to reconstruct the root
key. Yet, this is a topic for another article.&lt;&#x2F;p&gt;
&lt;p&gt;However, even in this multiple-SPIKE-keepers scenario, a surefire way to
prevent from losing the root key is to increase the number of &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s
to a higher number, say 5 or 7. This way, even if a few &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s
crash, the root key can still be reconstructed.&lt;&#x2F;p&gt;
&lt;p&gt;And when you geographically distribute the &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s, you can ensure
that even a natural disaster won’t take down all the &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s at once.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;spike-architecture-a-brief-overview&quot;&gt;SPIKE Architecture: A Brief Overview&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; system consists of three core components:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;: These are distributed instances responsible for generating
shards (&lt;em&gt;parts of a root key&lt;&#x2F;em&gt;) using &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;Shamir’s Secret Sharing&lt;&#x2F;a&gt;. Each
&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; maintains a piece of the secret, ensuring no single entity
has the full key.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt;: This is the &lt;strong&gt;secrets store&lt;&#x2F;strong&gt; that gathers shards from the
&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s to reconstruct the &lt;code&gt;rootKey&lt;&#x2F;code&gt; during bootstrapping, enabling
secure initialization of its backing store.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SPIKE Pilot&lt;&#x2F;strong&gt;: This is the CLI tool that communicates with &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt;
and manages policies and secrets through the &lt;strong&gt;SPIKE Nexus RESTful mTLS API&lt;&#x2F;strong&gt;.
&lt;strong&gt;SPIKE Pilot&lt;&#x2F;strong&gt; is &lt;strong&gt;not&lt;&#x2F;strong&gt; a part of this article, but it’s an essential
component of the &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; system.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Both components leverage &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; for identity and secure
communication through &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mutual_authentication&quot;&gt;&lt;strong&gt;mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;high-level-design&quot;&gt;High-Level Design&lt;&#x2F;h2&gt;
&lt;p&gt;Here is a high-level overview of the &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; root key management system.
You can open the image in a separate tab for a better view:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2024&amp;#x2F;spike&amp;#x2F;shamir&amp;#x2F;spike-shamir.jpg&quot; alt=&quot;SPIKE Root Key Partitioning: High-Level Conceptual Diagram&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;SPIKE Root Key Partitioning: High-Level Conceptual Diagram&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This diagram illustrates the the distributed key management
system workflow between &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s and the &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt;. Let me
break down the sequence:&lt;&#x2F;p&gt;
&lt;p&gt;For starters, all connections use &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; mTLS&lt;&#x2F;a&gt; for security.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;starting-spike-keepers-and-spike-nexus&quot;&gt;Starting SPIKE Keepers and SPIKE Nexus&lt;&#x2F;h3&gt;
&lt;p&gt;For &lt;strong&gt;SPIKE Keepers&lt;&#x2F;strong&gt; to know about each other and &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt;, we pass
some configuration information during startup using environment variables
as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# .&#x2F;hack&#x2F;start-nexus.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_PEERS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;{&amp;quot;1&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8443&amp;quot;, \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8543&amp;quot;,&amp;quot;3&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8643&amp;quot;}&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&#x2F;nexus
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here is how each of the keepers start:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# &#x2F;hack&#x2F;start-keeper-1.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_PEERS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;{&amp;quot;1&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8443&amp;quot;, \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8543&amp;quot;,&amp;quot;3&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8643&amp;quot;}&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_TLS_PORT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;:8443&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;1&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&#x2F;keeper
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# &#x2F;hack&#x2F;start-keeper-2.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_PEERS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;{&amp;quot;1&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8443&amp;quot;,\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8543&amp;quot;,&amp;quot;3&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8643&amp;quot;}&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_TLS_PORT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;:8543&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&#x2F;keeper
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# &#x2F;hack&#x2F;start-keeper-3.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_PEERS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;{&amp;quot;1&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8443&amp;quot;,\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8543&amp;quot;,&amp;quot;3&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8643&amp;quot;}&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_TLS_PORT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;:8643&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;3&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&#x2F;keeper
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;initial-share-generation-the-top-of-the-diagram&quot;&gt;Initial Share Generation (&lt;em&gt;the top of the diagram&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;Each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; computes a secure random share.&lt;&#x2F;p&gt;
&lt;p&gt;There’s a parallel process where each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Broadcasts its &lt;code&gt;{id, share}&lt;&#x2F;code&gt; to other &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s&lt;&#x2F;li&gt;
&lt;li&gt;Receives shares from other peer &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;root-key-generation-middle-left&quot;&gt;Root Key Generation (&lt;em&gt;middle-left&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; waits until all shards are collected.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; computes a &lt;code&gt;rootKey&lt;&#x2F;code&gt; by &lt;code&gt;XOR&lt;&#x2F;code&gt;ing all collected shards.&lt;&#x2F;li&gt;
&lt;li&gt;This ensures that no single &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; knows the complete key once it
computes its &lt;strong&gt;Shamir Secret Share&lt;&#x2F;strong&gt; from the &lt;code&gt;rootKey&lt;&#x2F;code&gt; and discards the
root key and any intermediate values.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;shamir-secret-sharing&quot;&gt;Shamir Secret Sharing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Takes the rootKey as input&lt;&#x2F;li&gt;
&lt;li&gt;Creates three partitions
&lt;ul&gt;
&lt;li&gt;This will be configurable, but it’s hard-coded to 3 and 2 for now.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Uses &lt;code&gt;threshold = 2&lt;&#x2F;code&gt; (&lt;em&gt;meaning any two shares can reconstruct the &lt;code&gt;rootKey&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; then:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Discards the original root key (&lt;em&gt;security measure&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Keeps only its assigned partition (&lt;em&gt;also a security measure&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Discards knowledge of other partitions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is a more detailed drill-down of the &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; workflow:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Compute Secure Random Share&lt;&#x2F;strong&gt;: Each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; generates a
cryptographically secure random share derived from an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Advanced_Encryption_Standard&quot;&gt;AES-256&lt;&#x2F;a&gt; seed.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Broadcast and Receive&lt;&#x2F;strong&gt;: &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s broadcast their shards (&lt;em&gt;id,
share&lt;&#x2F;em&gt;) to peers and receive shards from them in parallel. Secure
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mutual_authentication&quot;&gt;&lt;strong&gt;mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; ensures the &lt;strong&gt;integrity&lt;&#x2F;strong&gt; and &lt;strong&gt;confidentiality&lt;&#x2F;strong&gt; of these
communications.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Shard Aggregation and Root Key Derivation&lt;&#x2F;strong&gt;: &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; waits until
all shards are gathered, combines them using &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;XOR_cipher&quot;&gt;&lt;code&gt;XOR&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, and derives the
&lt;code&gt;rootKey&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Shamir Secret Sharing&lt;&#x2F;strong&gt;: The derived &lt;code&gt;rootKey&lt;&#x2F;code&gt; is split into &lt;strong&gt;three
partitions&lt;&#x2F;strong&gt;, ensuring only a subset (&lt;em&gt;e.g., 2 out of 3&lt;&#x2F;em&gt;) is required for
reconstruction. &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s discard the &lt;code&gt;rootKey&lt;&#x2F;code&gt; and retain only their
assigned share after generating the shares.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;spike-nexus-bootstrapping-bottom&quot;&gt;SPIKE Nexus Bootstrapping (bottom)&lt;&#x2F;h3&gt;
&lt;p&gt;During startup, &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; fetches &lt;strong&gt;exactly two shards&lt;&#x2F;strong&gt; (&lt;em&gt;and no more&lt;&#x2F;em&gt;)
from its &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; peers. Again, we use &lt;strong&gt;SPIFFE mTLS&lt;&#x2F;strong&gt; for secure
communication.&lt;&#x2F;p&gt;
&lt;p&gt;In the “&lt;em&gt;reconstruct&lt;&#x2F;em&gt;” phase (bottom-right):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; combines the two collected shards.&lt;&#x2F;li&gt;
&lt;li&gt;It uses &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;&lt;em&gt;Shamir Secret Recovery&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; to reconstruct the &lt;code&gt;rootKey&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;It uses the reconstructed key to configure the backing store encryption.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Again, here is a more detailed drill-down of this workflow:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Acquire Shards&lt;&#x2F;strong&gt;: &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; gathers &lt;strong&gt;exactly two shards&lt;&#x2F;strong&gt; from
&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s during the bootstrap phase. This is achieved through
authenticated requests over &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; connections.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Reconstruction&lt;&#x2F;strong&gt;: &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; uses &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;Shamir’s Secret Sharing
Algorithm&lt;&#x2F;a&gt; to reconstruct the &lt;code&gt;rootKey&lt;&#x2F;code&gt; from the collected shards.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Configure Backing Store&lt;&#x2F;strong&gt;: The reconstructed &lt;code&gt;rootKey&lt;&#x2F;code&gt; initializes the
backing store, securing it for further operations.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The following sections will dive deeper into the &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; and
&lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; workflows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-spike-keeper-workflow&quot;&gt;The SPIKE Keeper Workflow&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;initialization&quot;&gt;Initialization&lt;&#x2F;h3&gt;
&lt;p&gt;Each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; generates a random &lt;strong&gt;shard&lt;&#x2F;strong&gt; using a cryptographically
secure seed. Shards are distributed to other &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s using
&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; connections.&lt;&#x2F;p&gt;
&lt;p&gt;The following code snippet illustrates the initialization logic:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;RandomContribution&lt;&#x2F;span&gt;&lt;span&gt;() []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myContributionLock&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myContributionLock&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myContribution&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mySeed&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;crypto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Aes256Seed&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myContribution &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mySeed&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myContribution
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myContribution
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shard-contribution&quot;&gt;Shard Contribution&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s exchange shards with peers using authenticated requests.
The contribution process involves generating a random shard and sending it to
other &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s.&lt;&#x2F;p&gt;
&lt;p&gt;We use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;circl&quot;&gt;Cloudflare’s CIRCL library&lt;&#x2F;a&gt; for secret sharing. &lt;strong&gt;CIRCL&lt;&#x2F;strong&gt; is
a well-maintained, audited, and production-ready library that provides
efficient and secure secret sharing capabilities.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example of shard contribution logic:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Contribute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;workloadapi&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;X509Source&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Peers&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeeperId&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peers &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myId &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;contributeUrl&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;JoinPath&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peer&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;v1&#x2F;store&#x2F;contribute&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Failed to join path: &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ 
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt; 		}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;net&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreateMtlsClientWithPredicate&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;auth&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;IsKeeper&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;contribution &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RandomContribution&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Shards&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Store&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myId&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;contribution&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;md&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Marshal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reqres&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ShardContributionRequest&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeeperId&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myId&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Shard&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StdEncoding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EncodeToString&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;contribution&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;		})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;net&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;contributeUrl&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;md&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;net&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;contributeUrl&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;md&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shard-validation&quot;&gt;Shard Validation&lt;&#x2F;h3&gt;
&lt;p&gt;Once enough shards are collected, &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; computes the final &lt;code&gt;rootKey&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After this, it computes &lt;strong&gt;Shamir Shares&lt;&#x2F;strong&gt; and discards the &lt;code&gt;rootKey&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After that, it also discards all but one of the &lt;strong&gt;Shamir Shares&lt;&#x2F;strong&gt; it computed
and retains only the one assigned to it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;WaitForShards&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Shards&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;++
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;		})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;too many shards&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Compute the final key.
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;computeFinalKey&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;		
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Compute the Shamir shares off of the final key.
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shares &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;computeShares&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Save only one shard from the shares and
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; discard everything else
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;setInternalShard&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shares&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Self-consistency check to ensure that
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; the reconstructed secret will match
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; the original secret.
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sanityCheck&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shares&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To create shares from the root key, we use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;circl&quot;&gt;Cloudflare’s CIRCL library&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here are the &lt;code&gt;computeFinalKey&lt;&#x2F;code&gt;, &lt;code&gt;computeShares&lt;&#x2F;code&gt;, &lt;code&gt;setInternalShard&lt;&#x2F;code&gt;, and
&lt;code&gt;sanityCheck&lt;&#x2F;code&gt; functions for the sake of completeness:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;computefinalkey&quot;&gt;computeFinalKey&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;computeFinalKey&lt;&#x2F;span&gt;&lt;span&gt;() []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Shards&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;++
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;.([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;^= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shard&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;	})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;computeFinalKey: Not all shards received&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;computeFinalKey: key size mismatch&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;computeshares&quot;&gt;computeShares&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;computeShares&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) (
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;group&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Scalar&lt;&#x2F;span&gt;&lt;span&gt;, []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsharing&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Share&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Initialize parameters
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;group&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;P256
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Need t+1 shares to reconstruct
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Total number of shares
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Create secret from your 32 byte key
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewScalar&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;UnmarshalBinary&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;computeShares: Failed to unmarshal key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ 
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;eerr&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Create deterministic random source using 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; the key itself as seed
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; You could use any other seed value for consistency
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;deterministicRand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;crypto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewDeterministicReader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Create shares
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ss &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsharing&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;deterministicRand&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ss&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Share&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;setinternalshard&quot;&gt;setInternalShard&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;setInternalShard&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shares &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsharing&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Share&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Sort the keys of env.Peers() alphabetically 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; for deterministic shard indexing.
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Peers&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peerKeys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peers&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peers &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peerKeys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peerKeys&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Strings&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peerKeys&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeeperId&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Find the index of the current SPIKE Keeper&amp;#39;s ID
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myShard &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peerKeys &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myId &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Save the shard corresponding to this Keeper
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Shards&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Load&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myId&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myShard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span&gt;.([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shareVal&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shares&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;				    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MarshalBinary&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SetShard&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shareVal&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EraseIntermediateShards&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Ensure myShard is stored correctly in the state namespace
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myShard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;setInternalShard: id not found&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;sanitycheck&quot;&gt;sanityCheck&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;sanityCheck&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret group&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Scalar&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shares &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsharing&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Share&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Need t+1 shares to reconstruct
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reconstructed&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsharing&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Recover&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shares&lt;&#x2F;span&gt;&lt;span&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;computeShares: Failed to recover: &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ 
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;IsEqual&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reconstructed&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;computeShares: recovery failure&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;deterministic-randomness&quot;&gt;Deterministic Randomness&lt;&#x2F;h3&gt;
&lt;p&gt;The astute reader might notice that while computing the shards, we use a
deterministic random source, using the key itself as a seed. This is done to keep
the shard calculation consistent across all &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the relevant code snippet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;deterministicRand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;crypto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewDeterministicReader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ss &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsharing&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;deterministicRand&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here is how the &lt;code&gt;NewDeterministicReader&lt;&#x2F;code&gt; function looks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;DeterministicReader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pos  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;DeterministicReader&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Read&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Generate more deterministic data if needed
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sum256&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span&gt;[:]
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span&gt;:])
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;n
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;NewDeterministicReader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;seed &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;DeterministicReader &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sum256&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;seed&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DeterministicReader&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span&gt;[:],
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-nexus-workflow&quot;&gt;The Nexus Workflow&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;polling-keepers&quot;&gt;Polling Keepers&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; queries Keepers for shards using mTLS:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Tick&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;workloadapi&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;X509Source&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ticker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Ticker&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ticker&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;keepers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Peers&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardsCollected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;[][]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;keeperApiRoot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;keepers &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;JoinPath&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;keeperApiRoot&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;store&#x2F;shard&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:=&lt;&#x2F;span&gt;&lt;span&gt; \
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;net&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreateMtlsClientWithPredicate&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;auth&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;IsKeeper&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;md&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Marshal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reqres&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ShardRequest&lt;&#x2F;span&gt;&lt;span&gt;{})
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;net&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;md&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;res reqres&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ShardResponse
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Unmarshal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shard&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;. \
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StdEncoding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DecodeString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Shard&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardsCollected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardsCollected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shard&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                )
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardsCollected&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reconstructed&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsharing&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Recover&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardsCollected&lt;&#x2F;span&gt;&lt;span&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;binaryRec&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reconstructed&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MarshalBinary&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Initialize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;binaryRec&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Done&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To reconstruct the secrets, we, again use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;circl&quot;&gt;Cloudflare’s CIRCL library&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is how the &lt;code&gt;state.Initialize()&lt;&#x2F;code&gt; and other related functions look, for
completeness:&lt;&#x2F;p&gt;
&lt;p&gt;Here is the &lt;code&gt;state.Initialize()&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Initialize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; No need for a lock; this method is called only 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; once during initial bootstrapping.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;persist&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;InitializeBackend&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here is the &lt;code&gt;persist.InitializeBackend()&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;InitializeBackend&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rootKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;backend&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Backend &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;backendMu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;backendMu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;initializeBackend&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;msg&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Initializing backend&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;storeType&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BackendStoreType&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;storeType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BackendStoreType&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;storeType &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Memory&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NoopStore&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sqlite&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;InitializeSqliteBackend&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rootKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NoopStore&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;threat-analysis&quot;&gt;Threat Analysis&lt;&#x2F;h2&gt;
&lt;p&gt;This system implements a sophisticated approach to root key management with
several layers of security:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;key-distribution-and-access&quot;&gt;Key Distribution and Access&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;spike-keepers&quot;&gt;SPIKE Keepers&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Generate and distribute shares of the root key.&lt;&#x2F;li&gt;
&lt;li&gt;Never have access to the complete key except transiently during initialization.&lt;&#x2F;li&gt;
&lt;li&gt;After setup, each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; retains only its own Shamir share, which is
not enough to reconstruct the root key.&lt;&#x2F;li&gt;
&lt;li&gt;All other key material is &lt;strong&gt;securely erased&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;spike-nexus&quot;&gt;SPIKE Nexus&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Reconstructs the root key from Shamir shares during initialization&lt;&#x2F;li&gt;
&lt;li&gt;Uses the key to configure SQLite (&lt;em&gt;or other backing store&lt;&#x2F;em&gt;) encryption&lt;&#x2F;li&gt;
&lt;li&gt;Has no programmatic interface to access the root key&lt;&#x2F;li&gt;
&lt;li&gt;The root key exists only in the SQLite driver’s memory space for encryption
operations.&lt;&#x2F;li&gt;
&lt;li&gt;The root key material is not directly accessible, even through the
application code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;randomness-in-shamir-s-secret-sharing&quot;&gt;Randomness in Shamir’s Secret Sharing&lt;&#x2F;h3&gt;
&lt;p&gt;At first glance, this might look like a security weakness, but it’s not.
Here’s why:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;entropy-source&quot;&gt;Entropy Source&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;finalKey&lt;&#x2F;code&gt; is derived from &lt;code&gt;XOR&lt;&#x2F;code&gt;ing multiple 32-byte random contributions&lt;&#x2F;li&gt;
&lt;li&gt;If at least one &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; provides true randomness, &lt;code&gt;finalKey&lt;&#x2F;code&gt; will be
random.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;32 bytes = 256 bits&lt;&#x2F;code&gt; of entropy  is cryptographically sufficient&lt;&#x2F;li&gt;
&lt;li&gt;Even in the unlikely event that some &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s are malicious, they
can’t predict or control the &lt;code&gt;finalKey&lt;&#x2F;code&gt; value as long as one
&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; is honest.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;independence&quot;&gt;Independence&lt;&#x2F;h4&gt;
&lt;p&gt;We’re using the same value (&lt;em&gt;i.e., &lt;code&gt;finalKey&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;) for both:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The secret that gets shared (via scalar conversion)&lt;&#x2F;li&gt;
&lt;li&gt;The seed for deterministic randomness in share generation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This coupling is okay because:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Shamir Secret Sharing algorithm’s security doesn’t depend on hiding the
secret value. In contrast, what matters is the unpredictability of share
generation&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;circl&quot;&gt;&lt;code&gt;CIRCL&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;’s implementation uses the deterministic random only for
generating polynomial coefficients.The coefficients need to be consistent
across keepers but don’t need to be independent from the secret.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;circl&quot;&gt;CIRCL’s implementation&lt;&#x2F;a&gt;, the deterministic random is used to generate
the polynomial coefficients. The security of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;Shamir’s Secret Sharing&lt;&#x2F;a&gt;
relies on the polynomial evaluation, &lt;strong&gt;not&lt;&#x2F;strong&gt; the “&lt;em&gt;security by obscurity&lt;&#x2F;em&gt;”
of hiding these coefficients. Therefore, as long as we have sufficient entropy
for unique evaluations, the scheme remains secure.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;security-properties&quot;&gt;Security Properties&lt;&#x2F;h3&gt;
&lt;p&gt;The system provides strong security through:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;access-control&quot;&gt;Access Control&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Requires multiple &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; shares for key reconstruction&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE workload attestation&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; ensures only legitimate instances
participate mTLS secures all network communication&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;key-protection&quot;&gt;Key Protection&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;No component retains the complete key in accessible form
&lt;ul&gt;
&lt;li&gt;The original root key is immediately discarded after sharing&lt;&#x2F;li&gt;
&lt;li&gt;Each Keeper only maintains knowledge of its own partition and discards the
rest&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;While the key exists in &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt;’s process memory for backing store
operations, accessing it would require:
&lt;ul&gt;
&lt;li&gt;Root privileges on the host system&lt;&#x2F;li&gt;
&lt;li&gt;Memory inspection capabilities&lt;&#x2F;li&gt;
&lt;li&gt;Ability to locate and extract key material from SQLite driver memory space&lt;&#x2F;li&gt;
&lt;li&gt;Sophisticated forensics tools&lt;&#x2F;li&gt;
&lt;li&gt;Knowledge of the SQLite encryption algorithm and key derivation process&lt;&#x2F;li&gt;
&lt;li&gt;Which makes it highly unlikely to compromise the root key&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In addition, &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; run on a hardened, secure host with
strict access controls, audit logging, and monitoring because &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;’s
threat model assumes that once an attacker has access to the host system,
the system’s security is already compromised.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spike.ist&#x2F;#&#x2F;architecture&#x2F;security-model&quot;&gt;In &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;’s security model&lt;&#x2F;a&gt;, the primary trust boundary is
at the machine level. Once the machine is compromised, hardening &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;
components will provide diminishing returns. In that regard, physical and
OS-level hardening is crucial.&lt;&#x2F;p&gt;
&lt;p&gt;In essence, the security model relies on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE workload attestation&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to ensure only legitimate
&lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; instances can gather shares, and only legitimate &lt;strong&gt;SPIKE
Keeper&lt;&#x2F;strong&gt; instances can contribute shares.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Network isolation&lt;&#x2F;strong&gt; and &lt;strong&gt;mTLS&lt;&#x2F;strong&gt; to prevent unauthorized access&lt;&#x2F;li&gt;
&lt;li&gt;The requirement that an attacker would need to compromise multiple
&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s to reconstruct the key independently.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s never maintaining the complete root key except transiently
during initialization.&lt;&#x2F;li&gt;
&lt;li&gt;Each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; only knowing its own Shamir share after initialization,
which is not enough to reconstruct the root key.&lt;&#x2F;li&gt;
&lt;li&gt;Or compromise the &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; host and gain root access to try extracting
the root key from memory using sophisticated forensics tools,
searching for the key material in the SQLite driver memory space.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;compromise-resistance&quot;&gt;Compromise Resistance&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Compromising a single &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; yields only one share, which is
insufficient to reconstruct the root key.&lt;&#x2F;li&gt;
&lt;li&gt;Compromising &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; application code doesn’t expose the key.&lt;&#x2F;li&gt;
&lt;li&gt;It would require both multiple &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; compromises &lt;strong&gt;AND&lt;&#x2F;strong&gt;
system-level access to extract key material, which is a very high bar for
attackers and is highly unlikely to happen.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;secure-connectivity&quot;&gt;Secure Connectivity&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;SPIFFE mTLS&lt;&#x2F;a&gt; secures &lt;strong&gt;all communication channels&lt;&#x2F;strong&gt;, ensuring
&lt;strong&gt;identity verification&lt;&#x2F;strong&gt; and preventing eavesdropping or tampering.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shamir-s-secret-sharing&quot;&gt;Shamir’s Secret Sharing&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;Shamir’s Secret Sharing&lt;&#x2F;a&gt; ensures the &lt;em&gt;root key&lt;&#x2F;em&gt; is divided into
multiple &lt;em&gt;shards&lt;&#x2F;em&gt;, with reconstruction requiring a predefined threshold of
shards. In &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;’s implementation:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The root key is split into &lt;strong&gt;three&lt;&#x2F;strong&gt; shards (&lt;em&gt;configurable&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Reconstruction requires &lt;strong&gt;two out of three&lt;&#x2F;strong&gt; shards (&lt;em&gt;configurable&lt;&#x2F;em&gt;),
balancing &lt;strong&gt;redundancy&lt;&#x2F;strong&gt; and &lt;strong&gt;security&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This model ensures that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;No single &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; can compromise the root key.&lt;&#x2F;li&gt;
&lt;li&gt;Even if one &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; is compromised, the root key remains secure.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;zero-trust-principles&quot;&gt;Zero-Trust Principles&lt;&#x2F;h4&gt;
&lt;p&gt;This architecture adheres to the following &lt;strong&gt;zero-trust principles&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Least Privilege&lt;&#x2F;strong&gt;: &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s only manage their shards; they cannot
reconstruct the root key. During bootstrapping and disaster recovery, they may
require additional shards from their peer &lt;strong&gt;SPIKE Keepers&lt;&#x2F;strong&gt;. However, that
will be temporary, and the material will be securely erased once the operation
is complete.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Boundary Enforcement&lt;&#x2F;strong&gt;: It’s important to highlight that the &lt;strong&gt;root key never
leaves the network perimeter&lt;&#x2F;strong&gt;. Only shards cross the network boundary and
only through secure &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mutual_authentication&quot;&gt;&lt;strong&gt;mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; connections. Even in the very unlikely case
of a connection compromise, the shards are cryptographically secure and useless
without the other shards.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Identity-Based Access&lt;&#x2F;strong&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE SVIDs&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; are used to authenticate
and authorize all communications.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;spiffe-and-spire-integration&quot;&gt;SPIFFE and SPIRE Integration&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;SPIFFE Runtime Environment&lt;&#x2F;em&gt;) provides &lt;strong&gt;workload attestation&lt;&#x2F;strong&gt;
and &lt;strong&gt;identity issuance&lt;&#x2F;strong&gt;. Each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt;
receive a unique &lt;em&gt;SPIFFE Verifiable Identity Document&lt;&#x2F;em&gt; (&lt;strong&gt;SVID&lt;&#x2F;strong&gt;), enabling:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Secure &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mutual_authentication&quot;&gt;&lt;strong&gt;mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; connections between components.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Workload identity attestation&lt;&#x2F;strong&gt; to ensure only authorized entities
participate in shard management.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;additional-security-measures&quot;&gt;Additional Security Measures&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mutual Authentication&lt;&#x2F;strong&gt;: Every interaction between &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s and
&lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; is secured by &lt;strong&gt;mTLS&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Shard Validation&lt;&#x2F;strong&gt;: Shards are validated before use to prevent malicious
tampering.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Sanity Checks&lt;&#x2F;strong&gt;: Reconstruction includes checks to ensure the recovered
secret matches expectations.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The architecture’s zero-trust design ensures that no single
&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; can compromise the &lt;code&gt;rootKey&lt;&#x2F;code&gt; while also providing
threshold-based reconstruction that balances redundancy with strict security.&lt;&#x2F;p&gt;
&lt;p&gt;Since the number of keepers and the minimum number of shares required for
reconstruction are configurable, this design can be adapted to the user’s risk
tolerance and security requirements.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;-based workload
attestation&lt;&#x2F;a&gt; and secure &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mutual_authentication&quot;&gt;&lt;strong&gt;mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; communication work together to
enhance the overall security posture.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;’s &lt;strong&gt;Nexus&lt;&#x2F;strong&gt; and &lt;strong&gt;Keeper&lt;&#x2F;strong&gt; architecture exemplifies how modern
distributed systems can securely manage secrets without compromising
availability or scalability.&lt;&#x2F;p&gt;
&lt;p&gt;By leveraging &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;&lt;strong&gt;Shamir’s Secret Sharing&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
and a &lt;strong&gt;zero-trust&lt;&#x2F;strong&gt; design, we ensure that the root key, and, therefore, the
secrets, remain protected against a wide range of threats.&lt;&#x2F;p&gt;
&lt;p&gt;This approach is secure and pragmatic, offering a scalable solution for managing
and sharing sensitive material in any distributed system. So, the content
presented here can have applications beyond the use case covered in this article.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references-and-further-reading&quot;&gt;References and Further Reading&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;spike&quot;&gt;SPIKE&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spike.ist&#x2F;&quot;&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; Website&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spike&quot;&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; Source Code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spike.ist&#x2F;#&#x2F;architecture&#x2F;security-model&quot;&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; Security Model&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spike.ist&#x2F;#&#x2F;presentations&#x2F;README&quot;&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; Presentations and Demos&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;spiffe-and-spire&quot;&gt;SPIFFE and SPIRE&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spiffe-about&#x2F;spiffe-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; Concepts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;&quot;&gt;mTLS with &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;spire-rocks&#x2F;&quot;&gt;Setting Up &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; on &lt;strong&gt;EKS&lt;&#x2F;strong&gt; in Less Than Ten Minutes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;security-and-cryptography&quot;&gt;Security and Cryptography&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;Shamir’s Secret Sharing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;circl&quot;&gt;Cloudflare’s CIRCL Library&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Advanced_Encryption_Standard&quot;&gt;Advanced Encryption Standard (AES)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mutual_authentication&quot;&gt;Mutual Authentication (mTLS)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;XOR_cipher&quot;&gt;XOR Cipher&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding DEK and KEK in Encryption: A Practical Guide</title>
        <published>2024-12-22T00:00:00+00:00</published>
        <updated>2024-12-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/dek-kek/"/>
        <id>https://zerotohero.dev/inbox/dek-kek/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/dek-kek/">&lt;p&gt;Modern data encryption strategies often employ a two-layer model of key management to balance strong security with operational flexibility. Two commonly used concepts in this model are the Data Encryption Key (DEK) and the Key Encryption Key (KEK). In this post, we’ll unpack how these two keys work together, and how you might store and retrieve them effectively.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-are-dek-and-kek&quot;&gt;What Are DEK and KEK?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Data Encryption Key (DEK):&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
A DEK is the key used directly to encrypt and decrypt your data (e.g., files, database entries, or messages). Symmetric encryption algorithms such as AES (Advanced Encryption Standard) are typically used here because they’re efficient and optimized for handling large amounts of data.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Key Encryption Key (KEK):&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
A KEK is used to encrypt (or “wrap”) your DEK, rather than encrypting the data directly. By storing the DEK in a protected, encrypted form, you ensure that even if the encrypted DEK is compromised, it’s unreadable without the KEK.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-do-we-separate-keys&quot;&gt;Why Do We Separate Keys?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Efficiency:&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Encrypting large data sets is best done using symmetric keys (DEKs) because they operate quickly and efficiently at scale.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Security:&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
The KEK ensures that DEKs are never stored in plaintext. If an attacker obtains an encrypted DEK, they can’t decrypt the actual data without the KEK.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Scalability and Flexibility:&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Rotating a KEK doesn’t require re-encrypting all the data—just re-wrapping the DEKs. This modular approach makes it easier to manage large fleets of encrypted objects.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;practical-workflow&quot;&gt;Practical Workflow&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Encrypting Data:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Generate a DEK.&lt;&#x2F;li&gt;
&lt;li&gt;Encrypt your data with the DEK.&lt;&#x2F;li&gt;
&lt;li&gt;Encrypt the DEK using the KEK.&lt;&#x2F;li&gt;
&lt;li&gt;Store the encrypted data along with the encrypted DEK.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Decrypting Data:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Retrieve the encrypted data and the encrypted DEK.&lt;&#x2F;li&gt;
&lt;li&gt;Use the KEK to unwrap (decrypt) the DEK.&lt;&#x2F;li&gt;
&lt;li&gt;Use the now-unwrapped DEK to decrypt your data.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;Analogy:&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Think of the data as a treasure in a chest, and the DEK as the key to that chest. Instead of leaving that key out in the open, you lock it in a secure safe. The KEK is the combination to that safe. Without knowing the combination (KEK), the chest key (DEK) remains inaccessible, and so does your treasure (data).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;identifying-the-right-kek-using-key-aliases&quot;&gt;Identifying the Right KEK: Using Key Aliases&lt;&#x2F;h2&gt;
&lt;p&gt;A common question is how to know which KEK was used if you store many DEKs and data blobs. Since you’ll often have a “table” of encrypted DEKs, you need some metadata to help you fetch the right KEK.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Solution: Store a Key Alias or Key Identifier&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Alongside each encrypted DEK, store a key alias or unique identifier that maps to the KEK used. When you need to decrypt, you look up this alias, fetch the corresponding KEK, and unwrap the DEK.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Encryption Time:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Data is encrypted with DEK_123.&lt;&#x2F;li&gt;
&lt;li&gt;DEK_123 is wrapped with a KEK referenced by “KEK_Alias”.&lt;&#x2F;li&gt;
&lt;li&gt;You store the encrypted data, encrypted DEK_123, and “KEK_Alias” together.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Decryption Time:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Look up “KEK_Alias”.&lt;&#x2F;li&gt;
&lt;li&gt;Fetch the KEK that “KEK_Alias” represents.&lt;&#x2F;li&gt;
&lt;li&gt;Unwrap DEK_123 using the KEK.&lt;&#x2F;li&gt;
&lt;li&gt;Decrypt the data using the now-unwrapped DEK_123.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;why-versioning-helps&quot;&gt;Why Versioning Helps&lt;&#x2F;h3&gt;
&lt;p&gt;Over time, you may rotate KEKs for security reasons. By storing a key alias and possibly a version number, you can keep track of which version of the KEK was used at the time of encryption. This makes it possible to decrypt older data even after you’ve updated the KEK.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pros-and-cons&quot;&gt;Pros and Cons&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Efficient Encryption:&lt;&#x2F;strong&gt; Bulk data encryption using symmetric DEKs is fast.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Enhanced Security:&lt;&#x2F;strong&gt; DEKs aren’t stored in plaintext; they’re always protected by a KEK.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Scalable Rotation:&lt;&#x2F;strong&gt; You can rotate KEKs without re-encrypting all your data.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Added Complexity:&lt;&#x2F;strong&gt; Two-tier key management is more complex to implement.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Centralized Dependence:&lt;&#x2F;strong&gt; If the KEK or its associated alias system is compromised, attackers might gain access to multiple DEKs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;key-takeaways&quot;&gt;Key Takeaways&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use DEKs for fast, efficient encryption of data.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Wrap DEKs with KEKs to keep them secure.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Store a key alias (or key ID) alongside encrypted DEKs so you know which KEK to use during decryption.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NIST Special Publication 800-57: Recommendation for Key Management&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;csrc.nist.gov&#x2F;publications&#x2F;detail&#x2F;sp&#x2F;800-57-part-1&#x2F;rev-5&#x2F;final&quot;&gt;https:&#x2F;&#x2F;csrc.nist.gov&#x2F;publications&#x2F;detail&#x2F;sp&#x2F;800-57-part-1&#x2F;rev-5&#x2F;final&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AWS KMS Best Practices&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;kms&#x2F;latest&#x2F;developerguide&#x2F;best-practices.html&quot;&gt;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;kms&#x2F;latest&#x2F;developerguide&#x2F;best-practices.html&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Google Cloud KMS Concepts&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;kms&#x2F;docs&#x2F;concepts&quot;&gt;https:&#x2F;&#x2F;cloud.google.com&#x2F;kms&#x2F;docs&#x2F;concepts&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HashiCorp Vault Key Management&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.vaultproject.io&#x2F;docs&#x2F;secrets&quot;&gt;https:&#x2F;&#x2F;www.vaultproject.io&#x2F;docs&#x2F;secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By keeping your key management strategy organized and using clear metadata like aliases, you can confidently store and retrieve your encrypted data, even as KEKs evolve over time.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Using External Secrets Operator with HashiCorp Vault to Create Kubernetes Secrets</title>
        <published>2024-12-22T00:00:00+00:00</published>
        <updated>2024-12-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/eso-vault/"/>
        <id>https://zerotohero.dev/inbox/eso-vault/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/eso-vault/">&lt;p&gt;When working with Kubernetes, securely managing secrets is a crucial part of your infrastructure. Traditional approaches—like directly embedding secrets in manifests or manually managing &lt;code&gt;Secret&lt;&#x2F;code&gt; objects—can become cumbersome and less secure over time. Enter the &lt;a href=&quot;https:&#x2F;&#x2F;external-secrets.io&quot;&gt;External Secrets Operator (ESO)&lt;&#x2F;a&gt;, a powerful way to integrate external secret stores with Kubernetes. One such secret store is &lt;a href=&quot;https:&#x2F;&#x2F;www.vaultproject.io&quot;&gt;HashiCorp Vault&lt;&#x2F;a&gt;, a proven solution for securely storing and accessing secrets.&lt;&#x2F;p&gt;
&lt;p&gt;In this post, we’ll walk through the key Custom Resource Definitions (CRDs) you need to set up in your cluster to fetch secrets from Vault and have them automatically synchronized as Kubernetes secrets.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;&#x2F;h2&gt;
&lt;p&gt;ESO acts as a bridge between external secret stores (in this case, Vault) and Kubernetes &lt;code&gt;Secret&lt;&#x2F;code&gt; objects. To make this happen, you’ll define a store resource that tells ESO &lt;strong&gt;where&lt;&#x2F;strong&gt; and &lt;strong&gt;how&lt;&#x2F;strong&gt; to retrieve secrets. You’ll then define another resource that specifies &lt;strong&gt;which&lt;&#x2F;strong&gt; secrets to fetch and how to transform them into Kubernetes secrets.&lt;&#x2F;p&gt;
&lt;p&gt;In other words:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SecretStore&#x2F;ClusterSecretStore:&lt;&#x2F;strong&gt; Defines the external secret provider configuration&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ExternalSecret:&lt;&#x2F;strong&gt; Defines the specific secrets you want to pull from your chosen store and how to map them into Kubernetes secrets&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;key-resources&quot;&gt;Key Resources&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-secretstore-or-clustersecretstore&quot;&gt;1. SecretStore or ClusterSecretStore&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;SecretStore&lt;&#x2F;code&gt; or &lt;code&gt;ClusterSecretStore&lt;&#x2F;code&gt; resource provides information about your Vault instance, including:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Endpoint:&lt;&#x2F;strong&gt; The URL of the Vault server&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Authentication method:&lt;&#x2F;strong&gt; How ESO should authenticate to Vault (e.g., using a Kubernetes Service Account token, Vault token, or another method)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Paths and parameters:&lt;&#x2F;strong&gt; Details like which Vault mount paths and keys to read from&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;When to use &lt;code&gt;SecretStore&lt;&#x2F;code&gt; vs. &lt;code&gt;ClusterSecretStore&lt;&#x2F;code&gt;?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SecretStore:&lt;&#x2F;strong&gt; Used when you want the configuration to be namespace-specific&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ClusterSecretStore:&lt;&#x2F;strong&gt; Used when you want a cluster-wide configuration accessible by multiple namespaces&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;external-secrets.io&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ClusterSecretStore
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;vault-backend
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;vault&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;vault.example.com&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;secret&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# The path where secrets are stored in Vault
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;v2&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;auth&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;tokenSecretRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;vault-token
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;token
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This &lt;code&gt;ClusterSecretStore&lt;&#x2F;code&gt; tells ESO how to communicate with a Vault server at &lt;code&gt;vault.example.com&lt;&#x2F;code&gt;, using a token stored in the &lt;code&gt;vault-token&lt;&#x2F;code&gt; Secret.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-externalsecret&quot;&gt;2. ExternalSecret&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;ExternalSecret&lt;&#x2F;code&gt; resource references the &lt;code&gt;SecretStore&lt;&#x2F;code&gt; or &lt;code&gt;ClusterSecretStore&lt;&#x2F;code&gt; and tells ESO which keys from Vault to sync and how to project them into a Kubernetes Secret.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;external-secrets.io&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ExternalSecret
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;my-app-secret
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;refreshInterval&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;1h
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secretStoreRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ClusterSecretStore
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;vault-backend
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;my-app-k8s-secret
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;creationPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Owner
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secretKey&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;api-key       &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Key in the resulting K8s Secret
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;remoteRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;my-app&#x2F;api-key     &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Path&#x2F;key in Vault
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this &lt;code&gt;ExternalSecret&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;secretStoreRef&lt;&#x2F;code&gt; points to the &lt;code&gt;ClusterSecretStore&lt;&#x2F;code&gt; named &lt;code&gt;vault-backend&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;It requests a secret named &lt;code&gt;my-app&#x2F;api-key&lt;&#x2F;code&gt; from Vault&lt;&#x2F;li&gt;
&lt;li&gt;It maps that key into a Kubernetes Secret named &lt;code&gt;my-app-k8s-secret&lt;&#x2F;code&gt; under the &lt;code&gt;api-key&lt;&#x2F;code&gt; key&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;How it Works&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Define the Store:&lt;&#x2F;strong&gt;
Set up a &lt;code&gt;ClusterSecretStore&lt;&#x2F;code&gt; or &lt;code&gt;SecretStore&lt;&#x2F;code&gt; resource that points to your Vault instance and specifies authentication details.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Request the Secret:&lt;&#x2F;strong&gt;
Create an &lt;code&gt;ExternalSecret&lt;&#x2F;code&gt; resource that references the store and specifies the exact secrets you need.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ESO Synchronizes the Secret:&lt;&#x2F;strong&gt;
The External Secrets Operator continuously reconciles resources. When it sees your &lt;code&gt;ExternalSecret&lt;&#x2F;code&gt;, it connects to Vault (using the instructions from the store resource), fetches the requested secret, and creates or updates the corresponding Kubernetes Secret object in your cluster.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;analogies&quot;&gt;Analogies&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Think of the &lt;code&gt;ClusterSecretStore&lt;&#x2F;code&gt; as a “GPS coordinate” that tells ESO where to find the treasure (your secrets) in Vault.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;ExternalSecret&lt;&#x2F;code&gt; is your “shopping list,” telling ESO which items (specific keys&#x2F;values) to bring back from that secret store and how to pack them into a Kubernetes Secret.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pros-and-cons&quot;&gt;Pros and Cons&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;pros&quot;&gt;Pros:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Separation of concerns: Store configuration is separate from secret retrieval specifications&lt;&#x2F;li&gt;
&lt;li&gt;Reusability: You can reuse the same &lt;code&gt;ClusterSecretStore&lt;&#x2F;code&gt; for multiple &lt;code&gt;ExternalSecrets&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Security: Keeps sensitive data in Vault, only syncing what’s necessary to Kubernetes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;cons&quot;&gt;Cons:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Initial complexity: Requires understanding CRDs and writing additional YAML manifests&lt;&#x2F;li&gt;
&lt;li&gt;Extra components: Relies on running ESO and Vault integrations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;By defining a &lt;code&gt;SecretStore&lt;&#x2F;code&gt; or &lt;code&gt;ClusterSecretStore&lt;&#x2F;code&gt; and one or more &lt;code&gt;ExternalSecrets&lt;&#x2F;code&gt;, you can seamlessly integrate HashiCorp Vault secrets into your Kubernetes cluster with the External Secrets Operator. This pattern centralizes and secures your secret management workflow, providing a more maintainable and secure approach than manually managing Secret objects.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;key-takeaways&quot;&gt;Key Takeaways:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;SecretStore&lt;&#x2F;code&gt; or &lt;code&gt;ClusterSecretStore&lt;&#x2F;code&gt; to define how to connect to Vault&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;ExternalSecret&lt;&#x2F;code&gt; to specify which secrets to pull from Vault&lt;&#x2F;li&gt;
&lt;li&gt;ESO automatically keeps your Kubernetes secrets in sync with Vault’s secrets&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;external-secrets.io&quot;&gt;External Secrets Operator Documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.vaultproject.io&quot;&gt;HashiCorp Vault Documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>CSR vs Direct Public Key Exchange: When Do You Really Need a CSR?</title>
        <published>2024-12-16T00:00:00+00:00</published>
        <updated>2024-12-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/csr/"/>
        <id>https://zerotohero.dev/inbox/csr/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/csr/">&lt;p&gt;When working with secure systems, a common scenario involves Server A obtaining a certificate signed by Server B (acting as a Certificate Authority, or CA). But if the ultimate goal is to exchange public keys so that JWTs (JSON Web Tokens) signed by Server A can be verified by Server B, you might wonder: &lt;em&gt;Do I really need to use a CSR (Certificate Signing Request)? Can’t I just send my public key directly?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The answer is: &lt;strong&gt;it depends on your use case and trust model&lt;&#x2F;strong&gt;. Here’s a breakdown of why you might still want to use a CSR, and when you can skip it.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;what-is-a-csr&quot;&gt;What Is a CSR?&lt;&#x2F;h2&gt;
&lt;p&gt;A CSR (Certificate Signing Request) is a formal request for a certificate that includes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A Public Key&lt;&#x2F;strong&gt;: The key for which the certificate is requested.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Metadata&lt;&#x2F;strong&gt;: Information such as the organization name, domain, and other identifying details.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A Digital Signature&lt;&#x2F;strong&gt;: The CSR is signed using the private key corresponding to the public key, proving ownership of the key pair.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The CA (Server B in this case) validates the CSR and signs it, issuing a certificate that binds the public key to the metadata and ensures trustworthiness.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;key-differences-csr-vs-direct-public-key-exchange&quot;&gt;Key Differences: CSR vs Direct Public Key Exchange&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-csr-purpose&quot;&gt;&lt;strong&gt;1. CSR Purpose&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A CSR isn’t just about sending a public key. It’s a mechanism to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Verify the &lt;strong&gt;ownership&lt;&#x2F;strong&gt; of the private key.&lt;&#x2F;li&gt;
&lt;li&gt;Attach additional &lt;strong&gt;identity information&lt;&#x2F;strong&gt; (e.g., the name or domain of the entity requesting the certificate).&lt;&#x2F;li&gt;
&lt;li&gt;Enable a &lt;strong&gt;trusted certificate chain&lt;&#x2F;strong&gt;, which simplifies verification in distributed systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-direct-public-key-exchange&quot;&gt;&lt;strong&gt;2. Direct Public Key Exchange&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You can directly send a public key to Server B without using a CSR. In this approach:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Server B can use the received public key to verify JWTs signed by Server A’s private key.&lt;&#x2F;li&gt;
&lt;li&gt;There’s no built-in identity validation, certificate lifecycle management, or chain of trust.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While this works in certain scenarios, it has limitations and security trade-offs.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;when-to-use-a-csr&quot;&gt;When to Use a CSR&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;advantages-of-using-a-csr&quot;&gt;&lt;strong&gt;Advantages of Using a CSR&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identity Validation&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The CSR ensures that the entity requesting the certificate (Server A) owns the corresponding private key and has been validated by a trusted CA (Server B).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Certificate Lifecycle Management&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Certificates can be renewed, revoked, and managed systematically. In contrast, a direct public key exchange lacks this infrastructure.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Chain of Trust&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A certificate issued via a CSR establishes a trusted relationship between Server A and Server B. This is especially important in environments with multiple parties or external systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security Best Practices&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using certificates aligns with widely accepted security standards, such as TLS and mutual authentication.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;use-case&quot;&gt;&lt;strong&gt;Use Case&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If Server A and Server B are communicating in a public or distributed environment, or if Server B needs to validate Server A’s identity, &lt;strong&gt;using a CSR and signed certificate is the better choice&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;when-a-direct-public-key-exchange-is-enough&quot;&gt;When a Direct Public Key Exchange Is Enough&lt;&#x2F;h2&gt;
&lt;p&gt;In simpler or controlled environments, you might not need the full CSR process. For example:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Closed Systems&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If Server A and Server B are part of the same internal system, and there’s no need for third-party validation, you can directly exchange public keys.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simplified Trust&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If Server B already trusts Server A, sending the public key directly might be sufficient. Server B can store and use the key to verify JWTs without additional steps.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;No Metadata Needed&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If no identity metadata (e.g., domain name or organization) is required, the CSR adds little value.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;trade-offs&quot;&gt;&lt;strong&gt;Trade-Offs&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No Verification&lt;&#x2F;strong&gt;: Server B must blindly trust the received public key.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No Revocation or Renewal&lt;&#x2F;strong&gt;: Directly exchanged public keys lack lifecycle management.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No Chain of Trust&lt;&#x2F;strong&gt;: There’s no mechanism to validate the authenticity of the public key.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;summary-to-csr-or-not-to-csr&quot;&gt;Summary: To CSR or Not to CSR?&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;Scenario&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;CSR Required?&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;Why&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Public or distributed systems&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;td&gt;Need for identity validation, lifecycle management, and chain of trust.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Closed or internal systems&lt;&#x2F;td&gt;&lt;td&gt;No&lt;&#x2F;td&gt;&lt;td&gt;Trust is already established, and the CSR process adds unnecessary overhead.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Need for lifecycle management (renewal, etc.)&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;td&gt;Certificates provide systematic management of trust material.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Minimalistic trust exchange&lt;&#x2F;td&gt;&lt;td&gt;No&lt;&#x2F;td&gt;&lt;td&gt;Direct public key exchange is simpler and sufficient for closed systems.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;While skipping the CSR and directly exchanging public keys can work in simpler or internal systems, the CSR process provides essential security, validation, and lifecycle benefits in more complex or public-facing environments. The decision ultimately depends on the &lt;strong&gt;trust model&lt;&#x2F;strong&gt;, &lt;strong&gt;security requirements&lt;&#x2F;strong&gt;, and &lt;strong&gt;operational context&lt;&#x2F;strong&gt; of your system.&lt;&#x2F;p&gt;
&lt;p&gt;For secure systems, especially those that involve public networks or external parties, using a CSR to obtain a signed certificate is the more robust and widely accepted approach.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding `git push origin main`</title>
        <published>2024-12-16T00:00:00+00:00</published>
        <updated>2024-12-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/git-push-origin-main/"/>
        <id>https://zerotohero.dev/inbox/git-push-origin-main/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/git-push-origin-main/">&lt;p&gt;When working with Git, you might frequently encounter the command &lt;code&gt;git push origin main&lt;&#x2F;code&gt;. But what do &lt;code&gt;origin&lt;&#x2F;code&gt; and &lt;code&gt;main&lt;&#x2F;code&gt; actually mean? In this post, we will break down this command and explain its components.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-git-push-origin-main&quot;&gt;What is &lt;code&gt;git push origin main&lt;&#x2F;code&gt;?&lt;&#x2F;h2&gt;
&lt;p&gt;The command &lt;code&gt;git push origin main&lt;&#x2F;code&gt; is used to push changes from your local repository to a remote repository. It consists of three main parts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git push&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: The Git command that initiates the process of sending your commits to a remote repository.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;origin&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: The name of the remote repository.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;main&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: The name of the branch in the remote repository where the changes should be pushed.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Let’s explore each component in detail.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;understanding-origin&quot;&gt;Understanding &lt;code&gt;origin&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;what-is-origin&quot;&gt;What is &lt;code&gt;origin&lt;&#x2F;code&gt;?&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;origin&lt;&#x2F;code&gt; is the default name given to the remote repository when you clone a repository. It acts as a shorthand for the remote repository’s URL (e.g., a repository hosted on GitHub, GitLab, or another Git server).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-is-origin-needed&quot;&gt;Why is &lt;code&gt;origin&lt;&#x2F;code&gt; needed?&lt;&#x2F;h3&gt;
&lt;p&gt;When you execute a command like &lt;code&gt;git push&lt;&#x2F;code&gt;, Git needs to know where to send the changes. &lt;code&gt;origin&lt;&#x2F;code&gt; specifies the remote repository that should receive the changes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;&#x2F;h3&gt;
&lt;p&gt;If you clone a repository using the following command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Git automatically sets up &lt;code&gt;origin&lt;&#x2F;code&gt; to point to the repository at &lt;code&gt;https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git&lt;&#x2F;code&gt;. You can verify this using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git remote -v
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You might see output like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;origin  https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git (fetch)
&lt;&#x2F;span&gt;&lt;span&gt;origin  https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git (push)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;understanding-main&quot;&gt;Understanding &lt;code&gt;main&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;what-is-main&quot;&gt;What is &lt;code&gt;main&lt;&#x2F;code&gt;?&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;main&lt;&#x2F;code&gt; is the name of a branch in your Git repository. By convention, &lt;code&gt;main&lt;&#x2F;code&gt; often serves as the default branch for a repository. It typically contains the latest stable version of the code.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-is-main-needed&quot;&gt;Why is &lt;code&gt;main&lt;&#x2F;code&gt; needed?&lt;&#x2F;h3&gt;
&lt;p&gt;The branch name specifies which branch in the remote repository should receive the changes. Without specifying the branch, Git might use a default branch or require additional configuration.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;custom-branch-names&quot;&gt;Custom Branch Names&lt;&#x2F;h3&gt;
&lt;p&gt;Branches in Git are highly customizable, so your repository might use names like &lt;code&gt;master&lt;&#x2F;code&gt;, &lt;code&gt;development&lt;&#x2F;code&gt;, or &lt;code&gt;feature-branch&lt;&#x2F;code&gt; instead of &lt;code&gt;main&lt;&#x2F;code&gt;. In modern Git repositories, &lt;code&gt;main&lt;&#x2F;code&gt; has become the standard default branch name.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;breaking-down-the-command&quot;&gt;Breaking Down the Command&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s what happens when you run &lt;code&gt;git push origin main&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git push&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Git starts the process of uploading your commits.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;origin&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Git identifies the remote repository to push to.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;main&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Git pushes the commits from your local &lt;code&gt;main&lt;&#x2F;code&gt; branch to the &lt;code&gt;main&lt;&#x2F;code&gt; branch on the remote repository.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;If you’re currently on the &lt;code&gt;main&lt;&#x2F;code&gt; branch locally, the command pushes the changes to the corresponding &lt;code&gt;main&lt;&#x2F;code&gt; branch on the remote repository.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;example-workflow&quot;&gt;Example Workflow&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a practical example to put it all together:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clone a repository:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This sets up &lt;code&gt;origin&lt;&#x2F;code&gt; to point to the remote repository.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Make changes locally:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello, Git!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; file.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git add file.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git commit -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Added a greeting to file.txt&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Push changes to the remote repository:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git push origin main
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This sends your commits to the &lt;code&gt;main&lt;&#x2F;code&gt; branch of the remote repository.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;The command &lt;code&gt;git push origin main&lt;&#x2F;code&gt; can be broken down as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git push&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Initiates the process of sending changes to a remote repository.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;origin&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Specifies the remote repository (default name for the remote created when cloning).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;main&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Indicates the branch in the remote repository where the changes should be pushed.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Understanding these components helps you use Git more effectively and troubleshoot common issues related to pushing changes.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Establishing SPIFFE Federation Between Kubernetes Clusters</title>
        <published>2024-12-16T00:00:00+00:00</published>
        <updated>2024-12-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/spiffe-federation/"/>
        <id>https://zerotohero.dev/inbox/spiffe-federation/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/spiffe-federation/">&lt;p&gt;SPIFFE (Secure Production Identity Framework For Everyone) provides a robust framework for service identity across distributed systems. When using SPIFFE with SPIRE (SPIFFE Runtime Environment) in Kubernetes clusters, it’s common to have multiple trust domains. To enable secure communication between these domains, you need to establish SPIFFE federation by exchanging and trusting each other’s trust bundles.&lt;&#x2F;p&gt;
&lt;p&gt;In this blog post, we’ll walk through the steps to establish SPIFFE federation between two Kubernetes clusters with separate trust domains.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;scenario-overview&quot;&gt;Scenario Overview&lt;&#x2F;h2&gt;
&lt;p&gt;Assume you have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Server A with a trust domain &lt;code&gt;trustdomainA&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Server B with a trust domain &lt;code&gt;trustdomainB&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Both servers are running SPIRE to manage identities. To enable federation, the servers need to exchange and trust each other’s trust bundles.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-1-export-the-trust-bundle&quot;&gt;Step 1: Export the Trust Bundle&lt;&#x2F;h2&gt;
&lt;p&gt;Each SPIRE server has its own trust bundle, which includes the root CA certificate for its trust domain. Start by exporting the trust bundle from Server B:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spire-server bundle show -format spiffe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This command will output the trust bundle for &lt;code&gt;trustdomainB&lt;&#x2F;code&gt; in SPIFFE format. Save this output to a file (e.g., &lt;code&gt;trust-bundleB.pem&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-2-configure-federation-in-server-a&quot;&gt;Step 2: Configure Federation in Server A&lt;&#x2F;h2&gt;
&lt;p&gt;Next, configure Server A to trust &lt;code&gt;trustdomainB&lt;&#x2F;code&gt;. To do this, you’ll use the exported trust bundle from Server B.&lt;&#x2F;p&gt;
&lt;p&gt;Add the trust bundle to Server A’s configuration:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spire-server bundle set -format spiffe -id spiffe:&#x2F;&#x2F;trustdomainB -path &#x2F;path&#x2F;to&#x2F;trust-bundleB.pem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This command tells Server A to trust the root CA from &lt;code&gt;trustdomainB&lt;&#x2F;code&gt;. Update Server A’s &lt;code&gt;spire-server.conf&lt;&#x2F;code&gt; file if needed to reflect the federation relationship with &lt;code&gt;trustdomainB&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-3-validate-the-trust-relationship&quot;&gt;Step 3: Validate the Trust Relationship&lt;&#x2F;h2&gt;
&lt;p&gt;After configuration, Server A will validate any SPIFFE identity (SVID) from &lt;code&gt;trustdomainB&lt;&#x2F;code&gt; by checking its signature against the root CA in the trust bundle.&lt;&#x2F;p&gt;
&lt;p&gt;When Server A encounters an identity from &lt;code&gt;trustdomainB&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It verifies the SVID’s signature&lt;&#x2F;li&gt;
&lt;li&gt;If the signature is valid and matches the root CA from &lt;code&gt;trustdomainB&lt;&#x2F;code&gt;, the identity is trusted&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;step-4-establish-bi-directional-trust-optional&quot;&gt;Step 4: Establish Bi-Directional Trust (Optional)&lt;&#x2F;h2&gt;
&lt;p&gt;If you want Server B to trust identities from &lt;code&gt;trustdomainA&lt;&#x2F;code&gt;, repeat the process in reverse:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Export the trust bundle from Server A:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spire-server bundle show -format spiffe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Configure Server B to trust the exported bundle by adding it to &lt;code&gt;trustdomainA&lt;&#x2F;code&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spire-server bundle set -format spiffe -id spiffe:&#x2F;&#x2F;trustdomainA -path &#x2F;path&#x2F;to&#x2F;trust-bundleA.pem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, both servers trust each other’s identities, enabling mutual federation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;key-considerations&quot;&gt;Key Considerations&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;bundle-rotation&quot;&gt;Bundle Rotation&lt;&#x2F;h3&gt;
&lt;p&gt;If the root CA in a trust domain is rotated, the updated trust bundle must be shared with the other server to maintain trust.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;unique-spiffe-ids&quot;&gt;Unique SPIFFE IDs&lt;&#x2F;h3&gt;
&lt;p&gt;Ensure that SPIFFE IDs are unique across trust domains to avoid collisions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;secure-transport&quot;&gt;Secure Transport&lt;&#x2F;h3&gt;
&lt;p&gt;Always exchange trust bundles securely to prevent tampering.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;By following these steps, you can establish SPIFFE federation between two Kubernetes clusters with distinct trust domains. This enables secure identity-based communication across distributed systems, a critical component for modern cloud-native applications.&lt;&#x2F;p&gt;
&lt;p&gt;SPIFFE federation simplifies the management of service identity across multiple clusters and trust domains, allowing you to focus on building secure and scalable applications.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Adding vSphere Clusters in VMware Cloud Foundation: A Detailed Guide</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/add-vsphere-clusters-in-vcf/"/>
        <id>https://zerotohero.dev/inbox/add-vsphere-clusters-in-vcf/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/add-vsphere-clusters-in-vcf/">&lt;p&gt;VMware Cloud Foundation (VCF) provides two methods for adding capacity to deployed workload domains:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Adding hosts to existing clusters&lt;&#x2F;li&gt;
&lt;li&gt;Adding new clusters to existing workload domains&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This guide focuses on the process of adding a new cluster to an existing workload domain.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;process-overview&quot;&gt;Process Overview&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;initial-navigation&quot;&gt;Initial Navigation&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Access SDDC Manager dashboard&lt;&#x2F;li&gt;
&lt;li&gt;Navigate to Workload Domains&lt;&#x2F;li&gt;
&lt;li&gt;Select target domain&lt;&#x2F;li&gt;
&lt;li&gt;Click Actions &amp;gt; Add Cluster&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;configuration-steps&quot;&gt;Configuration Steps&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;1-storage-configuration&quot;&gt;1. Storage Configuration&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Select principal storage type (e.g., vSAN)&lt;&#x2F;li&gt;
&lt;li&gt;Configure vSAN settings if applicable:
&lt;ul&gt;
&lt;li&gt;Set failures to tolerate&lt;&#x2F;li&gt;
&lt;li&gt;Enable&#x2F;disable deduplication and compression&lt;&#x2F;li&gt;
&lt;li&gt;Option to mount remote vSAN datastore for compute-only clusters&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;2-cluster-settings&quot;&gt;2. Cluster Settings&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Assign cluster name&lt;&#x2F;li&gt;
&lt;li&gt;Select VLCM (vSphere Lifecycle Manager) desired state image&lt;&#x2F;li&gt;
&lt;li&gt;Choose hosts from free pool (minimum 3 for vSAN)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;3-network-configuration&quot;&gt;3. Network Configuration&lt;&#x2F;h4&gt;
&lt;p&gt;Default switch configuration includes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Single switch with two NICs&lt;&#x2F;li&gt;
&lt;li&gt;Separate port groups for:
&lt;ul&gt;
&lt;li&gt;Management traffic&lt;&#x2F;li&gt;
&lt;li&gt;vMotion traffic&lt;&#x2F;li&gt;
&lt;li&gt;vSAN traffic&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;VLAN ID assignment for NSX overlay network&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;4-licensing&quot;&gt;4. Licensing&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Apply appropriate vSphere license keys&lt;&#x2F;li&gt;
&lt;li&gt;Review configuration&lt;&#x2F;li&gt;
&lt;li&gt;Initiate deployment&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;deployment-process&quot;&gt;Deployment Process&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;timeline&quot;&gt;Timeline&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Typical deployment: approximately 30 minutes&lt;&#x2F;li&gt;
&lt;li&gt;Progress monitored through SDDC Manager workflow&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;automated-tasks&quot;&gt;Automated Tasks&lt;&#x2F;h3&gt;
&lt;p&gt;SDDC Manager performs numerous operations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Cluster creation&lt;&#x2F;li&gt;
&lt;li&gt;Host configuration&lt;&#x2F;li&gt;
&lt;li&gt;Storage setup&lt;&#x2F;li&gt;
&lt;li&gt;Network configuration&lt;&#x2F;li&gt;
&lt;li&gt;NSX fabric integration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;verification-steps&quot;&gt;Verification Steps&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-sddc-manager&quot;&gt;1. SDDC Manager&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Verify new cluster appears in domain&lt;&#x2F;li&gt;
&lt;li&gt;Check host assignments&lt;&#x2F;li&gt;
&lt;li&gt;Review cluster status&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-vsphere-client&quot;&gt;2. vSphere Client&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Confirm cluster in vCenter inventory&lt;&#x2F;li&gt;
&lt;li&gt;Verify host configuration&lt;&#x2F;li&gt;
&lt;li&gt;Check storage and network settings&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-nsx-manager&quot;&gt;3. NSX Manager&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to System &amp;gt; Fabric &amp;gt; Host&lt;&#x2F;li&gt;
&lt;li&gt;Verify cluster added to NSX fabric&lt;&#x2F;li&gt;
&lt;li&gt;Check host preparation status&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scalability&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Easy infrastructure expansion&lt;&#x2F;li&gt;
&lt;li&gt;Flexible capacity management&lt;&#x2F;li&gt;
&lt;li&gt;Response to application demands&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automation&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Consistent deployment process&lt;&#x2F;li&gt;
&lt;li&gt;Reduced manual intervention&lt;&#x2F;li&gt;
&lt;li&gt;Integrated configuration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Integration&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic NSX fabric inclusion&lt;&#x2F;li&gt;
&lt;li&gt;Coordinated networking setup&lt;&#x2F;li&gt;
&lt;li&gt;Unified management&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Planning&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Verify resource availability&lt;&#x2F;li&gt;
&lt;li&gt;Plan network configuration&lt;&#x2F;li&gt;
&lt;li&gt;Prepare host inventory&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Follow standard naming conventions&lt;&#x2F;li&gt;
&lt;li&gt;Document VLAN assignments&lt;&#x2F;li&gt;
&lt;li&gt;Verify prerequisites&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Post-Deployment&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Validate all components&lt;&#x2F;li&gt;
&lt;li&gt;Test connectivity&lt;&#x2F;li&gt;
&lt;li&gt;Update documentation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Adding vSphere clusters through SDDC Manager provides a streamlined, automated approach to scaling your VCF infrastructure. The process ensures consistent deployment while maintaining integration with all necessary components, from storage to networking and security.&lt;&#x2F;p&gt;
&lt;p&gt;The ability to easily add capacity through new clusters helps organizations maintain agility in responding to changing workload demands while ensuring standardization across the infrastructure.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Configuring VMware vCenter Server Appliance (vCSA): Stage 2 Setup Guide</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/configuring-vcsa-stage-2/"/>
        <id>https://zerotohero.dev/inbox/configuring-vcsa-stage-2/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/configuring-vcsa-stage-2/">&lt;p&gt;After successfully deploying the vCSA virtual machine in Stage 1, Stage 2 handles the critical initial configuration of your vCenter Server. This guide walks through the complete configuration process to get your vCenter Server up and running.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;stage-2-configuration-steps&quot;&gt;Stage 2 Configuration Steps&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-time-synchronization-setup&quot;&gt;1. Time Synchronization Setup&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Enable NTP synchronization&lt;&#x2F;li&gt;
&lt;li&gt;Configure NTP server: 192.168.1.100&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Important&lt;&#x2F;strong&gt;: Accurate time synchronization is crucial for vCenter Server operations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-ssh-access-configuration&quot;&gt;2. SSH Access Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Enable SSH access&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Security Note&lt;&#x2F;strong&gt;: While useful for troubleshooting, consider disabling SSH in production environments when not needed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-single-sign-on-sso-configuration&quot;&gt;3. Single Sign-On (SSO) Configuration&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;new-sso-domain-setup&quot;&gt;New SSO Domain Setup&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Create new SSO domain: zerotohero.local
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;: This is intentionally different from Active Directory domain (zerotohero.dev)&lt;&#x2F;li&gt;
&lt;li&gt;Choose “Create a new SSO domain” for first-time installations&lt;&#x2F;li&gt;
&lt;li&gt;Select “Join existing domain” only if adding to existing vSphere environment&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;administrator-account-setup&quot;&gt;Administrator Account Setup&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Username: administrator&lt;&#x2F;li&gt;
&lt;li&gt;Set secure password&lt;&#x2F;li&gt;
&lt;li&gt;This account becomes the primary vSphere administrator&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-optional-settings&quot;&gt;4. Optional Settings&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Customer Experience Improvement Program (CEIP)
&lt;ul&gt;
&lt;li&gt;Optional participation&lt;&#x2F;li&gt;
&lt;li&gt;Can be disabled for lab environments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-configuration-review&quot;&gt;5. Configuration Review&lt;&#x2F;h3&gt;
&lt;p&gt;Verify all settings before proceeding:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Network Configuration
&lt;ul&gt;
&lt;li&gt;IP Address&lt;&#x2F;li&gt;
&lt;li&gt;Hostname&lt;&#x2F;li&gt;
&lt;li&gt;Gateway&lt;&#x2F;li&gt;
&lt;li&gt;DNS Server&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Time Synchronization
&lt;ul&gt;
&lt;li&gt;NTP Server&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;SSO Configuration
&lt;ul&gt;
&lt;li&gt;Domain Name&lt;&#x2F;li&gt;
&lt;li&gt;Administrator Username&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;accessing-vcenter-server&quot;&gt;Accessing vCenter Server&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;default-access-urls&quot;&gt;Default Access URLs&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Main Start Page&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;https:&#x2F;&#x2F;vcsa.zerotohero.dev:443
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;vSphere Client Direct Access&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;https:&#x2F;&#x2F;vcsa.zerotohero.dev&#x2F;ui
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;important-notes&quot;&gt;Important Notes&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;installation-time&quot;&gt;Installation Time&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Stage 2 typically takes 2-8 minutes&lt;&#x2F;li&gt;
&lt;li&gt;Time varies based on hardware specifications&lt;&#x2F;li&gt;
&lt;li&gt;Process must complete without interruption&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;post-configuration-tasks&quot;&gt;Post-Configuration Tasks&lt;&#x2F;h3&gt;
&lt;p&gt;After Stage 2 completes, you can:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Access vSphere Client&lt;&#x2F;li&gt;
&lt;li&gt;Create datacenter objects&lt;&#x2F;li&gt;
&lt;li&gt;Add ESXi hosts&lt;&#x2F;li&gt;
&lt;li&gt;Configure clusters&lt;&#x2F;li&gt;
&lt;li&gt;Set up additional networking&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Document all configuration settings&lt;&#x2F;li&gt;
&lt;li&gt;Verify successful completion of both stages&lt;&#x2F;li&gt;
&lt;li&gt;Test access through both URLs&lt;&#x2F;li&gt;
&lt;li&gt;Ensure time synchronization is working&lt;&#x2F;li&gt;
&lt;li&gt;Verify SSO authentication&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h2&gt;
&lt;p&gt;After completing Stage 2:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Log in to vSphere Client&lt;&#x2F;li&gt;
&lt;li&gt;Begin initial environment setup&lt;&#x2F;li&gt;
&lt;li&gt;Add ESXi hosts to vCenter&lt;&#x2F;li&gt;
&lt;li&gt;Configure datacenter and cluster objects&lt;&#x2F;li&gt;
&lt;li&gt;Set up required networking configurations&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Remember: Proper configuration during Stage 2 is crucial for the stable operation of your vCenter Server. Take time to verify all settings before proceeding with the final configuration steps.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding SSL Certificates: From Public CAs to Custom Root Certificates in Kubernetes</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/custom-ca/"/>
        <id>https://zerotohero.dev/inbox/custom-ca/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/custom-ca/">&lt;p&gt;As organizations scale their Kubernetes infrastructure, managing SSL certificates becomes increasingly complex. Let’s dive into some common misconceptions and explore how certificate management really works, especially when dealing with custom Certificate Authorities (CAs).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-common-misconception&quot;&gt;The Common Misconception&lt;&#x2F;h2&gt;
&lt;p&gt;Many developers initially believe that having an SSL certificate for a domain (let’s say example.com) allows them to create new certificates for its subdomains. This seems logical but isn’t how SSL certificates actually work.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-certificate-types&quot;&gt;Understanding Certificate Types&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;standard-ssl-certificates&quot;&gt;Standard SSL Certificates&lt;&#x2F;h3&gt;
&lt;p&gt;A standard SSL certificate from a provider like Verisign is an end-entity certificate. Think of it as a leaf node in a tree - it can prove its own identity but can’t vouch for others. This means:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It works for the specific domain it was issued for&lt;&#x2F;li&gt;
&lt;li&gt;It might cover www.example.com if included&lt;&#x2F;li&gt;
&lt;li&gt;It cannot create or sign other certificates&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;wildcard-certificates&quot;&gt;Wildcard Certificates&lt;&#x2F;h3&gt;
&lt;p&gt;Wildcard certificates (*.example.com) are more flexible but still have limitations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Cover all first-level subdomains&lt;&#x2F;li&gt;
&lt;li&gt;Don’t cover the root domain or multi-level subdomains&lt;&#x2F;li&gt;
&lt;li&gt;Cannot create new certificates&lt;&#x2F;li&gt;
&lt;li&gt;Share the same private key across all subdomains&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-custom-ca-approach&quot;&gt;The Custom CA Approach&lt;&#x2F;h2&gt;
&lt;p&gt;This is where things get interesting. Organizations sometimes opt for a custom Root CA, which provides maximum flexibility but comes with its own challenges.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-it-works&quot;&gt;How It Works&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Create or obtain a Root CA certificate and private key&lt;&#x2F;li&gt;
&lt;li&gt;Configure cert-manager to use this CA for signing certificates&lt;&#x2F;li&gt;
&lt;li&gt;Install the Root CA certificate in user browsers&lt;&#x2F;li&gt;
&lt;li&gt;Deploy services with automatically generated certificates&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;advantages&quot;&gt;Advantages&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Complete control over certificate issuance&lt;&#x2F;li&gt;
&lt;li&gt;Automated certificate management with cert-manager&lt;&#x2F;li&gt;
&lt;li&gt;No external CA dependencies&lt;&#x2F;li&gt;
&lt;li&gt;Cost-effective for large deployments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;challenges&quot;&gt;Challenges&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Requires careful private key management&lt;&#x2F;li&gt;
&lt;li&gt;Must distribute and maintain Root CA trust in browsers&lt;&#x2F;li&gt;
&lt;li&gt;Not practical for public-facing websites&lt;&#x2F;li&gt;
&lt;li&gt;Increased security responsibility&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;implementation-in-kubernetes&quot;&gt;Implementation in Kubernetes&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s where tools like cert-manager shine. With a custom Root CA, you can:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Automatically generate certificates for new services&lt;&#x2F;li&gt;
&lt;li&gt;Handle certificate rotation&lt;&#x2F;li&gt;
&lt;li&gt;Manage different certificate types for different environments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;cert-manager.io&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Certificate
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;store-example-com
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secretName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;store-tls
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;issuerRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;custom-ca-issuer
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ClusterIssuer
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;dnsNames&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;store.example.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;best-practices-and-considerations&quot;&gt;Best Practices and Considerations&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Security First&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Store the Root CA private key securely&lt;&#x2F;li&gt;
&lt;li&gt;Use separate CAs for different environments&lt;&#x2F;li&gt;
&lt;li&gt;Implement proper access controls&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Automation&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use cert-manager for certificate lifecycle management&lt;&#x2F;li&gt;
&lt;li&gt;Automate CA trust distribution&lt;&#x2F;li&gt;
&lt;li&gt;Monitor certificate expiration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Environment-Specific Approaches&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Development: Custom CA is perfect&lt;&#x2F;li&gt;
&lt;li&gt;Internal tools: Custom CA works well&lt;&#x2F;li&gt;
&lt;li&gt;Public websites: Stick to public CAs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;when-to-use-what&quot;&gt;When to Use What&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;use-public-cas-when&quot;&gt;Use Public CAs When:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Building public-facing websites&lt;&#x2F;li&gt;
&lt;li&gt;Can’t control client environments&lt;&#x2F;li&gt;
&lt;li&gt;Need universal trust&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;use-custom-ca-when&quot;&gt;Use Custom CA When:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Operating in controlled environments&lt;&#x2F;li&gt;
&lt;li&gt;Managing many internal services&lt;&#x2F;li&gt;
&lt;li&gt;Need complete control over certificate lifecycle&lt;&#x2F;li&gt;
&lt;li&gt;Have proper security measures in place&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;While custom Root CAs provide powerful capabilities for certificate management in Kubernetes, they’re not a silver bullet. The choice between public CAs and custom CAs should be based on your specific use case, security requirements, and operational capabilities.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: The power to create certificates for any domain comes with great responsibility. Ensure your team is prepared for the security implications before implementing a custom CA solution.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Deploying Application Virtual Networks (AVNs) in VMware Cloud Foundation: A Guide for Aria Suite</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/deploying-application-virtual-networks/"/>
        <id>https://zerotohero.dev/inbox/deploying-application-virtual-networks/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/deploying-application-virtual-networks/">&lt;p&gt;Application Virtual Networks (AVNs) are software-defined networking constructs built on overlay-backed virtual networks within NSX. When deploying the VMware Aria suite in Cloud Foundation, understanding AVN configuration is crucial for proper implementation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-avn-types&quot;&gt;Understanding AVN Types&lt;&#x2F;h2&gt;
&lt;p&gt;When deploying AVNs for the Aria suite, two distinct network segments are created:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-region-segment-local-virtual-network&quot;&gt;1. Region Segment (Local Virtual Network)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Purpose: Hosts components that run locally&lt;&#x2F;li&gt;
&lt;li&gt;Characteristics: No failover requirement&lt;&#x2F;li&gt;
&lt;li&gt;Example components: Aria Operations for Logs&lt;&#x2F;li&gt;
&lt;li&gt;Local-only operations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-cross-region-segment&quot;&gt;2. Cross-Region Segment&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Purpose: Hosts components requiring DR capabilities&lt;&#x2F;li&gt;
&lt;li&gt;Supports failover to DR site during outages&lt;&#x2F;li&gt;
&lt;li&gt;Hosts components such as:
&lt;ul&gt;
&lt;li&gt;Aria Suite Lifecycle Manager&lt;&#x2F;li&gt;
&lt;li&gt;Workspace ONE Access&lt;&#x2F;li&gt;
&lt;li&gt;Aria Automation&lt;&#x2F;li&gt;
&lt;li&gt;Aria Operations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;deployment-process&quot;&gt;Deployment Process&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;NSX edge cluster must be deployed in the management domain&lt;&#x2F;li&gt;
&lt;li&gt;Tier-1 router must be available&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;configuration-steps&quot;&gt;Configuration Steps&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Navigation&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Access SDDC Manager&lt;&#x2F;li&gt;
&lt;li&gt;Navigate to AVNs tab&lt;&#x2F;li&gt;
&lt;li&gt;Select management domain&lt;&#x2F;li&gt;
&lt;li&gt;Choose Actions &amp;gt; Add AVNs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Network Type Selection&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Choose between:
&lt;ul&gt;
&lt;li&gt;Overlay-backed NSX segments&lt;&#x2F;li&gt;
&lt;li&gt;VLAN-backed NSX segments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Note: DR capabilities require overlay-backed segments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Edge Configuration&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Select NSX edge cluster&lt;&#x2F;li&gt;
&lt;li&gt;Choose associated Tier-1 router&lt;&#x2F;li&gt;
&lt;li&gt;Configure segment attachment&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;segment-configuration&quot;&gt;Segment Configuration&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;region-network-settings&quot;&gt;Region Network Settings&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Name specification (e.g., “region”)&lt;&#x2F;li&gt;
&lt;li&gt;Subnet configuration (e.g., 192.168.11.0)&lt;&#x2F;li&gt;
&lt;li&gt;Gateway assignment (e.g., 192.168.11.1)&lt;&#x2F;li&gt;
&lt;li&gt;MTU setting (typically 8940)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;cross-region-network-settings&quot;&gt;Cross-Region Network Settings&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Name specification (e.g., “x-region”)&lt;&#x2F;li&gt;
&lt;li&gt;Subnet configuration (e.g., 192.168.31.0)&lt;&#x2F;li&gt;
&lt;li&gt;Gateway assignment (e.g., 192.168.31.1)&lt;&#x2F;li&gt;
&lt;li&gt;MTU setting (typically 8940)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;deployment-verification&quot;&gt;Deployment Verification&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;nsx-manager&quot;&gt;NSX Manager&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Check network topology&lt;&#x2F;li&gt;
&lt;li&gt;Verify segment creation&lt;&#x2F;li&gt;
&lt;li&gt;Confirm routing configuration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;vsphere-client&quot;&gt;vSphere Client&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;View segments as port groups&lt;&#x2F;li&gt;
&lt;li&gt;Verify distributed switch integration&lt;&#x2F;li&gt;
&lt;li&gt;Check network availability&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;implementation-considerations&quot;&gt;Implementation Considerations&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Design Planning&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Determine component placement&lt;&#x2F;li&gt;
&lt;li&gt;Plan IP addressing scheme&lt;&#x2F;li&gt;
&lt;li&gt;Consider DR requirements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Network Architecture&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Review existing network topology&lt;&#x2F;li&gt;
&lt;li&gt;Plan segment integration&lt;&#x2F;li&gt;
&lt;li&gt;Consider bandwidth requirements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security Considerations&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Segment isolation&lt;&#x2F;li&gt;
&lt;li&gt;Access controls&lt;&#x2F;li&gt;
&lt;li&gt;Traffic patterns&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Software-Defined Networking&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Flexible network configuration&lt;&#x2F;li&gt;
&lt;li&gt;Automated deployment&lt;&#x2F;li&gt;
&lt;li&gt;Consistent implementation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Disaster Recovery&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Built-in failover capability&lt;&#x2F;li&gt;
&lt;li&gt;Site resilience&lt;&#x2F;li&gt;
&lt;li&gt;Component protection&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Integration&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Seamless NSX integration&lt;&#x2F;li&gt;
&lt;li&gt;vSphere compatibility&lt;&#x2F;li&gt;
&lt;li&gt;Automated management&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Deploying AVNs through SDDC Manager provides a streamlined approach to creating the necessary network infrastructure for the Aria suite. The automated process ensures consistent configuration while supporting both local operations and disaster recovery requirements.&lt;&#x2F;p&gt;
&lt;p&gt;The separation between region and cross-region segments allows for flexible component placement while maintaining appropriate failover capabilities where needed. This architecture supports both operational efficiency and business continuity requirements.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Deploying VMware vCenter Server Appliance (vCSA): A Comprehensive Setup Guide</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/deploying-vcsa/"/>
        <id>https://zerotohero.dev/inbox/deploying-vcsa/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/deploying-vcsa/">&lt;p&gt;When deploying vCenter Server Appliance, proper planning is crucial. Just like a carpenter who measures twice and cuts once, taking time to plan your vCSA deployment can save hours of troubleshooting later. This guide provides a detailed deployment plan for setting up vCSA in a lab environment.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;environment-prerequisites&quot;&gt;Environment Prerequisites&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;management-computer-requirements&quot;&gt;Management Computer Requirements&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Windows Server with:
&lt;ul&gt;
&lt;li&gt;Mounted vCSA ISO image&lt;&#x2F;li&gt;
&lt;li&gt;DNS services&lt;&#x2F;li&gt;
&lt;li&gt;NTP services&lt;&#x2F;li&gt;
&lt;li&gt;IP Address: 192.168.1.100&#x2F;24&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;network-configuration&quot;&gt;Network Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Management Network: 192.168.1.0&#x2F;24&lt;&#x2F;li&gt;
&lt;li&gt;Default Gateway: 192.168.1.1&lt;&#x2F;li&gt;
&lt;li&gt;DNS Server: 192.168.1.100&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;deployment-specifications&quot;&gt;Deployment Specifications&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;vcsa-configuration&quot;&gt;vCSA Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Target Host: ESXi-4&lt;&#x2F;li&gt;
&lt;li&gt;IP Address: 192.168.1.111&#x2F;24&lt;&#x2F;li&gt;
&lt;li&gt;FQDN: vCSA.zerotohero.dev&lt;&#x2F;li&gt;
&lt;li&gt;NTP Server: 192.168.1.100&lt;&#x2F;li&gt;
&lt;li&gt;SSH: Enabled&lt;&#x2F;li&gt;
&lt;li&gt;Base Password: PA$$W0RD (for lab use only - use strong, unique passwords in production)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;single-sign-on-sso-configuration&quot;&gt;Single Sign-On (SSO) Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;SSO Domain: zerotohero.local
&lt;ul&gt;
&lt;li&gt;Note: Intentionally different from DNS domain (zerotohero.dev)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;SSO Admin Account: administrator@zerotohero.local&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;infrastructure-organization&quot;&gt;Infrastructure Organization&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;data-center-and-cluster-structure&quot;&gt;Data Center and Cluster Structure&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Primary Data Center (DC-1)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Main Cluster
&lt;ul&gt;
&lt;li&gt;ESXi-1&lt;&#x2F;li&gt;
&lt;li&gt;ESXi-2&lt;&#x2F;li&gt;
&lt;li&gt;ESXi-3&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Management Data Center (mgmt)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ESXi-4 (vCSA host)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;deployment-process&quot;&gt;Deployment Process&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Initial Setup&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Begin deployment from Windows management computer&lt;&#x2F;li&gt;
&lt;li&gt;Mount vCSA ISO&lt;&#x2F;li&gt;
&lt;li&gt;Launch installer&lt;&#x2F;li&gt;
&lt;li&gt;Target ESXi-4 as deployment host&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Network Configuration&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Configure static IP (192.168.1.111)&lt;&#x2F;li&gt;
&lt;li&gt;Set subnet mask (&#x2F;24)&lt;&#x2F;li&gt;
&lt;li&gt;Configure DNS (192.168.1.100)&lt;&#x2F;li&gt;
&lt;li&gt;Set FQDN (vCSA.zerotohero.dev)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;SSO Configuration&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create new SSO domain (zerotohero.local)&lt;&#x2F;li&gt;
&lt;li&gt;Set up administrator account&lt;&#x2F;li&gt;
&lt;li&gt;Configure password&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Post-Deployment Tasks&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Enable SSH access&lt;&#x2F;li&gt;
&lt;li&gt;Configure NTP synchronization&lt;&#x2F;li&gt;
&lt;li&gt;Create DC-1 datacenter&lt;&#x2F;li&gt;
&lt;li&gt;Create main cluster&lt;&#x2F;li&gt;
&lt;li&gt;Add ESXi hosts 1-3 to main cluster&lt;&#x2F;li&gt;
&lt;li&gt;Create management datacenter&lt;&#x2F;li&gt;
&lt;li&gt;Add ESXi-4 to management datacenter&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;security-considerations&quot;&gt;Security Considerations&lt;&#x2F;h2&gt;
&lt;p&gt;While this guide uses a simplified password scheme for lab purposes, production environments should implement:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unique passwords for each component&lt;&#x2F;li&gt;
&lt;li&gt;Strong password policies&lt;&#x2F;li&gt;
&lt;li&gt;Regular password rotation&lt;&#x2F;li&gt;
&lt;li&gt;Role-based access control (RBAC)&lt;&#x2F;li&gt;
&lt;li&gt;Network segmentation&lt;&#x2F;li&gt;
&lt;li&gt;SSL certificate management&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;final-notes&quot;&gt;Final Notes&lt;&#x2F;h2&gt;
&lt;p&gt;This deployment plan creates a clean separation between management infrastructure (ESXi-4 and vCSA) and the production environment (ESXi 1-3). This separation provides better organization and makes future maintenance easier.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that while this guide uses simplified naming conventions and security settings for a lab environment, production deployments should follow your organization’s naming conventions and security policies.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding Docker&#x27;s 6MB Memory Limit: A Deep Dive</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/docker-memory-limits/"/>
        <id>https://zerotohero.dev/inbox/docker-memory-limits/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/docker-memory-limits/">&lt;p&gt;Have you ever encountered this puzzling error message while working with Docker containers?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;Warning Failed 89s (x12 over 3m44s) kubelet Error: Error response from daemon: Minimum memory limit allowed is 6MB
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you’re like many developers, your first instinct might be to check Kubernetes’ LimitRange resources:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$ kubectl get limitrange -A
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;No resources found
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But wait - if there are no LimitRange resources defined, where is this 6MB limit coming from? Let’s dive deep into this common containerization puzzle.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-mystery-of-the-6mb-limit&quot;&gt;The Mystery of the 6MB Limit&lt;&#x2F;h2&gt;
&lt;p&gt;The key to understanding this issue lies in recognizing that this limit isn’t coming from Kubernetes at all - it’s actually a built-in restriction in Docker itself. This often surprises developers because it’s not documented prominently in Docker’s documentation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-does-this-limit-exist&quot;&gt;Why Does This Limit Exist?&lt;&#x2F;h3&gt;
&lt;p&gt;The 6MB minimum memory limit serves as a critical safeguard in Docker’s architecture. It’s designed to prevent containers from being started with dangerously low memory limits that could lead to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Immediate Out-of-Memory (OOM) kills&lt;&#x2F;li&gt;
&lt;li&gt;Unstable container behavior&lt;&#x2F;li&gt;
&lt;li&gt;System resource exhaustion&lt;&#x2F;li&gt;
&lt;li&gt;Cascading failures in container orchestration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;configuration-options-what-can-you-do&quot;&gt;Configuration Options: What Can You Do?&lt;&#x2F;h2&gt;
&lt;p&gt;While this limit is hardcoded into Docker’s engine, you’re not entirely without options. Here are several approaches to dealing with this limitation:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-adjust-your-resource-allocation&quot;&gt;1. Adjust Your Resource Allocation&lt;&#x2F;h3&gt;
&lt;p&gt;The most straightforward solution is to ensure your containers have adequate memory allocation. If you’re hitting this limit, it’s worth questioning whether running with such minimal memory is truly optimal for your application.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-alternative-approaches&quot;&gt;2. Alternative Approaches&lt;&#x2F;h3&gt;
&lt;p&gt;If you absolutely need to work with very low memory limits, consider these options:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use Docker Swarm with Compatibility Mode&lt;&#x2F;strong&gt;: Running Docker Swarm with the &lt;code&gt;--compatibility&lt;&#x2F;code&gt; flag can alter how memory limits are interpreted&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Switch Container Runtimes&lt;&#x2F;strong&gt;: Consider using containerd or another container runtime that doesn’t impose this limitation&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Custom Docker Build&lt;&#x2F;strong&gt;: Though not recommended for production, you could technically modify Docker’s source code to adjust this limit&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;best-practices-and-recommendations&quot;&gt;Best Practices and Recommendations&lt;&#x2F;h2&gt;
&lt;p&gt;When working with container memory limits, consider these best practices:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Right-size Your Containers&lt;&#x2F;strong&gt;: Instead of trying to run with minimal memory, focus on appropriate sizing based on actual application needs&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Monitor Memory Usage&lt;&#x2F;strong&gt;: Use tools like cAdvisor or Prometheus to understand your actual memory usage patterns&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Test Thoroughly&lt;&#x2F;strong&gt;: Always test your containers under load to ensure memory limits are appropriate&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Document Your Settings&lt;&#x2F;strong&gt;: Make memory requirements and limits explicit in your deployment documentation&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;While Docker’s 6MB memory limit might seem restrictive at first, it’s actually a thoughtful safeguard that helps prevent potentially problematic container configurations. Understanding this limit - and working with it rather than against it - will help you build more reliable containerized applications.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: Just because you can run a container with minimal memory doesn’t always mean you should. Focus on stability and reliability over minimal resource usage unless you have a compelling reason to do otherwise.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;additional-resources&quot;&gt;Additional Resources&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Docker Documentation on Resource Constraints&lt;&#x2F;li&gt;
&lt;li&gt;Kubernetes Memory Management Documentation&lt;&#x2F;li&gt;
&lt;li&gt;Container Runtime Comparisons&lt;&#x2F;li&gt;
&lt;li&gt;Memory Optimization Strategies for Containers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy containerizing!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Debugging URL Encoding Issues with External Secrets Operator&#x27;s Webhook Provider</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/eso-urlencode/"/>
        <id>https://zerotohero.dev/inbox/eso-urlencode/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/eso-urlencode/">&lt;p&gt;When working with Kubernetes External Secrets Operator (ESO) and its webhook provider, you might encounter some interesting URL encoding challenges. In this post, I’ll walk through a specific issue we encountered and how we solved it, which might help others facing similar problems.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-setup&quot;&gt;The Setup&lt;&#x2F;h2&gt;
&lt;p&gt;We started with a basic &lt;code&gt;ClusterSecretStore&lt;&#x2F;code&gt; configuration using ESO’s webhook provider:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;external-secrets.io&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ClusterSecretStore
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;webhook-backend
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;webhook&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;eso-webhook.default.svc.cluster.local:80&#x2F;webhook?{{ .remoteRef.key }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;GET
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;jsonPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our webhook server was a simple Go application designed to handle requests and return secret values based on a path parameter. We expected clean, separate query parameters, but reality had different plans.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;When we started debugging why our webhook wasn’t working as expected, we added some basic logging to our Go server:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;URL&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To our surprise, the key was empty! Further investigation by printing the raw URL revealed something interesting:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;Method: GET
&lt;&#x2F;span&gt;&lt;span&gt;URL: &#x2F;webhook?key%3Dcoca-cola.cluster-001%26path%3Dnamespaces.cokeSystem.secrets.adminCredentials.value
&lt;&#x2F;span&gt;&lt;span&gt;Protocol: HTTP&#x2F;1.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The entire query string was URL-encoded as a single parameter. Instead of getting our parameters separately, everything was encoded within the &lt;code&gt;key&lt;&#x2F;code&gt; parameter.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;understanding-what-s-happening&quot;&gt;Understanding What’s Happening&lt;&#x2F;h3&gt;
&lt;p&gt;When ESO processes the template in our ClusterSecretStore URL, it’s taking the entire &lt;code&gt;remoteRef.key&lt;&#x2F;code&gt; value and inserting it as-is into the URL. If our &lt;code&gt;remoteRef.key&lt;&#x2F;code&gt; contains URL-special characters (like &lt;code&gt;=&lt;&#x2F;code&gt; and &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt;), they get encoded, resulting in our doubly-nested query string.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fixing-the-server-code&quot;&gt;Fixing the Server Code&lt;&#x2F;h3&gt;
&lt;p&gt;Here’s how we modified our webhook server to handle this situation properly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;webhookHandler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Get the &amp;#39;key&amp;#39; query parameter
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encodedKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;URL&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Unescape the key parameter
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decodedKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;QueryUnescape&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encodedKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Failed to decode key parameter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusBadRequest&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Parse the decoded key as a query string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ParseQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decodedKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Invalid key format&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusBadRequest&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;authKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;path&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Validate and use the parameters
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;authKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;coca-cola.cluster-001&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Invalid authentication key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusUnauthorized&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Path is required&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusBadRequest&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Process the request...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The key improvements in this solution are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Using &lt;code&gt;url.QueryUnescape()&lt;&#x2F;code&gt; to properly decode the URL-encoded parameter&lt;&#x2F;li&gt;
&lt;li&gt;Using &lt;code&gt;url.ParseQuery()&lt;&#x2F;code&gt; to parse the decoded string as a query string itself&lt;&#x2F;li&gt;
&lt;li&gt;Extracting the actual key and path values from the parsed query parameters&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;using-the-clustersecretstore&quot;&gt;Using the ClusterSecretStore&lt;&#x2F;h3&gt;
&lt;p&gt;With this server implementation, we can now use our ClusterSecretStore like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;external-secrets.io&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ExternalSecret
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;example-external-secret
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secretStoreRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;webhook-backend
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ClusterSecretStore
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;example-secret
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secretKey&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;adminPassword
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;remoteRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;key=coca-cola.cluster-001&amp;amp;path=namespaces.cokeSystem.secrets.adminCredentials.value&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Always implement detailed request logging when debugging webhook issues&lt;&#x2F;li&gt;
&lt;li&gt;Don’t assume how parameters will be encoded or structured in webhook requests&lt;&#x2F;li&gt;
&lt;li&gt;Use standard library functions for URL parsing and decoding instead of custom string manipulation&lt;&#x2F;li&gt;
&lt;li&gt;Remember that template variables in Kubernetes resources might be processed differently than you expect&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;URL encoding issues can be tricky to debug, especially when dealing with nested query parameters. By understanding how ESO processes template variables and using proper URL parsing tools, we can build robust webhook handlers that correctly handle these scenarios.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to always implement proper logging during development and testing phases - it makes debugging these kinds of issues much easier. The Go standard library provides excellent tools for handling URL encoding and parsing, so make use of them instead of trying to parse query strings manually.&lt;&#x2F;p&gt;
&lt;p&gt;This solution provides a clean way to handle the URL encoding challenges while maintaining the security and functionality requirements of our webhook provider.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Building a Custom Webhook Provider for External Secrets Operator: A Step-by-Step Guide</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/eso-webhook-pitfalls/"/>
        <id>https://zerotohero.dev/inbox/eso-webhook-pitfalls/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/eso-webhook-pitfalls/">&lt;p&gt;In this tutorial, we’ll walk through creating a custom webhook provider for External Secrets Operator (ESO) from scratch. We’ll build a simple Go server that serves as a webhook, deploy it to Kubernetes, and configure ESO to use it for secret management.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-the-architecture&quot;&gt;Understanding the Architecture&lt;&#x2F;h2&gt;
&lt;p&gt;The External Secrets Operator (ESO) can fetch secrets from various providers, including custom webhooks. In this setup:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;ESO sends requests to our webhook with a key&lt;&#x2F;li&gt;
&lt;li&gt;The webhook returns a structured JSON response&lt;&#x2F;li&gt;
&lt;li&gt;ESO processes this response and creates Kubernetes secrets accordingly&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;step-1-creating-the-webhook-server&quot;&gt;Step 1: Creating the Webhook Server&lt;&#x2F;h2&gt;
&lt;p&gt;First, let’s create a simple Go server that responds to webhook requests. Here’s a basic implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;encoding&#x2F;json&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;log&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;net&#x2F;http&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Response structure matching ESO&amp;#39;s expectations
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Namespaces &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;NamespaceData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;namespaces&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;NamespaceData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Secrets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;secrets&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Type     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;type&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Value    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;value&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Metadata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;SecretMetadata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;metadata&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Expires  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;expires&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NotBefore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;notBefore&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SecretMetadata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Labels            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;labels&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Annotations       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;annotations&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreationTimestamp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;creationTimestamp&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LastUpdated       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;lastUpdated&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;HandleFunc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;webhook&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;webhookHandler&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Server is running on :8080&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ListenAndServe&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;:8080&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;webhookHandler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Method &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MethodGet &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Method not allowed&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusMethodNotAllowed&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;URL&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;coca-cola.cluster-001&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Invalid key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusBadRequest&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Namespaces&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;NamespaceData&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;coke-system&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Secrets&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Secret&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;admin-credentials&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;k8s&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;super-secret-secret&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Metadata&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SecretMetadata&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Labels&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;managed-by&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;coke-system&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                            },
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Annotations&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;inject-sidecar&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;true&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                            },
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreationTimestamp&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2024-01-01&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LastUpdated&lt;&#x2F;span&gt;&lt;span&gt;:      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2024-01-01&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        },
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Expires&lt;&#x2F;span&gt;&lt;span&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2024-01-01&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NotBefore&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2024-01-01&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Header&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;application&#x2F;json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewEncoder&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Encode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;step-2-containerizing-the-webhook&quot;&gt;Step 2: Containerizing the Webhook&lt;&#x2F;h2&gt;
&lt;p&gt;Create a Dockerfile to package the webhook:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; golang:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;1.20-alpine &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;AS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;builder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;WORKDIR &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span&gt; main.go .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;go build -o webhook-server main.go
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; alpine:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;latest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;WORKDIR &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;root&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span&gt; --from=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;app&#x2F;webhook-server .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;EXPOSE &lt;&#x2F;span&gt;&lt;span&gt;8080
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;CMD &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;.&#x2F;webhook-server&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;step-3-deploying-to-kubernetes&quot;&gt;Step 3: Deploying to Kubernetes&lt;&#x2F;h2&gt;
&lt;p&gt;Deploy the webhook using a Kubernetes Deployment and Service:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;eso-webhook
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;eso-webhook
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;eso-webhook
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;eso-webhook
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;eso-webhook
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;localhost:5000&#x2F;eso-webhook:v1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;containerPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8080
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;---
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Service
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;eso-webhook
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;LoadBalancer
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;eso-webhook
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;protocol&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;TCP
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;targetPort&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8080
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;step-4-configuring-external-secrets-operator&quot;&gt;Step 4: Configuring External Secrets Operator&lt;&#x2F;h2&gt;
&lt;p&gt;Now comes the crucial part: configuring ESO to use our webhook. This involves two components:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A ClusterSecretStore that defines how to access our webhook&lt;&#x2F;li&gt;
&lt;li&gt;An ExternalSecret that specifies what secrets to fetch&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;clustersecretstore-configuration&quot;&gt;ClusterSecretStore Configuration&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;external-secrets.io&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ClusterSecretStore
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;webhook-backend
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;webhook&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;eso-webhook.default.svc.cluster.local&#x2F;webhook?key={{ .remoteRef.key }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;GET
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;jsonPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$.namespaces&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;externalsecret-configuration-with-advanced-templating&quot;&gt;ExternalSecret Configuration with Advanced Templating&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;external-secrets.io&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ExternalSecret
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;coke-admin-credentials
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;coke-system
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;refreshInterval&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;15s&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secretStoreRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;webhook-backend
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ClusterSecretStore
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;admin-credentials
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;creationPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Owner
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;engineVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;v2
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;managed-by&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;{{ index .coke-system.secrets.admin-credentials.metadata.labels &amp;quot;managed-by&amp;quot; }}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;annotations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;inject-sidecar&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;{{ index .coke-system.secrets.admin-credentials.metadata.annotations &amp;quot;inject-sidecar&amp;quot; }}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;{{ .coke-system.secrets.admin-credentials.type }}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;{{ .coke-system.secrets.admin-credentials.value | b64dec }}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;{{ .coke-system.secrets.admin-credentials.value | b64dec | upper }}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;created-at&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;{{ now | date &amp;quot;2006-01-02T15:04:05Z07:00&amp;quot; }}&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secretKey&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;coke-system
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;remoteRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;coca-cola.cluster-001
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;understanding-the-template-engine&quot;&gt;Understanding the Template Engine&lt;&#x2F;h2&gt;
&lt;p&gt;The ExternalSecret configuration uses ESO’s v2 template engine, which provides powerful features for transforming secret data:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Engine Version&lt;&#x2F;strong&gt;: We specify &lt;code&gt;engineVersion: v2&lt;&#x2F;code&gt; to use the latest templating capabilities.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Accessing Hyphenated Fields&lt;&#x2F;strong&gt;: Fields with hyphens require the &lt;code&gt;index&lt;&#x2F;code&gt; function, e.g., &lt;code&gt;{{ index .metadata.labels &quot;managed-by&quot; }}&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Data Transformation&lt;&#x2F;strong&gt;: We can use functions like &lt;code&gt;b64dec&lt;&#x2F;code&gt; for base64 decoding and &lt;code&gt;upper&lt;&#x2F;code&gt; for uppercase conversion.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Time Functions&lt;&#x2F;strong&gt;: The &lt;code&gt;now&lt;&#x2F;code&gt; function with date formatting helps track secret creation times.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;common-pitfalls-and-solutions&quot;&gt;Common Pitfalls and Solutions&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Hyphenated Field Access&lt;&#x2F;strong&gt;: Always use the &lt;code&gt;index&lt;&#x2F;code&gt; function for fields with hyphens.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;JSON Path&lt;&#x2F;strong&gt;: Ensure your &lt;code&gt;jsonPath&lt;&#x2F;code&gt; in the ClusterSecretStore matches your webhook’s response structure.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Service Discovery&lt;&#x2F;strong&gt;: Use the full Kubernetes service DNS name for reliable webhook access.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Template Engine Version&lt;&#x2F;strong&gt;: Always specify &lt;code&gt;engineVersion: v2&lt;&#x2F;code&gt; for advanced templating features.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Creating a custom webhook provider for External Secrets Operator involves careful consideration of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Webhook response structure&lt;&#x2F;li&gt;
&lt;li&gt;Kubernetes deployment configuration&lt;&#x2F;li&gt;
&lt;li&gt;ESO template engine features&lt;&#x2F;li&gt;
&lt;li&gt;Service networking and discovery&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By following this guide, you can create a flexible secret management solution that integrates seamlessly with your Kubernetes infrastructure while maintaining security and scalability.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Using External Secrets Operator with HTTP Endpoints: A Complete Guide</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/eso-webhook-provider/"/>
        <id>https://zerotohero.dev/inbox/eso-webhook-provider/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/eso-webhook-provider/">&lt;p&gt;External Secrets Operator (ESO) is a powerful Kubernetes operator that helps manage secrets from external sources. While it’s commonly used with cloud provider secret managers like AWS Secrets Manager or HashiCorp Vault, ESO also supports fetching secrets from HTTP endpoints. In this guide, we’ll explore how to configure ESO to poll an HTTP endpoint and automatically create Kubernetes secrets from the response.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-the-webhook-provider&quot;&gt;Understanding the Webhook Provider&lt;&#x2F;h2&gt;
&lt;p&gt;The Webhook provider in ESO allows you to fetch secrets from any HTTP endpoint that returns a JSON response. This is particularly useful when:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You have an existing internal secrets service&lt;&#x2F;li&gt;
&lt;li&gt;You need to integrate with a custom secrets management system&lt;&#x2F;li&gt;
&lt;li&gt;You want to generate secrets dynamically through an API&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;configuration-steps&quot;&gt;Configuration Steps&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-setting-up-the-secretstore&quot;&gt;1. Setting up the SecretStore&lt;&#x2F;h3&gt;
&lt;p&gt;First, we need to configure a SecretStore that defines our HTTP endpoint and how to interact with it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;external-secrets.io&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;SecretStore
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;webhook-secret-store
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;webhook&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;https:&#x2F;&#x2F;your-http-endpoint.com&#x2F;secrets
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;jsonPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$.secrets[*]&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Authorization&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Bearer &amp;lt;your-token-here&amp;gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This configuration tells ESO:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Which endpoint to call (&lt;code&gt;url&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;How to extract secrets from the response (&lt;code&gt;jsonPath&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;What headers to include in the request (&lt;code&gt;headers&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-creating-the-externalsecret&quot;&gt;2. Creating the ExternalSecret&lt;&#x2F;h3&gt;
&lt;p&gt;Next, we define an ExternalSecret that specifies which secrets to fetch and how often to refresh them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;external-secrets.io&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ExternalSecret
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;webhook-external-secret
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;refreshInterval&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;1h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secretStoreRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;webhook-secret-store
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;SecretStore
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;my-secret
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;creationPolicy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Owner
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secretKey&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;username
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;remoteRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;username
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secretKey&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;password
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;remoteRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;password
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This configuration:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Sets a refresh interval of 1 hour&lt;&#x2F;li&gt;
&lt;li&gt;References our SecretStore&lt;&#x2F;li&gt;
&lt;li&gt;Defines which secrets to fetch and how to map them to Kubernetes secret keys&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;best-practices-and-security-considerations&quot;&gt;Best Practices and Security Considerations&lt;&#x2F;h2&gt;
&lt;p&gt;When implementing this solution, consider the following best practices:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTTPS&lt;&#x2F;strong&gt;: Always use HTTPS endpoints to ensure secret data is encrypted in transit.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Authentication&lt;&#x2F;strong&gt;: Implement proper authentication using headers or other mechanisms to secure your endpoint.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rate Limiting&lt;&#x2F;strong&gt;: Set appropriate refresh intervals to avoid overwhelming your HTTP endpoint.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Error Handling&lt;&#x2F;strong&gt;: Ensure your HTTP endpoint returns appropriate error codes and that ESO can handle them gracefully.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Access Control&lt;&#x2F;strong&gt;: Use Kubernetes RBAC to control which pods can access the created secrets.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;expected-http-response-format&quot;&gt;Expected HTTP Response Format&lt;&#x2F;h2&gt;
&lt;p&gt;Your HTTP endpoint should return a JSON response that matches your configured JSONPath. For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;secrets&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;username&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;admin&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;password&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;secure-password-123&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;&#x2F;h2&gt;
&lt;p&gt;If you encounter issues:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Check the ESO operator logs using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kubectl logs -n external-secrets -l app.kubernetes.io&#x2F;name=external-secrets
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Verify your HTTP endpoint is accessible from the cluster&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Confirm the JSONPath expression matches your response structure&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Ensure all required headers are properly configured&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Using External Secrets Operator with HTTP endpoints provides a flexible way to integrate custom secret management solutions with Kubernetes. By following this guide and best practices, you can securely manage and automatically update your Kubernetes secrets from any HTTP source.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to always follow security best practices and thoroughly test your configuration in a non-production environment first.&lt;&#x2F;p&gt;
&lt;p&gt;For more information, refer to the &lt;a href=&quot;https:&#x2F;&#x2F;external-secrets.io&#x2F;latest&#x2F;&quot;&gt;External Secrets Operator documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Expanding vSphere Clusters in VMware Cloud Foundation: A Guide to Adding Hosts</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/expanding-vsphere-clusters/"/>
        <id>https://zerotohero.dev/inbox/expanding-vsphere-clusters/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/expanding-vsphere-clusters/">&lt;p&gt;While VMware Cloud Foundation (VCF) offers multiple ways to increase capacity, adding hosts to an existing cluster is one of the most straightforward methods. This guide walks through the process of expanding a vSphere cluster by adding new hosts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;process-overview&quot;&gt;Process Overview&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;current-state-assessment&quot;&gt;Current State Assessment&lt;&#x2F;h3&gt;
&lt;p&gt;Before adding hosts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Check current cluster composition in vSphere client&lt;&#x2F;li&gt;
&lt;li&gt;Review existing configuration in SDDC Manager&lt;&#x2F;li&gt;
&lt;li&gt;Verify host count and configuration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;navigation-path&quot;&gt;Navigation Path&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Access SDDC Manager&lt;&#x2F;li&gt;
&lt;li&gt;Navigate to Workload Domains&lt;&#x2F;li&gt;
&lt;li&gt;Select target domain&lt;&#x2F;li&gt;
&lt;li&gt;View cluster details&lt;&#x2F;li&gt;
&lt;li&gt;Access Hosts tab&lt;&#x2F;li&gt;
&lt;li&gt;Select Actions &amp;gt; Add Host&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;host-selection-process&quot;&gt;Host Selection Process&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;key-considerations&quot;&gt;Key Considerations&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;network-pool-compatibility&quot;&gt;Network Pool Compatibility&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Hosts must be commissioned for the correct network pool&lt;&#x2F;li&gt;
&lt;li&gt;Example: Management domain requires hosts from management network pool&lt;&#x2F;li&gt;
&lt;li&gt;Different pools (like prod pool) are for different domains&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;configuration-inheritance&quot;&gt;Configuration Inheritance&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;New hosts automatically inherit:
&lt;ul&gt;
&lt;li&gt;Current switch configuration&lt;&#x2F;li&gt;
&lt;li&gt;Network settings&lt;&#x2F;li&gt;
&lt;li&gt;Cluster policies&lt;&#x2F;li&gt;
&lt;li&gt;Security settings&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;implementation-steps&quot;&gt;Implementation Steps&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Host Selection&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Choose from available free pool&lt;&#x2F;li&gt;
&lt;li&gt;Verify network pool compatibility&lt;&#x2F;li&gt;
&lt;li&gt;Select appropriate number of hosts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;License Assignment&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Apply vSphere license keys&lt;&#x2F;li&gt;
&lt;li&gt;Verify license availability&lt;&#x2F;li&gt;
&lt;li&gt;Ensure compliance&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Review and Deploy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Confirm configuration settings&lt;&#x2F;li&gt;
&lt;li&gt;Review inherited parameters&lt;&#x2F;li&gt;
&lt;li&gt;Initiate addition workflow&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;deployment-process&quot;&gt;Deployment Process&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;timeline&quot;&gt;Timeline&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Typical deployment: approximately 15 minutes&lt;&#x2F;li&gt;
&lt;li&gt;Progress tracked through workflow interface&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;automated-tasks&quot;&gt;Automated Tasks&lt;&#x2F;h3&gt;
&lt;p&gt;SDDC Manager handles:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Host integration&lt;&#x2F;li&gt;
&lt;li&gt;Network configuration&lt;&#x2F;li&gt;
&lt;li&gt;Cluster policy application&lt;&#x2F;li&gt;
&lt;li&gt;Storage setup&lt;&#x2F;li&gt;
&lt;li&gt;Security configuration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;verification-steps&quot;&gt;Verification Steps&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-sddc-manager-verification&quot;&gt;1. SDDC Manager Verification&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Check updated host count&lt;&#x2F;li&gt;
&lt;li&gt;Verify cluster composition&lt;&#x2F;li&gt;
&lt;li&gt;Review host status&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-vsphere-client-validation&quot;&gt;2. vSphere Client Validation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Confirm host addition&lt;&#x2F;li&gt;
&lt;li&gt;Check cluster configuration&lt;&#x2F;li&gt;
&lt;li&gt;Verify resource availability&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pre-expansion Planning&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Verify resource requirements&lt;&#x2F;li&gt;
&lt;li&gt;Check network pool compatibility&lt;&#x2F;li&gt;
&lt;li&gt;Ensure license availability&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Add hosts during maintenance windows&lt;&#x2F;li&gt;
&lt;li&gt;Verify configurations before proceeding&lt;&#x2F;li&gt;
&lt;li&gt;Monitor workflow progress&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Post-expansion&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Validate cluster operations&lt;&#x2F;li&gt;
&lt;li&gt;Check resource distribution&lt;&#x2F;li&gt;
&lt;li&gt;Update documentation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scalability&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Easy capacity expansion&lt;&#x2F;li&gt;
&lt;li&gt;Flexible resource management&lt;&#x2F;li&gt;
&lt;li&gt;Quick response to demand&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Automated configuration inheritance&lt;&#x2F;li&gt;
&lt;li&gt;Standardized deployment&lt;&#x2F;li&gt;
&lt;li&gt;Reduced human error&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Efficiency&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Streamlined process&lt;&#x2F;li&gt;
&lt;li&gt;Minimal manual intervention&lt;&#x2F;li&gt;
&lt;li&gt;Quick implementation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Expanding vSphere clusters through SDDC Manager provides a reliable and efficient method for increasing capacity in your VCF environment. The automated inheritance of configurations ensures consistency while simplifying the expansion process.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to carefully consider network pool compatibility and existing configurations when selecting hosts for addition. The streamlined process helps organizations quickly respond to changing capacity needs while maintaining standardization across their infrastructure.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Installing VMware vCenter Server Appliance (vCSA): Stage 1 Deployment Guide</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/installing-vcsa-stage-1/"/>
        <id>https://zerotohero.dev/inbox/installing-vcsa-stage-1/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/installing-vcsa-stage-1/">&lt;p&gt;This guide walks through the first stage of deploying vCenter Server Appliance (vCSA) on an ESXi host. Like any critical infrastructure deployment, proper preparation and verification at each step is essential for success.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prerequisites-verification&quot;&gt;Prerequisites Verification&lt;&#x2F;h2&gt;
&lt;p&gt;Before beginning the installation:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Verify DNS resolution for target ESXi host:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nslookup esxi-4.zerotohero.dev
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Should resolve to 192.168.1.104
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Verify DNS resolution for vCSA FQDN:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nslookup vcsa.zerotohero.dev
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Should resolve to 192.168.1.111
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;installation-process&quot;&gt;Installation Process&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-launch-installer&quot;&gt;1. Launch Installer&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to mounted vCSA ISO&lt;&#x2F;li&gt;
&lt;li&gt;Go to &lt;code&gt;&#x2F;vcsa-ui-installer&#x2F;Win32&#x2F;&lt;&#x2F;code&gt; directory&lt;&#x2F;li&gt;
&lt;li&gt;Double-click installer executable&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-initial-setup&quot;&gt;2. Initial Setup&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Select “Install” from the main menu&lt;&#x2F;li&gt;
&lt;li&gt;Acknowledge two-stage installation process&lt;&#x2F;li&gt;
&lt;li&gt;Accept End User License Agreement (EULA)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;3-target-host-configuration&quot;&gt;3. Target Host Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;ESXi Host: esxi-4.zerotohero.dev&lt;&#x2F;li&gt;
&lt;li&gt;Username: root&lt;&#x2F;li&gt;
&lt;li&gt;Password: (lab password)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Security Tip&lt;&#x2F;strong&gt;: Verify host SSL thumbprint matches ESXi DCUI (F2 &amp;gt; View Support Information)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-vcsa-vm-configuration&quot;&gt;4. vCSA VM Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;VM Name: vCSA&lt;&#x2F;li&gt;
&lt;li&gt;Root Password: (set secure password)&lt;&#x2F;li&gt;
&lt;li&gt;Deployment Size: Tiny (suitable for managing up to 10 hosts)&lt;&#x2F;li&gt;
&lt;li&gt;Storage Size: Default&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-storage-configuration&quot;&gt;5. Storage Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Select datastore: esxi-4&lt;&#x2F;li&gt;
&lt;li&gt;Enable thin disk mode for efficient storage utilization&lt;&#x2F;li&gt;
&lt;li&gt;Note: vSAN configuration (if needed) comes later&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;6-network-configuration&quot;&gt;6. Network Configuration&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;network-selection&quot;&gt;Network Selection&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Select “VM Network” port group&lt;&#x2F;li&gt;
&lt;li&gt;Connects to vSwitch0 on management network&lt;&#x2F;li&gt;
&lt;li&gt;Verify network connectivity via ESXi host client:
&lt;ul&gt;
&lt;li&gt;Navigate to Networking &amp;gt; Virtual Switches&lt;&#x2F;li&gt;
&lt;li&gt;Confirm vSwitch0 configuration with VM Network port group&lt;&#x2F;li&gt;
&lt;li&gt;Verify physical uplink (vmnic0) connectivity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;network-settings&quot;&gt;Network Settings&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;FQDN: vcsa.zerotohero.dev&lt;&#x2F;li&gt;
&lt;li&gt;IP Address: 192.168.1.111&lt;&#x2F;li&gt;
&lt;li&gt;Subnet Mask: 255.255.255.0&lt;&#x2F;li&gt;
&lt;li&gt;Gateway: 192.168.1.1&lt;&#x2F;li&gt;
&lt;li&gt;DNS Server: 192.168.1.100&lt;&#x2F;li&gt;
&lt;li&gt;Default Ports:
&lt;ul&gt;
&lt;li&gt;HTTP: 80&lt;&#x2F;li&gt;
&lt;li&gt;HTTPS: 443&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;important-notes&quot;&gt;Important Notes&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;dns-configuration&quot;&gt;DNS Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Proper DNS setup is critical for vCSA deployment&lt;&#x2F;li&gt;
&lt;li&gt;Both forward and reverse DNS resolution must work correctly&lt;&#x2F;li&gt;
&lt;li&gt;DNS issues are a common source of deployment problems&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;network-connectivity&quot;&gt;Network Connectivity&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;vCSA requires reliable network connectivity&lt;&#x2F;li&gt;
&lt;li&gt;Management network access is essential&lt;&#x2F;li&gt;
&lt;li&gt;Verify all network settings before proceeding&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;time-synchronization&quot;&gt;Time Synchronization&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Accurate time settings are crucial&lt;&#x2F;li&gt;
&lt;li&gt;NTP configuration follows in Stage 2&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h2&gt;
&lt;p&gt;After Stage 1 completes (approximately 3-8 minutes):&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Verify VM deployment on ESXi host&lt;&#x2F;li&gt;
&lt;li&gt;Proceed to Stage 2 configuration&lt;&#x2F;li&gt;
&lt;li&gt;Configure SSO domain&lt;&#x2F;li&gt;
&lt;li&gt;Set up initial vSphere environment&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Remember: This is just Stage 1 of the deployment. Stage 2 will handle the configuration of the appliance, including SSO setup, time synchronization, and initial vSphere environment configuration.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Designing a Multi-Tenant Secret Store for Kubernetes</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/multi-tenant-secrets-store/"/>
        <id>https://zerotohero.dev/inbox/multi-tenant-secrets-store/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/multi-tenant-secrets-store/">&lt;p&gt;Managing secrets in a Kubernetes environment can be challenging, especially when dealing with multiple tenants, clusters, and different types of secrets. In this post, we’ll explore how to design a flexible and secure secret store that can handle various secret types while integrating with existing tools like External Secrets Operator (ESO).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;&#x2F;h2&gt;
&lt;p&gt;When building a secret management system, we often need to handle different types of secrets:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Workload Secrets&lt;&#x2F;strong&gt;: Tied to specific workloads and verified using SPIFFE IDs&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes Secrets&lt;&#x2F;strong&gt;: Traditional Kubernetes secrets that get created as &lt;code&gt;kind: Secret&lt;&#x2F;code&gt; resources&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Raw Secrets&lt;&#x2F;strong&gt;: Generic secrets that don’t fit into the above categories and might be managed by special operators&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Each of these secret types has its own requirements and lifecycle, making it crucial to design a storage system that can handle them all efficiently.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution-a-hierarchical-json-structure&quot;&gt;The Solution: A Hierarchical JSON Structure&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s look at a JSON schema that can accommodate all these requirements:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;tenants&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&amp;lt;tenant-name&amp;gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;clusters&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&amp;lt;cluster-name&amp;gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;namespaces&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&amp;lt;namespace-name&amp;gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;              &amp;quot;secrets&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&amp;lt;secret-name&amp;gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;                  &amp;quot;type&amp;quot;: &amp;quot;workload | kubernetes | raw&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                  &amp;quot;value&amp;quot;: &amp;quot;&amp;lt;secret-value&amp;gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                  &amp;quot;metadata&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;quot;labels&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;                      &amp;quot;&amp;lt;label-key&amp;gt;&amp;quot;: &amp;quot;&amp;lt;label-value&amp;gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;quot;annotations&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;                      &amp;quot;&amp;lt;annotation-key&amp;gt;&amp;quot;: &amp;quot;&amp;lt;annotation-value&amp;gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;quot;creationTimestamp&amp;quot;: &amp;quot;&amp;lt;ISO8601-timestamp&amp;gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;quot;lastUpdated&amp;quot;: &amp;quot;&amp;lt;ISO8601-timestamp&amp;gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                  },
&lt;&#x2F;span&gt;&lt;span&gt;                  &amp;quot;spiffeId&amp;quot;: &amp;quot;&amp;lt;spiffe-id&amp;gt;&amp;quot;,  &#x2F;&#x2F; Only for workload type
&lt;&#x2F;span&gt;&lt;span&gt;                  &amp;quot;expirationDate&amp;quot;: &amp;quot;&amp;lt;ISO8601-timestamp&amp;gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                  &amp;quot;notBefore&amp;quot;: &amp;quot;&amp;lt;ISO8601-timestamp&amp;gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;              }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;          },
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;quot;global_secrets&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&amp;lt;secret-name&amp;gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;              &#x2F;&#x2F; Same structure as namespace-level secrets
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This structure provides several key benefits:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Multi-tenant Support&lt;&#x2F;strong&gt;: Each tenant gets its own isolated space in the store&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Hierarchical Organization&lt;&#x2F;strong&gt;: Clear separation between clusters, namespaces, and global secrets&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Type-based Classification&lt;&#x2F;strong&gt;: Each secret explicitly declares its type&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Rich Metadata&lt;&#x2F;strong&gt;: Support for labels, annotations, and time-based validity&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;implementing-the-store&quot;&gt;Implementing the Store&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s how we can implement this secret store in practice:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-storing-secrets&quot;&gt;1. Storing Secrets&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;store_secret&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tenant&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cluster&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret_name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret_data&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: secret_data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;value&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: secret_data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;value&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;metadata&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;labels&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret_data.get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;labels&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, {})&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;annotations&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret_data.get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;annotations&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, {})&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;creationTimestamp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;datetime.utcnow().isoformat()&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;lastUpdated&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;datetime.utcnow().isoformat()
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;expirationDate&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret_data.get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;expirationDate&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;notBefore&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret_data.get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;notBefore&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Add SPIFFE ID for workload secrets
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;secret[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;workload&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spiffeId&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;not in &lt;&#x2F;span&gt;&lt;span&gt;secret_data:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;ValueError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;SPIFFE ID required for workload secrets&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        secret[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spiffeId&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;secret_data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spiffeId&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Store in your key-value store
&lt;&#x2F;span&gt;&lt;span&gt;    key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tenant&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cluster&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret_name&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;store.set(key, json.dumps(secret))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-retrieving-secrets&quot;&gt;2. Retrieving Secrets&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;get_secret&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tenant&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cluster&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret_name&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tenant&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cluster&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret_name&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    secret_json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;store.get(key)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span&gt;secret_json:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;    secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json.loads(secret_json)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Verify time-based validity
&lt;&#x2F;span&gt;&lt;span&gt;    now &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;datetime.utcnow().isoformat()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret.get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;notBefore&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;now &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;secret[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;notBefore&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;ValueError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Secret not yet valid&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret.get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;expirationDate&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;now &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;secret[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;expirationDate&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;ValueError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Secret has expired&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;secret
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;integration-with-external-tools&quot;&gt;Integration with External Tools&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;external-secrets-operator-eso&quot;&gt;External Secrets Operator (ESO)&lt;&#x2F;h3&gt;
&lt;p&gt;To integrate with ESO, we can create a webhook that serves our secrets:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;external-secrets.io&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;SecretStore
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;custom-webhook-store
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;webhook&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;secret-store.example.com&#x2F;secrets&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;GET
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;jsonPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$.value&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;X-Tenant&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;{{ .remoteRef.tenant }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;X-Cluster&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;{{ .remoteRef.cluster }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;X-Namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;{{ .remoteRef.namespace }}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;vsecm-integration&quot;&gt;VSecM Integration&lt;&#x2F;h3&gt;
&lt;p&gt;VSecM can use the &lt;code&gt;type&lt;&#x2F;code&gt; field to determine how to handle each secret:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;handle_secret&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;secret[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;workload&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Verify SPIFFE ID before returning
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;verify_spiffe_id(secret[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spiffeId&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;secret[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;kubernetes&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Create Kubernetes Secret resource
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;create_k8s_secret(secret)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;secret[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;raw&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Pass to appropriate operator
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;handle_raw_secret(secret)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;benefits-of-this-design&quot;&gt;Benefits of This Design&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Type Safety&lt;&#x2F;strong&gt;: Explicit typing prevents confusion about how to handle different secrets&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Flexibility&lt;&#x2F;strong&gt;: Easy to add new secret types or metadata fields&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Integration-Ready&lt;&#x2F;strong&gt;: Works well with existing tools like ESO and VSecM&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Scalability&lt;&#x2F;strong&gt;: Hierarchical structure supports multi-tenant, multi-cluster environments&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Auditability&lt;&#x2F;strong&gt;: Built-in support for timestamps and metadata&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;By designing our secret store with clear type distinctions and a hierarchical structure, we’ve created a flexible system that can handle various secret types while maintaining compatibility with existing tools. The explicit typing system makes it easy for tools like VSecM to handle secrets appropriately, while the rich metadata support enables advanced features like time-based validity and auditing.&lt;&#x2F;p&gt;
&lt;p&gt;Whether you’re managing workload secrets, Kubernetes secrets, or special operator-managed secrets, this design provides a solid foundation for your secret management needs.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;Do you have thoughts on this secret store design? How would you extend it for your use case? Share your ideas in the comments below!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding the OSI Model: A Practical Guide to Network Communication</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/osi-model/"/>
        <id>https://zerotohero.dev/inbox/osi-model/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/osi-model/">&lt;p&gt;Every day, millions of people access resources on the public internet without giving it a second thought. But have you ever wondered what actually happens when you type a website address into your browser? Behind that simple action lies a complex series of processes that make network communication possible. Let’s break it down using one of the most fundamental frameworks in networking: the OSI Model.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-real-world-example&quot;&gt;A Real-World Example&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s start with something familiar. Imagine you’re sitting at your computer and want to visit &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&quot;&gt;https:&#x2F;&#x2F;zerotohero.dev&lt;&#x2F;a&gt;. You open your browser, type in the address, press enter, and within seconds, you’re there. Simple, right? Not quite. Behind this seemingly straightforward action, multiple components work together to make this connection possible.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introduction-to-the-osi-model&quot;&gt;Introduction to the OSI Model&lt;&#x2F;h2&gt;
&lt;p&gt;The Open System Interconnect (OSI) Model is a logical framework that helps us understand the components involved in network communication. While it’s not a literal representation of how modern networks operate, it serves as an excellent educational tool for understanding the various layers of network communication.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-seven-layers-of-the-osi-model&quot;&gt;The Seven Layers of the OSI Model&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;layer-7-application-layer&quot;&gt;Layer 7: Application Layer&lt;&#x2F;h3&gt;
&lt;p&gt;This is where the user interaction happens. Think of it as the layer responsible for providing services and applications that users directly interact with, such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Web browsing&lt;&#x2F;li&gt;
&lt;li&gt;File transfer&lt;&#x2F;li&gt;
&lt;li&gt;Printing services&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;layer-6-presentation-layer&quot;&gt;Layer 6: Presentation Layer&lt;&#x2F;h3&gt;
&lt;p&gt;This layer handles how data is encoded, compressed, and potentially encrypted. It’s particularly important because different operating systems might represent data differently, and this layer ensures compatibility.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;layer-5-session-layer&quot;&gt;Layer 5: Session Layer&lt;&#x2F;h3&gt;
&lt;p&gt;Imagine having multiple browser tabs open – one to ZeroToHero.dev, another to YouTube, and a third to Palo Alto Networks. The session layer manages these different communication sessions, keeping them organized and separate.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;layer-4-transport-layer&quot;&gt;Layer 4: Transport Layer&lt;&#x2F;h3&gt;
&lt;p&gt;This is where we start getting into the nitty-gritty of data delivery. The transport layer uses different protocols that either:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Care about reliability (like TCP) – ensuring data arrives completely and in order&lt;&#x2F;li&gt;
&lt;li&gt;Don’t care about reliability (like UDP) – just sending data without guarantees&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;layer-3-network-layer&quot;&gt;Layer 3: Network Layer&lt;&#x2F;h3&gt;
&lt;p&gt;Think of this as the addressing layer. Just like how houses have street addresses, computers need network addresses (IP addresses) to find each other on the network. This layer handles the routing of data to its correct destination.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;layer-2-data-link-layer&quot;&gt;Layer 2: Data Link Layer&lt;&#x2F;h3&gt;
&lt;p&gt;If Layer 3 is like the street address, Layer 2 is like the mailbox number. It handles local delivery of data and ensures it gets to the right “mailbox slot” on the local network. This layer also deals with different types of “envelopes” (frames) for different network types.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;layer-1-physical-layer&quot;&gt;Layer 1: Physical Layer&lt;&#x2F;h3&gt;
&lt;p&gt;This is where the rubber meets the road – or rather, where the data meets the wire. The physical layer handles the actual transmission of bits across the physical medium, whether that’s an ethernet cable, fiber optic line, or wireless signal.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-this-matters&quot;&gt;Why This Matters&lt;&#x2F;h2&gt;
&lt;p&gt;The beauty of this layered approach is its modularity. The application layer doesn’t need to know whether you’re connected via ethernet, Wi-Fi, or any other technology. Each layer handles its specific responsibilities, making networks more flexible and easier to troubleshoot.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;memorization-tips&quot;&gt;Memorization Tips&lt;&#x2F;h2&gt;
&lt;p&gt;Need help remembering the layers? Here are two popular mnemonics:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Bottom to top: “Please Do Not Throw Sausage Pizza Away” (Physical, Data Link, Network, Transport, Session, Presentation, Application)&lt;&#x2F;li&gt;
&lt;li&gt;Top to bottom: “All People Seem To Need Data Processing” (Application, Presentation, Session, Transport, Network, Data Link, Physical)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-real-world&quot;&gt;The Real World&lt;&#x2F;h2&gt;
&lt;p&gt;While the OSI Model is primarily theoretical, its principles are reflected in the TCP&#x2F;IP protocol suite that powers today’s internet. Understanding these layers helps network professionals troubleshoot issues and design better networks.&lt;&#x2F;p&gt;
&lt;p&gt;Whether you’re a network engineer or just curious about how the internet works, understanding the OSI Model provides valuable insight into the complex world of network communication. Next time you visit a website, you’ll have a better appreciation for all the layers working together to make that connection possible.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>SDDC Manager in VMware Cloud Foundation: A Comprehensive Guide</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/sddc-manager-in-vcf/"/>
        <id>https://zerotohero.dev/inbox/sddc-manager-in-vcf/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/sddc-manager-in-vcf/">&lt;p&gt;The Software-Defined Data Center (SDDC) Manager is the central management component of VMware Cloud Foundation (VCF). This guide explores its capabilities, deployment, and essential configuration steps.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-sddc-manager&quot;&gt;What is SDDC Manager?&lt;&#x2F;h2&gt;
&lt;p&gt;SDDC Manager is deployed as a virtual appliance that runs in the management domain with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;4 CPUs&lt;&#x2F;li&gt;
&lt;li&gt;16GB of memory&lt;&#x2F;li&gt;
&lt;li&gt;High availability through vSphere HA&lt;&#x2F;li&gt;
&lt;li&gt;File-based backup protection&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;core-administrative-capabilities&quot;&gt;Core Administrative Capabilities&lt;&#x2F;h2&gt;
&lt;p&gt;SDDC Manager centralizes several critical administrative tasks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Host management and addition&lt;&#x2F;li&gt;
&lt;li&gt;Workload domain creation and management&lt;&#x2F;li&gt;
&lt;li&gt;vSphere cluster deployment and resizing&lt;&#x2F;li&gt;
&lt;li&gt;Software update tracking and application&lt;&#x2F;li&gt;
&lt;li&gt;Password and certificate management&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The interface provides a holistic view of both physical and virtual infrastructure components across your private cloud environment.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;initial-deployment&quot;&gt;Initial Deployment&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Cloud Builder OVA&lt;&#x2F;li&gt;
&lt;li&gt;Deployment parameter workbook&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The SDDC Manager is deployed automatically during the Cloud Builder bring-up process, which includes the full software stack (vSphere, vSAN, NSX).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;essential-configuration-tasks&quot;&gt;Essential Configuration Tasks&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-backup-configuration&quot;&gt;1. Backup Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Configure external SFTP server for backups&lt;&#x2F;li&gt;
&lt;li&gt;Stores both SDDC Manager and NSX Manager backups&lt;&#x2F;li&gt;
&lt;li&gt;Password-protected backup files&lt;&#x2F;li&gt;
&lt;li&gt;Options for immediate or scheduled backups&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-ssh-access-setup&quot;&gt;2. SSH Access Setup&lt;&#x2F;h3&gt;
&lt;p&gt;SSH access is required for several critical operations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Password retrieval using &lt;code&gt;lookuppasswords&lt;&#x2F;code&gt; command&lt;&#x2F;li&gt;
&lt;li&gt;Log file access and management&lt;&#x2F;li&gt;
&lt;li&gt;Troubleshooting tasks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-network-pool-configuration&quot;&gt;3. Network Pool Configuration&lt;&#x2F;h3&gt;
&lt;p&gt;Network pools manage IP addresses for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;vMotion interfaces&lt;&#x2F;li&gt;
&lt;li&gt;vSAN vmKernel interfaces&lt;&#x2F;li&gt;
&lt;li&gt;ESXi host configuration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Key aspects:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Created during initial setup using parameter workbook values&lt;&#x2F;li&gt;
&lt;li&gt;Defines IP ranges for VM kernel interfaces&lt;&#x2F;li&gt;
&lt;li&gt;Supports multiple pools for different domains&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-online-depot-registration&quot;&gt;4. Online Depot Registration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Enables software update detection&lt;&#x2F;li&gt;
&lt;li&gt;Requires VMware Customer Connect credentials&lt;&#x2F;li&gt;
&lt;li&gt;Provides bundle download management&lt;&#x2F;li&gt;
&lt;li&gt;Allows scheduled or immediate downloads&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;log-management&quot;&gt;Log Management&lt;&#x2F;h2&gt;
&lt;p&gt;SDDC Manager implements automatic log rotation with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Separate directories for different components
&lt;ul&gt;
&lt;li&gt;Domain Manager&lt;&#x2F;li&gt;
&lt;li&gt;Operations Manager&lt;&#x2F;li&gt;
&lt;li&gt;LCM (Lifecycle Management)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Compressed archives for older logs&lt;&#x2F;li&gt;
&lt;li&gt;Automated rotation system&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;password-management&quot;&gt;Password Management&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;lookuppasswords&lt;&#x2F;code&gt; command line tool provides access to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ESXi host credentials&lt;&#x2F;li&gt;
&lt;li&gt;vCenter Server passwords&lt;&#x2F;li&gt;
&lt;li&gt;NSX component credentials&lt;&#x2F;li&gt;
&lt;li&gt;ARIA suite passwords (when deployed)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Security note: SSO credentials required for password retrieval&lt;&#x2F;p&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Initial Setup&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Complete configuration immediately after deployment&lt;&#x2F;li&gt;
&lt;li&gt;Configure backup SFTP server early&lt;&#x2F;li&gt;
&lt;li&gt;Set up network pools before expanding&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Maintenance&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Regular backup scheduling&lt;&#x2F;li&gt;
&lt;li&gt;Monitor log rotation&lt;&#x2F;li&gt;
&lt;li&gt;Keep Online Depot registration current&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Restrict SSH access&lt;&#x2F;li&gt;
&lt;li&gt;Secure SFTP server configuration&lt;&#x2F;li&gt;
&lt;li&gt;Regular password rotation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;availability-considerations&quot;&gt;Availability Considerations&lt;&#x2F;h2&gt;
&lt;p&gt;SDDC Manager’s availability is ensured through:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;vSphere HA protection&lt;&#x2F;li&gt;
&lt;li&gt;Regular automated backups&lt;&#x2F;li&gt;
&lt;li&gt;Redundant storage options&lt;&#x2F;li&gt;
&lt;li&gt;Automated recovery procedures&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;SDDC Manager serves as the operational hub of your VMware Cloud Foundation environment. By properly configuring and maintaining this critical component, organizations can ensure efficient management of their software-defined infrastructure while maintaining security and reliability.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to regularly check the VMware Cloud Foundation Resource Center for updates and best practices in managing your SDDC Manager deployment.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How to Export Kubernetes Secrets as JSON: A Complete Guide</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/secret-export/"/>
        <id>https://zerotohero.dev/inbox/secret-export/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/secret-export/">&lt;p&gt;When working with Kubernetes secrets, you may need to export them in a format that can be version controlled or transferred between clusters. This guide will show you how to export Kubernetes secrets as JSON while preserving important metadata like labels and annotations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-basic-approach&quot;&gt;The Basic Approach&lt;&#x2F;h2&gt;
&lt;p&gt;The fundamental command to export a secret in JSON format is straightforward:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kubectl get secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret-name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-o json
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, this raw output includes cluster-specific information that you typically don’t want to include when exporting secrets for reuse. Let’s look at how to clean this up.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cleaning-up-cluster-specific-information&quot;&gt;Cleaning Up Cluster-Specific Information&lt;&#x2F;h2&gt;
&lt;p&gt;To create a clean export that removes cluster-specific metadata, we can use &lt;code&gt;jq&lt;&#x2F;code&gt; to process the JSON output. Here’s the recommended approach:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kubectl get secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret-name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-o json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;del(.metadata.creationTimestamp,.metadata.resourceVersion,.metadata.selfLink,.metadata.uid,.metadata.namespace,.metadata.ownerReferences)&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This command removes the following fields:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;creationTimestamp&lt;&#x2F;code&gt;: When the secret was created in the source cluster&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;resourceVersion&lt;&#x2F;code&gt;: The internal version number used by Kubernetes&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;selfLink&lt;&#x2F;code&gt;: The API URL for this resource&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;uid&lt;&#x2F;code&gt;: The unique identifier in the source cluster&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;namespace&lt;&#x2F;code&gt;: The namespace in the source cluster&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ownerReferences&lt;&#x2F;code&gt;: References to parent resources&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;working-with-multiple-secrets&quot;&gt;Working with Multiple Secrets&lt;&#x2F;h2&gt;
&lt;p&gt;If you need to export all secrets from a namespace, you can modify the command slightly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kubectl get secrets -o json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;.items[] | del(.metadata.creationTimestamp,.metadata.resourceVersion,.metadata.selfLink,.metadata.uid,.metadata.namespace,.metadata.ownerReferences)&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;example-output&quot;&gt;Example Output&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s what a cleaned export might look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;apiVersion&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;v1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;kind&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Secret&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;metadata&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;labels&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;app&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;myapp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;environment&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;production&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;annotations&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;kubernetes.io&#x2F;description&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Application credentials&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;mysecret&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Opaque&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;username&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;YWRtaW4=&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;password&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;MWYyZDFlMmU2N2Rm&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;p&gt;When working with exported secrets, keep these tips in mind:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Always verify the exported secret contains all necessary metadata (labels and annotations) before using it in a new environment&lt;&#x2F;li&gt;
&lt;li&gt;Consider using tools like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;sops&quot;&gt;SOPS&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitnami-labs&#x2F;sealed-secrets&quot;&gt;sealed-secrets&lt;&#x2F;a&gt; for encrypting secrets before storing them in version control&lt;&#x2F;li&gt;
&lt;li&gt;Document any environment-specific values that might need to be modified when importing the secret into a new cluster&lt;&#x2F;li&gt;
&lt;li&gt;Use meaningful labels and annotations to make secrets self-documenting&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Exporting Kubernetes secrets as JSON is a common task in cluster management and application deployment. By following this guide, you can ensure your exported secrets are clean, portable, and ready for use in other environments while maintaining important metadata like labels and annotations.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding VMware vCenter Server Appliance (vCSA): The Central Management Solution</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/understanding-vcsa/"/>
        <id>https://zerotohero.dev/inbox/understanding-vcsa/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/understanding-vcsa/">&lt;p&gt;Managing multiple ESXi hosts individually can quickly become overwhelming as your infrastructure grows. This is where VMware’s vCenter Server Appliance (vCSA) comes into play, offering a centralized management solution that streamlines your virtual infrastructure operations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-vcenter-server-appliance&quot;&gt;What is vCenter Server Appliance?&lt;&#x2F;h2&gt;
&lt;p&gt;vCSA serves as a central management platform for your ESXi hosts. Instead of managing each host individually, administrators can use vCSA as a single pane of glass to oversee and control their entire VMware infrastructure. This approach significantly reduces management overhead and improves operational efficiency.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;key-components-and-interfaces&quot;&gt;Key Components and Interfaces&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;vsphere-client&quot;&gt;vSphere Client&lt;&#x2F;h3&gt;
&lt;p&gt;The primary way to interact with vCSA is through the vSphere Client. This web-based interface allows administrators to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Connect to the vCenter server using standard HTTPS (port 443)&lt;&#x2F;li&gt;
&lt;li&gt;Manage all connected ESXi hosts&lt;&#x2F;li&gt;
&lt;li&gt;Configure virtual machines and infrastructure settings&lt;&#x2F;li&gt;
&lt;li&gt;Monitor resource usage and performance&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;vami-vmware-appliance-management-interface&quot;&gt;VAMI (VMware Appliance Management Interface)&lt;&#x2F;h3&gt;
&lt;p&gt;VAMI, accessible through port 5480, provides a secondary interface specifically for managing the vCSA itself. Through VAMI, administrators can:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Perform system updates&lt;&#x2F;li&gt;
&lt;li&gt;Configure networking settings&lt;&#x2F;li&gt;
&lt;li&gt;Manage appliance-specific configurations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;deployment-prerequisites&quot;&gt;Deployment Prerequisites&lt;&#x2F;h2&gt;
&lt;p&gt;Before deploying vCSA, you’ll need:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;At least one ESXi host with sufficient resources to run the vCSA virtual machine&lt;&#x2F;li&gt;
&lt;li&gt;A management PC (Windows, Linux, or Mac) to run the vCSA installer&lt;&#x2F;li&gt;
&lt;li&gt;Network connectivity between all components&lt;&#x2F;li&gt;
&lt;li&gt;Proper DNS and Active Directory configuration (if using AD integration)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;deployment-process&quot;&gt;Deployment Process&lt;&#x2F;h2&gt;
&lt;p&gt;The vCSA deployment occurs in two distinct phases:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;phase-1-initial-installation&quot;&gt;Phase 1: Initial Installation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Deploy the virtual machine&lt;&#x2F;li&gt;
&lt;li&gt;Configure basic system settings&lt;&#x2F;li&gt;
&lt;li&gt;Initialize core services&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;phase-2-configuration&quot;&gt;Phase 2: Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Configure the appliance settings&lt;&#x2F;li&gt;
&lt;li&gt;Set up authentication&lt;&#x2F;li&gt;
&lt;li&gt;Configure networking options&lt;&#x2F;li&gt;
&lt;li&gt;Establish service configurations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;post-deployment-setup&quot;&gt;Post-Deployment Setup&lt;&#x2F;h2&gt;
&lt;p&gt;After successful deployment, administrators should:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Create at least one datacenter object to organize resources&lt;&#x2F;li&gt;
&lt;li&gt;Set up one or more clusters to enable advanced features&lt;&#x2F;li&gt;
&lt;li&gt;Add ESXi hosts to the vCenter server&lt;&#x2F;li&gt;
&lt;li&gt;Configure any additional features like vSAN or vMotion&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;benefits-of-centralized-management&quot;&gt;Benefits of Centralized Management&lt;&#x2F;h2&gt;
&lt;p&gt;Using vCSA offers several advantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Simplified management of multiple hosts through a single interface&lt;&#x2F;li&gt;
&lt;li&gt;Consistent configuration across all managed hosts&lt;&#x2F;li&gt;
&lt;li&gt;Enhanced monitoring and reporting capabilities&lt;&#x2F;li&gt;
&lt;li&gt;Ability to enable advanced features like vMotion and HA&lt;&#x2F;li&gt;
&lt;li&gt;Streamlined updates and maintenance procedures&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While individual host access remains possible through the ESXi host client, managing through vCenter provides a more efficient and feature-rich experience, especially in larger environments.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;vCenter Server Appliance is a crucial component in any scalable VMware infrastructure. By providing centralized management capabilities, it enables administrators to efficiently manage their virtual infrastructure while unlocking advanced features that aren’t available when managing hosts individually. Whether you’re managing a handful of hosts or hundreds, vCSA brings the control and visibility needed for effective infrastructure management.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>VMware vCenter Server: Complete Guide to Backup Configuration and License Management</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/vcenter-backup/"/>
        <id>https://zerotohero.dev/inbox/vcenter-backup/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/vcenter-backup/">&lt;p&gt;This guide covers two essential administrative tasks for vCenter Server: configuring backups and managing licenses. Proper backup configuration ensures business continuity, while correct license management keeps your environment compliant.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;backup-configuration-using-vami&quot;&gt;Backup Configuration Using VAMI&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;accessing-vami&quot;&gt;Accessing VAMI&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;URL: &lt;code&gt;https:&#x2F;&#x2F;vcsa.zerotohero.dev:5480&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Login credentials:
&lt;ul&gt;
&lt;li&gt;Username: root&lt;&#x2F;li&gt;
&lt;li&gt;Password: (vCSA root password)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;backup-options&quot;&gt;Backup Options&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;1-manual-backup&quot;&gt;1. Manual Backup&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to Backup section in VAMI&lt;&#x2F;li&gt;
&lt;li&gt;Supported protocols:
&lt;ul&gt;
&lt;li&gt;FTPS&lt;&#x2F;li&gt;
&lt;li&gt;HTTPS&lt;&#x2F;li&gt;
&lt;li&gt;SMB&lt;&#x2F;li&gt;
&lt;li&gt;Others&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;2-configuring-smb-backup&quot;&gt;2. Configuring SMB Backup&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;setting-up-smb-share-windows-server&quot;&gt;Setting up SMB Share (Windows Server)&lt;&#x2F;h5&gt;
&lt;ol&gt;
&lt;li&gt;Create backup directory&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;C:\VCSA_backups
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Configure sharing:
&lt;ul&gt;
&lt;li&gt;Right-click folder → Properties → Sharing&lt;&#x2F;li&gt;
&lt;li&gt;Set appropriate permissions&lt;&#x2F;li&gt;
&lt;li&gt;Note the share path&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h5 id=&quot;configuring-backup-in-vami&quot;&gt;Configuring Backup in VAMI&lt;&#x2F;h5&gt;
&lt;ol&gt;
&lt;li&gt;Select “Backup Now” for manual backup&lt;&#x2F;li&gt;
&lt;li&gt;Enter backup location:&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;smb:&#x2F;&#x2F;192.168.1.100&#x2F;VCSA_backups
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Provide credentials:
&lt;ul&gt;
&lt;li&gt;Username: administrator (use service account in production)&lt;&#x2F;li&gt;
&lt;li&gt;Password: (share access password)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Optional: Enable backup encryption&lt;&#x2F;li&gt;
&lt;li&gt;Click “Start”&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;3-scheduled-backups&quot;&gt;3. Scheduled Backups&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to “Backup Schedule”&lt;&#x2F;li&gt;
&lt;li&gt;Click “Configure”&lt;&#x2F;li&gt;
&lt;li&gt;Set parameters:
&lt;ul&gt;
&lt;li&gt;Backup location&lt;&#x2F;li&gt;
&lt;li&gt;Credentials&lt;&#x2F;li&gt;
&lt;li&gt;Schedule (daily&#x2F;weekly&#x2F;custom)&lt;&#x2F;li&gt;
&lt;li&gt;Retention policy (number of backups to keep)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;backup-verification&quot;&gt;Backup Verification&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Check backup destination&lt;&#x2F;li&gt;
&lt;li&gt;Verify backup files:&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;[share]&#x2F;vcenter&#x2F;[vcsa_fqdn]&#x2F;[timestamp]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;license-management-via-vsphere-client&quot;&gt;License Management via vSphere Client&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;accessing-license-management&quot;&gt;Accessing License Management&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Method 1:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Open vSphere Client menu&lt;&#x2F;li&gt;
&lt;li&gt;Select Administration → Licensing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Method 2:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Click hamburger menu&lt;&#x2F;li&gt;
&lt;li&gt;Navigate to Administration → Licenses&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;managing-licenses&quot;&gt;Managing Licenses&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;adding-new-licenses&quot;&gt;Adding New Licenses&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to “Licenses” tab&lt;&#x2F;li&gt;
&lt;li&gt;Click “Add”&lt;&#x2F;li&gt;
&lt;li&gt;Enter license keys&lt;&#x2F;li&gt;
&lt;li&gt;Verify license appears in inventory&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;assigning-licenses&quot;&gt;Assigning Licenses&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Go to “Assets” tab&lt;&#x2F;li&gt;
&lt;li&gt;Select asset type:
&lt;ul&gt;
&lt;li&gt;vCenter Server&lt;&#x2F;li&gt;
&lt;li&gt;ESXi hosts&lt;&#x2F;li&gt;
&lt;li&gt;vSAN clusters&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Select specific asset&lt;&#x2F;li&gt;
&lt;li&gt;Click “Assign License”&lt;&#x2F;li&gt;
&lt;li&gt;Choose appropriate license&lt;&#x2F;li&gt;
&lt;li&gt;Confirm assignment&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;license-management-best-practices&quot;&gt;License Management Best Practices&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Maintain license inventory&lt;&#x2F;li&gt;
&lt;li&gt;Monitor expiration dates&lt;&#x2F;li&gt;
&lt;li&gt;Document license assignments&lt;&#x2F;li&gt;
&lt;li&gt;Regular compliance checks&lt;&#x2F;li&gt;
&lt;li&gt;Keep spare licenses for growth&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;important-considerations&quot;&gt;Important Considerations&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;backup-best-practices&quot;&gt;Backup Best Practices&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Regular backup schedule&lt;&#x2F;li&gt;
&lt;li&gt;Verify backup integrity&lt;&#x2F;li&gt;
&lt;li&gt;Test restore procedures&lt;&#x2F;li&gt;
&lt;li&gt;Document backup configuration&lt;&#x2F;li&gt;
&lt;li&gt;Secure backup storage&lt;&#x2F;li&gt;
&lt;li&gt;Monitor backup success&#x2F;failure&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;license-management-tips&quot;&gt;License Management Tips&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Centralized license tracking&lt;&#x2F;li&gt;
&lt;li&gt;Regular compliance audits&lt;&#x2F;li&gt;
&lt;li&gt;Plan for capacity growth&lt;&#x2F;li&gt;
&lt;li&gt;Document license allocations&lt;&#x2F;li&gt;
&lt;li&gt;Monitor license usage&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;additional-features&quot;&gt;Additional Features&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;updates-management&quot;&gt;Updates Management&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Access via VAMI&lt;&#x2F;li&gt;
&lt;li&gt;Check for updates: Updates → Check Updates&lt;&#x2F;li&gt;
&lt;li&gt;Stage and install process&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Important&lt;&#x2F;strong&gt;: Always backup before updates&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;navigation-tips&quot;&gt;Navigation Tips&lt;&#x2F;h3&gt;
&lt;p&gt;vSphere Client icons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Hosts and Clusters: Server icon&lt;&#x2F;li&gt;
&lt;li&gt;VMs and Templates: Folder icon&lt;&#x2F;li&gt;
&lt;li&gt;Storage: Disk icon&lt;&#x2F;li&gt;
&lt;li&gt;Networking: Globe icon&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Remember: While this guide uses simplified examples suitable for a lab environment, production deployments should follow your organization’s security policies and use dedicated service accounts for backups and proper license management procedures.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Accessing and Configuring VMware vCenter: A Complete Guide to GUI Interfaces and Initial Setup</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/vcenter-gui-setup-guide/"/>
        <id>https://zerotohero.dev/inbox/vcenter-gui-setup-guide/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/vcenter-gui-setup-guide/">&lt;p&gt;After deploying vCenter Server Appliance (vCSA), you have two primary graphical interfaces for management. This guide walks through both interfaces and the initial environment setup process.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-vcenter-s-management-interfaces&quot;&gt;Understanding vCenter’s Management Interfaces&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-vsphere-client&quot;&gt;1. vSphere Client&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Access URL&lt;&#x2F;strong&gt;: &lt;code&gt;https:&#x2F;&#x2F;vcsa.zerotohero.dev&#x2F;ui&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Primary Purpose&lt;&#x2F;strong&gt;: Managing virtual infrastructure&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Main Functions&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;Creating and managing datacenters and clusters&lt;&#x2F;li&gt;
&lt;li&gt;Adding and configuring ESXi hosts&lt;&#x2F;li&gt;
&lt;li&gt;Managing virtual machines&lt;&#x2F;li&gt;
&lt;li&gt;Configuring advanced features&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-vami-vmware-appliance-management-interface&quot;&gt;2. VAMI (VMware Appliance Management Interface)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Access URL&lt;&#x2F;strong&gt;: &lt;code&gt;https:&#x2F;&#x2F;vcsa.zerotohero.dev:5480&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Primary Purpose&lt;&#x2F;strong&gt;: Managing the vCSA appliance itself&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Key Features&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;Monitoring appliance health&lt;&#x2F;li&gt;
&lt;li&gt;Configuring network settings&lt;&#x2F;li&gt;
&lt;li&gt;Managing time synchronization&lt;&#x2F;li&gt;
&lt;li&gt;Performing updates and backups&lt;&#x2F;li&gt;
&lt;li&gt;Modifying appliance-specific settings&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;initial-vami-configuration&quot;&gt;Initial VAMI Configuration&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-accessing-vami&quot;&gt;1. Accessing VAMI&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to &lt;code&gt;https:&#x2F;&#x2F;vcsa.zerotohero.dev:5480&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Login credentials:
&lt;ul&gt;
&lt;li&gt;Username: root&lt;&#x2F;li&gt;
&lt;li&gt;Password: (your vCSA root password)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-key-configuration-areas&quot;&gt;2. Key Configuration Areas&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Summary Page&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;View hostname and version information&lt;&#x2F;li&gt;
&lt;li&gt;Monitor system health&lt;&#x2F;li&gt;
&lt;li&gt;Check SSO domain status&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Network Settings&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Modify IP configuration&lt;&#x2F;li&gt;
&lt;li&gt;Update DNS settings&lt;&#x2F;li&gt;
&lt;li&gt;Configure network interfaces&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Time Synchronization&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Configure NTP settings&lt;&#x2F;li&gt;
&lt;li&gt;Set timezone&lt;&#x2F;li&gt;
&lt;li&gt;Verify time synchronization status&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Administration&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Manage password policies&lt;&#x2F;li&gt;
&lt;li&gt;Configure security settings&lt;&#x2F;li&gt;
&lt;li&gt;Set up backup schedules&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;setting-up-your-vsphere-environment&quot;&gt;Setting Up Your vSphere Environment&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-accessing-vsphere-client&quot;&gt;1. Accessing vSphere Client&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to &lt;code&gt;https:&#x2F;&#x2F;vcsa.zerotohero.dev&#x2F;ui&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Login with SSO credentials:
&lt;ul&gt;
&lt;li&gt;Format: administrator@yourdomain&lt;&#x2F;li&gt;
&lt;li&gt;Example: administrator@zerotohero.local&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-creating-the-infrastructure&quot;&gt;2. Creating the Infrastructure&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;primary-datacenter-dc-1&quot;&gt;Primary Datacenter (DC-1)&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Right-click vCenter in Hosts and Clusters view&lt;&#x2F;li&gt;
&lt;li&gt;Select “New Datacenter”&lt;&#x2F;li&gt;
&lt;li&gt;Name: DC-1&lt;&#x2F;li&gt;
&lt;li&gt;Create cluster within DC-1:
&lt;ul&gt;
&lt;li&gt;Name: cluster&lt;&#x2F;li&gt;
&lt;li&gt;Optional: Enable DRS&#x2F;HA features&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;adding-production-hosts&quot;&gt;Adding Production Hosts&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Right-click cluster&lt;&#x2F;li&gt;
&lt;li&gt;Select “Add Host”&lt;&#x2F;li&gt;
&lt;li&gt;Add ESXi hosts:
&lt;ul&gt;
&lt;li&gt;esxi1.zerotohero.dev&lt;&#x2F;li&gt;
&lt;li&gt;esxi2.zerotohero.dev&lt;&#x2F;li&gt;
&lt;li&gt;esxi3.zerotohero.dev&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Verify host details:
&lt;ul&gt;
&lt;li&gt;Network configuration&lt;&#x2F;li&gt;
&lt;li&gt;Storage configuration&lt;&#x2F;li&gt;
&lt;li&gt;Version compatibility&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;management-infrastructure&quot;&gt;Management Infrastructure&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Create Management Datacenter
&lt;ul&gt;
&lt;li&gt;Name: mgmt&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Add management host:
&lt;ul&gt;
&lt;li&gt;Add ESXi4 (vCSA host)&lt;&#x2F;li&gt;
&lt;li&gt;Verify vCSA VM appears under ESXi4&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use unique passwords in production&lt;&#x2F;li&gt;
&lt;li&gt;Enable lockdown mode when appropriate&lt;&#x2F;li&gt;
&lt;li&gt;Review certificate warnings&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Organization&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Separate management infrastructure from production&lt;&#x2F;li&gt;
&lt;li&gt;Use consistent naming conventions&lt;&#x2F;li&gt;
&lt;li&gt;Document infrastructure decisions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Backup&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Configure regular backups&lt;&#x2F;li&gt;
&lt;li&gt;Test restore procedures&lt;&#x2F;li&gt;
&lt;li&gt;Document backup configurations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h2&gt;
&lt;p&gt;After completing initial setup:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Configure licensing&lt;&#x2F;li&gt;
&lt;li&gt;Set up backup schedules&lt;&#x2F;li&gt;
&lt;li&gt;Configure advanced features (DRS, HA)&lt;&#x2F;li&gt;
&lt;li&gt;Implement security policies&lt;&#x2F;li&gt;
&lt;li&gt;Document environment configuration&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Remember: While this guide uses simplified names and settings suitable for a lab environment, production deployments should follow your organization’s naming conventions and security policies.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Software Bundle Management in VMware Cloud Foundation: A Complete Guide</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/vcf-bundle/"/>
        <id>https://zerotohero.dev/inbox/vcf-bundle/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/vcf-bundle/">&lt;p&gt;For VMware Cloud Foundation (VCF) administrators, understanding software bundle management is crucial for maintaining a healthy infrastructure. This guide explores the essentials of managing software bundles in VCF environments.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-software-bundles&quot;&gt;Understanding Software Bundles&lt;&#x2F;h2&gt;
&lt;p&gt;Software bundles are the foundation of VCF lifecycle management, coming in two primary types:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;patch-upgrade-bundles&quot;&gt;Patch&#x2F;Upgrade Bundles&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Used for existing infrastructure components&lt;&#x2F;li&gt;
&lt;li&gt;Covers vCenter Server, NSX, and ESXi&lt;&#x2F;li&gt;
&lt;li&gt;Applied to currently managed VCF components&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;install-bundles&quot;&gt;Install Bundles&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Used for new workload domain deployments&lt;&#x2F;li&gt;
&lt;li&gt;Contains fresh installations of required components&lt;&#x2F;li&gt;
&lt;li&gt;Essential for infrastructure expansion&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bundle-management-methods&quot;&gt;Bundle Management Methods&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;online-deployment&quot;&gt;Online Deployment&lt;&#x2F;h3&gt;
&lt;p&gt;For environments with internet access:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Configure Online Depot in SDDC Manager&lt;&#x2F;li&gt;
&lt;li&gt;Provide VMware Customer Connect credentials&lt;&#x2F;li&gt;
&lt;li&gt;Access bundles directly through the interface&lt;&#x2F;li&gt;
&lt;li&gt;View available bundles and types in Bundle Management section&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;offline-deployment&quot;&gt;Offline Deployment&lt;&#x2F;h3&gt;
&lt;p&gt;For air-gapped environments:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Use the offline bundle transfer utility from Customer Connect&lt;&#x2F;li&gt;
&lt;li&gt;Download bundles on an internet-connected system&lt;&#x2F;li&gt;
&lt;li&gt;Transfer to SDDC Manager&lt;&#x2F;li&gt;
&lt;li&gt;Import bundles into the depot&lt;&#x2F;li&gt;
&lt;li&gt;Validate bundles before use&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;download-management&quot;&gt;Download Management&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;flexible-scheduling-options&quot;&gt;Flexible Scheduling Options&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Schedule downloads during off-peak hours&lt;&#x2F;li&gt;
&lt;li&gt;Initiate immediate downloads when needed&lt;&#x2F;li&gt;
&lt;li&gt;Track progress in Download History tab&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;size-considerations&quot;&gt;Size Considerations&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Bundles can be several gigabytes&lt;&#x2F;li&gt;
&lt;li&gt;Plan bandwidth usage accordingly&lt;&#x2F;li&gt;
&lt;li&gt;Consider storage requirements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;automation-capabilities&quot;&gt;Automation Capabilities&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;api-integration&quot;&gt;API Integration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Manage bundles via API calls&lt;&#x2F;li&gt;
&lt;li&gt;Enable infrastructure as code (IaC) workflows&lt;&#x2F;li&gt;
&lt;li&gt;Support for scale operations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;powercli-support&quot;&gt;PowerCLI Support&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Use PowerCLI Bundle Management Tool (KB Article 94760)&lt;&#x2F;li&gt;
&lt;li&gt;Automate routine bundle operations&lt;&#x2F;li&gt;
&lt;li&gt;Integrate with existing automation frameworks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;release-management&quot;&gt;Release Management&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;version-control&quot;&gt;Version Control&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Access BOM (Bill of Materials) for each VCF release&lt;&#x2F;li&gt;
&lt;li&gt;View release notes and documentation&lt;&#x2F;li&gt;
&lt;li&gt;Track compatibility requirements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;update-notifications&quot;&gt;Update Notifications&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Banner notifications for new bundles&lt;&#x2F;li&gt;
&lt;li&gt;Easy access to bundle details&lt;&#x2F;li&gt;
&lt;li&gt;Streamlined update process&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Preparation&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Download bundles before starting upgrades&lt;&#x2F;li&gt;
&lt;li&gt;Verify storage capacity&lt;&#x2F;li&gt;
&lt;li&gt;Check network bandwidth availability&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Validation&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Always validate bundles after import&lt;&#x2F;li&gt;
&lt;li&gt;Verify bundle compatibility&lt;&#x2F;li&gt;
&lt;li&gt;Review release notes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Organization&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Maintain bundle inventory&lt;&#x2F;li&gt;
&lt;li&gt;Track download history&lt;&#x2F;li&gt;
&lt;li&gt;Document deployment patterns&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;workflow-integration&quot;&gt;Workflow Integration&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Updates&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Bundles available for immediate updates&lt;&#x2F;li&gt;
&lt;li&gt;Compatible with existing infrastructure&lt;&#x2F;li&gt;
&lt;li&gt;Automated validation checks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;New Deployments&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Ready for workload domain creation&lt;&#x2F;li&gt;
&lt;li&gt;Consistent deployment process&lt;&#x2F;li&gt;
&lt;li&gt;Validated configurations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Effective software bundle management is key to maintaining a healthy VCF environment. Whether working in connected or air-gapped environments, VCF provides flexible options for managing software bundles. The combination of automated tools, API support, and robust validation processes ensures administrators can maintain their infrastructure efficiently and securely.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to leverage available automation tools and follow best practices for bundle management to streamline operations and maintain consistency across your VCF deployment.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Essential DNS and NTP Prerequisites for VMware Cloud Foundation Deployment</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/vcf-dns-ntp/"/>
        <id>https://zerotohero.dev/inbox/vcf-dns-ntp/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/vcf-dns-ntp/">&lt;p&gt;When deploying VMware Cloud Foundation (VCF), proper setup of DNS and NTP services is crucial for success. These fundamental infrastructure components often seem simple, but they’re frequently the source of deployment issues and troubleshooting headaches. Here’s what you need to know before starting your VCF deployment.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-deployment-parameters-workbook&quot;&gt;The Deployment Parameters Workbook&lt;&#x2F;h2&gt;
&lt;p&gt;VCF provides a Deployment Parameters Workbook where you’ll need to specify:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DNS server information&lt;&#x2F;li&gt;
&lt;li&gt;NTP server details&lt;&#x2F;li&gt;
&lt;li&gt;IP addresses for:
&lt;ul&gt;
&lt;li&gt;vCenter Server&lt;&#x2F;li&gt;
&lt;li&gt;ESXi hosts&lt;&#x2F;li&gt;
&lt;li&gt;SDDC Manager&lt;&#x2F;li&gt;
&lt;li&gt;NSX Managers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dns-requirements&quot;&gt;DNS Requirements&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;forward-and-reverse-lookups&quot;&gt;Forward and Reverse Lookups&lt;&#x2F;h3&gt;
&lt;p&gt;One of the most common oversights in VCF deployment is incomplete DNS configuration. You must configure:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Forward lookup (A records)&lt;&#x2F;li&gt;
&lt;li&gt;Reverse lookup (PTR records)&lt;&#x2F;li&gt;
&lt;li&gt;All components must have both types of records&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dns-access&quot;&gt;DNS Access&lt;&#x2F;h3&gt;
&lt;p&gt;Beyond just having the records, ensure that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;All machines can access the DNS server&lt;&#x2F;li&gt;
&lt;li&gt;Firewall rules allow DNS traffic from the VCF subnet&lt;&#x2F;li&gt;
&lt;li&gt;DNS server configuration (like BIND) allows queries from the VCF subnet&lt;&#x2F;li&gt;
&lt;li&gt;There are no typos in DNS records&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;validation&quot;&gt;Validation&lt;&#x2F;h3&gt;
&lt;p&gt;VCF performs thorough DNS checks during deployment:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Validates forward lookups using fully qualified domain names&lt;&#x2F;li&gt;
&lt;li&gt;Checks reverse lookups for all IP addresses&lt;&#x2F;li&gt;
&lt;li&gt;Ensures DNS resolution works for all components&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ntp-configuration&quot;&gt;NTP Configuration&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;time-synchronization&quot;&gt;Time Synchronization&lt;&#x2F;h3&gt;
&lt;p&gt;Time synchronization is critical for VCF operations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;All components must be in sync&lt;&#x2F;li&gt;
&lt;li&gt;NTP servers must be up and accessible&lt;&#x2F;li&gt;
&lt;li&gt;ESXi hosts must be able to reach NTP servers&lt;&#x2F;li&gt;
&lt;li&gt;All management components must synchronize with the same time source&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;common-ntp-issues&quot;&gt;Common NTP Issues&lt;&#x2F;h3&gt;
&lt;p&gt;NTP problems can manifest in unexpected ways:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Random errors that seem unrelated to timing&lt;&#x2F;li&gt;
&lt;li&gt;Authentication failures&lt;&#x2F;li&gt;
&lt;li&gt;Certificate validation issues&lt;&#x2F;li&gt;
&lt;li&gt;Security service problems&lt;&#x2F;li&gt;
&lt;li&gt;Component communication failures&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ntp-access&quot;&gt;NTP Access&lt;&#x2F;h3&gt;
&lt;p&gt;Ensure that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;NTP ports are open in firewalls&lt;&#x2F;li&gt;
&lt;li&gt;Security policies allow NTP traffic&lt;&#x2F;li&gt;
&lt;li&gt;NTP server has sufficient capacity for all clients&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pre-deployment Checklist&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Verify all DNS records (forward and reverse) before starting&lt;&#x2F;li&gt;
&lt;li&gt;Test NTP synchronization on all networks&lt;&#x2F;li&gt;
&lt;li&gt;Confirm firewall rules for both DNS and NTP&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;IP Address Management&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use static IPs whenever possible&lt;&#x2F;li&gt;
&lt;li&gt;Document all IP assignments&lt;&#x2F;li&gt;
&lt;li&gt;Reserve IP ranges for VCF use&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Validation Steps&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Test DNS resolution from multiple points in the network&lt;&#x2F;li&gt;
&lt;li&gt;Verify NTP synchronization across all components&lt;&#x2F;li&gt;
&lt;li&gt;Document any subnet restrictions or security policies&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;common-pitfalls-to-avoid&quot;&gt;Common Pitfalls to Avoid&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Forgetting reverse DNS lookups&lt;&#x2F;li&gt;
&lt;li&gt;Overlooking subnet restrictions on DNS servers&lt;&#x2F;li&gt;
&lt;li&gt;Assuming NTP is working without verification&lt;&#x2F;li&gt;
&lt;li&gt;Not checking firewall rules for both DNS and NTP traffic&lt;&#x2F;li&gt;
&lt;li&gt;Typographical errors in DNS records&lt;&#x2F;li&gt;
&lt;li&gt;Incomplete DNS propagation before deployment&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;While DNS and NTP might seem like basic infrastructure components, they’re crucial for a successful VCF deployment. Taking the time to properly configure and verify these services before beginning your deployment can save hours of troubleshooting later. Remember: most VCF deployment issues can be traced back to these fundamental services, so get them right from the start.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>VMware Cloud Foundation: A Modern Cloud Operating Model for vSphere Admins</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/vcf-for-vsphere-admins/"/>
        <id>https://zerotohero.dev/inbox/vcf-for-vsphere-admins/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/vcf-for-vsphere-admins/">&lt;p&gt;As organizations continue to modernize their infrastructure, vSphere administrators are increasingly looking for ways to streamline operations and reduce maintenance overhead. VMware Cloud Foundation (VCF) offers a compelling solution by providing a modern, agile, and highly efficient cloud operating model that brings the convenience of public cloud operations to your on-premises datacenter.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-vmware-cloud-foundation&quot;&gt;What is VMware Cloud Foundation?&lt;&#x2F;h2&gt;
&lt;p&gt;At its core, VCF is an integrated software stack that enables you to deploy and manage software-defined compute, storage, networking, and cloud management across all your infrastructure. Whether you’re running workloads in private datacenters, public clouds, government clouds, or edge locations, VCF provides a consistent operational model.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;key-components&quot;&gt;Key Components&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;sddc-manager-the-automation-hub&quot;&gt;SDDC Manager: The Automation Hub&lt;&#x2F;h3&gt;
&lt;p&gt;The Software-Defined Data Center (SDDC) Manager serves as the cornerstone of VCF’s automation capabilities. It handles:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Day 0 through Day 2 operational tasks&lt;&#x2F;li&gt;
&lt;li&gt;Automated patching and upgrades&lt;&#x2F;li&gt;
&lt;li&gt;Lifecycle management of the entire software stack&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;vsphere-the-familiar-foundation&quot;&gt;vSphere: The Familiar Foundation&lt;&#x2F;h3&gt;
&lt;p&gt;As the core hypervisor platform, vSphere continues to be the building block that vSphere administrators know and trust. VCF allows you to leverage your existing skills while adding new capabilities to your infrastructure.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;vsan-software-defined-storage&quot;&gt;vSAN: Software-Defined Storage&lt;&#x2F;h3&gt;
&lt;p&gt;vSAN provides secure shared storage managed through software policies, offering:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Policy-based storage management&lt;&#x2F;li&gt;
&lt;li&gt;Flexible storage services&lt;&#x2F;li&gt;
&lt;li&gt;Integration with existing storage solutions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;nsx-network-virtualization-and-security&quot;&gt;NSX: Network Virtualization and Security&lt;&#x2F;h3&gt;
&lt;p&gt;NSX transforms traditional networking into software-defined infrastructure, providing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Software-defined network segments&lt;&#x2F;li&gt;
&lt;li&gt;Virtual routers and distributed switches&lt;&#x2F;li&gt;
&lt;li&gt;Load balancers and distributed firewalls&lt;&#x2F;li&gt;
&lt;li&gt;Migration capabilities without re-IPing VMs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;tanzu-kubernetes-integration&quot;&gt;Tanzu: Kubernetes Integration&lt;&#x2F;h3&gt;
&lt;p&gt;For organizations embracing containerization, VCF includes Tanzu support:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Native Kubernetes infrastructure provisioning&lt;&#x2F;li&gt;
&lt;li&gt;Automated deployment through SDDC Manager&lt;&#x2F;li&gt;
&lt;li&gt;Consistent developer experience across environments&lt;&#x2F;li&gt;
&lt;li&gt;Integration with familiar vSphere management tools&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;aria-comprehensive-cloud-management&quot;&gt;Aria: Comprehensive Cloud Management&lt;&#x2F;h3&gt;
&lt;p&gt;Aria rounds out the stack by providing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Capacity management&lt;&#x2F;li&gt;
&lt;li&gt;Performance monitoring and logging&lt;&#x2F;li&gt;
&lt;li&gt;Self-service application catalog&lt;&#x2F;li&gt;
&lt;li&gt;Automated application delivery&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-power-of-consistency&quot;&gt;The Power of Consistency&lt;&#x2F;h2&gt;
&lt;p&gt;VCF’s true value lies in its ability to deliver consistency across all environments. Through automation and standardization, organizations can:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Deploy infrastructure with predictable results&lt;&#x2F;li&gt;
&lt;li&gt;Scale resources consistently across sites&lt;&#x2F;li&gt;
&lt;li&gt;Maintain stability through automated lifecycle management&lt;&#x2F;li&gt;
&lt;li&gt;Reduce operational overhead and human error&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;real-world-impact&quot;&gt;Real-World Impact&lt;&#x2F;h2&gt;
&lt;p&gt;The benefits of VCF are not just theoretical. Organizations implementing VCF have reported significant operational improvements, including:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;75% reduction in P1 and P2 infrastructure outage calls&lt;&#x2F;li&gt;
&lt;li&gt;Ability to perform updates during business hours&lt;&#x2F;li&gt;
&lt;li&gt;Reduced after-hours maintenance requirements&lt;&#x2F;li&gt;
&lt;li&gt;Lower operational costs&lt;&#x2F;li&gt;
&lt;li&gt;Enhanced security posture&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;For vSphere administrators looking to modernize their infrastructure operations, VMware Cloud Foundation offers a path forward that combines familiar tools with modern automation capabilities. By bringing public cloud operational models to on-premises infrastructure, VCF enables IT teams to spend less time on maintenance and more time on innovation.&lt;&#x2F;p&gt;
&lt;p&gt;By leveraging VCF’s comprehensive automation and integrated stack, organizations can deliver cloud infrastructure with the reliability of traditional on-premises deployments and the agility of public cloud providers. This marks a significant evolution in how we manage infrastructure, making those dreaded 2 AM infrastructure outage pages increasingly rare.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Host Commissioning in VMware C`loud Foundation: A Complete Guide</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/vcf-host-comissioning/"/>
        <id>https://zerotohero.dev/inbox/vcf-host-comissioning/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/vcf-host-comissioning/">&lt;p&gt;In VMware Cloud Foundation (VCF), adding cloud capacity is accomplished through a process called host commissioning, where physical servers are added to the SDDC Manager inventory. This guide walks through the process and key considerations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-host-commissioning&quot;&gt;Understanding Host Commissioning&lt;&#x2F;h2&gt;
&lt;p&gt;Host commissioning creates a “free pool” of available capacity from added servers. This pool serves as the foundation for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Creating new workload domains&lt;&#x2F;li&gt;
&lt;li&gt;Expanding existing clusters&lt;&#x2F;li&gt;
&lt;li&gt;Managing overall cloud capacity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;network-pool-configuration&quot;&gt;Network Pool Configuration&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;default-configuration&quot;&gt;Default Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Management pool created during initial bringup&lt;&#x2F;li&gt;
&lt;li&gt;Serves as the baseline for management domain&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;creating-new-network-pools&quot;&gt;Creating New Network Pools&lt;&#x2F;h3&gt;
&lt;p&gt;Network pools can support multiple network types:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;vSAN&lt;&#x2F;li&gt;
&lt;li&gt;vMotion&lt;&#x2F;li&gt;
&lt;li&gt;iSCSI&lt;&#x2F;li&gt;
&lt;li&gt;NFS&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;network-pool-setup-process&quot;&gt;Network Pool Setup Process&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to Network Settings&lt;&#x2F;li&gt;
&lt;li&gt;Click “Create Network Pool”&lt;&#x2F;li&gt;
&lt;li&gt;Specify:
&lt;ul&gt;
&lt;li&gt;Pool name&lt;&#x2F;li&gt;
&lt;li&gt;Network types to support&lt;&#x2F;li&gt;
&lt;li&gt;VLAN details&lt;&#x2F;li&gt;
&lt;li&gt;MTU settings&lt;&#x2F;li&gt;
&lt;li&gt;IP subnet information&lt;&#x2F;li&gt;
&lt;li&gt;IP address ranges for SDDC manager&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;host-commissioning-process&quot;&gt;Host Commissioning Process&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;prerequisites-checklist&quot;&gt;Prerequisites Checklist&lt;&#x2F;h3&gt;
&lt;p&gt;Before commissioning hosts, verify:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ESXi installation completed&lt;&#x2F;li&gt;
&lt;li&gt;vSphere standard switch configured&lt;&#x2F;li&gt;
&lt;li&gt;Pre-existing disk partitions removed&lt;&#x2F;li&gt;
&lt;li&gt;DNS configuration completed&lt;&#x2F;li&gt;
&lt;li&gt;Network connectivity established&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;adding-hosts&quot;&gt;Adding Hosts&lt;&#x2F;h3&gt;
&lt;p&gt;Two methods are available:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;individual-host-addition&quot;&gt;Individual Host Addition&lt;&#x2F;h4&gt;
&lt;p&gt;Requires:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Fully qualified hostname&lt;&#x2F;li&gt;
&lt;li&gt;Principal storage type&lt;&#x2F;li&gt;
&lt;li&gt;Network pool assignment&lt;&#x2F;li&gt;
&lt;li&gt;Root user credentials&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;bulk-host-import&quot;&gt;Bulk Host Import&lt;&#x2F;h4&gt;
&lt;p&gt;For multiple hosts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Uses JSON file format&lt;&#x2F;li&gt;
&lt;li&gt;Includes same information as individual addition&lt;&#x2F;li&gt;
&lt;li&gt;More efficient for large-scale deployments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;json-file-structure&quot;&gt;JSON File Structure&lt;&#x2F;h3&gt;
&lt;p&gt;The import file must include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Host details&lt;&#x2F;li&gt;
&lt;li&gt;Storage configuration&lt;&#x2F;li&gt;
&lt;li&gt;Network assignments&lt;&#x2F;li&gt;
&lt;li&gt;Credentials&lt;&#x2F;li&gt;
&lt;li&gt;Additional configuration parameters&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;validation-process&quot;&gt;Validation Process&lt;&#x2F;h2&gt;
&lt;p&gt;After adding hosts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;SDDC Manager connects to each host&lt;&#x2F;li&gt;
&lt;li&gt;Verifies prerequisites&lt;&#x2F;li&gt;
&lt;li&gt;Checks connectivity&lt;&#x2F;li&gt;
&lt;li&gt;Validates configurations&lt;&#x2F;li&gt;
&lt;li&gt;Reports success or failure&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;commissioning-workflow&quot;&gt;Commissioning Workflow&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;steps&quot;&gt;Steps&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Initial validation&lt;&#x2F;li&gt;
&lt;li&gt;Host preparation&lt;&#x2F;li&gt;
&lt;li&gt;Network configuration&lt;&#x2F;li&gt;
&lt;li&gt;Storage setup&lt;&#x2F;li&gt;
&lt;li&gt;Final verification&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;monitoring&quot;&gt;Monitoring&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;View workflow progress in SDDC Manager&lt;&#x2F;li&gt;
&lt;li&gt;Monitor subtasks&lt;&#x2F;li&gt;
&lt;li&gt;Access error details if needed&lt;&#x2F;li&gt;
&lt;li&gt;Track completion status&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pre-commissioning&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Verify all prerequisites&lt;&#x2F;li&gt;
&lt;li&gt;Prepare network pools&lt;&#x2F;li&gt;
&lt;li&gt;Document host information&lt;&#x2F;li&gt;
&lt;li&gt;Test connectivity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;During Commissioning&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Monitor workflow progress&lt;&#x2F;li&gt;
&lt;li&gt;Address any validation errors&lt;&#x2F;li&gt;
&lt;li&gt;Keep credentials secure&lt;&#x2F;li&gt;
&lt;li&gt;Document any issues&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Post-commissioning&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Verify host availability&lt;&#x2F;li&gt;
&lt;li&gt;Check network configurations&lt;&#x2F;li&gt;
&lt;li&gt;Test connectivity&lt;&#x2F;li&gt;
&lt;li&gt;Update documentation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Host commissioning is a critical process in expanding VCF capacity. By following these steps and best practices, administrators can ensure successful host addition and maintain a healthy cloud infrastructure. Remember to always verify prerequisites and monitor the commissioning process to ensure successful deployment.&lt;&#x2F;p&gt;
&lt;p&gt;The ability to commission hosts both individually and in bulk provides flexibility for different deployment scenarios, while the comprehensive validation process helps ensure reliability and consistency in your VCF environment.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>VMware Cloud Foundation: Building Your Private Cloud Experience</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/vcf-intro/"/>
        <id>https://zerotohero.dev/inbox/vcf-intro/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/vcf-intro/">&lt;p&gt;VMware Cloud Foundation (VCF) transforms traditional virtualization into a complete private cloud experience. Let’s break down how it all works together.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;core-components&quot;&gt;Core Components&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;the-foundation-vsphere&quot;&gt;The Foundation: vSphere&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Combines vCenter and ESXi&lt;&#x2F;li&gt;
&lt;li&gt;Handles day-to-day VM operations&lt;&#x2F;li&gt;
&lt;li&gt;Remains familiar to existing administrators&lt;&#x2F;li&gt;
&lt;li&gt;Serves as the compute foundation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;software-defined-infrastructure&quot;&gt;Software-Defined Infrastructure&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Storage (vSAN)&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Hyper-converged storage solution&lt;&#x2F;li&gt;
&lt;li&gt;Leverages local disks in ESXi hosts&lt;&#x2F;li&gt;
&lt;li&gt;Delivers software-defined storage&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Networking (NSX)&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Creates software-defined networks&lt;&#x2F;li&gt;
&lt;li&gt;Supports Virtual Private Cloud (VPC) functionality&lt;&#x2F;li&gt;
&lt;li&gt;Abstracts physical network complexity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Operations (Aria Suite)&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Formerly known as vRealize&lt;&#x2F;li&gt;
&lt;li&gt;Provides monitoring and performance management&lt;&#x2F;li&gt;
&lt;li&gt;Offers self-service catalog for application deployment&lt;&#x2F;li&gt;
&lt;li&gt;Enables cloud-like operations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;deployment-and-management&quot;&gt;Deployment and Management&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;initial-deployment-cloud-builder&quot;&gt;Initial Deployment: Cloud Builder&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Day zero deployment tool&lt;&#x2F;li&gt;
&lt;li&gt;Handles initial environment setup&lt;&#x2F;li&gt;
&lt;li&gt;Automates deployment of core components&lt;&#x2F;li&gt;
&lt;li&gt;Can be removed after initial setup&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ongoing-management-sddc-manager&quot;&gt;Ongoing Management: SDDC Manager&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Takes over after initial deployment&lt;&#x2F;li&gt;
&lt;li&gt;Provides ongoing automation&lt;&#x2F;li&gt;
&lt;li&gt;Manages capacity expansion&lt;&#x2F;li&gt;
&lt;li&gt;Handles lifecycle management&lt;&#x2F;li&gt;
&lt;li&gt;Ensures consistency across environments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;key-benefits&quot;&gt;Key Benefits&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-consistency&quot;&gt;1. Consistency&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Standardized deployment across sites&lt;&#x2F;li&gt;
&lt;li&gt;Predictable scaling&lt;&#x2F;li&gt;
&lt;li&gt;Uniform management experience&lt;&#x2F;li&gt;
&lt;li&gt;Consistent architecture&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-automation&quot;&gt;2. Automation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Simplified host addition&lt;&#x2F;li&gt;
&lt;li&gt;Automated lifecycle management&lt;&#x2F;li&gt;
&lt;li&gt;Streamlined operations&lt;&#x2F;li&gt;
&lt;li&gt;Reduced manual intervention&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-lifecycle-management&quot;&gt;3. Lifecycle Management&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Coordinated updates across components&lt;&#x2F;li&gt;
&lt;li&gt;Automated patch management&lt;&#x2F;li&gt;
&lt;li&gt;Compatibility verification&lt;&#x2F;li&gt;
&lt;li&gt;Simplified upgrade process&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;modern-workload-support&quot;&gt;Modern Workload Support&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;container-workloads&quot;&gt;Container Workloads&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Native Kubernetes support&lt;&#x2F;li&gt;
&lt;li&gt;Automated deployment&lt;&#x2F;li&gt;
&lt;li&gt;Integrated management&lt;&#x2F;li&gt;
&lt;li&gt;Modern application support&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ai-ml-capabilities&quot;&gt;AI&#x2F;ML Capabilities&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Support for private AI initiatives&lt;&#x2F;li&gt;
&lt;li&gt;On-premises AI workloads&lt;&#x2F;li&gt;
&lt;li&gt;Data processing capabilities&lt;&#x2F;li&gt;
&lt;li&gt;Future-ready infrastructure&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-public-cloud-experience-on-premises&quot;&gt;The Public Cloud Experience On-Premises&lt;&#x2F;h2&gt;
&lt;p&gt;VCF delivers key public cloud benefits in your datacenter:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Self-service capabilities&lt;&#x2F;li&gt;
&lt;li&gt;Automated scaling&lt;&#x2F;li&gt;
&lt;li&gt;Simplified management&lt;&#x2F;li&gt;
&lt;li&gt;Resource abstraction&lt;&#x2F;li&gt;
&lt;li&gt;Consistent operations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;VMware Cloud Foundation transforms traditional virtualization into a complete private cloud platform. Through automation, consistency, and integrated lifecycle management, it delivers public cloud operational benefits while maintaining on-premises control. The combination of Cloud Builder for initial deployment and SDDC Manager for ongoing operations ensures a smooth journey from traditional infrastructure to modern cloud operations.&lt;&#x2F;p&gt;
&lt;p&gt;Whether you’re running traditional VMs, modern containers, or exploring AI workloads, VCF provides a foundation that’s both powerful today and ready for tomorrow’s innovations.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Simplifying Infrastructure Updates with VMware Cloud Foundation&#x27;s Lifecycle Management</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/vcf-lcm/"/>
        <id>https://zerotohero.dev/inbox/vcf-lcm/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/vcf-lcm/">&lt;p&gt;For organizations running VMware Cloud Foundation (VCF), one of the most powerful features is the centralized lifecycle management (LCM) through SDDC Manager. This capability transforms what was once a complex, manual process into an automated, orchestrated workflow. Let’s explore how it works and why it matters.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-the-bill-of-materials-bom&quot;&gt;Understanding the Bill of Materials (BOM)&lt;&#x2F;h2&gt;
&lt;p&gt;Each VCF release comes with a specific Bill of Materials (BOM) that defines:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Exact versions of all infrastructure components&lt;&#x2F;li&gt;
&lt;li&gt;Compatible versions for management domains&lt;&#x2F;li&gt;
&lt;li&gt;Supported versions for workload domains&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This precise version control ensures that all components work together seamlessly and maintains consistency across your infrastructure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;software-bundle-management&quot;&gt;Software Bundle Management&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;downloading-updates&quot;&gt;Downloading Updates&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Bundles are downloaded directly from VMware&lt;&#x2F;li&gt;
&lt;li&gt;Requires VMware Customer Connect credentials&lt;&#x2F;li&gt;
&lt;li&gt;No manual package searching needed&lt;&#x2F;li&gt;
&lt;li&gt;Download history tracking available&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;flexible-scheduling&quot;&gt;Flexible Scheduling&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Schedule downloads during off-peak hours&lt;&#x2F;li&gt;
&lt;li&gt;Option for immediate download when needed&lt;&#x2F;li&gt;
&lt;li&gt;Track download history through the interface&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-update-process&quot;&gt;The Update Process&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;pre-update-checks&quot;&gt;Pre-Update Checks&lt;&#x2F;h3&gt;
&lt;p&gt;SDDC Manager includes a comprehensive pre-check feature that verifies:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Available disk space&lt;&#x2F;li&gt;
&lt;li&gt;Hardware compatibility&lt;&#x2F;li&gt;
&lt;li&gt;Other potential upgrade blockers&lt;&#x2F;li&gt;
&lt;li&gt;Infrastructure readiness&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;update-management&quot;&gt;Update Management&lt;&#x2F;h3&gt;
&lt;p&gt;Updates are managed through the “Updates” tab for each workload domain, providing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Current version information for all components&lt;&#x2F;li&gt;
&lt;li&gt;Available updates&lt;&#x2F;li&gt;
&lt;li&gt;Update history&lt;&#x2F;li&gt;
&lt;li&gt;Status tracking&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;best-practices-for-updates&quot;&gt;Best Practices for Updates&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pre-Update Planning&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Review release notes thoroughly&lt;&#x2F;li&gt;
&lt;li&gt;Check hardware compatibility with new ESXi versions&lt;&#x2F;li&gt;
&lt;li&gt;Verify BOM compatibility&lt;&#x2F;li&gt;
&lt;li&gt;Schedule maintenance windows&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;During Updates&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Run pre-checks before starting&lt;&#x2F;li&gt;
&lt;li&gt;Monitor progress through SDDC Manager&lt;&#x2F;li&gt;
&lt;li&gt;Keep track of component versions&lt;&#x2F;li&gt;
&lt;li&gt;Follow the orchestrated workflow&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Post-Update Tasks&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Verify successful completion&lt;&#x2F;li&gt;
&lt;li&gt;Review update history&lt;&#x2F;li&gt;
&lt;li&gt;Document any issues encountered&lt;&#x2F;li&gt;
&lt;li&gt;Validate system functionality&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;benefits-of-centralized-lifecycle-management&quot;&gt;Benefits of Centralized Lifecycle Management&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reduced Complexity&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Single interface for all updates&lt;&#x2F;li&gt;
&lt;li&gt;Automated orchestration&lt;&#x2F;li&gt;
&lt;li&gt;Proven upgrade paths&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Enhanced Security&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Regular security updates&lt;&#x2F;li&gt;
&lt;li&gt;Validated configurations&lt;&#x2F;li&gt;
&lt;li&gt;Tested combinations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Operational Efficiency&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Automated workflows&lt;&#x2F;li&gt;
&lt;li&gt;Reduced manual intervention&lt;&#x2F;li&gt;
&lt;li&gt;Predictable outcomes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;the-importance-of-regular-updates&quot;&gt;The Importance of Regular Updates&lt;&#x2F;h2&gt;
&lt;p&gt;Staying current with VCF updates is crucial for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Security patch implementation&lt;&#x2F;li&gt;
&lt;li&gt;Bug fixes and improvements&lt;&#x2F;li&gt;
&lt;li&gt;New feature availability&lt;&#x2F;li&gt;
&lt;li&gt;Infrastructure stability&lt;&#x2F;li&gt;
&lt;li&gt;Compliance requirements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;SDDC Manager’s lifecycle management capabilities transform what was once a complex, risky process into a streamlined, automated workflow. By providing centralized control, automated pre-checks, and orchestrated updates, VCF helps organizations maintain their infrastructure with confidence while reducing operational overhead and risk.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to always check the VMware Compatibility Guide before updates and review release notes for any environment-specific considerations. With proper planning and use of SDDC Manager’s lifecycle management features, organizations can keep their infrastructure current and secure while minimizing operational disruption.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Creating Workload Domains in VMware Cloud Foundation: Step-by-Step Guide</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/vcf-workload-domain-create/"/>
        <id>https://zerotohero.dev/inbox/vcf-workload-domain-create/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/vcf-workload-domain-create/">&lt;p&gt;Workload domains in VMware Cloud Foundation (VCF) are the primary method of allocating cloud capacity for hosting workloads. This guide walks through the process of creating and configuring workload domains.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-workload-domains&quot;&gt;Understanding Workload Domains&lt;&#x2F;h2&gt;
&lt;p&gt;Two primary types exist:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Management Domain (created automatically during bringup)&lt;&#x2F;li&gt;
&lt;li&gt;VI (Virtual Infrastructure) Workload Domain (for business workloads)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;creation-process&quot;&gt;Creation Process&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-initial-configuration&quot;&gt;1. Initial Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to Workload Domains in SDDC Manager&lt;&#x2F;li&gt;
&lt;li&gt;Select “Add Workload Domain”&lt;&#x2F;li&gt;
&lt;li&gt;Choose “VI Workload Domain” type&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-storage-configuration&quot;&gt;2. Storage Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Select principal storage type (e.g., vSAN)&lt;&#x2F;li&gt;
&lt;li&gt;For vSAN configurations:
&lt;ul&gt;
&lt;li&gt;Set failures to tolerate&lt;&#x2F;li&gt;
&lt;li&gt;Configure deduplication and compression options&lt;&#x2F;li&gt;
&lt;li&gt;Minimum of three hosts required&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-domain-settings&quot;&gt;3. Domain Settings&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Assign domain name&lt;&#x2F;li&gt;
&lt;li&gt;Choose SSO domain option:
&lt;ul&gt;
&lt;li&gt;Join existing management SSO domain&lt;&#x2F;li&gt;
&lt;li&gt;Create new SSO domain&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Select lifecycle management approach:
&lt;ul&gt;
&lt;li&gt;VLCM (vSphere Lifecycle Manager) images (default in vCenter 8)&lt;&#x2F;li&gt;
&lt;li&gt;Traditional baseline approach (optional)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-vcenter-configuration&quot;&gt;4. vCenter Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Provide cluster name&lt;&#x2F;li&gt;
&lt;li&gt;Select VLCM image (if using VLCM)&lt;&#x2F;li&gt;
&lt;li&gt;Configure vCenter Server details:
&lt;ul&gt;
&lt;li&gt;Hostname&lt;&#x2F;li&gt;
&lt;li&gt;Password&lt;&#x2F;li&gt;
&lt;li&gt;DNS verification for IP assignment&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-nsx-setup&quot;&gt;5. NSX Setup&lt;&#x2F;h3&gt;
&lt;p&gt;For first VI workload domain:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Deploy new NSX fabric&lt;&#x2F;li&gt;
&lt;li&gt;Configure NSX manager appliances:
&lt;ul&gt;
&lt;li&gt;Hostnames (DNS-verified)&lt;&#x2F;li&gt;
&lt;li&gt;Admin and audit account passwords&lt;&#x2F;li&gt;
&lt;li&gt;IP assignments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;6-network-configuration&quot;&gt;6. Network Configuration&lt;&#x2F;h3&gt;
&lt;p&gt;Configure vSphere Distributed Switch (VDS):&lt;&#x2F;p&gt;
&lt;h4 id=&quot;default-switch-configuration&quot;&gt;Default Switch Configuration&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Single distributed switch&lt;&#x2F;li&gt;
&lt;li&gt;Distributed port groups for:
&lt;ul&gt;
&lt;li&gt;Management traffic&lt;&#x2F;li&gt;
&lt;li&gt;vSAN traffic&lt;&#x2F;li&gt;
&lt;li&gt;vMotion traffic&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;custom-switch-configuration&quot;&gt;Custom Switch Configuration&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Multiple distributed switches possible&lt;&#x2F;li&gt;
&lt;li&gt;Requires additional NICs&lt;&#x2F;li&gt;
&lt;li&gt;Use cases:
&lt;ul&gt;
&lt;li&gt;Isolate vSAN traffic&lt;&#x2F;li&gt;
&lt;li&gt;Separate NSX overlay traffic&lt;&#x2F;li&gt;
&lt;li&gt;Split management traffic&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;7-additional-network-settings&quot;&gt;7. Additional Network Settings&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Configure VLAN ID for NSX overlay traffic&lt;&#x2F;li&gt;
&lt;li&gt;Set up traffic types on distributed switches&lt;&#x2F;li&gt;
&lt;li&gt;Assign NICs to appropriate switches&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;8-licensing&quot;&gt;8. Licensing&lt;&#x2F;h3&gt;
&lt;p&gt;Provide license keys for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;NSX&lt;&#x2F;li&gt;
&lt;li&gt;vSAN&lt;&#x2F;li&gt;
&lt;li&gt;vSphere&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;post-deployment-configuration&quot;&gt;Post-Deployment Configuration&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;automated-tasks&quot;&gt;Automated Tasks&lt;&#x2F;h3&gt;
&lt;p&gt;The workflow (~90 minutes) includes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;vCenter Server deployment&lt;&#x2F;li&gt;
&lt;li&gt;vCenter inventory configuration&lt;&#x2F;li&gt;
&lt;li&gt;ESXi host addition&lt;&#x2F;li&gt;
&lt;li&gt;Cluster configuration&lt;&#x2F;li&gt;
&lt;li&gt;vSAN setup&lt;&#x2F;li&gt;
&lt;li&gt;VDS and port group configuration&lt;&#x2F;li&gt;
&lt;li&gt;NSX manager deployment&lt;&#x2F;li&gt;
&lt;li&gt;NSX cluster preparation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;verification-steps&quot;&gt;Verification Steps&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SDDC Manager&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Check domain status&lt;&#x2F;li&gt;
&lt;li&gt;Verify host assignments&lt;&#x2F;li&gt;
&lt;li&gt;Review cluster configuration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;vSphere Client&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Verify VM deployments&lt;&#x2F;li&gt;
&lt;li&gt;Check vSAN datastore&lt;&#x2F;li&gt;
&lt;li&gt;Review networking configuration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;NSX Manager&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Verify host preparation&lt;&#x2F;li&gt;
&lt;li&gt;Check fabric configuration&lt;&#x2F;li&gt;
&lt;li&gt;Review network settings&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Planning&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure sufficient resources&lt;&#x2F;li&gt;
&lt;li&gt;Verify DNS entries&lt;&#x2F;li&gt;
&lt;li&gt;Prepare network configurations&lt;&#x2F;li&gt;
&lt;li&gt;Have licenses ready&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Configuration&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Consider traffic isolation needs&lt;&#x2F;li&gt;
&lt;li&gt;Plan NIC assignments&lt;&#x2F;li&gt;
&lt;li&gt;Document VLAN assignments&lt;&#x2F;li&gt;
&lt;li&gt;Review security requirements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Post-Deployment&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Verify all components&lt;&#x2F;li&gt;
&lt;li&gt;Test connectivity&lt;&#x2F;li&gt;
&lt;li&gt;Document configuration&lt;&#x2F;li&gt;
&lt;li&gt;Update DNS records&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Creating workload domains is a fundamental operation in VCF that requires careful planning and execution. While the process is largely automated, understanding each component and its configuration options ensures successful deployment and operation of your cloud infrastructure.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding VMware Cloud Foundation Workload Domains: The Building Blocks of Your Private Cloud</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/vcf-workload-domains/"/>
        <id>https://zerotohero.dev/inbox/vcf-workload-domains/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/vcf-workload-domains/">&lt;p&gt;For vSphere administrators looking to build a more flexible and automated private cloud infrastructure, understanding VMware Cloud Foundation (VCF) Workload Domains is essential. Let’s dive into what they are and how they can transform your datacenter operations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-a-workload-domain&quot;&gt;What is a Workload Domain?&lt;&#x2F;h2&gt;
&lt;p&gt;At its core, a Workload Domain is a vCenter instance with an ESXi compute cluster, but with an important distinction: it’s deployed through automation following a prescribed architecture. This automation handles:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ESXi host deployment with dedicated vCenter server&lt;&#x2F;li&gt;
&lt;li&gt;Software-defined networking (SDN) configuration&lt;&#x2F;li&gt;
&lt;li&gt;Storage connectivity and configuration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Once deployed, the SDDC (Software-Defined Data Center) Manager takes control of the Workload Domain, enabling you to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create new domains&lt;&#x2F;li&gt;
&lt;li&gt;Expand or contract resources&lt;&#x2F;li&gt;
&lt;li&gt;Delete domains&lt;&#x2F;li&gt;
&lt;li&gt;Manage the entire lifecycle&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This automation-first approach brings public cloud-like operations to your private datacenter.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;types-of-workload-domains&quot;&gt;Types of Workload Domains&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-management-workload-domain&quot;&gt;1. Management Workload Domain&lt;&#x2F;h3&gt;
&lt;p&gt;The Management Workload Domain is the foundation of your VCF deployment and hosts most management VMs, including:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;vCenter Server&lt;&#x2F;li&gt;
&lt;li&gt;NSX Managers&lt;&#x2F;li&gt;
&lt;li&gt;Aria appliances&lt;&#x2F;li&gt;
&lt;li&gt;Third-party management and operations (MANO) applications&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The only exception is the NSX Edge network cluster nodes, which are deployed separately.&lt;&#x2F;p&gt;
&lt;p&gt;For smaller deployments (SMB&#x2F;ROBO), the Management Workload Domain can also host business workloads. However, larger infrastructures typically benefit from separate domains.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-vi-virtual-infrastructure-workload-domain&quot;&gt;2. VI (Virtual Infrastructure) Workload Domain&lt;&#x2F;h3&gt;
&lt;p&gt;VI Workload Domains are purpose-built for running applications, offering:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Clear separation between management and business workloads&lt;&#x2F;li&gt;
&lt;li&gt;Prevention of “noisy neighbor” situations&lt;&#x2F;li&gt;
&lt;li&gt;Independent lifecycle management&lt;&#x2F;li&gt;
&lt;li&gt;Dedicated resources for specific use cases&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;scaling-and-flexibility&quot;&gt;Scaling and Flexibility&lt;&#x2F;h2&gt;
&lt;p&gt;VCF offers multiple deployment options to match your needs:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;multiple-workload-domains&quot;&gt;Multiple Workload Domains&lt;&#x2F;h3&gt;
&lt;p&gt;Each domain can have its own:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;vCenter Server&lt;&#x2F;li&gt;
&lt;li&gt;NSX management plane&lt;&#x2F;li&gt;
&lt;li&gt;Storage resources&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This separation enables scenarios like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Dedicated domains for Windows and Linux teams&lt;&#x2F;li&gt;
&lt;li&gt;Separate domains for DMZ applications&lt;&#x2F;li&gt;
&lt;li&gt;Isolated environments for virtual desktops&lt;&#x2F;li&gt;
&lt;li&gt;Independent patch management schedules&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;nsx-management-plane-options&quot;&gt;NSX Management Plane Options&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Deploy new NSX management planes for each domain&lt;&#x2F;li&gt;
&lt;li&gt;Share existing NSX management planes across domains&lt;&#x2F;li&gt;
&lt;li&gt;Mix and match based on requirements&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sso-domain-flexibility&quot;&gt;SSO Domain Flexibility&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Default: Shared SSO across domains&lt;&#x2F;li&gt;
&lt;li&gt;Optional: SSO domain isolation&lt;&#x2F;li&gt;
&lt;li&gt;Full isolation capability (popular with cloud service providers)&lt;&#x2F;li&gt;
&lt;li&gt;Maintain central management through SDDC Manager&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;advanced-deployment-scenarios&quot;&gt;Advanced Deployment Scenarios&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;multi-site-support&quot;&gt;Multi-Site Support&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Remote cluster deployment capabilities&lt;&#x2F;li&gt;
&lt;li&gt;Two-node remote clusters with third-party storage&lt;&#x2F;li&gt;
&lt;li&gt;Three or more node clusters with vSAN&lt;&#x2F;li&gt;
&lt;li&gt;Management plane remains centralized&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;stretched-clusters&quot;&gt;Stretched Clusters&lt;&#x2F;h3&gt;
&lt;p&gt;When used with vSAN, VCF supports stretched cluster deployments between sites, enabling:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Zero-downtime maintenance&lt;&#x2F;li&gt;
&lt;li&gt;VM restart and recovery for unplanned failures&lt;&#x2F;li&gt;
&lt;li&gt;Application migration between sites&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;benefits-of-workload-domains&quot;&gt;Benefits of Workload Domains&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Control Boundaries&lt;&#x2F;strong&gt;: Clear separation of resources and responsibilities&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Cloud Automation&lt;&#x2F;strong&gt;: Public cloud-like operations in your datacenter&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Flexible Architecture&lt;&#x2F;strong&gt;: Multiple options to match your needs&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Consistent Deployment&lt;&#x2F;strong&gt;: Repeatable, automated architecture&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Independent Lifecycle Management&lt;&#x2F;strong&gt;: Separate upgrade schedules for different teams&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Scalability&lt;&#x2F;strong&gt;: Easy addition of resources within or across domains&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Workload Domains are the foundation of VMware Cloud Foundation’s ability to deliver cloud-like operations in your private datacenter. Through automation and flexible architecture options, they enable organizations to maintain separation of concerns while ensuring consistent deployment and management of resources. Whether you’re running a small business or a large enterprise, VCF’s Workload Domains provide the architecture needed to build and manage modern private cloud infrastructure.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Building a Kubernetes Operator for VSecM Secret Management</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/vsecm-operator/"/>
        <id>https://zerotohero.dev/inbox/vsecm-operator/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/vsecm-operator/">&lt;p&gt;Managing secrets in Kubernetes can be challenging, especially when integrating with external secret management systems. In this post, we’ll explore how to build a Kubernetes Operator that integrates with VMware Secrets Manager (VSecM) to automatically sync and manage secrets in your cluster.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-we-re-building&quot;&gt;What We’re Building&lt;&#x2F;h2&gt;
&lt;p&gt;Our operator will watch for custom &lt;code&gt;VSecMSecret&lt;&#x2F;code&gt; resources that define how secrets should be fetched from VSecM and stored in Kubernetes. It will handle:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Fetching secrets from VSecM using SPIFFE-based mTLS&lt;&#x2F;li&gt;
&lt;li&gt;Creating or updating Kubernetes Secrets based on the fetched data&lt;&#x2F;li&gt;
&lt;li&gt;Periodic refresh of secrets based on configurable intervals&lt;&#x2F;li&gt;
&lt;li&gt;Mapping of secret data, labels, and annotations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-custom-resource-definition&quot;&gt;The Custom Resource Definition&lt;&#x2F;h2&gt;
&lt;p&gt;First, let’s look at how users will define their secrets using our custom resource:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;vsecm.com&#x2F;v1alpha1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;VSecMSecret
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;database-credentials
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;vsecmSafeURL&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;https:&#x2F;&#x2F;path&#x2F;to&#x2F;vsecm&#x2F;safe&#x2F;api&#x2F;endpoint
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secretType&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;k8s
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;refreshInterval&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;1h    
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;database-credentials
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;username
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;databaseCredentials.cocaCola.data.username&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;password
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;databaseCredentials.cocaCola.data.password&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;app
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;databaseCredentials.cocaCola.labels.app
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;annotations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;env
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;databaseCredentials.cocaCola.annotations.env
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;setting-up-the-project&quot;&gt;Setting Up the Project&lt;&#x2F;h2&gt;
&lt;p&gt;While we could build the operator from scratch, using the Operator SDK makes our lives easier. Let’s walk through the process:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Initialize the project:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;operator-sdk init --domain vsecm.com --repo github.com&#x2F;yourusername&#x2F;vsecm-operator
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Create the API and controller:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;operator-sdk create api --group vsecm --version v1alpha1 --kind VSecMSecret --resource --controller
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;implementing-the-controller&quot;&gt;Implementing the Controller&lt;&#x2F;h2&gt;
&lt;p&gt;The heart of our operator is the controller. Here’s the key implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;VSecMSecretReconciler&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Reconcile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req ctrl&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctrl&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FromContext&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Fetch the VSecMSecret instance
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;vSecMSecret vsecmv1alpha1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;VSecMSecret
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NamespacedName&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;vSecMSecret&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctrl&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;{}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;IgnoreNotFound&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Fetch secrets from VSecM
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretData&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fetchSecretsFromVSecM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;vSecMSecret&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Spec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;VSecMSafeURL&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logger&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Failed to fetch secrets from VSecM&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctrl&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;{}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Create or update Kubernetes Secret
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;corev1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Secret&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ObjectMeta&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;metav1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ObjectMeta&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;:      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;vSecMSecret&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Spec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Target&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;vSecMSecret&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Namespace&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Parse and set secret data, labels, and annotations
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ... (implementation details)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Schedule the next reconciliation based on the refresh interval
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;refreshInterval&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ParseDuration&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;vSecMSecret&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Spec&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RefreshInterval&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctrl&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RequeueAfter&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;refreshInterval&lt;&#x2F;span&gt;&lt;span&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;deploying-the-operator&quot;&gt;Deploying the Operator&lt;&#x2F;h2&gt;
&lt;p&gt;To deploy our operator, we need several components:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The Custom Resource Definition (CRD):&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;apiextensions.k8s.io&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;CustomResourceDefinition
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;vsecmsecrets.vsecm.com
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;group&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;vsecm.com
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;versions&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;v1alpha1
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;served&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;storage&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;openAPIV3Schema&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ... (schema details)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;RBAC Configuration:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ServiceAccount
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;vsecm-operator
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;---
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;rbac.authorization.k8s.io&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ClusterRole
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;vsecm-operator
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiGroups&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;vsecm.com&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;vsecmsecrets&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;verbs&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;get&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;list&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;watch&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiGroups&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;secrets&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;verbs&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;get&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;list&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;watch&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;create&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;update&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;patch&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Operator Deployment:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;apps&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;vsecm-operator
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;selector&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;matchLabels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;vsecm-operator
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;vsecm-operator
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;serviceAccountName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;vsecm-operator
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;containers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;operator
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;your-registry&#x2F;vsecm-operator:v0.1.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;using-the-operator&quot;&gt;Using the Operator&lt;&#x2F;h2&gt;
&lt;p&gt;Once deployed, using the operator is as simple as creating a VSecMSecret resource:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kubectl apply -f - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;apiVersion: vsecm.com&#x2F;v1alpha1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kind: VSecMSecret
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;metadata:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  name: database-credentials
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spec:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  vsecmSafeURL: https:&#x2F;&#x2F;vsecm.example.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  secretType: k8s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  refreshInterval: 1h    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  target:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    name: database-credentials
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  data:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    - key: username
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;      ref: &amp;quot;databaseCredentials.cocaCola.data.username&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    - key: password
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;      ref: &amp;quot;databaseCredentials.cocaCola.data.password&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;production-considerations&quot;&gt;Production Considerations&lt;&#x2F;h2&gt;
&lt;p&gt;When deploying this operator in production, consider:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Implement proper SPIFFE mTLS authentication&lt;&#x2F;li&gt;
&lt;li&gt;Use secure connection strings&lt;&#x2F;li&gt;
&lt;li&gt;Implement proper error handling for secret management&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Performance&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Set appropriate resource limits&lt;&#x2F;li&gt;
&lt;li&gt;Configure reasonable refresh intervals&lt;&#x2F;li&gt;
&lt;li&gt;Implement caching if needed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monitoring&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Add metrics for secret refresh operations&lt;&#x2F;li&gt;
&lt;li&gt;Monitor operator health&lt;&#x2F;li&gt;
&lt;li&gt;Set up alerts for failed operations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;High Availability&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Consider running multiple replicas&lt;&#x2F;li&gt;
&lt;li&gt;Implement proper leader election&lt;&#x2F;li&gt;
&lt;li&gt;Handle network partitions gracefully&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Building a Kubernetes Operator for secret management demonstrates the power and flexibility of Kubernetes’ extension mechanisms. By automating the synchronization of secrets between VSecM and Kubernetes, we’ve created a solution that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Reduces manual intervention in secret management&lt;&#x2F;li&gt;
&lt;li&gt;Provides a declarative way to configure secret synchronization&lt;&#x2F;li&gt;
&lt;li&gt;Maintains consistency between VSecM and Kubernetes secrets&lt;&#x2F;li&gt;
&lt;li&gt;Allows for easy integration with existing workflows&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The complete source code for this operator is available on GitHub at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yourusername&#x2F;vsecm-operator&quot;&gt;github.com&#x2F;yourusername&#x2F;vsecm-operator&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that secret management is critical to your application’s security. Always review and test thoroughly before deploying to production, and ensure you follow your organization’s security policies and best practices.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Migrating from vSphere to VMware Cloud Foundation: A Comprehensive Guide</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/vsphere-to-vcf-migration/"/>
        <id>https://zerotohero.dev/inbox/vsphere-to-vcf-migration/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/vsphere-to-vcf-migration/">&lt;p&gt;Many organizations are looking to transform their traditional vSphere environments into a full private cloud experience with VMware Cloud Foundation (VCF). This guide explores the migration process and key benefits.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-move-to-cloud-foundation&quot;&gt;Why Move to Cloud Foundation?&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;sddc-manager-benefits&quot;&gt;SDDC Manager Benefits&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Built-in automation and architecture&lt;&#x2F;li&gt;
&lt;li&gt;Consistent infrastructure deployment&lt;&#x2F;li&gt;
&lt;li&gt;Public cloud-like experience on-premises&lt;&#x2F;li&gt;
&lt;li&gt;Centralized lifecycle management&lt;&#x2F;li&gt;
&lt;li&gt;Integrated password management&lt;&#x2F;li&gt;
&lt;li&gt;Certificate management capabilities&lt;&#x2F;li&gt;
&lt;li&gt;STIG compliance for government agencies&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;migration-process-overview&quot;&gt;Migration Process Overview&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Deploy VCF as greenfield installation&lt;&#x2F;li&gt;
&lt;li&gt;Start with management domain
&lt;ul&gt;
&lt;li&gt;Requires minimum four hosts&lt;&#x2F;li&gt;
&lt;li&gt;Houses SDDC Manager&lt;&#x2F;li&gt;
&lt;li&gt;Includes new vCenter Server&lt;&#x2F;li&gt;
&lt;li&gt;Creates new SSO domain&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;migration-tool-hcx&quot;&gt;Migration Tool: HCX&lt;&#x2F;h3&gt;
&lt;p&gt;HCX (Hybrid Cloud Extension) is the key component that enables migration:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Links existing vSphere and new VCF environments&lt;&#x2F;li&gt;
&lt;li&gt;Works across:
&lt;ul&gt;
&lt;li&gt;Same datacenter migrations&lt;&#x2F;li&gt;
&lt;li&gt;Different sites&lt;&#x2F;li&gt;
&lt;li&gt;Datacenter consolidations&lt;&#x2F;li&gt;
&lt;li&gt;Merger scenarios&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;network-considerations&quot;&gt;Network Considerations&lt;&#x2F;h3&gt;
&lt;p&gt;Two primary options for networking:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;VLAN-Backed Port Groups&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Continue using existing VLANs&lt;&#x2F;li&gt;
&lt;li&gt;Plumb existing VLANs into VCF&lt;&#x2F;li&gt;
&lt;li&gt;Minimal network changes required&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Software-Defined Networking&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Convert to NSX VPCs&lt;&#x2F;li&gt;
&lt;li&gt;Layer 2 network extension&lt;&#x2F;li&gt;
&lt;li&gt;Zero-downtime conversion&lt;&#x2F;li&gt;
&lt;li&gt;Modern networking capabilities&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;migration-strategy&quot;&gt;Migration Strategy&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;phase-1-initial-setup&quot;&gt;Phase 1: Initial Setup&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Deploy VCF management domain&lt;&#x2F;li&gt;
&lt;li&gt;Install HCX in both environments&lt;&#x2F;li&gt;
&lt;li&gt;Establish connectivity between environments&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;phase-2-workload-migration&quot;&gt;Phase 2: Workload Migration&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Use vMotion through HCX&lt;&#x2F;li&gt;
&lt;li&gt;Support bulk migrations&lt;&#x2F;li&gt;
&lt;li&gt;Move workloads to management domain initially&lt;&#x2F;li&gt;
&lt;li&gt;Drain existing hosts systematically&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;phase-3-infrastructure-expansion&quot;&gt;Phase 3: Infrastructure Expansion&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Repurpose freed hosts&lt;&#x2F;li&gt;
&lt;li&gt;Create VI workload domain&lt;&#x2F;li&gt;
&lt;li&gt;Continue migration process&lt;&#x2F;li&gt;
&lt;li&gt;Rinse and repeat until complete&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;storage-integration&quot;&gt;Storage Integration&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;third-party-storage-support&quot;&gt;Third-Party Storage Support&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Retain existing storage investments&lt;&#x2F;li&gt;
&lt;li&gt;Support for:
&lt;ul&gt;
&lt;li&gt;Fiber Channel&lt;&#x2F;li&gt;
&lt;li&gt;NFS&lt;&#x2F;li&gt;
&lt;li&gt;External arrays&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Available in both:
&lt;ul&gt;
&lt;li&gt;Management domains&lt;&#x2F;li&gt;
&lt;li&gt;VI workload domains&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Planning&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Verify hardware compatibility&lt;&#x2F;li&gt;
&lt;li&gt;Assess network requirements&lt;&#x2F;li&gt;
&lt;li&gt;Plan storage integration&lt;&#x2F;li&gt;
&lt;li&gt;Document application dependencies&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Execution&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Start with less critical workloads&lt;&#x2F;li&gt;
&lt;li&gt;Use swing capacity approach&lt;&#x2F;li&gt;
&lt;li&gt;Validate each migration&lt;&#x2F;li&gt;
&lt;li&gt;Maintain backup strategy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Post-Migration&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Verify application functionality&lt;&#x2F;li&gt;
&lt;li&gt;Update documentation&lt;&#x2F;li&gt;
&lt;li&gt;Remove legacy configurations&lt;&#x2F;li&gt;
&lt;li&gt;Train team on new capabilities&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Migrating from vSphere to VMware Cloud Foundation represents a shift from traditional virtualization to a full private cloud operating model. While the process requires careful planning and execution, the benefits of automation, consistency, and integrated lifecycle management make it a compelling evolution for many organizations.&lt;&#x2F;p&gt;
&lt;p&gt;The flexibility to maintain existing networking and storage investments, combined with the powerful capabilities of HCX, provides a practical path forward that can be executed with minimal disruption to existing operations.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>vSphere 8 Update 2: What&#x27;s New in VMware&#x27;s Latest Releasee</title>
        <published>2024-12-12T00:00:00+00:00</published>
        <updated>2024-12-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/whats-new-in-vsphere-8/"/>
        <id>https://zerotohero.dev/inbox/whats-new-in-vsphere-8/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/whats-new-in-vsphere-8/">&lt;p&gt;VMware has announced significant updates to vSphere 8 with Update 2, along with new cloud services for vSphere Plus customers. These updates focus on three key areas: administrative efficiency, performance improvements, and developer enablement.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enhanced-it-admin-efficiency&quot;&gt;Enhanced IT Admin Efficiency&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;new-lifecycle-management-service&quot;&gt;New Lifecycle Management Service&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;ESXi-Linux lifecycle management service for vSphere Plus customers&lt;&#x2F;li&gt;
&lt;li&gt;Cloud console management for ESXi host fleet updates&lt;&#x2F;li&gt;
&lt;li&gt;Dramatically reduced update operations for large environments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improved-vcenter-updates&quot;&gt;Improved vCenter Updates&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Reduced Downtime Upgrade technology now available to all vSphere customers&lt;&#x2F;li&gt;
&lt;li&gt;Update downtime reduced from ~1 hour to just minutes&lt;&#x2F;li&gt;
&lt;li&gt;Streamlined upgrade process&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;enhanced-identity-management&quot;&gt;Enhanced Identity Management&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Expanded identity provider support&lt;&#x2F;li&gt;
&lt;li&gt;New support for Microsoft Azure AD (now Entra ID)&lt;&#x2F;li&gt;
&lt;li&gt;Joins existing support for:
&lt;ul&gt;
&lt;li&gt;ADFS&lt;&#x2F;li&gt;
&lt;li&gt;Okta&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Centralizes authentication&lt;&#x2F;li&gt;
&lt;li&gt;Simplifies security audits&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;supercharged-performance&quot;&gt;Supercharged Performance&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;enhanced-gpu-support&quot;&gt;Enhanced GPU Support&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Increased GPU capacity up to 16 GPUs per VM&lt;&#x2F;li&gt;
&lt;li&gt;Improved DRS (Distributed Resource Scheduler):
&lt;ul&gt;
&lt;li&gt;Smarter GPU workload distribution&lt;&#x2F;li&gt;
&lt;li&gt;Enhanced GPU resource utilization&lt;&#x2F;li&gt;
&lt;li&gt;Better load balancing for GPU-intensive workloads&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;expanded-dpu-ecosystem&quot;&gt;Expanded DPU Ecosystem&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;New hardware vendor support:
&lt;ul&gt;
&lt;li&gt;Lenovo&lt;&#x2F;li&gt;
&lt;li&gt;Fujitsu&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Adds to existing partnerships with:
&lt;ul&gt;
&lt;li&gt;Dell&lt;&#x2F;li&gt;
&lt;li&gt;HPE&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Enhanced CPU offloading capabilities&lt;&#x2F;li&gt;
&lt;li&gt;Improved resource optimization&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;developer-and-devops-enhancements&quot;&gt;Developer and DevOps Enhancements&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;vm-management-improvements&quot;&gt;VM Management Improvements&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;New VM registry functionality&lt;&#x2F;li&gt;
&lt;li&gt;Self-service VM provisioning&lt;&#x2F;li&gt;
&lt;li&gt;Enhanced Windows VM support:
&lt;ul&gt;
&lt;li&gt;Independent Windows VM creation&lt;&#x2F;li&gt;
&lt;li&gt;Removed previous restrictions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;expanded-vm-service-capabilities&quot;&gt;Expanded VM Service Capabilities&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Support for all vSphere-compatible VM types&lt;&#x2F;li&gt;
&lt;li&gt;Removed previous VM type limitations&lt;&#x2F;li&gt;
&lt;li&gt;Improved self-service options&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;kubernetes-integration&quot;&gt;Kubernetes Integration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Streamlined supervisor cluster setup&lt;&#x2F;li&gt;
&lt;li&gt;New configuration export&#x2F;import capability&lt;&#x2F;li&gt;
&lt;li&gt;Simplified cluster replication&lt;&#x2F;li&gt;
&lt;li&gt;Faster deployment processes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;key-benefits&quot;&gt;Key Benefits&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;For Administrators&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Reduced maintenance time&lt;&#x2F;li&gt;
&lt;li&gt;Simplified updates&lt;&#x2F;li&gt;
&lt;li&gt;Better security management&lt;&#x2F;li&gt;
&lt;li&gt;Enhanced automation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;For AI&#x2F;ML Workloads&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Improved GPU utilization&lt;&#x2F;li&gt;
&lt;li&gt;Enhanced performance&lt;&#x2F;li&gt;
&lt;li&gt;Better resource distribution&lt;&#x2F;li&gt;
&lt;li&gt;Expanded hardware support&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;For Developers&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Greater autonomy&lt;&#x2F;li&gt;
&lt;li&gt;Simplified workflows&lt;&#x2F;li&gt;
&lt;li&gt;Improved self-service capabilities&lt;&#x2F;li&gt;
&lt;li&gt;Enhanced Kubernetes management&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;best-practices-for-adoption&quot;&gt;Best Practices for Adoption&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Planning&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Review current environment&lt;&#x2F;li&gt;
&lt;li&gt;Identify priority areas&lt;&#x2F;li&gt;
&lt;li&gt;Plan GPU resource allocation&lt;&#x2F;li&gt;
&lt;li&gt;Assess identity management needs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Start with lifecycle management improvements&lt;&#x2F;li&gt;
&lt;li&gt;Gradually expand GPU utilization&lt;&#x2F;li&gt;
&lt;li&gt;Enable developer self-service features&lt;&#x2F;li&gt;
&lt;li&gt;Document new processes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Optimization&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Monitor GPU resource usage&lt;&#x2F;li&gt;
&lt;li&gt;Fine-tune DRS settings&lt;&#x2F;li&gt;
&lt;li&gt;Evaluate developer workflows&lt;&#x2F;li&gt;
&lt;li&gt;Collect feedback from teams&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;vSphere 8 Update 2 represents a significant step forward in VMware’s commitment to enhancing administrative efficiency, supporting AI workloads, and enabling developer productivity. The combination of reduced maintenance overhead, improved performance capabilities, and expanded self-service options provides organizations with the tools needed to meet modern infrastructure demands while preparing for future innovations.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Building a Secure Webhook Server with Go and Docker: A Step-by-Step Guide</title>
        <published>2024-12-11T00:00:00+00:00</published>
        <updated>2024-12-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/docker-go/"/>
        <id>https://zerotohero.dev/inbox/docker-go/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/docker-go/">&lt;p&gt;In this tutorial, we’ll walk through the process of building and containerizing a secure webhook server using Go. We’ll cover everything from setting up the project structure to creating a production-ready Docker container.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;project-overview&quot;&gt;Project Overview&lt;&#x2F;h2&gt;
&lt;p&gt;Our webhook server is designed to handle secure GET requests with query parameters, process JSON data, and implement basic authentication. The server listens on port 8443 and includes detailed request logging for debugging purposes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Go 1.20 or later&lt;&#x2F;li&gt;
&lt;li&gt;Docker&lt;&#x2F;li&gt;
&lt;li&gt;Basic understanding of Go and Docker concepts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;project-structure&quot;&gt;Project Structure&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s start with our project structure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;├── Dockerfile
&lt;&#x2F;span&gt;&lt;span&gt;├── go.mod
&lt;&#x2F;span&gt;&lt;span&gt;└── main.go
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-application-code&quot;&gt;The Application Code&lt;&#x2F;h2&gt;
&lt;p&gt;Our &lt;code&gt;main.go&lt;&#x2F;code&gt; implements a webhook server with the following features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Secure parameter handling with URL decoding&lt;&#x2F;li&gt;
&lt;li&gt;JSON data processing&lt;&#x2F;li&gt;
&lt;li&gt;Path-based data retrieval&lt;&#x2F;li&gt;
&lt;li&gt;Detailed request logging&lt;&#x2F;li&gt;
&lt;li&gt;Basic authentication&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The server expects requests with a key parameter and returns JSON data based on the provided path. It includes basic security measures like key validation and proper error handling.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dependencies&quot;&gt;Dependencies&lt;&#x2F;h2&gt;
&lt;p&gt;Our &lt;code&gt;go.mod&lt;&#x2F;code&gt; file specifies the project dependencies:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;module vsecm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;scout
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;go &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1.23.1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;require github&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;vmware&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tanzu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;manager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sdk v0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;.28.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ... other dependencies ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;dockerizing-the-application&quot;&gt;Dockerizing the Application&lt;&#x2F;h2&gt;
&lt;p&gt;The Dockerfile for our application uses a multi-stage build process to create a minimal and secure production image. Here’s a breakdown of our Dockerfile:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Build stage
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; golang:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;1.20-alpine &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;AS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;builder
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;WORKDIR &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;app
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Copy go mod and sum files
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span&gt; go.mod .&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Download all dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;go mod download
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Copy the source code
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span&gt; main.go .&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Build the application
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;CGO_ENABLED=0 GOOS=linux go build -o webhook-server .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Final stage
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; alpine:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;latest
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;WORKDIR &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;root&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Copy the binary from the builder stage
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span&gt; --from=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;app&#x2F;webhook-server .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Expose the port the app runs on
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;EXPOSE &lt;&#x2F;span&gt;&lt;span&gt;8443
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Run the binary
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;CMD &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;.&#x2F;webhook-server&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;key-features-of-our-dockerfile&quot;&gt;Key Features of Our Dockerfile:&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Multi-stage Build&lt;&#x2F;strong&gt;: We use a multi-stage build to keep our final image size small by only including the compiled binary.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dependency Management&lt;&#x2F;strong&gt;: The build stage properly handles Go module dependencies.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Static Binary&lt;&#x2F;strong&gt;: We compile a static binary that will run efficiently in the Alpine container.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;&#x2F;strong&gt;: Using Alpine as the base image reduces the attack surface of our container.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;building-and-running-the-container&quot;&gt;Building and Running the Container&lt;&#x2F;h2&gt;
&lt;p&gt;To build your Docker image:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;docker build -t vsecm-scout .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To run the container:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;docker run -p 8443:8443 vsecm-scout
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;best-practices-implemented&quot;&gt;Best Practices Implemented&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;URL parameter decoding for safe input handling&lt;&#x2F;li&gt;
&lt;li&gt;Basic authentication with key validation&lt;&#x2F;li&gt;
&lt;li&gt;Proper error handling and status codes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Docker Best Practices&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Multi-stage builds for smaller images&lt;&#x2F;li&gt;
&lt;li&gt;Proper dependency management&lt;&#x2F;li&gt;
&lt;li&gt;Clear and maintainable Dockerfile structure&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Golang Best Practices&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Clear error handling&lt;&#x2F;li&gt;
&lt;li&gt;Structured logging&lt;&#x2F;li&gt;
&lt;li&gt;Clean code organization&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;testing-the-webhook-server&quot;&gt;Testing the Webhook Server&lt;&#x2F;h2&gt;
&lt;p&gt;Once running, you can test the webhook server with a curl command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;curl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;localhost:8443&#x2F;webhook?key=key=coca-cola.cluster-001%26path=namespaces.cokeSystem.secrets.adminCredentials&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This setup provides a solid foundation for a production-ready webhook server. The combination of Go’s robust standard library and Docker’s containerization makes it easy to deploy and scale this service in any environment.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to always follow security best practices when deploying webhook servers in production environments, such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using HTTPS in production&lt;&#x2F;li&gt;
&lt;li&gt;Implementing rate limiting&lt;&#x2F;li&gt;
&lt;li&gt;Adding more comprehensive authentication&lt;&#x2F;li&gt;
&lt;li&gt;Monitoring and logging&lt;&#x2F;li&gt;
&lt;li&gt;Regular security updates&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h2&gt;
&lt;p&gt;Consider enhancing the application with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;TLS support&lt;&#x2F;li&gt;
&lt;li&gt;Rate limiting&lt;&#x2F;li&gt;
&lt;li&gt;Comprehensive logging&lt;&#x2F;li&gt;
&lt;li&gt;Metrics collection&lt;&#x2F;li&gt;
&lt;li&gt;Health check endpoints&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Happy coding!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Implementing Flexible Authentication Strategies in Go: A Real-World Example with External Secrets Operator</title>
        <published>2024-12-10T00:00:00+00:00</published>
        <updated>2024-12-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/auth-srategies/"/>
        <id>https://zerotohero.dev/inbox/auth-srategies/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/auth-srategies/">&lt;p&gt;In modern cloud-native applications, authentication requirements can vary significantly across different environments and use cases. In this post, I’ll share how we implemented a flexible authentication system for a webhook server that integrates with Kubernetes External Secrets Operator (ESO).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;&#x2F;h2&gt;
&lt;p&gt;Our webhook server needed to support different authentication methods depending on the deployment environment and security requirements. We wanted to support:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;JWT verification with a private key&lt;&#x2F;li&gt;
&lt;li&gt;JWKS-based verification (for Keycloak integration)&lt;&#x2F;li&gt;
&lt;li&gt;Simple shared secret authentication&lt;&#x2F;li&gt;
&lt;li&gt;An untrusted mode for development&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;the-solution-strategy-pattern&quot;&gt;The Solution: Strategy Pattern&lt;&#x2F;h2&gt;
&lt;p&gt;We decided to use the Strategy pattern to implement our authentication system. This pattern allows us to encapsulate different authentication methods and switch between them easily using environment variables.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s the core interface that defines our authentication strategy:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;AuthStrategy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Authenticate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This simple interface allows us to implement different authentication methods while keeping the rest of our application code unchanged.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementing-the-strategies&quot;&gt;Implementing the Strategies&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-jwt-private-key-strategy&quot;&gt;1. JWT Private Key Strategy&lt;&#x2F;h3&gt;
&lt;p&gt;This strategy verifies JWTs using a private key stored in our secrets manager:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;JWTPrivateKeyStrategy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;vsecm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Client
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;JWTPrivateKeyStrategy&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Authenticate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;privateKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretClient&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FetchPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;jwt-private-key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;failed to fetch private key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; JWT verification logic here
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-jwks-strategy&quot;&gt;2. JWKS Strategy&lt;&#x2F;h3&gt;
&lt;p&gt;For integration with Keycloak or other OIDC providers, we implemented JWKS-based verification:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;JWKSStrategy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwksURL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;keySet  jwk&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Set
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;JWKSStrategy&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Authenticate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; JWKS verification logic here
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A key advantage of this approach is that we don’t need to store any secrets - we just use the public keys provided by the OIDC provider.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-shared-secret-strategy&quot;&gt;3. Shared Secret Strategy&lt;&#x2F;h3&gt;
&lt;p&gt;For simpler deployments, we implemented a basic shared secret authentication:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SharedSecretStrategy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;vsecm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Client
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;SharedSecretStrategy&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Authenticate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretClient&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FetchPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;shared-secret&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;failed to fetch shared secret: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Secret comparison logic here
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-untrusted-strategy-development-mode&quot;&gt;4. Untrusted Strategy (Development Mode)&lt;&#x2F;h3&gt;
&lt;p&gt;For development environments, we have a strategy that bypasses authentication:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;UntrustedStrategy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;UntrustedStrategy&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Authenticate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;switching-between-strategies&quot;&gt;Switching Between Strategies&lt;&#x2F;h2&gt;
&lt;p&gt;The magic happens in our strategy factory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;getAuthStrategy&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;AuthStrategy &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;strategy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Getenv&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;AUTH_STRATEGY&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;strategy &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;jwt_private_key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;JWTPrivateKeyStrategy&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;jwks&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;JWKSStrategy&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;shared_secret&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SharedSecretStrategy&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;untrusted&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;UntrustedStrategy&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Unknown auth strategy: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;strategy&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;using-the-authentication-system&quot;&gt;Using the Authentication System&lt;&#x2F;h2&gt;
&lt;p&gt;The authentication system is implemented as middleware:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;authMiddleware&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;next http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;HandlerFunc&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;HandlerFunc &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;strategy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;getAuthStrategy&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;authenticated&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;strategy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Authenticate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Authentication error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;), 
&lt;&#x2F;span&gt;&lt;span&gt;                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusInternalServerError&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;authenticated &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Unauthorized&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusUnauthorized&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ServeHTTP&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;benefits-of-this-approach&quot;&gt;Benefits of This Approach&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Flexibility&lt;&#x2F;strong&gt;: Easy to switch between authentication methods using environment variables.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Maintainability&lt;&#x2F;strong&gt;: Each authentication strategy is isolated in its own type.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Extensibility&lt;&#x2F;strong&gt;: New authentication methods can be added without changing existing code.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;&#x2F;strong&gt;: Proper separation of concerns and integration with secrets management.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Developer Experience&lt;&#x2F;strong&gt;: Easy to use development mode without compromising production security.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;real-world-usage&quot;&gt;Real-World Usage&lt;&#x2F;h2&gt;
&lt;p&gt;In our case, we’re using this system with the External Secrets Operator webhook. Here’s how we configure it in different environments:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Production&lt;&#x2F;strong&gt;: &lt;code&gt;AUTH_STRATEGY=jwks&lt;&#x2F;code&gt; for integration with Keycloak&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Staging&lt;&#x2F;strong&gt;: &lt;code&gt;AUTH_STRATEGY=jwt_private_key&lt;&#x2F;code&gt; for testing with our own JWT implementation&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Development&lt;&#x2F;strong&gt;: &lt;code&gt;AUTH_STRATEGY=untrusted&lt;&#x2F;code&gt; for rapid development&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Start Simple&lt;&#x2F;strong&gt;: Begin with the simplest strategy that meets your needs.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Plan for Change&lt;&#x2F;strong&gt;: The Strategy pattern makes it easy to evolve your authentication system.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Security First&lt;&#x2F;strong&gt;: Even in development, have a clear path to production-grade security.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Configuration Matters&lt;&#x2F;strong&gt;: Environment-based configuration provides flexibility without complexity.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Building a flexible authentication system doesn’t have to be complicated. By using the Strategy pattern and good design principles, we created a system that’s both secure and adaptable to different environments and requirements.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: security is not one-size-fits-all. The ability to adapt your authentication strategy to different environments and requirements is crucial for modern cloud-native applications.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding ESXi&#x27;s Default Virtual Switch Configuration</title>
        <published>2024-12-10T00:00:00+00:00</published>
        <updated>2024-12-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/esxi-default-networking/"/>
        <id>https://zerotohero.dev/inbox/esxi-default-networking/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/esxi-default-networking/">&lt;h2 id=&quot;video&quot;&gt;Video&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;&lt;iframe src=&quot;https:&#x2F;&#x2F;player.vimeo.com&#x2F;video&#x2F;1038093522?badge=0&amp;amp;autopause=0&amp;amp;player_id=0&amp;amp;app_id=58479&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture; clipboard-write&quot; style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot; title=&quot;LAB: VMware ESXi Server Installation and Configuration&quot;&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;&lt;script src=&quot;https:&#x2F;&#x2F;player.vimeo.com&#x2F;api&#x2F;player.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;&#x2F;h2&gt;
&lt;p&gt;When you install ESXi, the system automatically configures several networking components. One of the most important default configurations is the creation of vSwitch0. Let’s explore this virtual switch and understand its role in ESXi networking.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;accessing-virtual-switch-configuration&quot;&gt;Accessing Virtual Switch Configuration&lt;&#x2F;h2&gt;
&lt;p&gt;To view the default virtual switch configuration:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Open the ESXi host client&lt;&#x2F;li&gt;
&lt;li&gt;Navigate to Networking&lt;&#x2F;li&gt;
&lt;li&gt;Select Virtual Switches&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;default-virtual-switch-vswitch0-overview&quot;&gt;Default Virtual Switch (vSwitch0) Overview&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;basic-configuration&quot;&gt;Basic Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Name: vSwitch0&lt;&#x2F;li&gt;
&lt;li&gt;Default Physical Adapter: vmnic0 (first physical NIC)&lt;&#x2F;li&gt;
&lt;li&gt;Note: You may see a warning about having only one adapter (this is normal for initial setup)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;logical-architecture&quot;&gt;Logical Architecture&lt;&#x2F;h3&gt;
&lt;p&gt;The default networking setup consists of several components working together:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Physical Layer&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Physical Network Interface Card (vmnic0)&lt;&#x2F;li&gt;
&lt;li&gt;Connected to physical network switch&lt;&#x2F;li&gt;
&lt;li&gt;Provides connectivity to management network (e.g., 192.168.1.x)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Virtual Switch Layer&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;vSwitch0 acts as a logical Layer 2 switch&lt;&#x2F;li&gt;
&lt;li&gt;Bridges virtual and physical networks&lt;&#x2F;li&gt;
&lt;li&gt;Created automatically during ESXi installation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;VMkernel Interface&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;VMkernel port (vmk0)&lt;&#x2F;li&gt;
&lt;li&gt;Configured with management IP (e.g., 192.168.1.102)&lt;&#x2F;li&gt;
&lt;li&gt;Provides management access to ESXi host&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;network-traffic-flow&quot;&gt;Network Traffic Flow&lt;&#x2F;h2&gt;
&lt;p&gt;The logical flow of network traffic follows this path:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;Management Computer (192.168.1.151)
&lt;&#x2F;span&gt;&lt;span&gt;    ↕
&lt;&#x2F;span&gt;&lt;span&gt;Physical Network Switch
&lt;&#x2F;span&gt;&lt;span&gt;    ↕
&lt;&#x2F;span&gt;&lt;span&gt;ESXi Host Physical NIC (vmnic0)
&lt;&#x2F;span&gt;&lt;span&gt;    ↕
&lt;&#x2F;span&gt;&lt;span&gt;Virtual Switch (vSwitch0)
&lt;&#x2F;span&gt;&lt;span&gt;    ↕
&lt;&#x2F;span&gt;&lt;span&gt;VMkernel Port (vmk0 - 192.168.1.102)
&lt;&#x2F;span&gt;&lt;span&gt;    ↕
&lt;&#x2F;span&gt;&lt;span&gt;ESXi Host Management Interface
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This configuration enables:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Management access to the ESXi host&lt;&#x2F;li&gt;
&lt;li&gt;ESXi host client web interface connectivity&lt;&#x2F;li&gt;
&lt;li&gt;Basic network services for the host&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;important-notes&quot;&gt;Important Notes&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Single NIC Configuration&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;While functional, using a single NIC may not be ideal for production&lt;&#x2F;li&gt;
&lt;li&gt;Additional NICs can be added later for redundancy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Future Expansion&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;This basic configuration can be enhanced with:
&lt;ul&gt;
&lt;li&gt;Additional physical NICs&lt;&#x2F;li&gt;
&lt;li&gt;Multiple virtual switches&lt;&#x2F;li&gt;
&lt;li&gt;Distributed switches&lt;&#x2F;li&gt;
&lt;li&gt;Advanced networking features&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Storage Considerations&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Virtual machines will require storage access&lt;&#x2F;li&gt;
&lt;li&gt;Can be configured with:
&lt;ul&gt;
&lt;li&gt;Local storage on the ESXi host&lt;&#x2F;li&gt;
&lt;li&gt;Network-attached storage&lt;&#x2F;li&gt;
&lt;li&gt;The specific storage configuration will influence network design&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h2&gt;
&lt;p&gt;After understanding the default virtual switch configuration, typical next steps include:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Configuring storage for virtual machines&lt;&#x2F;li&gt;
&lt;li&gt;Adding redundant network connections&lt;&#x2F;li&gt;
&lt;li&gt;Setting up additional virtual switches as needed&lt;&#x2F;li&gt;
&lt;li&gt;Implementing more advanced networking features&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;em&gt;Note: This configuration represents a basic setup suitable for initial deployment or lab environments. Production environments typically require more robust networking configurations with redundancy and additional security measures.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Initial Configuration of Your ESXi Host: DCUI Setup Guide</title>
        <published>2024-12-10T00:00:00+00:00</published>
        <updated>2024-12-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/esxi-initial-configuration/"/>
        <id>https://zerotohero.dev/inbox/esxi-initial-configuration/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/esxi-initial-configuration/">&lt;h2 id=&quot;video&quot;&gt;Video&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;&lt;iframe src=&quot;https:&#x2F;&#x2F;player.vimeo.com&#x2F;video&#x2F;1038093522?badge=0&amp;amp;autopause=0&amp;amp;player_id=0&amp;amp;app_id=58479&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture; clipboard-write&quot; style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot; title=&quot;LAB: VMware ESXi Server Installation and Configuration&quot;&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;&lt;script src=&quot;https:&#x2F;&#x2F;player.vimeo.com&#x2F;api&#x2F;player.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;&#x2F;h2&gt;
&lt;p&gt;After successfully installing ESXi on your server, the next crucial step is configuring the host through the Direct Console User Interface (DCUI). This guide walks you through the essential initial configuration steps to get your ESXi host properly connected to your network.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;accessing-the-dcui&quot;&gt;Accessing the DCUI&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Press Enter at the virtual console to access the DCUI&lt;&#x2F;li&gt;
&lt;li&gt;Press F2 to log in&lt;&#x2F;li&gt;
&lt;li&gt;Enter the root password configured during installation&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;configuring-network-management-settings&quot;&gt;Configuring Network Management Settings&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;network-adapter-selection&quot;&gt;Network Adapter Selection&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to “Configure Management Network”&lt;&#x2F;li&gt;
&lt;li&gt;Select “Network Adapters”&lt;&#x2F;li&gt;
&lt;li&gt;Verify the correct network adapter (default: vmnic0)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;vlan-configuration-if-required&quot;&gt;VLAN Configuration (If Required)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Access VLAN settings if using 802.1Q tagging&lt;&#x2F;li&gt;
&lt;li&gt;Enter your VLAN ID if required&lt;&#x2F;li&gt;
&lt;li&gt;Skip if using native VLAN&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ipv4-configuration&quot;&gt;IPv4 Configuration&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Select “IPv4 Configuration”&lt;&#x2F;li&gt;
&lt;li&gt;Choose “Set static IPv4 address and network configuration”&lt;&#x2F;li&gt;
&lt;li&gt;Configure the following:
&lt;ul&gt;
&lt;li&gt;IP Address: 192.168.1.102 (or your desired address)&lt;&#x2F;li&gt;
&lt;li&gt;Subnet Mask: 255.255.255.0 (24-bit)&lt;&#x2F;li&gt;
&lt;li&gt;Default Gateway: 192.168.1.1 (your network gateway)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;ipv6-configuration&quot;&gt;IPv6 Configuration&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to IPv6 settings&lt;&#x2F;li&gt;
&lt;li&gt;Disable IPv6 if not in use (recommended for simplified management)
&lt;ul&gt;
&lt;li&gt;Note: This will require a host reboot&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;dns-configuration&quot;&gt;DNS Configuration&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Select “DNS Configuration”&lt;&#x2F;li&gt;
&lt;li&gt;Choose “Use the following DNS server addresses and hostname”&lt;&#x2F;li&gt;
&lt;li&gt;Configure:
&lt;ul&gt;
&lt;li&gt;Primary DNS: 192.168.1.100&lt;&#x2F;li&gt;
&lt;li&gt;Secondary DNS: 8.8.8.8&lt;&#x2F;li&gt;
&lt;li&gt;Hostname: ESXi-2.zerotohero.dev&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Add custom DNS suffix:
&lt;ul&gt;
&lt;li&gt;Enter your domain (e.g., zerotohero.dev)&lt;&#x2F;li&gt;
&lt;li&gt;This enables proper name resolution within your network&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;testing-network-configuration&quot;&gt;Testing Network Configuration&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;from-dcui&quot;&gt;From DCUI&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Select “Test Management Network”&lt;&#x2F;li&gt;
&lt;li&gt;The test will verify:
&lt;ul&gt;
&lt;li&gt;Default gateway connectivity&lt;&#x2F;li&gt;
&lt;li&gt;DNS server connectivity&lt;&#x2F;li&gt;
&lt;li&gt;Hostname resolution&lt;&#x2F;li&gt;
&lt;li&gt;Basic network functionality&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;from-management-computer&quot;&gt;From Management Computer&lt;&#x2F;h3&gt;
&lt;p&gt;Verify DNS configuration using nslookup:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nslookup esxi-2.zerotohero.dev
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Should return 192.168.1.102
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nslookup 192.168.1.102
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Should return esxi-2.zerotohero.dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;important-dns-considerations&quot;&gt;Important DNS Considerations&lt;&#x2F;h2&gt;
&lt;p&gt;Proper DNS configuration is crucial for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Overall system functionality&lt;&#x2F;li&gt;
&lt;li&gt;Integration with vCenter&lt;&#x2F;li&gt;
&lt;li&gt;Smooth operation of vSphere architecture&lt;&#x2F;li&gt;
&lt;li&gt;Preventing future complications&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Best Practices:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Always verify both forward and reverse DNS lookups&lt;&#x2F;li&gt;
&lt;li&gt;Ensure DNS is properly configured before proceeding with additional setup&lt;&#x2F;li&gt;
&lt;li&gt;Test name resolution from multiple network points&lt;&#x2F;li&gt;
&lt;li&gt;Document DNS settings for future reference&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h2&gt;
&lt;p&gt;After completing the DCUI configuration:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Apply changes and allow the host to reboot if required&lt;&#x2F;li&gt;
&lt;li&gt;Verify all network settings post-reboot&lt;&#x2F;li&gt;
&lt;li&gt;Proceed to accessing the ESXi host via web browser&lt;&#x2F;li&gt;
&lt;li&gt;Continue with additional configuration as needed&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Remember that taking time to properly configure and verify these initial settings, especially DNS, will save significant troubleshooting time later in your deployment process.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Note: This guide assumes you’re working in a lab or similar environment. Production environments may require additional security considerations and configuration steps.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Planning Your ESXi Host Installation: A Comprehensive Guide</title>
        <published>2024-12-10T00:00:00+00:00</published>
        <updated>2024-12-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/esxi-installation/"/>
        <id>https://zerotohero.dev/inbox/esxi-installation/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/esxi-installation/">&lt;h2 id=&quot;video&quot;&gt;Video&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;&lt;iframe src=&quot;https:&#x2F;&#x2F;player.vimeo.com&#x2F;video&#x2F;1038093522?badge=0&amp;amp;autopause=0&amp;amp;player_id=0&amp;amp;app_id=58479&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture; clipboard-write&quot; style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot; title=&quot;LAB: VMware ESXi Server Installation and Configuration&quot;&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;&lt;script src=&quot;https:&#x2F;&#x2F;player.vimeo.com&#x2F;api&#x2F;player.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;&#x2F;h2&gt;
&lt;p&gt;Setting up a new ESXi host requires careful planning and consideration of various hardware and software components. In this guide, we’ll walk through the essential steps and considerations for installing VMware ESXi on a Dell rack server.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hardware-overview&quot;&gt;Hardware Overview&lt;&#x2F;h2&gt;
&lt;p&gt;Our setup consists of a Dell rack server (specifically an R630) with the following components:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Multiple network interface cards (NICs)&lt;&#x2F;li&gt;
&lt;li&gt;CPU and RAM&lt;&#x2F;li&gt;
&lt;li&gt;Internal 1TB SSD drive&lt;&#x2F;li&gt;
&lt;li&gt;USB ports (both on the motherboard and front panel)&lt;&#x2F;li&gt;
&lt;li&gt;VGA port for monitor connection&lt;&#x2F;li&gt;
&lt;li&gt;iDRAC capability for remote management&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;network-configuration-plan&quot;&gt;Network Configuration Plan&lt;&#x2F;h2&gt;
&lt;p&gt;For this installation, we’ll be configuring the following network settings:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Management Network: 192.168.1.0&#x2F;24&lt;&#x2F;li&gt;
&lt;li&gt;Server IP Address: 192.168.1.102&lt;&#x2F;li&gt;
&lt;li&gt;Server Hostname: ESXi-2.ogit.com&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;installation-media-strategy&quot;&gt;Installation Media Strategy&lt;&#x2F;h2&gt;
&lt;p&gt;We’ll be using a dual-USB approach for the installation:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Source Drive&lt;&#x2F;strong&gt;: 64GB USB drive on the front panel&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Will contain the ESXi installation ISO&lt;&#x2F;li&gt;
&lt;li&gt;Prepared using Rufus tool&lt;&#x2F;li&gt;
&lt;li&gt;Serves as the boot drive during installation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Target Drive&lt;&#x2F;strong&gt;: 32GB USB drive on the motherboard&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Will host the ESXi operating system&lt;&#x2F;li&gt;
&lt;li&gt;Different size from source drive for easy identification&lt;&#x2F;li&gt;
&lt;li&gt;Mounted internally for security&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;pre-installation-requirements&quot;&gt;Pre-Installation Requirements&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-bios-configuration&quot;&gt;1. BIOS Configuration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Enable UEFI (Unified Extensible Firmware Interface)&lt;&#x2F;li&gt;
&lt;li&gt;Verify boot settings to support USB boot&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-installation-media-preparation&quot;&gt;2. Installation Media Preparation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Download ESXi version 8 ISO from VMware&lt;&#x2F;li&gt;
&lt;li&gt;Download and install Rufus tool&lt;&#x2F;li&gt;
&lt;li&gt;Use Rufus to properly format the 64GB USB drive with the ISO image&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-hardware-compatibility-verification&quot;&gt;3. Hardware Compatibility Verification&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Check VMware’s Compatibility Guide&lt;&#x2F;li&gt;
&lt;li&gt;Verify server model compatibility with ESXi 8&lt;&#x2F;li&gt;
&lt;li&gt;Confirm support for:
&lt;ul&gt;
&lt;li&gt;CPU model&lt;&#x2F;li&gt;
&lt;li&gt;Storage controllers&lt;&#x2F;li&gt;
&lt;li&gt;Network adapters&lt;&#x2F;li&gt;
&lt;li&gt;Other critical components&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;management-access-options&quot;&gt;Management Access Options&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;physical-access&quot;&gt;Physical Access&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;VGA port available for monitor connection&lt;&#x2F;li&gt;
&lt;li&gt;USB ports for keyboard connection&lt;&#x2F;li&gt;
&lt;li&gt;Primarily used for initial setup if needed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;remote-management&quot;&gt;Remote Management&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Dell iDRAC (Integrated Dell Remote Access Controller)&lt;&#x2F;li&gt;
&lt;li&gt;Connected to management network&lt;&#x2F;li&gt;
&lt;li&gt;Provides:
&lt;ul&gt;
&lt;li&gt;Remote console access&lt;&#x2F;li&gt;
&lt;li&gt;Virtual keyboard and monitor&lt;&#x2F;li&gt;
&lt;li&gt;Complete server control without physical presence&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;storage-configuration&quot;&gt;Storage Configuration&lt;&#x2F;h2&gt;
&lt;p&gt;The server includes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Primary storage: 1TB SSD in the front bay&lt;&#x2F;li&gt;
&lt;li&gt;Multiple additional drive bays available for expansion&lt;&#x2F;li&gt;
&lt;li&gt;USB boot drive on motherboard for ESXi installation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;physical-installation-notes&quot;&gt;Physical Installation Notes&lt;&#x2F;h2&gt;
&lt;p&gt;The Dell R630 features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rail-mounted design for easy access&lt;&#x2F;li&gt;
&lt;li&gt;Top cover with security latch&lt;&#x2F;li&gt;
&lt;li&gt;Multiple front-accessible drive bays&lt;&#x2F;li&gt;
&lt;li&gt;Sound dampening options for datacenter noise reduction&lt;&#x2F;li&gt;
&lt;li&gt;Easy access to internal components for maintenance&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;&#x2F;h2&gt;
&lt;p&gt;After completing the planning phase, the next stage involves:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Preparing the installation media with Rufus&lt;&#x2F;li&gt;
&lt;li&gt;Configuring BIOS settings&lt;&#x2F;li&gt;
&lt;li&gt;Beginning the actual ESXi installation process&lt;&#x2F;li&gt;
&lt;li&gt;Configuring network settings&lt;&#x2F;li&gt;
&lt;li&gt;Verifying system functionality&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Remember to always verify hardware compatibility and maintain proper documentation of your configuration choices throughout the installation process.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Note: This guide is based on a specific Dell R630 server configuration. Your hardware specifications and requirements may vary.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Configuring ESXi Through the Web Interface: A Step-by-Step Guide</title>
        <published>2024-12-10T00:00:00+00:00</published>
        <updated>2024-12-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/esxi-web-config/"/>
        <id>https://zerotohero.dev/inbox/esxi-web-config/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/esxi-web-config/">&lt;h2 id=&quot;video&quot;&gt;Video&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;&lt;iframe src=&quot;https:&#x2F;&#x2F;player.vimeo.com&#x2F;video&#x2F;1038093522?badge=0&amp;amp;autopause=0&amp;amp;player_id=0&amp;amp;app_id=58479&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture; clipboard-write&quot; style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot; title=&quot;LAB: VMware ESXi Server Installation and Configuration&quot;&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;&lt;script src=&quot;https:&#x2F;&#x2F;player.vimeo.com&#x2F;api&#x2F;player.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;&#x2F;h2&gt;
&lt;p&gt;After configuring basic network settings through the DCUI, the next step is accessing and configuring your ESXi host through its web interface. This guide walks you through the essential configuration steps using the ESXi host client.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;accessing-the-web-interface&quot;&gt;Accessing the Web Interface&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open a web browser and navigate to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https:&#x2F;&#x2F;ESXi-2.zerotohero.dev&lt;&#x2F;code&gt; (if DNS is configured)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;https:&#x2F;&#x2F;192.168.1.102&lt;&#x2F;code&gt; (direct IP access)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Handle the SSL Certificate Warning:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Click “Advanced”&lt;&#x2F;li&gt;
&lt;li&gt;Click “Proceed” (expected for self-signed certificates)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Log in:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Username: root&lt;&#x2F;li&gt;
&lt;li&gt;Password: (configured during installation)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;understanding-the-interface&quot;&gt;Understanding the Interface&lt;&#x2F;h2&gt;
&lt;p&gt;The ESXi host client interface consists of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Left navigation pane for main menu items&lt;&#x2F;li&gt;
&lt;li&gt;Right content area showing details and configuration options&lt;&#x2F;li&gt;
&lt;li&gt;Recent tasks section at the bottom (can be minimized)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;configuring-time-and-date-settings&quot;&gt;Configuring Time and Date Settings&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Navigate to Manage &amp;gt; System&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Under Time &amp;amp; Date:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Click “Edit”&lt;&#x2F;li&gt;
&lt;li&gt;Select “Network Time Protocol”&lt;&#x2F;li&gt;
&lt;li&gt;Set NTP server startup policy to “Start and stop with host”&lt;&#x2F;li&gt;
&lt;li&gt;Add NTP servers:
&lt;ul&gt;
&lt;li&gt;Local: 192.168.1.100&lt;&#x2F;li&gt;
&lt;li&gt;Or use public NTP servers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Starting the NTP Service:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Go to Services&lt;&#x2F;li&gt;
&lt;li&gt;Find NTP service&lt;&#x2F;li&gt;
&lt;li&gt;Select Actions &amp;gt; Start&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;network-configuration&quot;&gt;Network Configuration&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;modifying-ip-settings&quot;&gt;Modifying IP Settings&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to Networking &amp;gt; VMkernel NICs&lt;&#x2F;li&gt;
&lt;li&gt;Select VMK0&lt;&#x2F;li&gt;
&lt;li&gt;Click “Edit Settings”&lt;&#x2F;li&gt;
&lt;li&gt;Expand IPv4 settings
&lt;ul&gt;
&lt;li&gt;Note: Changing IP requires reconnecting to the new address&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;updating-dns-configuration&quot;&gt;Updating DNS Configuration&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Go to Networking &amp;gt; TCP&#x2F;IP Stacks&lt;&#x2F;li&gt;
&lt;li&gt;Select “default TCP&#x2F;IP stack”&lt;&#x2F;li&gt;
&lt;li&gt;Click “Edit Settings” to modify:
&lt;ul&gt;
&lt;li&gt;Primary&#x2F;Secondary DNS servers&lt;&#x2F;li&gt;
&lt;li&gt;Search domain&lt;&#x2F;li&gt;
&lt;li&gt;Default gateway&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;enabling-remote-access&quot;&gt;Enabling Remote Access&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ssh-access&quot;&gt;SSH Access&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to Host in the left menu&lt;&#x2F;li&gt;
&lt;li&gt;Click Actions &amp;gt; Services &amp;gt; Enable SSH&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;esxi-shell&quot;&gt;ESXi Shell&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to Host&lt;&#x2F;li&gt;
&lt;li&gt;Click Actions &amp;gt; Services &amp;gt; Enable ESXi Shell
&lt;ul&gt;
&lt;li&gt;Note: Consider security implications before enabling&lt;&#x2F;li&gt;
&lt;li&gt;Recommended to disable when not needed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;verifying-ssh-access&quot;&gt;Verifying SSH Access&lt;&#x2F;h2&gt;
&lt;p&gt;Test SSH connection using a terminal emulator:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ssh root@192.168.1.102
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# or
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ssh root@esxi-2.zerotohero.dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First-time connection will require:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Accepting the host key&lt;&#x2F;li&gt;
&lt;li&gt;Entering root password&lt;&#x2F;li&gt;
&lt;li&gt;Confirming successful connection&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;security-considerations&quot;&gt;Security Considerations&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Self-signed Certificates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Default installation uses self-signed certificates&lt;&#x2F;li&gt;
&lt;li&gt;Expected to generate browser warnings&lt;&#x2F;li&gt;
&lt;li&gt;Consider proper certificate management for production environments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Remote Access Services:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Enable SSH and ESXi Shell only when necessary&lt;&#x2F;li&gt;
&lt;li&gt;Monitor access and usage&lt;&#x2F;li&gt;
&lt;li&gt;Disable these services when not actively needed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Always verify configuration changes before disconnecting&lt;&#x2F;li&gt;
&lt;li&gt;Document all changes made to the system&lt;&#x2F;li&gt;
&lt;li&gt;Keep security in mind when enabling remote access features&lt;&#x2F;li&gt;
&lt;li&gt;Use DNS names instead of IP addresses when possible&lt;&#x2F;li&gt;
&lt;li&gt;Maintain consistent NTP configuration across all hosts&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;em&gt;Note: This guide assumes you’re working in a lab environment. Production environments may require additional security considerations and change management procedures.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Parsing JWT Claims in Go: A Practical Guide</title>
        <published>2024-12-10T00:00:00+00:00</published>
        <updated>2024-12-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/jwt-parsing/"/>
        <id>https://zerotohero.dev/inbox/jwt-parsing/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/jwt-parsing/">&lt;p&gt;When working with JWTs in Go, you’ll often need to extract and validate claims from the payload section. Let’s walk through how to do this effectively using the popular &lt;code&gt;github.com&#x2F;golang-jwt&#x2F;jwt&lt;&#x2F;code&gt; package.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;basic-jwt-structure&quot;&gt;Basic JWT Structure&lt;&#x2F;h2&gt;
&lt;p&gt;First, let’s understand what we’re parsing. A JWT consists of three parts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Header (algorithm and token type)&lt;&#x2F;li&gt;
&lt;li&gt;Payload (claims)&lt;&#x2F;li&gt;
&lt;li&gt;Signature&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;setting-up-your-project&quot;&gt;Setting Up Your Project&lt;&#x2F;h2&gt;
&lt;p&gt;Start by installing the required package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;go get -u github.com&#x2F;golang-jwt&#x2F;jwt&#x2F;v5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;creating-a-claims-structure&quot;&gt;Creating a Claims Structure&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s define a structure to hold our claims:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;CustomClaims &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Issuer    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;iss&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Subject   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;sub&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ExpiresAt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int64  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;exp&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NotBefore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int64  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;nbf&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;IssuedAt  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int64  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;iat&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;RegisteredClaims
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;parsing-the-token&quot;&gt;Parsing the Token&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a complete example showing how to parse a JWT and extract its claims:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;log&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;time&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;github.com&#x2F;golang-jwt&#x2F;jwt&#x2F;v5&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;parseToken&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tokenString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;CustomClaims&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Parse the token
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ParseWithClaims&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tokenString&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CustomClaims&lt;&#x2F;span&gt;&lt;span&gt;{}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Token&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span&gt;{}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Replace this with your actual secret key
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;your-secret-key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;error parsing token: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Type assert the claims
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Claims&lt;&#x2F;span&gt;&lt;span&gt;.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;CustomClaims&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Valid &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;invalid token claims&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Example JWT string - replace with your actual token
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tokenString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;your.jwt.token&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;parseToken&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tokenString&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Access the claims
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Issuer: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Issuer&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Subject: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Subject&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Expires At: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Unix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ExpiresAt&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Not Before: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Unix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NotBefore&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Issued At: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Unix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;IssuedAt&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;validation&quot;&gt;Validation&lt;&#x2F;h2&gt;
&lt;p&gt;The JWT library automatically validates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Token structure&lt;&#x2F;li&gt;
&lt;li&gt;Signature&lt;&#x2F;li&gt;
&lt;li&gt;Expiration time (exp)&lt;&#x2F;li&gt;
&lt;li&gt;Not Before time (nbf)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;However, you might want to add custom validation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;validateClaims&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;CustomClaims&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Example: Validate issuer
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Issuer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spike-nexus&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;invalid issuer&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Example: Validate subject
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Subject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spike-admin&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;invalid subject&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;error-handling&quot;&gt;Error Handling&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s how to handle common JWT errors:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;handleJWTError&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Is&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ErrTokenMalformed&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Token is malformed&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Is&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ErrTokenExpired&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Token has expired&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Is&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ErrTokenNotValidYet&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Token is not valid yet&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Invalid token&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Always validate the token signature using a secure key&lt;&#x2F;li&gt;
&lt;li&gt;Check expiration and not-before claims&lt;&#x2F;li&gt;
&lt;li&gt;Verify the issuer and subject claims match expected values&lt;&#x2F;li&gt;
&lt;li&gt;Use proper error handling&lt;&#x2F;li&gt;
&lt;li&gt;Consider using environment variables for sensitive values like secret keys&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a simple test case:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;TestTokenParsing&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;testing&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tokenString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;your.test.token&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;parseToken&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tokenString&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Failed to parse token: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Issuer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spike-nexus&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Expected issuer &amp;#39;spike-nexus&amp;#39;, got &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Issuer&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Parsing JWT claims in Go is straightforward with the &lt;code&gt;jwt-go&lt;&#x2F;code&gt; package. The key is to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Define a proper claims structure&lt;&#x2F;li&gt;
&lt;li&gt;Use appropriate parsing methods&lt;&#x2F;li&gt;
&lt;li&gt;Implement proper validation&lt;&#x2F;li&gt;
&lt;li&gt;Handle errors gracefully&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Remember to always validate tokens server-side and never trust client-provided tokens without verification.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding Kubernetes Services and Namespaces: A Practical Guide</title>
        <published>2024-12-10T00:00:00+00:00</published>
        <updated>2024-12-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/kubernetes-namespace/"/>
        <id>https://zerotohero.dev/inbox/kubernetes-namespace/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/kubernetes-namespace/">&lt;p&gt;Kubernetes Services and namespaces are fundamental concepts that every DevOps engineer and platform developer needs to understand. In this post, we’ll dive deep into how these components work together and explore some practical examples that will help you manage your Kubernetes resources more effectively.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-are-kubernetes-namespaces&quot;&gt;What are Kubernetes Namespaces?&lt;&#x2F;h2&gt;
&lt;p&gt;Namespaces provide a mechanism for isolating groups of resources within a single Kubernetes cluster. Think of them as virtual clusters within your physical cluster. They’re particularly useful when you have multiple teams or projects sharing the same Kubernetes infrastructure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;services-and-namespace-relationship&quot;&gt;Services and Namespace Relationship&lt;&#x2F;h2&gt;
&lt;p&gt;Every Kubernetes Service must belong to a namespace. This namespace-service relationship helps in:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Organizing resources logically&lt;&#x2F;li&gt;
&lt;li&gt;Preventing naming conflicts&lt;&#x2F;li&gt;
&lt;li&gt;Implementing access controls&lt;&#x2F;li&gt;
&lt;li&gt;Managing resource quotas effectively&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;working-with-services-across-namespaces&quot;&gt;Working with Services Across Namespaces&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;service-discovery-and-dns&quot;&gt;Service Discovery and DNS&lt;&#x2F;h3&gt;
&lt;p&gt;When working with Services across namespaces, it’s important to understand how Kubernetes DNS resolution works. Each Service gets a DNS entry in the following format:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;service-name&amp;gt;.&amp;lt;namespace&amp;gt;.svc.cluster.local
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For example, if you have a Service named “backend” in the “production” namespace, it would be accessible at:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;backend.production.svc.cluster.local
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;common-kubectl-commands-for-managing-services&quot;&gt;Common kubectl Commands for Managing Services&lt;&#x2F;h3&gt;
&lt;p&gt;Here are some essential commands for working with Services across namespaces:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;List Services in the current namespace:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kubectl get svc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;List Services in all namespaces:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kubectl get svc --all-namespaces
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# or use the shorthand
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kubectl get svc -A
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;List Services in a specific namespace:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kubectl get svc -n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;namespace-name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Create a Service in a specific namespace:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kubectl create service clusterip my-service -n my-namespace
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;p&gt;When working with Services and namespaces, consider these best practices:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Namespace Organization&lt;&#x2F;strong&gt;: Use clear, meaningful namespace names that reflect their purpose (e.g., ‘production’, ‘staging’, ‘monitoring’)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Service Naming&lt;&#x2F;strong&gt;: Implement a consistent naming convention for Services across namespaces to maintain clarity&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resource Isolation&lt;&#x2F;strong&gt;: Use namespaces to separate different environments and applications, especially in multi-tenant clusters&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Access Control&lt;&#x2F;strong&gt;: Implement RBAC (Role-Based Access Control) at the namespace level to control who can manage Services&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;common-pitfalls-to-avoid&quot;&gt;Common Pitfalls to Avoid&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Default Namespace Overuse&lt;&#x2F;strong&gt;: Don’t put everything in the default namespace. Use properly named namespaces for better organization.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cross-Namespace Communication&lt;&#x2F;strong&gt;: Remember that when Services need to communicate across namespaces, you need to use the full DNS name.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Namespace Deletion&lt;&#x2F;strong&gt;: Be cautious when deleting namespaces, as this will delete all resources within them, including Services.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;working-with-contexts&quot;&gt;Working with Contexts&lt;&#x2F;h2&gt;
&lt;p&gt;To make working with different namespaces easier, you can set your kubectl context:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Set the namespace for all subsequent kubectl commands
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kubectl config set-context --current --namespace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;my-namespace
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Verify your current namespace
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kubectl config view --minify &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;grep namespace:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Understanding how Services and namespaces work together in Kubernetes is crucial for effective cluster management. By properly utilizing namespaces, you can create more organized, secure, and maintainable Kubernetes deployments.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that namespaces are not just for organizational purposes - they’re a powerful tool for resource isolation, access control, and multi-tenant architectures. Use them wisely, and they’ll help you build more robust Kubernetes applications.&lt;&#x2F;p&gt;
&lt;p&gt;Happy Kubernetes managing!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Building a Secure Secrets Management Server in Go</title>
        <published>2024-12-10T00:00:00+00:00</published>
        <updated>2024-12-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/secure-secret-go-server-tls/"/>
        <id>https://zerotohero.dev/inbox/secure-secret-go-server-tls/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/secure-secret-go-server-tls/">&lt;p&gt;In modern cloud-native environments, managing secrets securely is crucial for maintaining the security of your infrastructure. This post walks through building a secure secrets management server in Go that handles TLS certificates and serves secrets via a REST API.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;&#x2F;h2&gt;
&lt;p&gt;Our server needs to:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Fetch secrets from a secrets manager&lt;&#x2F;li&gt;
&lt;li&gt;Set up a TLS-enabled HTTP server&lt;&#x2F;li&gt;
&lt;li&gt;Serve specific secrets based on API requests&lt;&#x2F;li&gt;
&lt;li&gt;Handle secret paths and implement access control&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;implementation-details&quot;&gt;Implementation Details&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;secret-types-and-storage&quot;&gt;Secret Types and Storage&lt;&#x2F;h3&gt;
&lt;p&gt;The server handles two main types of secrets:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Infrastructure secrets (prefixed with &lt;code&gt;raw:vsecm-scout&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;TLS certificates and keys&lt;&#x2F;li&gt;
&lt;li&gt;JWT signing keys&lt;&#x2F;li&gt;
&lt;li&gt;Other infrastructure-related secrets&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Application secrets (other &lt;code&gt;raw:&lt;&#x2F;code&gt; prefixed secrets)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Stored in a map for serving via the API&lt;&#x2F;li&gt;
&lt;li&gt;Can be accessed using path-based queries&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Here’s how we organize these secrets:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwtSecret      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsToServe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fetching-and-processing-secrets&quot;&gt;Fetching and Processing Secrets&lt;&#x2F;h3&gt;
&lt;p&gt;The server starts by fetching secrets from the secrets manager:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sfr&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sentry&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fetch&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error fetching secrets: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It then processes these secrets, organizing them based on their prefix:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secrets &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;].(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;value&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;].(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;raw:vsecm-scout-jwt-secret&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwtSecret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;raw:vsecm-scout-crt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;serverCert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ... other cases
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;strings&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;HasPrefix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;raw:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;strings&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;HasPrefix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;raw:vsecm-scout&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsToServe&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;strings&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TrimPrefix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;raw:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;tls-configuration&quot;&gt;TLS Configuration&lt;&#x2F;h3&gt;
&lt;p&gt;Security is paramount for a secrets management server. We use TLS to encrypt all communications:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cert&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;X509KeyPair&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;serverCert&lt;&#x2F;span&gt;&lt;span&gt;), []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;serverKey&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error loading server certificate and key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tlsConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Certificates&lt;&#x2F;span&gt;&lt;span&gt;: []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Certificate&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cert&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Server&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Addr&lt;&#x2F;span&gt;&lt;span&gt;:      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;:8443&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TLSConfig&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tlsConfig&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;api-implementation&quot;&gt;API Implementation&lt;&#x2F;h3&gt;
&lt;p&gt;The server exposes a webhook endpoint that serves secrets based on a key and path:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;webhookHandler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ... request validation ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;path&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretValue&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;exists &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsToServe&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;exists &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Invalid key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusUnauthorized&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ... process and return the secret ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;path-based-secret-access&quot;&gt;Path-Based Secret Access&lt;&#x2F;h3&gt;
&lt;p&gt;The server implements a flexible path-based access system for secrets:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;getValueFromPath&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span&gt;{}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span&gt;{}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;parts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;strings&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;part &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;parts &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;current&lt;&#x2F;span&gt;&lt;span&gt;.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span&gt;{}:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;part&lt;&#x2F;span&gt;&lt;span&gt;]; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;val
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;key not found: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;part&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ... handle other cases ...
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;current&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This allows clients to access nested values within secrets using dot notation (e.g., “namespaces.cokeSystem.secrets.adminCredentials”).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;security-considerations&quot;&gt;Security Considerations&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;TLS&lt;&#x2F;strong&gt;: All communications are encrypted using TLS.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Access Control&lt;&#x2F;strong&gt;: Secrets are only served to clients with valid keys.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Path Validation&lt;&#x2F;strong&gt;: The server validates all path requests to prevent unauthorized access.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Error Handling&lt;&#x2F;strong&gt;: Careful error handling prevents information leakage.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;usage-example&quot;&gt;Usage Example&lt;&#x2F;h2&gt;
&lt;p&gt;To request a secret, clients make a GET request to the webhook endpoint:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;curl -k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;localhost:8443&#x2F;webhook?key=key=coca-cola.cluster-001&amp;amp;path=namespaces.cokeSystem.secrets.adminCredentials&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The server will return the requested secret value if the key is valid and the path exists.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;future-improvements&quot;&gt;Future Improvements&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;JWT Validation&lt;&#x2F;strong&gt;: Implement JWT-based authentication using the stored JWT secret.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Rate Limiting&lt;&#x2F;strong&gt;: Add rate limiting to prevent brute force attacks.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Audit Logging&lt;&#x2F;strong&gt;: Implement detailed audit logging for all secret access.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Secret Rotation&lt;&#x2F;strong&gt;: Add support for automatic secret rotation.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Metrics&lt;&#x2F;strong&gt;: Add Prometheus metrics for monitoring.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Building a secure secrets management server requires careful attention to security details and proper handling of sensitive data. This implementation provides a solid foundation that can be extended based on specific requirements.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that this is just one piece of a larger secrets management strategy. It should be combined with other security practices like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Regular secret rotation&lt;&#x2F;li&gt;
&lt;li&gt;Strict access controls&lt;&#x2F;li&gt;
&lt;li&gt;Comprehensive audit logging&lt;&#x2F;li&gt;
&lt;li&gt;Network security controls&lt;&#x2F;li&gt;
&lt;li&gt;Regular security audits&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The complete code provides a secure and flexible solution for serving secrets in a cloud-native environment while maintaining security best practices.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Debugging TLS Certificate Issues in Go: A Base64 Decoding Story</title>
        <published>2024-12-10T00:00:00+00:00</published>
        <updated>2024-12-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/tls-decoding-go/"/>
        <id>https://zerotohero.dev/inbox/tls-decoding-go/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/tls-decoding-go/">&lt;p&gt;When working with TLS certificates in Go applications, you might encounter some unexpected challenges. In this post, we’ll explore a common issue that occurs when dealing with base64-encoded certificates and how to resolve it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;Consider a scenario where you’re building a secure web server in Go that needs to use TLS certificates. You’re retrieving these certificates from a secrets management system, but when you try to start the server, you get this cryptic error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;Error loading server certificate and key: tls: failed to find any PEM data in certificate input
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This error occurs because the certificates are being provided in base64-encoded format, but Go’s TLS configuration expects them in PEM format. Let’s look at how to fix this.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-initial-code&quot;&gt;The Initial Code&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s what the problematic code might look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cert&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;X509KeyPair&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;serverCert&lt;&#x2F;span&gt;&lt;span&gt;), []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;serverKey&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error loading server certificate and key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tlsConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Certificates&lt;&#x2F;span&gt;&lt;span&gt;: []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Certificate&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cert&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code assumes the certificate and key are in PEM format, but what if they’re base64-encoded? Let’s look at how to modify this to handle base64-encoded certificates.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h2&gt;
&lt;p&gt;The solution involves adding a decoding step before creating the X509 key pair. Here’s the complete code with the fix:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;tls&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;encoding&#x2F;base64&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;encoding&#x2F;json&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;log&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;net&#x2F;http&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;strings&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ... (certificate fetching code)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Decode base64 encoded certificate and key
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decodedCert&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StdEncoding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DecodeString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;serverCert&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error decoding server certificate: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decodedKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StdEncoding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DecodeString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;serverKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error decoding server key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Configure TLS with decoded certificate and key
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cert&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;X509KeyPair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decodedCert&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decodedKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error loading server certificate and key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tlsConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Certificates&lt;&#x2F;span&gt;&lt;span&gt;: []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Certificate&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cert&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Set up the HTTP server
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Server&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Addr&lt;&#x2F;span&gt;&lt;span&gt;:      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;:8443&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TLSConfig&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tlsConfig&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Server is running on :8443 with TLS enabled&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ListenAndServeTLS&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;understanding-the-fix&quot;&gt;Understanding the Fix&lt;&#x2F;h2&gt;
&lt;p&gt;The key changes in this solution are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Import the base64 package&lt;&#x2F;strong&gt;: We need to add &lt;code&gt;encoding&#x2F;base64&lt;&#x2F;code&gt; to our imports to handle the decoding.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Decode the certificates&lt;&#x2F;strong&gt;: Before creating the X509 key pair, we decode both the certificate and key:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decodedCert&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StdEncoding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DecodeString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;serverCert&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decodedKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StdEncoding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DecodeString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;serverKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use decoded data&lt;&#x2F;strong&gt;: We use the decoded data to create the X509 key pair instead of the raw base64-encoded strings.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;how-to-identify-base64-encoded-certificates&quot;&gt;How to Identify Base64-Encoded Certificates&lt;&#x2F;h2&gt;
&lt;p&gt;Base64-encoded certificates typically have these characteristics:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;They contain only alphanumeric characters, plus ‘+’, ‘&#x2F;’ and ‘=’&lt;&#x2F;li&gt;
&lt;li&gt;They don’t have the familiar “BEGIN CERTIFICATE” and “END CERTIFICATE” markers&lt;&#x2F;li&gt;
&lt;li&gt;They’re usually one long string without line breaks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In contrast, PEM-formatted certificates look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;-----BEGIN CERTIFICATE-----
&lt;&#x2F;span&gt;&lt;span&gt;MIIDQTCCAimgAwIBAgIUOL6XR5PRHNs...
&lt;&#x2F;span&gt;&lt;span&gt;-----END CERTIFICATE-----
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;p&gt;When working with TLS certificates in Go:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Always validate certificate format&lt;&#x2F;strong&gt;: Check whether your certificates are base64-encoded or PEM-formatted before processing them.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Handle errors gracefully&lt;&#x2F;strong&gt;: Include proper error handling for both decoding and certificate loading steps.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Log meaningful messages&lt;&#x2F;strong&gt;: Include detailed error messages to make debugging easier.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consider automation&lt;&#x2F;strong&gt;: Use tools or scripts to handle certificate format conversion if you frequently deal with different formats.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Dealing with TLS certificates in Go can be tricky, especially when they’re not in the expected format. By understanding that certificates might be base64-encoded and knowing how to handle them, you can avoid common pitfalls and build more robust applications.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to always check the format of your certificates when debugging TLS-related issues. The error “failed to find any PEM data in certificate input” is often a good indicator that you’re dealing with encoded certificates that need to be decoded first.&lt;&#x2F;p&gt;
&lt;p&gt;Happy coding!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Modernizing TLS Certificates in Kubernetes: From CN to SAN</title>
        <published>2024-12-10T00:00:00+00:00</published>
        <updated>2024-12-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/tls-san/"/>
        <id>https://zerotohero.dev/inbox/tls-san/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/tls-san/">&lt;p&gt;When working with Kubernetes and TLS certificates, you might encounter an error message that looks something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;error: failed to verify certificate: x509: certificate relies on legacy Common Name field, use SANs instead
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This article explains why this error occurs and how to fix it, particularly in the context of the external-secrets operator and VSecM integration.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-the-problem&quot;&gt;Understanding the Problem&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;the-legacy-common-name-field&quot;&gt;The Legacy Common Name Field&lt;&#x2F;h3&gt;
&lt;p&gt;Historically, TLS certificates used the Common Name (CN) field to specify the hostname that the certificate was valid for. This approach had several limitations:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;It only allowed for a single hostname per certificate&lt;&#x2F;li&gt;
&lt;li&gt;The field wasn’t explicitly defined for hostname verification&lt;&#x2F;li&gt;
&lt;li&gt;It created potential security vulnerabilities&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;the-modern-approach-subject-alternative-names-sans&quot;&gt;The Modern Approach: Subject Alternative Names (SANs)&lt;&#x2F;h3&gt;
&lt;p&gt;Subject Alternative Names (SANs) were introduced to address these limitations. SANs provide:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Support for multiple hostnames&lt;&#x2F;li&gt;
&lt;li&gt;Explicit fields for DNS names, IP addresses, and other identifiers&lt;&#x2F;li&gt;
&lt;li&gt;Better security through more precise hostname matching&lt;&#x2F;li&gt;
&lt;li&gt;Compliance with modern security standards&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;real-world-example&quot;&gt;Real-World Example&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s look at a real-world scenario involving the external-secrets operator and VSecM Scout. The following error occurs when using a certificate generated with only a Common Name:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;Warning  UpdateFailed  error retrieving secret: failed to call endpoint: tls: failed to verify certificate: 
&lt;&#x2F;span&gt;&lt;span&gt;x509: certificate relies on legacy Common Name field, use SANs instead
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h3&gt;
&lt;p&gt;To fix this, we need to modify our certificate generation process to include Subject Alternative Names. Here’s how to do it:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Create an OpenSSL configuration file that includes SAN extensions&lt;&#x2F;li&gt;
&lt;li&gt;Generate the certificate using this configuration&lt;&#x2F;li&gt;
&lt;li&gt;Update the certificate in your Kubernetes cluster&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Here’s the complete script that implements these changes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SCOUT_DNS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;vsecm-scout.vsecm-system.svc.cluster.local&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Generate a private key
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;openssl genrsa -out server.key 2048
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Create a configuration file for the certificate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; server.conf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;[req]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;distinguished_name = req_distinguished_name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x509_extensions = v3_req
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;prompt = no
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;[req_distinguished_name]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CN = ${SCOUT_DNS}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;[v3_req]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;keyUsage = critical, digitalSignature, keyEncipherment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;extendedKeyUsage = serverAuth
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;subjectAltName = @alt_names
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;[alt_names]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DNS.1 = ${SCOUT_DNS}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Create a self-signed certificate using the configuration file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;openssl req -new -x509 -sha256 -key server.key -out server.crt \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  -days 3650 -config server.conf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;understanding-the-changes&quot;&gt;Understanding the Changes&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s break down the key components of the solution:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-configuration-file-structure&quot;&gt;1. Configuration File Structure&lt;&#x2F;h3&gt;
&lt;p&gt;The OpenSSL configuration file includes several important sections:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[req]&lt;&#x2F;code&gt;: Basic certificate request settings&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;[req_distinguished_name]&lt;&#x2F;code&gt;: Certificate subject information&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;[v3_req]&lt;&#x2F;code&gt;: Certificate extensions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;[alt_names]&lt;&#x2F;code&gt;: Subject Alternative Names&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-key-extensions&quot;&gt;2. Key Extensions&lt;&#x2F;h3&gt;
&lt;p&gt;We specify two important extensions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;keyUsage = critical, digitalSignature, keyEncipherment
&lt;&#x2F;span&gt;&lt;span&gt;extendedKeyUsage = serverAuth
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These define how the certificate can be used and ensure it’s properly configured for server authentication.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-subject-alternative-names&quot;&gt;3. Subject Alternative Names&lt;&#x2F;h3&gt;
&lt;p&gt;The crucial part that fixes our error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;subjectAltName = @alt_names
&lt;&#x2F;span&gt;&lt;span&gt;[alt_names]
&lt;&#x2F;span&gt;&lt;span&gt;DNS.1 = ${SCOUT_DNS}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This explicitly defines the DNS name that the certificate is valid for.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;p&gt;When updating your certificates:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Always include both CN and SAN fields for maximum compatibility&lt;&#x2F;li&gt;
&lt;li&gt;Use specific key usage and extended key usage extensions&lt;&#x2F;li&gt;
&lt;li&gt;Keep the certificate validity period reasonable (3650 days in our example)&lt;&#x2F;li&gt;
&lt;li&gt;Store private keys securely&lt;&#x2F;li&gt;
&lt;li&gt;Implement proper certificate rotation procedures&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;verifying-the-certificate&quot;&gt;Verifying the Certificate&lt;&#x2F;h2&gt;
&lt;p&gt;After generating your certificate, you can verify it has the correct SAN entries using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;openssl x509 -in server.crt -text -noout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;grep DNS
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should see your DNS name listed in the Subject Alternative Name section.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Moving from Common Name to Subject Alternative Names is more than just fixing an error—it’s about adopting modern security practices. While the change requires updating certificate generation scripts, the benefits include improved security, better compatibility with modern systems, and adherence to current best practices.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to update your certificate generation processes across all your infrastructure to prevent similar issues in the future. This small change can save you from debugging sessions and potential security vulnerabilities down the line.&lt;&#x2F;p&gt;
&lt;p&gt;Stay secure! 🔐&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How to Decrypt Files Using age - A Quick Guide</title>
        <published>2024-12-03T00:00:00+00:00</published>
        <updated>2024-12-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/age-decryption-guide/"/>
        <id>https://zerotohero.dev/inbox/age-decryption-guide/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/age-decryption-guide/">&lt;p&gt;Age is a modern file encryption tool that’s simple yet powerful. Here’s how to decrypt age-encrypted files using a secret key.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;age installed on your system&lt;&#x2F;li&gt;
&lt;li&gt;An encrypted file (base64 encoded)&lt;&#x2F;li&gt;
&lt;li&gt;A secret key (starting with AGE-SECRET-KEY-)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;step-by-step-decryption&quot;&gt;Step-by-Step Decryption&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;First, decode the base64 content to a file:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;YOUR-BASE64-CONTENT&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64 -d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; encrypted.age
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Save the secret key to a file:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;AGE-SECRET-KEY-YOUR-KEY&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; key.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod 600 key.txt  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Set proper permissions
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Decrypt the file:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;age --decrypt -i key.txt encrypted.age
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;installing-age&quot;&gt;Installing age&lt;&#x2F;h2&gt;
&lt;p&gt;Choose your platform:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;macOS: &lt;code&gt;brew install age&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Ubuntu&#x2F;Debian: &lt;code&gt;apt install age&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Other systems: Download from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;FiloSottile&#x2F;age&quot;&gt;age GitHub repository&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;common-issues&quot;&gt;Common Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Ensure you’re using only the AGE-SECRET-KEY line for decryption&lt;&#x2F;li&gt;
&lt;li&gt;Verify the base64 content is complete and properly formatted&lt;&#x2F;li&gt;
&lt;li&gt;Check file permissions on the key file (should be readable only by you)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;security-best-practices&quot;&gt;Security Best Practices&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Never share your secret key&lt;&#x2F;li&gt;
&lt;li&gt;Delete key files after use&lt;&#x2F;li&gt;
&lt;li&gt;Store encrypted files and keys separately&lt;&#x2F;li&gt;
&lt;li&gt;Use secure channels when transferring encrypted files&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HUnderstanding ClusterSecretStore with JWT Authentication in Kubernetes</title>
        <published>2024-12-03T00:00:00+00:00</published>
        <updated>2024-12-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/cluster-secrets-store/"/>
        <id>https://zerotohero.dev/inbox/cluster-secrets-store/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/cluster-secrets-store/">&lt;h1 id=&quot;understanding-clustersecretstore-with-jwt-authentication-in-kubernetes&quot;&gt;Understanding ClusterSecretStore with JWT Authentication in Kubernetes&lt;&#x2F;h1&gt;
&lt;p&gt;When working with External Secrets Operator (ESO) in Kubernetes, configuring a ClusterSecretStore with JWT authentication requires careful consideration of several aspects. Let’s explore how to set this up correctly and understand its limitations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-the-components&quot;&gt;Understanding the Components&lt;&#x2F;h2&gt;
&lt;p&gt;A typical setup involves:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A webhook service that validates JWT tokens&lt;&#x2F;li&gt;
&lt;li&gt;A Kubernetes secret storing the JWT token&lt;&#x2F;li&gt;
&lt;li&gt;A ClusterSecretStore configuration that uses the token for authentication&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;basic-configuration&quot;&gt;Basic Configuration&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a basic ClusterSecretStore configuration with JWT authentication:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;external-secrets.io&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ClusterSecretStore
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;vsecm-scout
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;webhook&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;vsecm-scout.default.svc.cluster.local:8443&#x2F;webhook?key={{ .remoteRef.key }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;GET
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;jsonPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;Authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Bearer {{ .jwt.token }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;jwt
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secretRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;jwt-token
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;token
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;caBundle&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;your-ca-bundle-here&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;token-management-challenges&quot;&gt;Token Management Challenges&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;static-nature-of-configuration&quot;&gt;Static Nature of Configuration&lt;&#x2F;h3&gt;
&lt;p&gt;One critical limitation to understand is that ClusterSecretStore configurations are static. When you rotate the JWT token by updating the Kubernetes secret, the ClusterSecretStore doesn’t automatically pick up the changes.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# This secret update won&amp;#39;t automatically reflect in ClusterSecretStore
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Secret
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;jwt-token
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Opaque
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;stringData&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;your-new-jwt-token&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;handling-token-rotation&quot;&gt;Handling Token Rotation&lt;&#x2F;h3&gt;
&lt;p&gt;Given this limitation, there are several approaches to handle token rotation:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Manual Update Approach&lt;&#x2F;strong&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Update the JWT secret
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kubectl create secret generic jwt-token --from-literal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token=new-jwt-token -n default --dry-run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client -o yaml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kubectl apply -f -
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Force update of ClusterSecretStore
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;kubectl replace -f clusterSecretStore.yaml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Custom Controller Approach&lt;&#x2F;strong&gt;:
Create a controller that watches for secret changes and updates the ClusterSecretStore accordingly.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Webhook Service Adaptation&lt;&#x2F;strong&gt;:
Modify your webhook service to handle token fetching differently:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;webhookHandler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Instead of validating a static token,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; fetch the current token from Kubernetes and validate against that
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;currentToken&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;getCurrentTokenFromK8s&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error fetching token&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusInternalServerError&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Validate the incoming token against the current token
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Rest of your handler logic...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;security-considerations&quot;&gt;Security Considerations&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-token-lifetime&quot;&gt;1. Token Lifetime&lt;&#x2F;h3&gt;
&lt;p&gt;Consider the implications of token expiration:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Long-lived tokens are easier to manage but pose higher security risks&lt;&#x2F;li&gt;
&lt;li&gt;Short-lived tokens are more secure but require more complex rotation mechanisms&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-secret-access&quot;&gt;2. Secret Access&lt;&#x2F;h3&gt;
&lt;p&gt;Ensure proper RBAC for accessing the JWT secret:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;rbac.authorization.k8s.io&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Role
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;jwt-secret-reader
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiGroups&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;secrets&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;resourceNames&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;jwt-token&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;verbs&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;get&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-tls-configuration&quot;&gt;3. TLS Configuration&lt;&#x2F;h3&gt;
&lt;p&gt;Always use TLS for the webhook endpoint:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tlsConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MinVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;VersionTLS12&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CipherSuites&lt;&#x2F;span&gt;&lt;span&gt;: []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint16&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monitoring&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Monitor token expiration&lt;&#x2F;li&gt;
&lt;li&gt;Set up alerts for failed secret fetches&lt;&#x2F;li&gt;
&lt;li&gt;Track webhook endpoint health&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Error Handling&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Implement proper error reporting&lt;&#x2F;li&gt;
&lt;li&gt;Use appropriate HTTP status codes&lt;&#x2F;li&gt;
&lt;li&gt;Log authentication failures (but not sensitive data)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Documentation&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Document token rotation procedures&lt;&#x2F;li&gt;
&lt;li&gt;Maintain runbooks for common issues&lt;&#x2F;li&gt;
&lt;li&gt;Keep configuration templates updated&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;example-complete-setup&quot;&gt;Example: Complete Setup&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a complete example bringing everything together:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# JWT Secret
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Secret
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;jwt-token
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Opaque
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;stringData&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;your-jwt-token&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;---
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ClusterSecretStore
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;external-secrets.io&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ClusterSecretStore
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;vsecm-scout
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;webhook&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;vsecm-scout.default.svc.cluster.local:8443&#x2F;webhook?key={{ .remoteRef.key }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;GET
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;jsonPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;Authorization&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Bearer {{ .jwt.token }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;jwt
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secretRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;jwt-token
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;token
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;caBundle&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;your-ca-bundle-here&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;---
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ExternalSecret Example
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;external-secrets.io&#x2F;v1beta1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ExternalSecret
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;example-external-secret
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;refreshInterval&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;1h&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secretStoreRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;ClusterSecretStore
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;vsecm-scout
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;example-secret
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;secretKey&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;mykey
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;remoteRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;myremotekey
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;While ClusterSecretStore with JWT authentication provides a robust way to secure external secrets access, it comes with important limitations regarding token rotation. Understanding these limitations and implementing appropriate strategies for token management is crucial for maintaining a secure and operational system.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that security is a continuous process, and regular reviews of your authentication mechanisms, including JWT token management, should be part of your security practices.&lt;&#x2F;p&gt;
&lt;p&gt;When implementing this setup, always consider your specific use case and requirements, and be prepared to adapt these patterns to match your security needs and operational capabilities.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Subtle Difference Between nil and Empty Slices in Go JSON Marshaling</title>
        <published>2024-12-03T00:00:00+00:00</published>
        <updated>2024-12-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/go-slices/"/>
        <id>https://zerotohero.dev/inbox/go-slices/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/go-slices/">&lt;p&gt;When working with Go slices, you might assume that a nil slice and an empty slice are completely interchangeable. After all, both have zero length, zero capacity, and support operations like &lt;code&gt;append()&lt;&#x2F;code&gt;. However, there’s one important case where they behave differently: JSON marshaling.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-difference&quot;&gt;The Difference&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s look at a simple example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;encoding&#x2F;json&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NilSlice   &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EmptySlice &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Example&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EmptySlice&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; NilSlice left as nil
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Marshal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This outputs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;NilSlice&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;EmptySlice&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:[]}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;why-this-matters&quot;&gt;Why This Matters&lt;&#x2F;h2&gt;
&lt;p&gt;This distinction becomes important when:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;You’re building APIs where clients expect consistent JSON structure&lt;&#x2F;li&gt;
&lt;li&gt;You’re integrating with systems that handle &lt;code&gt;null&lt;&#x2F;code&gt; and &lt;code&gt;[]&lt;&#x2F;code&gt; differently&lt;&#x2F;li&gt;
&lt;li&gt;You need to maintain backward compatibility with existing JSON parsers&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;solutions&quot;&gt;Solutions&lt;&#x2F;h2&gt;
&lt;p&gt;You have several ways to handle this:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-initialize-with-make&quot;&gt;1. Initialize with make()&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;vv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-explicit-nil-check&quot;&gt;2. Explicit nil check&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;vv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;vv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-use-omitempty-tag&quot;&gt;3. Use omitempty tag&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;MyStruct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Versions &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;versions,omitempty&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;p&gt;Choose your approach based on your requirements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;omitempty&lt;&#x2F;code&gt; when the field’s presence is optional&lt;&#x2F;li&gt;
&lt;li&gt;Initialize with &lt;code&gt;make()&lt;&#x2F;code&gt; when you always want &lt;code&gt;[]&lt;&#x2F;code&gt; in your JSON&lt;&#x2F;li&gt;
&lt;li&gt;Use explicit nil checks when you need to convert nil slices to empty ones at specific points&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Remember: while nil and empty slices behave the same in most Go operations, JSON marshaling is one of the few cases where the difference becomes visible and potentially significant.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>JWT Verification in Go: A Comprehensive Guide</title>
        <published>2024-12-03T00:00:00+00:00</published>
        <updated>2024-12-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/jwt-validation/"/>
        <id>https://zerotohero.dev/inbox/jwt-validation/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/jwt-validation/">&lt;p&gt;JSON Web Tokens (JWTs) are a popular mechanism for authentication and authorization in modern web applications. However, proper JWT verification is crucial for security. Let’s explore how to implement robust JWT verification in Go.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-jwt-structure&quot;&gt;Understanding JWT Structure&lt;&#x2F;h2&gt;
&lt;p&gt;A JWT consists of three parts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Header (algorithm and token type)&lt;&#x2F;li&gt;
&lt;li&gt;Payload (claims)&lt;&#x2F;li&gt;
&lt;li&gt;Signature&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Each part is base64-encoded and separated by dots. For example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;essential-claims&quot;&gt;Essential Claims&lt;&#x2F;h2&gt;
&lt;p&gt;Standard JWT claims include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sub&lt;&#x2F;code&gt; (Subject): Identifier for the token subject&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;exp&lt;&#x2F;code&gt; (Expiration Time): Token expiry timestamp&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;iat&lt;&#x2F;code&gt; (Issued At): Token creation timestamp&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;iss&lt;&#x2F;code&gt; (Issuer): Token issuer&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;aud&lt;&#x2F;code&gt; (Audience): Intended token recipient&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;implementing-jwt-verification&quot;&gt;Implementing JWT Verification&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a comprehensive example of JWT verification in Go:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;time&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;github.com&#x2F;golang-jwt&#x2F;jwt&#x2F;v4&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;CustomClaims &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;RegisteredClaims
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;UserRole &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;role&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;verifyToken&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tokenString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;CustomClaims&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Parse the token with custom claims
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ParseWithClaims&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tokenString&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CustomClaims&lt;&#x2F;span&gt;&lt;span&gt;{}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Token&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span&gt;{}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Verify signing algorithm
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Method&lt;&#x2F;span&gt;&lt;span&gt;.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;SigningMethodHMAC&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;unexpected signing method: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Header&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;alg&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Return the secret key used for signing
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;your-secret-key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;failed to parse token: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Type assert the claims
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Claims&lt;&#x2F;span&gt;&lt;span&gt;.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;CustomClaims&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Valid &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;invalid token claims&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Additional validation
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;validateClaims&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;validateClaims&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;CustomClaims&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Validate expiration
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ExpiresAt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Before&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Now&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;token has expired&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Validate issuer (if needed)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Issuer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;expected-issuer&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;invalid issuer&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Validate subject format (example)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Subject&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;invalid subject format&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Add any other custom validation logic
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;security-best-practices&quot;&gt;Security Best Practices&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-algorithm-verification&quot;&gt;1. Algorithm Verification&lt;&#x2F;h3&gt;
&lt;p&gt;Always verify the signing algorithm to prevent algorithm switching attacks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Method&lt;&#x2F;span&gt;&lt;span&gt;.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;SigningMethodHMAC&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;unexpected signing method: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Header&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;alg&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-expiration-time&quot;&gt;2. Expiration Time&lt;&#x2F;h3&gt;
&lt;p&gt;Always check token expiration:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ExpiresAt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Before&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Now&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;token has expired&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-secret-key-management&quot;&gt;3. Secret Key Management&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Use strong, randomly generated secret keys&lt;&#x2F;li&gt;
&lt;li&gt;Rotate keys periodically&lt;&#x2F;li&gt;
&lt;li&gt;Store keys securely (e.g., using environment variables or secret management systems)&lt;&#x2F;li&gt;
&lt;li&gt;Never hardcode keys in your source code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-additional-claims-validation&quot;&gt;4. Additional Claims Validation&lt;&#x2F;h3&gt;
&lt;p&gt;Consider validating:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Issuer (&lt;code&gt;iss&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Audience (&lt;code&gt;aud&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Subject (&lt;code&gt;sub&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Custom claims specific to your application&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;common-pitfalls&quot;&gt;Common Pitfalls&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Insufficient Validation&lt;&#x2F;strong&gt;
Don’t just check if the token is valid; validate all relevant claims.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Missing Algorithm Verification&lt;&#x2F;strong&gt;
Always verify the signing algorithm to prevent downgrade attacks.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Weak Secret Keys&lt;&#x2F;strong&gt;
Use strong, random secret keys of appropriate length.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clock Skew&lt;&#x2F;strong&gt;
Consider allowing a small time buffer for expiration checks:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;clockSkew &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Minute
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ExpiresAt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;clockSkew&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Before&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Now&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;token has expired&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;example-usage&quot;&gt;Example Usage&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s how to use the verification in an HTTP handler:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;authMiddleware&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;next http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;HandlerFunc&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;HandlerFunc &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Extract token from Authorization header
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;authHeader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Header&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Authorization&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;authHeader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;missing authorization header&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusUnauthorized&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tokenString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;strings&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TrimPrefix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;authHeader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Bearer &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Verify token
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;verifyToken&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tokenString&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusUnauthorized&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Add claims to request context
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WithValue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;claims&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ServeHTTP&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WithContext&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Proper JWT verification is crucial for application security. By following these practices and implementing thorough validation, you can ensure your application handles JWTs securely. Remember to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Validate all relevant claims&lt;&#x2F;li&gt;
&lt;li&gt;Use strong secret keys&lt;&#x2F;li&gt;
&lt;li&gt;Implement proper error handling&lt;&#x2F;li&gt;
&lt;li&gt;Consider security implications of token management&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Always stay updated with security best practices and be prepared to adapt your implementation as new security considerations emerge.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding TLS Renegotiation in Go: When and Why to Use RenegotiateNever</title>
        <published>2024-12-03T00:00:00+00:00</published>
        <updated>2024-12-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/tls-renogatiation/"/>
        <id>https://zerotohero.dev/inbox/tls-renogatiation/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/tls-renogatiation/">&lt;p&gt;When configuring TLS in Go applications, you’ll often come across the recommendation to set &lt;code&gt;Renegotiation: tls.RenegotiateNever&lt;&#x2F;code&gt; in your TLS configuration. But what exactly does this mean, and why is it recommended? Let’s dive deep into TLS renegotiation, its implications, and when you might want to use different settings.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-tls-renegotiation&quot;&gt;What is TLS Renegotiation?&lt;&#x2F;h2&gt;
&lt;p&gt;TLS renegotiation is a feature that allows clients and servers to update their TLS session parameters (like cipher suites or client certificates) without interrupting the existing connection. While this sounds useful, it comes with its own set of challenges.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-three-options-in-go&quot;&gt;The Three Options in Go&lt;&#x2F;h2&gt;
&lt;p&gt;Go’s crypto&#x2F;tls package provides three options for handling TLS renegotiation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tlsConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Renegotiation&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RenegotiateNever&lt;&#x2F;span&gt;&lt;span&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Option 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; or tls.RenegotiateOnceAsClient     &#x2F;&#x2F; Option 2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; or tls.RenegotiateFreelyAsClient   &#x2F;&#x2F; Option 3
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;1-renegotiatenever&quot;&gt;1. RenegotiateNever&lt;&#x2F;h3&gt;
&lt;p&gt;This option completely disables renegotiation. It’s often the recommended choice for modern systems.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-renegotiateonceasclient&quot;&gt;2. RenegotiateOnceAsClient&lt;&#x2F;h3&gt;
&lt;p&gt;This is Go’s default setting. It allows a single renegotiation per connection.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-renegotiatefreelyasclient&quot;&gt;3. RenegotiateFreelyAsClient&lt;&#x2F;h3&gt;
&lt;p&gt;This allows unlimited renegotiations, but it’s generally not recommended.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-choose-renegotiatenever&quot;&gt;Why Choose RenegotiateNever?&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;security-benefits&quot;&gt;Security Benefits&lt;&#x2F;h3&gt;
&lt;p&gt;TLS renegotiation has a history of security vulnerabilities. The most notable was discovered in 2009, leading to the TLS Renegotiation Attack. While modern TLS implementations have addressed these specific vulnerabilities, disabling renegotiation altogether eliminates an entire class of potential security risks.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;performance-advantages&quot;&gt;Performance Advantages&lt;&#x2F;h3&gt;
&lt;p&gt;TLS renegotiation is computationally expensive. Each renegotiation requires:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;New key exchange&lt;&#x2F;li&gt;
&lt;li&gt;New cryptographic computations&lt;&#x2F;li&gt;
&lt;li&gt;Additional network roundtrips&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By disabling renegotiation, you avoid these performance impacts.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;simplified-security-model&quot;&gt;Simplified Security Model&lt;&#x2F;h3&gt;
&lt;p&gt;With renegotiation disabled, the TLS connection model becomes simpler and more predictable. This makes it easier to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Reason about security properties&lt;&#x2F;li&gt;
&lt;li&gt;Debug connection issues&lt;&#x2F;li&gt;
&lt;li&gt;Maintain consistent behavior&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;when-might-you-need-renegotiation&quot;&gt;When Might You Need Renegotiation?&lt;&#x2F;h2&gt;
&lt;p&gt;Despite the advantages of &lt;code&gt;RenegotiateNever&lt;&#x2F;code&gt;, there are legitimate use cases for TLS renegotiation:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Legacy System Integration&lt;&#x2F;strong&gt;: Some older systems require renegotiation for certain operations.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Client Certificate Updates&lt;&#x2F;strong&gt;: In systems where client certificates need to be updated mid-session.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Long-lived Connections&lt;&#x2F;strong&gt;: When security parameters need to be updated without dropping the connection.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Default to RenegotiateNever&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Start with renegotiation disabled&lt;&#x2F;li&gt;
&lt;li&gt;Only enable it if you have a specific need&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monitor for Issues&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Watch for connection failures with legacy systems&lt;&#x2F;li&gt;
&lt;li&gt;Be prepared to adjust if needed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consider Alternatives&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of renegotiation, consider establishing new connections&lt;&#x2F;li&gt;
&lt;li&gt;Use modern protocols that handle parameter updates differently&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;example-configuration&quot;&gt;Example Configuration&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a modern, secure TLS configuration in Go:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tlsConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Certificates&lt;&#x2F;span&gt;&lt;span&gt;: []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Certificate&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cert&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MinVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;VersionTLS12&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CipherSuites&lt;&#x2F;span&gt;&lt;span&gt;: []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint16&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Renegotiation&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RenegotiateNever&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NextProtos&lt;&#x2F;span&gt;&lt;span&gt;: []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;h2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;http&#x2F;1.1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CurvePreferences&lt;&#x2F;span&gt;&lt;span&gt;: []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CurveID&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;X25519&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CurveP256&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;While TLS renegotiation can be useful in specific scenarios, disabling it with &lt;code&gt;RenegotiateNever&lt;&#x2F;code&gt; is often the right choice for modern applications. It provides better security, performance, and simplicity. However, always consider your specific use case and requirements when making this decision.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that security is never one-size-fits-all. While &lt;code&gt;RenegotiateNever&lt;&#x2F;code&gt; is a good default, the best configuration for your application depends on your specific requirements, constraints, and the systems you need to interact with.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Computing File Hashes in Unix Systems: A Complete Guide</title>
        <published>2024-12-02T00:00:00+00:00</published>
        <updated>2024-12-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/file-hashing/"/>
        <id>https://zerotohero.dev/inbox/file-hashing/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/file-hashing/">&lt;p&gt;File hashing is an essential operation in software development, system administration, and security verification. This guide will walk you through the process of computing file hashes in Unix-like systems, with a focus on generating formatted SHA-256 hashes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;basic-hash-computation&quot;&gt;Basic Hash Computation&lt;&#x2F;h2&gt;
&lt;p&gt;The most straightforward way to compute a SHA-256 hash in Unix systems is using the &lt;code&gt;sha256sum&lt;&#x2F;code&gt; command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256sum filename
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This produces output in the format:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;hash_value filename
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;formatted-hash-output&quot;&gt;Formatted Hash Output&lt;&#x2F;h2&gt;
&lt;p&gt;Sometimes you need to format the hash output in a specific way, particularly when working with systems that expect a certain structure. Here’s how to generate a hash in this format:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;type:&amp;quot;unix&amp;quot;  
&lt;&#x2F;span&gt;&lt;span&gt;value:&amp;quot;sha256:HASH_VALUE&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;command-construction&quot;&gt;Command Construction&lt;&#x2F;h3&gt;
&lt;p&gt;To achieve this format, we can combine several Unix commands:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;type:\&amp;quot;unix\&amp;quot;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;value:\&amp;quot;sha256:$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256sum .&#x2F;keeper &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cut -d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; -f1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;)\&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s break down this command:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sha256sum .&#x2F;keeper&lt;&#x2F;code&gt;: Computes the SHA-256 hash of the file&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cut -d&#x27; &#x27; -f1&lt;&#x2F;code&gt;: Extracts just the hash value, removing the filename&lt;&#x2F;li&gt;
&lt;li&gt;Command substitution &lt;code&gt;$()&lt;&#x2F;code&gt;: Embeds the hash into our formatted string&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;echo&lt;&#x2F;code&gt;: Outputs the final formatted result&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;use-cases&quot;&gt;Use Cases&lt;&#x2F;h3&gt;
&lt;p&gt;This formatting is particularly useful for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Configuration management systems&lt;&#x2F;li&gt;
&lt;li&gt;Version control systems&lt;&#x2F;li&gt;
&lt;li&gt;Security verification processes&lt;&#x2F;li&gt;
&lt;li&gt;Automated build systems&lt;&#x2F;li&gt;
&lt;li&gt;Documentation purposes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;alternative-hash-algorithms&quot;&gt;Alternative Hash Algorithms&lt;&#x2F;h2&gt;
&lt;p&gt;While SHA-256 is commonly used, Unix systems support various other hashing algorithms:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;MD5 (using &lt;code&gt;md5sum&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;SHA-1 (using &lt;code&gt;sha1sum&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;SHA-224 (using &lt;code&gt;sha224sum&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;SHA-384 (using &lt;code&gt;sha384sum&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;SHA-512 (using &lt;code&gt;sha512sum&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;p&gt;When working with file hashes:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Always verify the file path before computing the hash&lt;&#x2F;li&gt;
&lt;li&gt;Use appropriate hash algorithms for your security requirements&lt;&#x2F;li&gt;
&lt;li&gt;Consider using multiple hash algorithms for critical files&lt;&#x2F;li&gt;
&lt;li&gt;Document the hashing process in your system documentation&lt;&#x2F;li&gt;
&lt;li&gt;Implement verification steps in your deployment pipeline&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;error-handling&quot;&gt;Error Handling&lt;&#x2F;h2&gt;
&lt;p&gt;When implementing hash computation in scripts, consider handling these common issues:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;File not found&lt;&#x2F;li&gt;
&lt;li&gt;Insufficient permissions&lt;&#x2F;li&gt;
&lt;li&gt;Corrupted files&lt;&#x2F;li&gt;
&lt;li&gt;System command availability&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Example error handling in a shell script:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;.&#x2F;keeper&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: File not found&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: Cannot read file (check permissions)&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hash_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;&#x2F;dev&#x2F;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$? -ne 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: Hash computation failed&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;type:\&amp;quot;unix\&amp;quot;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;value:\&amp;quot;sha256:$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hash_output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cut -d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; -f1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;)\&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;File hashing is a critical operation in many systems. By understanding how to compute and format hashes correctly, you can ensure your systems maintain security and integrity while meeting specific format requirements.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to always validate your hash computations and keep your hashing tools updated to maintain security standards.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Customizing SPIRE Agent SPIFFE IDs: A Deep Dive</title>
        <published>2024-12-02T00:00:00+00:00</published>
        <updated>2024-12-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/spire-agent-spiffeid/"/>
        <id>https://zerotohero.dev/inbox/spire-agent-spiffeid/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/spire-agent-spiffeid/">&lt;p&gt;When working with SPIRE (the SPIFFE Runtime Environment), you might notice that your agent SPIFFE IDs follow a standard pattern like &lt;code&gt;spiffe:&#x2F;&#x2F;trust-domain&#x2F;spire-agent&lt;&#x2F;code&gt;. But what if you need to customize this identifier? Let’s explore how SPIRE handles agent SPIFFE ID assignment and how you can configure it to meet your needs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;default-behavior&quot;&gt;Default Behavior&lt;&#x2F;h2&gt;
&lt;p&gt;By default, SPIRE Server generates agent SPIFFE IDs using a simple pattern:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;spiffe:&#x2F;&#x2F;{trust_domain}&#x2F;spire-agent
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For example, with a trust domain of &lt;code&gt;spike.ist&lt;&#x2F;code&gt;, you’ll see entries like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;Entry ID         : c3d0ecbf-38b1-4a0c-86ac-67d181503f9d
&lt;&#x2F;span&gt;&lt;span&gt;SPIFFE ID       : spiffe:&#x2F;&#x2F;spike.ist&#x2F;spire-agent
&lt;&#x2F;span&gt;&lt;span&gt;Parent ID       : spiffe:&#x2F;&#x2F;spike.ist&#x2F;spire&#x2F;agent&#x2F;join_token&#x2F;a098731b-14a8-4ef3-b2ff-b63c2cc9f985
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This default &lt;code&gt;&#x2F;spire-agent&lt;&#x2F;code&gt; path component is hard-coded in SPIRE Server when no custom configuration is provided.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;customizing-agent-spiffe-ids&quot;&gt;Customizing Agent SPIFFE IDs&lt;&#x2F;h2&gt;
&lt;p&gt;You can customize the agent SPIFFE ID path using the &lt;code&gt;agent_path_template&lt;&#x2F;code&gt; configuration option in your SPIRE Server configuration. Here’s how:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    trust_domain = &amp;quot;spike.ist&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    agent_path_template = &amp;quot;&#x2F;custom-agents&#x2F;{{ .AgentID }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    # ... other server configuration
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;available-template-variables&quot;&gt;Available Template Variables&lt;&#x2F;h3&gt;
&lt;p&gt;The template system supports different variables depending on your attestation method:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;with-x509-pop-attestation&quot;&gt;With X509 PoP Attestation&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.NodeName&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.AgentID&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.TrustDomain&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;with-join-token-attestation&quot;&gt;With Join Token Attestation&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.AgentID&lt;&#x2F;code&gt; (a UUID)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.TrustDomain&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note that join token attestation provides fewer variables since it doesn’t collect node-specific information during the attestation process.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example-templates&quot;&gt;Example Templates&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Using AgentID with join token attestation:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;agent_path_template = &amp;quot;&#x2F;nodes&#x2F;{{ .AgentID }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;# Results in: spiffe:&#x2F;&#x2F;spike.ist&#x2F;nodes&#x2F;c3d0ecbf-38b1-4a0c-86ac-67d181503f9d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Combining multiple path components:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;agent_path_template = &amp;quot;&#x2F;datacenter&#x2F;primary&#x2F;agent&#x2F;{{ .AgentID }}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;considerations&quot;&gt;Considerations&lt;&#x2F;h2&gt;
&lt;p&gt;When choosing your agent path template:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Consider the attestation method you’re using and available variables&lt;&#x2F;li&gt;
&lt;li&gt;Ensure the template will generate unique identifiers for each agent&lt;&#x2F;li&gt;
&lt;li&gt;Keep the paths meaningful and organized for your environment&lt;&#x2F;li&gt;
&lt;li&gt;Remember that changing the template will affect new agent registrations, not existing ones&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;While SPIRE provides a sensible default for agent SPIFFE IDs, the ability to customize them using &lt;code&gt;agent_path_template&lt;&#x2F;code&gt; gives you flexibility in organizing and identifying your agents. Whether you’re using X509 PoP or join token attestation, you can create a naming scheme that fits your infrastructure’s needs.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Securely Generating and Storing SPIRE Agent Tokens</title>
        <published>2024-12-02T00:00:00+00:00</published>
        <updated>2024-12-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/spire-agent-token-generation/"/>
        <id>https://zerotohero.dev/inbox/spire-agent-token-generation/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/spire-agent-token-generation/">&lt;p&gt;SPIRE (the SPIFFE Runtime Environment) requires tokens for agent authentication. Here’s a secure way to generate and store these tokens using bash scripting.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;When working with SPIRE, we often need to generate agent tokens and store them for later use. The default &lt;code&gt;spire-server token generate&lt;&#x2F;code&gt; command outputs tokens with a “Token: “ prefix, which isn’t always ideal for automation or direct use in configuration files.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a bash script that generates a SPIRE agent token, strips unnecessary prefixes, and stores it securely:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#    \\ SPIKE: Keep your secrets secret with SPIFFE.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#  \\\\\ Copyright 2024-present SPIKE contributors.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# \\\\\\\ SPDX-License-Identifier: Apache-2.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TOKEN_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;agent-token.txt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Generate token and strip the &amp;quot;Token: &amp;quot; prefix
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spire-server token generate -spiffeID spiffe:&#x2F;&#x2F;spike.ist&#x2F;spire-agent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;s&#x2F;^Token: &#x2F;&#x2F;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TOKEN_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: Failed to generate token&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Verify file was created and is not empty
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TOKEN_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: Token file is empty or was not created&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Set restrictive permissions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod 600 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TOKEN_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Token successfully generated and saved to $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TOKEN_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;How It Works&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Token Generation&lt;&#x2F;strong&gt;: The script uses &lt;code&gt;spire-server token generate&lt;&#x2F;code&gt; to create a new token with a specific SPIFFE ID.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Text Processing&lt;&#x2F;strong&gt;: A &lt;code&gt;sed&lt;&#x2F;code&gt; command strips the “Token: “ prefix from the output:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x27;s&#x2F;^Token: &#x2F;&#x2F;&#x27;&lt;&#x2F;code&gt; replaces “Token: “ at the start of the line with nothing&lt;&#x2F;li&gt;
&lt;li&gt;The clean token is then redirected to the output file&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Error Handling&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Checks if token generation succeeded&lt;&#x2F;li&gt;
&lt;li&gt;Verifies the output file exists and isn’t empty&lt;&#x2F;li&gt;
&lt;li&gt;Returns meaningful error messages&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;&#x2F;strong&gt;: Sets file permissions to 600 (read&#x2F;write for owner only) to protect the token&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Save the script as &lt;code&gt;generate-agent-token.sh&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Make it executable: &lt;code&gt;chmod +x generate-agent-token.sh&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Run it: &lt;code&gt;.&#x2F;generate-agent-token.sh&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The token will be saved in &lt;code&gt;agent-token.txt&lt;&#x2F;code&gt; in the current directory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Always use restrictive file permissions for token files&lt;&#x2F;li&gt;
&lt;li&gt;Store tokens in a secure location&lt;&#x2F;li&gt;
&lt;li&gt;Never commit tokens to version control&lt;&#x2F;li&gt;
&lt;li&gt;Consider using environment variables or secure vaults for production environments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This script provides a secure and automated way to generate and store SPIRE agent tokens. By removing the prefix and implementing proper error handling, it makes token management more reliable and automation-friendly.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding Error Handling with Defer in Go: A Deep Dive</title>
        <published>2024-12-01T00:00:00+00:00</published>
        <updated>2024-12-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/go-deferred/"/>
        <id>https://zerotohero.dev/inbox/go-deferred/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/go-deferred/">&lt;p&gt;When working with Go, proper error handling is crucial for writing robust applications. Today, we’ll explore an interesting pattern involving deferred functions and named return values, specifically in the context of handling multiple potential error sources.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;Consider a common scenario: you need to read a request body and ensure it’s properly closed afterward. You want to capture both any read errors and any close errors. Here’s what many developers might write initially:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) ([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Potential error ignored!
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code has a subtle issue: we’re ignoring any error that might occur when closing the body. While &lt;code&gt;Close()&lt;&#x2F;code&gt; errors are often less critical than read errors, they can indicate resource leaks or other problems that we should at least be aware of.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-better-solution&quot;&gt;A Better Solution&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s an improved version that captures both types of errors:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bod &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;defer func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ReadCloser&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Join&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    }(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s break down why this works and what’s happening behind the scenes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-the-magic&quot;&gt;Understanding the Magic&lt;&#x2F;h2&gt;
&lt;p&gt;Several key Go concepts come together to make this work:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-named-return-values&quot;&gt;1. Named Return Values&lt;&#x2F;h3&gt;
&lt;p&gt;The function signature uses named return values: &lt;code&gt;(bod []byte, err error)&lt;&#x2F;code&gt;. This creates variables that are initialized to their zero values at function start and can be accessed throughout the function, including in deferred functions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-defer-execution-order&quot;&gt;2. Defer Execution Order&lt;&#x2F;h3&gt;
&lt;p&gt;Deferred functions execute after the &lt;code&gt;return&lt;&#x2F;code&gt; statement is evaluated but before the function returns to its caller. This means:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The return values are evaluated&lt;&#x2F;li&gt;
&lt;li&gt;Deferred functions execute in LIFO order&lt;&#x2F;li&gt;
&lt;li&gt;The function returns to its caller&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;3-variable-capture-vs-shadowing&quot;&gt;3. Variable Capture vs Shadowing&lt;&#x2F;h3&gt;
&lt;p&gt;When we write:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This isn’t creating a new &lt;code&gt;err&lt;&#x2F;code&gt; variable - it’s assigning to our named return parameter. The &lt;code&gt;:=&lt;&#x2F;code&gt; operator only creates new variables for names that haven’t been declared in the current scope.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;behavior-analysis&quot;&gt;Behavior Analysis&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s examine what happens in different scenarios:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;scenario-1-everything-succeeds&quot;&gt;Scenario 1: Everything Succeeds&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;- ReadAll succeeds (err = nil)
&lt;&#x2F;span&gt;&lt;span&gt;- Close succeeds (Close() returns nil)
&lt;&#x2F;span&gt;&lt;span&gt;- Final result: err = nil
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;scenario-2-readall-fails&quot;&gt;Scenario 2: ReadAll Fails&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;- ReadAll fails (err = ReadAll error)
&lt;&#x2F;span&gt;&lt;span&gt;- Function returns early with ReadAll error
&lt;&#x2F;span&gt;&lt;span&gt;- Close still happens via defer
&lt;&#x2F;span&gt;&lt;span&gt;- Final result: err = joined errors (if Close also failed)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;scenario-3-only-close-fails&quot;&gt;Scenario 3: Only Close Fails&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;- ReadAll succeeds (err = nil)
&lt;&#x2F;span&gt;&lt;span&gt;- Close fails
&lt;&#x2F;span&gt;&lt;span&gt;- Final result: err = Close error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;alternative-approaches&quot;&gt;Alternative Approaches&lt;&#x2F;h2&gt;
&lt;p&gt;Sometimes you might want more control over error handling. Here’s an alternative approach that handles errors more explicitly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) ([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;readErr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;readErr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Best effort close
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;readErr
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;closeErr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;closeErr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;closeErr
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This version gives you more control but loses some of the elegance of using defer for cleanup.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Use named return values when you need to modify return values in deferred functions&lt;&#x2F;li&gt;
&lt;li&gt;Be conscious of error priority - sometimes you want to preserve the original error&lt;&#x2F;li&gt;
&lt;li&gt;Consider using &lt;code&gt;errors.Join&lt;&#x2F;code&gt; when both errors are meaningful&lt;&#x2F;li&gt;
&lt;li&gt;Document your error handling strategy, especially when using defer&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Go’s defer mechanism, combined with named return values and error joining, provides a powerful way to handle multiple error sources. While it might seem magical at first, understanding how these pieces work together helps us write more robust code.&lt;&#x2F;p&gt;
&lt;p&gt;The pattern we explored today is particularly useful when dealing with resources that need cleanup, like file handles, network connections, or database transactions. Just remember that with great power comes great responsibility - make sure your error handling strategy is clear and well-documented.&lt;&#x2F;p&gt;
&lt;p&gt;Happy coding!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding SPIFFE Source Management in go-spiffe</title>
        <published>2024-12-01T00:00:00+00:00</published>
        <updated>2024-12-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/go-spiffe-source/"/>
        <id>https://zerotohero.dev/inbox/go-spiffe-source/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/go-spiffe-source/">&lt;p&gt;When working with the go-spiffe library, one common question developers face is how to properly manage SPIFFE sources. Specifically, should you create a new source for each request, or can you maintain a long-living source? Let’s dive into how source management works in go-spiffe and explore best practices for your applications.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-lifecycle-of-a-spiffe-source&quot;&gt;The Lifecycle of a SPIFFE Source&lt;&#x2F;h2&gt;
&lt;p&gt;A SPIFFE source, created using &lt;code&gt;workloadapi.NewX509Source()&lt;&#x2F;code&gt;, is designed to be a long-living component in your application. When you create a source, several important things happen behind the scenes:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The source establishes a streaming connection to the Workload API&lt;&#x2F;li&gt;
&lt;li&gt;It automatically receives and caches X.509-SVID updates&lt;&#x2F;li&gt;
&lt;li&gt;It maintains the connection and handles credential rotation&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;best-practices-for-source-management&quot;&gt;Best Practices for Source Management&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s how you should typically set up a source in your application:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cancel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WithTimeout&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Background&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cancel&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;workloadapi&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewX509Source&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Use the source throughout your application&amp;#39;s lifetime
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;do-s&quot;&gt;Do’s:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Create the source once during application startup&lt;&#x2F;li&gt;
&lt;li&gt;Reuse the same source throughout your application’s lifetime&lt;&#x2F;li&gt;
&lt;li&gt;Close the source when shutting down your application&lt;&#x2F;li&gt;
&lt;li&gt;Handle errors appropriately during source creation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;don-ts&quot;&gt;Don’ts:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Don’t create and close sources for each request&lt;&#x2F;li&gt;
&lt;li&gt;Avoid creating multiple unnecessary sources&lt;&#x2F;li&gt;
&lt;li&gt;Don’t ignore source cleanup on application shutdown&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why-long-living-sources-matter&quot;&gt;Why Long-Living Sources Matter&lt;&#x2F;h2&gt;
&lt;p&gt;The streaming connection maintained by the source ensures that your application always has valid credentials. The library handles all the complexity of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Certificate rotation&lt;&#x2F;li&gt;
&lt;li&gt;Trust bundle updates&lt;&#x2F;li&gt;
&lt;li&gt;Connection maintenance&lt;&#x2F;li&gt;
&lt;li&gt;Automatic retry on failures&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This means you don’t need to worry about manually refreshing credentials or managing trust material updates. The library takes care of all of this for you.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;common-pitfalls&quot;&gt;Common Pitfalls&lt;&#x2F;h2&gt;
&lt;p&gt;One common mistake is creating a new source for each request. This is inefficient and can lead to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unnecessary connection overhead&lt;&#x2F;li&gt;
&lt;li&gt;Increased latency in your applications&lt;&#x2F;li&gt;
&lt;li&gt;Higher resource utilization&lt;&#x2F;li&gt;
&lt;li&gt;Potential rate limiting from the Workload API&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Understanding how to properly manage SPIFFE sources is crucial for building reliable applications with go-spiffe. By following these best practices, you can ensure your application handles identity and authentication efficiently and securely.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: create your source once, use it throughout your application’s lifetime, and let go-spiffe handle the complex task of managing your identity credentials.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;Note: This post assumes familiarity with basic SPIFFE concepts and the go-spiffe library. For more information about SPIFFE and go-spiffe, visit the official documentation.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Better Error Handling Patterns for Go SDKs</title>
        <published>2024-12-01T00:00:00+00:00</published>
        <updated>2024-12-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/sdk-error-handling/"/>
        <id>https://zerotohero.dev/inbox/sdk-error-handling/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/sdk-error-handling/">&lt;p&gt;When building SDKs in Go, one common challenge is balancing transparency and debuggability with clean error handling. This becomes particularly evident when implementing retry mechanisms, where we need to track multiple attempts, delays, and error states.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-common-approach-logging&quot;&gt;The Common Approach: Logging&lt;&#x2F;h2&gt;
&lt;p&gt;Many SDKs resort to internal logging for debugging:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Retry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;scope &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Strategy&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;correlationID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;crypto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TraceLn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;correlationID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Starting retry loop&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ... retry logic with logging
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While this provides visibility, it has several drawbacks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Forces a logging implementation on SDK users&lt;&#x2F;li&gt;
&lt;li&gt;Mixes concerns between error handling and logging&lt;&#x2F;li&gt;
&lt;li&gt;Makes testing more complicated&lt;&#x2F;li&gt;
&lt;li&gt;Can pollute user logs with SDK internals&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;better-patterns-for-sdk-error-handling&quot;&gt;Better Patterns for SDK Error Handling&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-rich-error-types&quot;&gt;1. Rich Error Types&lt;&#x2F;h3&gt;
&lt;p&gt;Instead of logging, return structured error information:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;RetryError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;OriginalError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Attempts     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TotalTime    time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Duration
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Scope        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CorrelationID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;RetryError&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;failed after &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt; attempts over &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt; in scope &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39; (correlation_id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Attempts&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TotalTime&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Scope&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CorrelationID&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;OriginalError&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Users can extract detailed information when needed&lt;&#x2F;li&gt;
&lt;li&gt;Follows Go’s error handling patterns&lt;&#x2F;li&gt;
&lt;li&gt;Makes testing straightforward&lt;&#x2F;li&gt;
&lt;li&gt;Keeps separation of concerns&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-event-callbacks&quot;&gt;2. Event Callbacks&lt;&#x2F;h3&gt;
&lt;p&gt;Allow users to plug in their own handling:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;RetryCallback &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;attempt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;delay time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Retry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Strategy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;onRetry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;RetryCallback&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Call onRetry for each attempt
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Gives users complete control over instrumentation&lt;&#x2F;li&gt;
&lt;li&gt;Enables custom metrics collection&lt;&#x2F;li&gt;
&lt;li&gt;Supports different logging implementations&lt;&#x2F;li&gt;
&lt;li&gt;Maintains flexibility&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-optional-debug-mode&quot;&gt;3. Optional Debug Mode&lt;&#x2F;h3&gt;
&lt;p&gt;Configure debug behavior through options:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Logger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Logger
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Debug  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Retry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Strategy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Config&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Debug &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Logger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Log debug information
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This pattern:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Makes debugging optional&lt;&#x2F;li&gt;
&lt;li&gt;Allows users to choose their logging implementation&lt;&#x2F;li&gt;
&lt;li&gt;Keeps debug information out of production logs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Return, Don’t Log&lt;&#x2F;strong&gt;: SDKs should return rich error information rather than logging internally.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Structured Errors&lt;&#x2F;strong&gt;: Use custom error types with fields that capture important debugging details.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Error Wrapping&lt;&#x2F;strong&gt;: Preserve error context through the chain:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;retry failed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;originalError&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flexible Instrumentation&lt;&#x2F;strong&gt;: Provide hooks for users to implement their own logging&#x2F;metrics.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clear Documentation&lt;&#x2F;strong&gt;: Document error types and their fields thoroughly.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;implementation-example&quot;&gt;Implementation Example&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a complete implementation combining these patterns:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;RetryInfo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CorrelationID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Events        &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;RetryEvent
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StartTime     time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Time
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;RetryEvent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Attempt   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Delay     time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Duration
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TimeStamp time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Time
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Retry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Strategy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;onRetry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;RetryCallback&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RetryInfo&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CorrelationID&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;crypto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StartTime&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Now&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MaxRetries&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RetryEvent&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Attempt&lt;&#x2F;span&gt;&lt;span&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TimeStamp&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Now&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;:     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;onRetry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;onRetry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Attempt&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Delay&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Events&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ... retry logic
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RetryError&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LastErr&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Events&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Events&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;By following these patterns, we can build SDKs that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Provide rich debugging information&lt;&#x2F;li&gt;
&lt;li&gt;Respect separation of concerns&lt;&#x2F;li&gt;
&lt;li&gt;Give users control over logging and instrumentation&lt;&#x2F;li&gt;
&lt;li&gt;Maintain clean, idiomatic Go code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Remember: good SDK design is about enabling users while staying out of their way. Return errors, don’t log them, and give users the tools they need to handle errors appropriately in their context.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Pragmatic Audit Logging in Go: Starting Small and Growing Smart</title>
        <published>2024-11-28T00:00:00+00:00</published>
        <updated>2024-11-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/audit-logging/"/>
        <id>https://zerotohero.dev/inbox/audit-logging/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/audit-logging/">&lt;p&gt;When building web services, audit logging is often approached in one of two extremes: either skipped entirely for “later” or over-engineered from the start. Let’s explore a pragmatic middle ground, starting with a simple HTTP router factory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-starting-point&quot;&gt;The Starting Point&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a typical router factory in Go - simple and functional:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;handler &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MethodPost &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlKeep&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;routeKeep
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MethodPost &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;read&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlKeep&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;routeShow
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;routeFallback
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This factory takes three parameters: path (&lt;code&gt;p&lt;&#x2F;code&gt;), action (&lt;code&gt;a&lt;&#x2F;code&gt;), and method (&lt;code&gt;m&lt;&#x2F;code&gt;), and returns the appropriate handler. Clean and straightforward, but with no visibility into who’s doing what in our system.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-basic-audit-logging&quot;&gt;Adding Basic Audit Logging&lt;&#x2F;h2&gt;
&lt;p&gt;The simplest approach to add audit logging might look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;handler &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;entry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;AuditEntry&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Timestamp&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Now&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;UserId&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;TBD&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Resource&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SessionID&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MethodPost &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlKeep&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Action &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;create&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logAndRoute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;routeKeep&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MethodPost &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;read&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlKeep&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Action &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;read&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logAndRoute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;routeShow&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Action &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fallback&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logAndRoute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;routeFallback&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;logAndRoute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;entry log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;AuditEntry&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;handler &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Audit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;h
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This gives us several key benefits:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Timing Information&lt;&#x2F;strong&gt;: When was the route selected?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Action Context&lt;&#x2F;strong&gt;: What operation was attempted?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Resource Tracking&lt;&#x2F;strong&gt;: What part of the system was accessed?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Future-Proofing&lt;&#x2F;strong&gt;: Placeholders for user and session tracking&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;why-this-works-as-a-starting-point&quot;&gt;Why This Works as a Starting Point&lt;&#x2F;h2&gt;
&lt;p&gt;This approach has several advantages:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Minimal Overhead&lt;&#x2F;strong&gt;: We’re not wrapping handlers or adding middleware complexity&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Clear Intent&lt;&#x2F;strong&gt;: The logging happens at a clear decision point&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Easy to Evolve&lt;&#x2F;strong&gt;: We can enhance the &lt;code&gt;AuditEntry&lt;&#x2F;code&gt; structure as needs grow&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No Premature Optimization&lt;&#x2F;strong&gt;: We haven’t built infrastructure we might not need&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;where-to-go-from-here&quot;&gt;Where to Go From Here&lt;&#x2F;h2&gt;
&lt;p&gt;As your system grows, you might want to enhance this basic approach:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;User Context&lt;&#x2F;strong&gt;: Replace “TBD” with actual user information from authentication&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Session Tracking&lt;&#x2F;strong&gt;: Add real session IDs for request correlation&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Result Logging&lt;&#x2F;strong&gt;: Add post-handler logging to capture success&#x2F;failure&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Data Changes&lt;&#x2F;strong&gt;: Track what actually changed in successful operations&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;common-pitfalls-to-avoid&quot;&gt;Common Pitfalls to Avoid&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Don’t Log Everything&lt;&#x2F;strong&gt;: Audit logs are not debug logs. Focus on business-relevant events.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Keep It Maintainable&lt;&#x2F;strong&gt;: Resist the urge to add “just one more field” without clear purpose.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Consider Performance&lt;&#x2F;strong&gt;: Audit logs can grow quickly. Plan for volume early.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Stay Compliant&lt;&#x2F;strong&gt;: Ensure you’re not logging sensitive data that regulations prohibit.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Starting with simple, focused audit logging at key decision points provides immediate value while leaving room for growth. As your system’s needs evolve, you can enhance the logging infrastructure without having to undo an over-engineered initial approach.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: The best audit logging system is the one that actually gets implemented and maintained, not the one that covers every theoretical future need.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;This post is part of our series on practical Go patterns. For more insights on building maintainable Go services, follow our blog.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>log.Fatalf() vs panic in Go: Choosing the Right Way to Fail</title>
        <published>2024-11-28T00:00:00+00:00</published>
        <updated>2024-11-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/go-error-handling/"/>
        <id>https://zerotohero.dev/inbox/go-error-handling/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/go-error-handling/">&lt;p&gt;When writing Go applications, developers often need to handle catastrophic errors that prevent the program from continuing. Go provides two primary mechanisms for handling such situations: &lt;code&gt;log.Fatalf()&lt;&#x2F;code&gt; and &lt;code&gt;panic&lt;&#x2F;code&gt;. While both can terminate program execution, they serve different purposes and come with their own sets of trade-offs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-log-fatalf&quot;&gt;Understanding log.Fatalf()&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;log.Fatalf()&lt;&#x2F;code&gt; is part of Go’s standard logging package and provides a way to log a message before terminating the program. When called, it:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Formats and writes the error message&lt;&#x2F;li&gt;
&lt;li&gt;Calls &lt;code&gt;os.Exit(1)&lt;&#x2F;code&gt; to terminate the program&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;advantages&quot;&gt;Advantages&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Clean Logging&lt;&#x2F;strong&gt;: Allows you to provide a meaningful error message before exit&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Controlled Shutdown&lt;&#x2F;strong&gt;: Predictably exits with status code 1&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Application-Friendly&lt;&#x2F;strong&gt;: Ideal for application-level fatal errors&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Testing Friendly&lt;&#x2F;strong&gt;: Being a standard library function makes it easier to test&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;User-Friendly&lt;&#x2F;strong&gt;: Error messages are typically more readable for end users&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No Deferred Functions&lt;&#x2F;strong&gt;: Bypasses deferred function calls&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Limited Debug Info&lt;&#x2F;strong&gt;: Doesn’t automatically provide stack traces&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No Recovery&lt;&#x2F;strong&gt;: Once called, the program will exit without possibility of recovery&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Scope Limited&lt;&#x2F;strong&gt;: Only affects the current program&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;understanding-panic&quot;&gt;Understanding panic&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;panic&lt;&#x2F;code&gt; is a built-in Go function designed to handle exceptional conditions that shouldn’t occur during normal operation. When called, it:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Immediately stops normal execution&lt;&#x2F;li&gt;
&lt;li&gt;Runs all deferred functions in the current goroutine&lt;&#x2F;li&gt;
&lt;li&gt;Prints a stack trace&lt;&#x2F;li&gt;
&lt;li&gt;Terminates the program (unless recovered)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;advantages-1&quot;&gt;Advantages&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Deferred Function Handling&lt;&#x2F;strong&gt;: Executes all deferred functions before terminating&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Rich Debug Information&lt;&#x2F;strong&gt;: Provides detailed stack traces by default&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Recoverable&lt;&#x2F;strong&gt;: Can be caught and handled using &lt;code&gt;recover()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Programming Error Detection&lt;&#x2F;strong&gt;: Excellent for catching logical errors and invariant violations&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Library-Friendly&lt;&#x2F;strong&gt;: Allows calling code to handle the panic if desired&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;disadvantages-1&quot;&gt;Disadvantages&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Abrupt Termination&lt;&#x2F;strong&gt;: Less graceful than logging and exiting&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Potentially Confusing&lt;&#x2F;strong&gt;: Can be misused for normal error conditions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Verbose Stack Traces&lt;&#x2F;strong&gt;: Can overwhelm users with technical details&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Unpredictable Propagation&lt;&#x2F;strong&gt;: May bubble up through multiple function calls&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;when-to-use-each&quot;&gt;When to Use Each&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;use-log-fatalf-when&quot;&gt;Use log.Fatalf() when:&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Application startup failures
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;initDatabase&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Failed to initialize database: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Configuration errors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;APIKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;API key not provided in configuration&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Critical resource unavailability
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;critical-data.json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Cannot proceed without critical data: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;use-panic-when&quot;&gt;Use panic when:&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Programming errors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;divide&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;division by zero&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Invariant violations
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;processUser&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;user cannot be nil&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Process user...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Unrecoverable state corruption
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Stack&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Pop&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span&gt;{} {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;IsEmpty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;pop from empty stack&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Pop item...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Library Code&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Prefer returning errors over either &lt;code&gt;log.Fatalf()&lt;&#x2F;code&gt; or &lt;code&gt;panic&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;panic&lt;&#x2F;code&gt; only for programming errors&lt;&#x2F;li&gt;
&lt;li&gt;Never use &lt;code&gt;log.Fatalf()&lt;&#x2F;code&gt; in libraries&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Application Code&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;log.Fatalf()&lt;&#x2F;code&gt; for application-level fatal errors&lt;&#x2F;li&gt;
&lt;li&gt;Reserve &lt;code&gt;panic&lt;&#x2F;code&gt; for truly exceptional conditions&lt;&#x2F;li&gt;
&lt;li&gt;Consider using custom logging solutions for better control&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Error Handling Strategy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Document your error handling strategy&lt;&#x2F;li&gt;
&lt;li&gt;Be consistent across your codebase&lt;&#x2F;li&gt;
&lt;li&gt;Consider your users when choosing between the two&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The choice between &lt;code&gt;log.Fatalf()&lt;&#x2F;code&gt; and &lt;code&gt;panic&lt;&#x2F;code&gt; depends largely on your specific use case. For application-level fatal errors where you want to log clearly and exit cleanly, &lt;code&gt;log.Fatalf()&lt;&#x2F;code&gt; is the better choice. For programming errors or invariant violations that should never happen in correct code, &lt;code&gt;panic&lt;&#x2F;code&gt; is more appropriate.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that in many cases, especially in library code, returning an error is preferable to either option, as it gives callers more control over error handling and program flow.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding Go&#x27;s slog Log Levels: A Practical Guidee</title>
        <published>2024-11-28T00:00:00+00:00</published>
        <updated>2024-11-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/slog-levels/"/>
        <id>https://zerotohero.dev/inbox/slog-levels/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/slog-levels/">&lt;p&gt;Go’s &lt;code&gt;slog&lt;&#x2F;code&gt; package, introduced in Go 1.21, provides a structured logging interface that’s both powerful and flexible. One of its key features is the log level system, which helps developers control what messages appear in their logs. Let’s dive deep into how these levels work.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-logging-level-hierarchy&quot;&gt;The Logging Level Hierarchy&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;slog&lt;&#x2F;code&gt; package implements a hierarchical level system where each level represents a different severity of log message. The hierarchy, from lowest to highest severity, is:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Debug&lt;&#x2F;li&gt;
&lt;li&gt;Info&lt;&#x2F;li&gt;
&lt;li&gt;Warn&lt;&#x2F;li&gt;
&lt;li&gt;Error&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;how-level-filtering-works&quot;&gt;How Level Filtering Works&lt;&#x2F;h2&gt;
&lt;p&gt;The logging level you set acts as a minimum threshold. Any log message with a severity level equal to or higher than this threshold will be displayed, while messages with lower severity levels will be filtered out.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example-setup&quot;&gt;Example Setup&lt;&#x2F;h3&gt;
&lt;p&gt;Here’s a basic example showing two different logger configurations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;log&#x2F;slog&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;os&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Debug level logger
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;debugLogger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewTextHandler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Stdout&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;HandlerOptions&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Level&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LevelDebug&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Info level logger
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;infoLogger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewTextHandler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Stdout&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;HandlerOptions&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Level&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LevelInfo&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;debug-level-configuration&quot;&gt;Debug Level Configuration&lt;&#x2F;h3&gt;
&lt;p&gt;When you set the logger level to Debug:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;debugLogger&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Debug message&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ✅ Will be displayed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;debugLogger&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Info message&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)     &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ✅ Will be displayed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;debugLogger&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Warn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Warning message&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ✅ Will be displayed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;debugLogger&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error message&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ✅ Will be displayed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;info-level-configuration&quot;&gt;Info Level Configuration&lt;&#x2F;h3&gt;
&lt;p&gt;When you set the logger level to Info:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;infoLogger&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Debug message&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ❌ Won&amp;#39;t be displayed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;infoLogger&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Info message&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ✅ Will be displayed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;infoLogger&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Warn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Warning message&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ✅ Will be displayed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;infoLogger&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error message&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ✅ Will be displayed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;common-pitfalls-and-solutions&quot;&gt;Common Pitfalls and Solutions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-default-level&quot;&gt;1. Default Level&lt;&#x2F;h3&gt;
&lt;p&gt;If you don’t specify a level in the &lt;code&gt;HandlerOptions&lt;&#x2F;code&gt;, the logger defaults to Info level. This means Debug messages won’t be visible unless explicitly configured:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This logger will use Info level by default
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewTextHandler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Stdout&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-environment-based-configuration&quot;&gt;2. Environment-Based Configuration&lt;&#x2F;h3&gt;
&lt;p&gt;It’s common to want different log levels in different environments. Here’s a pattern for setting the level based on an environment variable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;getLogLevel&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Level &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;levelStr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Getenv&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;LOG_LEVEL&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;levelStr &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;DEBUG&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LevelDebug
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;WARN&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LevelWarn
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;ERROR&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LevelError
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LevelInfo
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewTextHandler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Stdout&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;slog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;HandlerOptions&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Level&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;getLogLevel&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    }))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Use logger...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Development vs. Production&lt;&#x2F;strong&gt;: Use Debug level during development for maximum visibility, but consider using Info level in production to reduce noise and improve performance.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Appropriate Level Usage&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Debug: Detailed information for debugging&lt;&#x2F;li&gt;
&lt;li&gt;Info: General operational messages&lt;&#x2F;li&gt;
&lt;li&gt;Warn: Warning messages for potentially harmful situations&lt;&#x2F;li&gt;
&lt;li&gt;Error: Error messages for serious problems&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Structured Logging&lt;&#x2F;strong&gt;: Take advantage of slog’s structured logging capabilities:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logger&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;user login&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;username&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;loginTime&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Now&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;attemptNumber&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;attempts&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Understanding how slog’s log levels work is crucial for effective logging in Go applications. By setting appropriate log levels and following best practices, you can maintain clean and informative logs that help with both debugging and monitoring your application.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that log levels are just one part of a good logging strategy. Combined with structured logging and proper log management, they help create a robust observability solution for your Go applications.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How to Count Lines in Your Source Code Projects: A Comprehensive Guide</title>
        <published>2024-11-27T00:00:00+00:00</published>
        <updated>2024-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/counting-lines-of-code/"/>
        <id>https://zerotohero.dev/inbox/counting-lines-of-code/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/counting-lines-of-code/">&lt;p&gt;As software projects grow, tracking their size becomes increasingly important for maintenance, documentation, and planning. One fundamental metric is the line count of your source code. In this article, we’ll explore different methods to count lines in your codebase, from quick command-line solutions to more sophisticated tools.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-quick-and-simple-using-wc&quot;&gt;The Quick and Simple: Using &lt;code&gt;wc&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;For Unix-like systems (Linux, macOS), the &lt;code&gt;wc&lt;&#x2F;code&gt; (word count) command provides a straightforward way to count lines. Here’s how you can use it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Count lines in a single file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;wc -l file.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To count lines across multiple files, you can combine &lt;code&gt;wc&lt;&#x2F;code&gt; with other Unix commands:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Count lines in all Python files in a directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;find . -type f -name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;*.py&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;xargs wc -l
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Count lines recursively for all files
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;find . -type f -exec wc -l {} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While &lt;code&gt;wc&lt;&#x2F;code&gt; is fast and readily available, it’s rather basic - it counts all lines, including empty lines and comments.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-professional-solution-cloc&quot;&gt;The Professional Solution: CLOC&lt;&#x2F;h2&gt;
&lt;p&gt;CLOC (Count Lines of Code) is a specialized tool that provides detailed statistics about your codebase. It’s more intelligent than &lt;code&gt;wc&lt;&#x2F;code&gt; as it can:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Exclude blank lines and comments&lt;&#x2F;li&gt;
&lt;li&gt;Recognize dozens of programming languages&lt;&#x2F;li&gt;
&lt;li&gt;Provide detailed breakdowns by language&lt;&#x2F;li&gt;
&lt;li&gt;Generate reports in various formats&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;installing-cloc&quot;&gt;Installing CLOC&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Ubuntu&#x2F;Debian
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo apt install cloc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# macOS via Homebrew
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;brew install cloc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Windows via Chocolatey
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;choco install cloc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;using-cloc&quot;&gt;Using CLOC&lt;&#x2F;h3&gt;
&lt;p&gt;Basic usage is as simple as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cloc .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will scan your current directory and provide a detailed breakdown. For more specific analysis:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Count specific languages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cloc --include-lang&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Python,JavaScript&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Generate XML report
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cloc --xml --out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;results.xml .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Count lines in a Git repository
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git clone --depth 1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;repository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cloc .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;custom-python-solution&quot;&gt;Custom Python Solution&lt;&#x2F;h2&gt;
&lt;p&gt;Sometimes you need more control over what and how you count. Here’s a Python script that you can customize for your specific needs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;pathlib &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Path
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;count_lines&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;directory&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;extensions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;    Count lines in files within a directory, optionally filtering by extension.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;    Args:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;        directory (str): Path to the directory to scan
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;        extensions (list): List of file extensions to include (e.g., [&amp;#39;.py&amp;#39;, &amp;#39;.js&amp;#39;])
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;    Returns:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;        dict: Dictionary containing line counts and file statistics
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    stats &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;total_lines&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;total_files&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;files_by_extension&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: {}
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Path(directory).rglob(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;*&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path.is_file()&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;extensions &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;and not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(path).endswith(ext) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;extensions)&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;                
&lt;&#x2F;span&gt;&lt;span&gt;            ext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;path.suffix
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(path, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;r&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, encoding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;utf-8&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;                    line_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;f)
&lt;&#x2F;span&gt;&lt;span&gt;                    
&lt;&#x2F;span&gt;&lt;span&gt;                stats[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;total_lines&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;line_count
&lt;&#x2F;span&gt;&lt;span&gt;                stats[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;total_files&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;                
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;ext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;not in &lt;&#x2F;span&gt;&lt;span&gt;stats[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;files_by_extension&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]:
&lt;&#x2F;span&gt;&lt;span&gt;                    stats[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;files_by_extension&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][ext] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;files&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;lines&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                
&lt;&#x2F;span&gt;&lt;span&gt;                stats[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;files_by_extension&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][ext][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;files&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;                stats[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;files_by_extension&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][ext][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;lines&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;line_count
&lt;&#x2F;span&gt;&lt;span&gt;                    
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;UnicodeDecodeError&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;PermissionError&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;stats
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This script provides more detailed statistics and can be easily modified to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Exclude certain directories (like &lt;code&gt;node_modules&lt;&#x2F;code&gt; or &lt;code&gt;.git&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Count only specific types of lines&lt;&#x2F;li&gt;
&lt;li&gt;Generate custom reports&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;p&gt;When counting lines in your source code, consider:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;&#x2F;strong&gt;: Use the same tool and settings across your project for meaningful comparisons over time.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;&#x2F;strong&gt;: Document which tool and settings you use for line counting in your project documentation.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Automation&lt;&#x2F;strong&gt;: Integrate line counting into your CI&#x2F;CD pipeline to track changes over time.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Context&lt;&#x2F;strong&gt;: Remember that line count is just one metric - it doesn’t necessarily correlate with complexity or quality.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;While line count isn’t a perfect metric for code complexity or project size, it’s a useful baseline metric that’s easy to track. Whether you choose the simple &lt;code&gt;wc&lt;&#x2F;code&gt; command, the comprehensive CLOC tool, or a custom solution depends on your specific needs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;wc&lt;&#x2F;code&gt; for quick, rough estimates&lt;&#x2F;li&gt;
&lt;li&gt;Use CLOC for detailed analysis and reporting&lt;&#x2F;li&gt;
&lt;li&gt;Create a custom solution when you need specific features or integration with your workflow&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Remember that the goal isn’t just to count lines, but to gain insights that help you better understand and manage your codebase.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cross-Compiling Go Applications on M3 Macs: A Practical Guide</title>
        <published>2024-11-27T00:00:00+00:00</published>
        <updated>2024-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/cross-compilation/"/>
        <id>https://zerotohero.dev/inbox/cross-compilation/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/cross-compilation/">&lt;p&gt;Cross-compiling Go applications on Apple Silicon (M-series) Macs can be tricky, especially when dealing with CGO dependencies. In this guide, we’ll explore different approaches to building Go applications for multiple architectures, specifically targeting Linux (AMD64 and ARM64) and macOS (ARM64).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;&#x2F;h2&gt;
&lt;p&gt;When working with Go applications that use CGO, simple cross-compilation commands like &lt;code&gt;GOOS=linux GOARCH=amd64 go build&lt;&#x2F;code&gt; might not be sufficient. This is particularly true when:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Your application uses CGO-dependent packages&lt;&#x2F;li&gt;
&lt;li&gt;You need to build for multiple architectures&lt;&#x2F;li&gt;
&lt;li&gt;You’re working on an M-series Mac&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;initial-approach-local-cross-compilation&quot;&gt;Initial Approach: Local Cross-Compilation&lt;&#x2F;h2&gt;
&lt;p&gt;My first attempt involved using traditional cross-compilation tools. Here’s what I initially tried:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Linux ARM64
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CGO_ENABLED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GOEXPERIMENT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;boringcrypto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;go build -o keeper .&#x2F;app&#x2F;keeper&#x2F;cmd&#x2F;main.go
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CGO_ENABLED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GOEXPERIMENT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;boringcrypto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;go build -o nexus .&#x2F;app&#x2F;nexus&#x2F;cmd&#x2F;main.go
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CGO_ENABLED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GOEXPERIMENT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;boringcrypto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;go build -o spike .&#x2F;app&#x2F;spike&#x2F;cmd&#x2F;main.go
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, when trying to cross-compile for different architectures, I ran into issues:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GOOS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;linux &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GOARCH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;amd64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CGO_ENABLED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GOEXPERIMENT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;boringcrypto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;go build -o nexus-linux-amd64 .&#x2F;app&#x2F;nexus&#x2F;cmd&#x2F;main.go
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach failed because it needed proper cross-compilation toolchains.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution-docker-based-cross-compilation&quot;&gt;The Solution: Docker-Based Cross-Compilation&lt;&#x2F;h2&gt;
&lt;p&gt;After exploring various options, I found that using Docker for cross-compilation provides the most reliable and reproducible solution. Here’s how to implement it:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;First, create a Dockerfile:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; golang:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;1.21-alpine &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;AS &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;builder
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Install build tools
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;apk add --no-cache gcc musl-dev
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Set working directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;WORKDIR &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;app
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Copy go mod files
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span&gt; go.mod go.sum .&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;go mod download
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Copy source code
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span&gt; . .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Build for different platforms
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOEXPERIMENT=boringcrypto go build -o keeper-linux-amd64 .&#x2F;app&#x2F;keeper&#x2F;cmd&#x2F;main.go &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    GOOS=linux GOARCH=amd64 CGO_ENABLED=1 GOEXPERIMENT=boringcrypto go build -o nexus-linux-amd64 .&#x2F;app&#x2F;nexus&#x2F;cmd&#x2F;main.go &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOEXPERIMENT=boringcrypto go build -o spike-linux-amd64 .&#x2F;app&#x2F;spike&#x2F;cmd&#x2F;main.go &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    GOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOEXPERIMENT=boringcrypto go build -o keeper-linux-arm64 .&#x2F;app&#x2F;keeper&#x2F;cmd&#x2F;main.go &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    GOOS=linux GOARCH=arm64 CGO_ENABLED=1 GOEXPERIMENT=boringcrypto go build -o nexus-linux-arm64 .&#x2F;app&#x2F;nexus&#x2F;cmd&#x2F;main.go &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    GOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOEXPERIMENT=boringcrypto go build -o spike-linux-arm64 .&#x2F;app&#x2F;spike&#x2F;cmd&#x2F;main.go
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Create a build script:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Build the Docker image
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;docker build -t go-cross-compiler .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Create a container and copy the binaries
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;docker create --name temp-container go-cross-compiler
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;docker cp temp-container:&#x2F;app&#x2F;keeper-linux-amd64 .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;docker cp temp-container:&#x2F;app&#x2F;nexus-linux-amd64 .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;docker cp temp-container:&#x2F;app&#x2F;spike-linux-amd64 .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;docker cp temp-container:&#x2F;app&#x2F;keeper-linux-arm64 .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;docker cp temp-container:&#x2F;app&#x2F;nexus-linux-arm64 .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;docker cp temp-container:&#x2F;app&#x2F;spike-linux-arm64 .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Clean up
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;docker rm temp-container
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;advantages-of-the-docker-approach&quot;&gt;Advantages of the Docker Approach&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Reproducibility&lt;&#x2F;strong&gt;: The build environment is consistent across different development machines&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No Local Dependencies&lt;&#x2F;strong&gt;: No need to install cross-compilation tools locally&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Simplified Process&lt;&#x2F;strong&gt;: One command builds all targets&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Consistent Results&lt;&#x2F;strong&gt;: Binaries are built in a controlled environment&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Easy CI&#x2F;CD Integration&lt;&#x2F;strong&gt;: The Docker-based approach works well in automated pipelines&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;building-for-macos-arm64&quot;&gt;Building for macOS ARM64&lt;&#x2F;h2&gt;
&lt;p&gt;For macOS ARM64 builds, you can still build natively on your M-series Mac:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GOOS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;darwin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GOARCH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;arm64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CGO_ENABLED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GOEXPERIMENT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;boringcrypto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;go build -o keeper-darwin-arm64 .&#x2F;app&#x2F;keeper&#x2F;cmd&#x2F;main.go
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GOOS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;darwin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GOARCH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;arm64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CGO_ENABLED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GOEXPERIMENT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;boringcrypto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;go build -o nexus-darwin-arm64 .&#x2F;app&#x2F;nexus&#x2F;cmd&#x2F;main.go
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GOOS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;darwin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GOARCH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;arm64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CGO_ENABLED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GOEXPERIMENT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;boringcrypto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;go build -o spike-darwin-arm64 .&#x2F;app&#x2F;spike&#x2F;cmd&#x2F;main.go
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;common-pitfalls-and-solutions&quot;&gt;Common Pitfalls and Solutions&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;CGO Dependencies&lt;&#x2F;strong&gt;: When &lt;code&gt;CGO_ENABLED=1&lt;&#x2F;code&gt;, ensure your Docker container has the necessary build tools installed&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Architecture Mismatch&lt;&#x2F;strong&gt;: Double-check &lt;code&gt;GOOS&lt;&#x2F;code&gt; and &lt;code&gt;GOARCH&lt;&#x2F;code&gt; values match your target platforms&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Build Tags&lt;&#x2F;strong&gt;: Consider using build tags for platform-specific code&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Static Linking&lt;&#x2F;strong&gt;: For better portability, use &lt;code&gt;CGO_ENABLED=0&lt;&#x2F;code&gt; when possible&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;While cross-compilation on M-series Macs presents some challenges, using Docker provides a robust and maintainable solution. This approach simplifies the build process and ensures consistent results across different architectures.&lt;&#x2F;p&gt;
&lt;p&gt;For projects that don’t require CGO, you might still use direct cross-compilation. However, for complex projects with CGO dependencies, the Docker-based approach is recommended.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to version your build scripts and Dockerfile alongside your project code to maintain build reproducibility across your team.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding Lock Upgrading Deadlocks in Go: A Common Concurrency Pitfall</title>
        <published>2024-11-27T00:00:00+00:00</published>
        <updated>2024-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/deadlock/"/>
        <id>https://zerotohero.dev/inbox/deadlock/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/deadlock/">&lt;p&gt;When working with concurrent Go programs, deadlocks can be a subtle and frustrating issue to debug. One common scenario that can lead to deadlocks is attempting to upgrade a read lock to a write lock while still holding the read lock. Let’s dive into this problem and explore how to solve it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem-lock-upgrading&quot;&gt;The Problem: Lock Upgrading&lt;&#x2F;h2&gt;
&lt;p&gt;Consider this seemingly innocent code that manages an admin token with concurrent access:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;AdminToken&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminTokenMu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RLock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminTokenMu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RUnlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; If token isn&amp;#39;t in memory, try loading from SQLite
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cachedToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;persist&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadAdminToken&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;getBackend&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cachedToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminTokenMu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cachedToken
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminTokenMu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cachedToken
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At first glance, this code might look reasonable. It:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Acquires a read lock to safely read the token&lt;&#x2F;li&gt;
&lt;li&gt;If the token is empty, loads it from SQLite&lt;&#x2F;li&gt;
&lt;li&gt;Acquires a write lock to update the shared token variable&lt;&#x2F;li&gt;
&lt;li&gt;Returns the token&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;However, this code contains a subtle but serious issue: it attempts to acquire a write lock while still holding a read lock on the same mutex.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-this-causes-a-deadlock&quot;&gt;Why This Causes a Deadlock&lt;&#x2F;h2&gt;
&lt;p&gt;The deadlock occurs due to a circular dependency:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The goroutine holds a read lock&lt;&#x2F;li&gt;
&lt;li&gt;It attempts to acquire a write lock&lt;&#x2F;li&gt;
&lt;li&gt;The write lock waits for all read locks to be released&lt;&#x2F;li&gt;
&lt;li&gt;The read lock won’t be released until the function returns (due to defer)&lt;&#x2F;li&gt;
&lt;li&gt;The function won’t return until the write lock is acquired&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This creates a situation where the goroutine is waiting for itself to release the read lock before it can acquire the write lock. Classic deadlock!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution-proper-lock-management&quot;&gt;The Solution: Proper Lock Management&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s how to fix this issue:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;AdminToken&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminTokenMu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RLock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminTokenMu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RUnlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; If token isn&amp;#39;t in memory, acquire write lock and try loading from SQLite
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminTokenMu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Need to check again after acquiring lock in case another goroutine updated it
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cachedToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;persist&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadAdminToken&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;getBackend&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cachedToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cachedToken
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cachedToken
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminTokenMu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The fixed version includes several important improvements:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Release Before Upgrade&lt;&#x2F;strong&gt;: We release the read lock before attempting to acquire the write lock.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Double-Check Pattern&lt;&#x2F;strong&gt;: We check the token again after acquiring the write lock. This is necessary because another goroutine might have updated the token between our read lock release and write lock acquisition.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Local Variable&lt;&#x2F;strong&gt;: We use a local variable &lt;code&gt;token&lt;&#x2F;code&gt; to store the result, which helps avoid race conditions and makes the code’s intent clearer.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fine-grained Lock Control&lt;&#x2F;strong&gt;: We’ve removed the &lt;code&gt;defer&lt;&#x2F;code&gt; statement and instead manage our locks explicitly, which gives us more precise control over when locks are released.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;best-practices-for-lock-management&quot;&gt;Best Practices for Lock Management&lt;&#x2F;h2&gt;
&lt;p&gt;When working with mutexes in Go, keep these principles in mind:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Never try to upgrade a read lock to a write lock while holding the read lock&lt;&#x2F;li&gt;
&lt;li&gt;Keep locked sections as small as possible&lt;&#x2F;li&gt;
&lt;li&gt;Be wary of defer when you need fine-grained lock control&lt;&#x2F;li&gt;
&lt;li&gt;Use local variables to store results that need to survive lock releases&lt;&#x2F;li&gt;
&lt;li&gt;Consider using the double-checked locking pattern when lazily initializing shared data&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Lock upgrading is a common source of deadlocks in concurrent programs. By understanding how mutexes work and following proper lock management practices, you can avoid these issues and write more reliable concurrent code. Remember: when in doubt, release your locks before trying to acquire new ones, and always strive to keep your locked sections as small and simple as possible.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Securing CI&#x2F;CD Access to Your Secrets Management System: An Architectural Analysis</title>
        <published>2024-11-27T00:00:00+00:00</published>
        <updated>2024-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/dedicated-oidc-server/"/>
        <id>https://zerotohero.dev/inbox/dedicated-oidc-server/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/dedicated-oidc-server/">&lt;p&gt;When building a secrets management system, one of the key challenges is providing secure automated access for CI&#x2F;CD pipelines while maintaining strong security boundaries. In this post, we’ll explore different architectural approaches to solving this problem, analyzing their trade-offs and providing recommendations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-base-architecture&quot;&gt;The Base Architecture&lt;&#x2F;h2&gt;
&lt;p&gt;Before diving into the solutions, let’s understand our starting point. The existing system consists of two main components:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Pilot&lt;&#x2F;strong&gt;: A CLI tool that provides user access to secrets&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Nexus&lt;&#x2F;strong&gt;: The secure storage backend for secrets&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The communication between these components uses SPIFFE mTLS over REST, providing strong security guarantees and identity-based access control.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;&#x2F;h2&gt;
&lt;p&gt;While this architecture works well for human operators using the CLI, we need to provide automated access for CI&#x2F;CD pipelines. This requires exposing a RESTful interface that can be consumed by automation tools while maintaining our security posture.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;solution-options&quot;&gt;Solution Options&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-extend-pilot-as-an-oidc-resource-server&quot;&gt;1. Extend Pilot as an OIDC Resource Server&lt;&#x2F;h3&gt;
&lt;p&gt;In this approach, we would enhance the existing Pilot component to serve as an OIDC resource server, allowing it to handle automated requests alongside its CLI duties.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Advantages:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Reuses existing, trusted component&lt;&#x2F;li&gt;
&lt;li&gt;Maintains current security boundary where only Pilot talks to Nexus&lt;&#x2F;li&gt;
&lt;li&gt;Preserves existing SPIFFE mTLS security model&lt;&#x2F;li&gt;
&lt;li&gt;Reduces operational complexity by not adding new components&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Mixes different concerns in one component&lt;&#x2F;li&gt;
&lt;li&gt;Complicates Pilot’s codebase and testing&lt;&#x2F;li&gt;
&lt;li&gt;May require significant architectural changes to Pilot&lt;&#x2F;li&gt;
&lt;li&gt;Could impact CLI performance and reliability&lt;&#x2F;li&gt;
&lt;li&gt;Makes future changes more complex&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-create-a-dedicated-oidc-resource-server&quot;&gt;2. Create a Dedicated OIDC Resource Server&lt;&#x2F;h3&gt;
&lt;p&gt;This solution involves building a new component specifically designed to handle CI&#x2F;CD automation requests, essentially acting as a Pilot analog for automated access.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Advantages:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Clean separation of concerns&lt;&#x2F;li&gt;
&lt;li&gt;Purpose-built for CI&#x2F;CD integration needs&lt;&#x2F;li&gt;
&lt;li&gt;Independent scaling and maintenance&lt;&#x2F;li&gt;
&lt;li&gt;Can implement specific rate limiting and security controls&lt;&#x2F;li&gt;
&lt;li&gt;Separate logging and auditing for automated access&lt;&#x2F;li&gt;
&lt;li&gt;Easier to evolve and maintain&lt;&#x2F;li&gt;
&lt;li&gt;Can be optimized for automated workflows&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;New component to maintain and monitor&lt;&#x2F;li&gt;
&lt;li&gt;Need to implement SPIFFE mTLS client functionality&lt;&#x2F;li&gt;
&lt;li&gt;Additional operational overhead&lt;&#x2F;li&gt;
&lt;li&gt;Initial development investment&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-expose-nexus-as-an-oidc-resource-server&quot;&gt;3. Expose Nexus as an OIDC Resource Server&lt;&#x2F;h3&gt;
&lt;p&gt;The third option involves modifying Nexus to directly handle automated requests as an OIDC resource server.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Advantages:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Potentially simpler architecture&lt;&#x2F;li&gt;
&lt;li&gt;Direct access to secrets store&lt;&#x2F;li&gt;
&lt;li&gt;Fewer network hops&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Breaks single-responsibility principle&lt;&#x2F;li&gt;
&lt;li&gt;Increases attack surface of critical secrets store&lt;&#x2F;li&gt;
&lt;li&gt;Complicates Nexus’s security model&lt;&#x2F;li&gt;
&lt;li&gt;Makes storage backend changes more difficult&lt;&#x2F;li&gt;
&lt;li&gt;Violates the principle of least privilege&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;recommended-approach&quot;&gt;Recommended Approach&lt;&#x2F;h2&gt;
&lt;p&gt;After careful analysis, creating a dedicated OIDC resource server (Option 2) emerges as the most robust solution. Here’s why:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;security-benefits&quot;&gt;Security Benefits&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Maintains existing security boundaries&lt;&#x2F;li&gt;
&lt;li&gt;Allows for fine-grained access control specific to automation&lt;&#x2F;li&gt;
&lt;li&gt;Keeps Nexus protected behind SPIFFE mTLS&lt;&#x2F;li&gt;
&lt;li&gt;Enables separate security policies for automated access&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;architectural-benefits&quot;&gt;Architectural Benefits&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Clean separation of concerns&lt;&#x2F;li&gt;
&lt;li&gt;Independent scaling and evolution&lt;&#x2F;li&gt;
&lt;li&gt;Dedicated logging and monitoring&lt;&#x2F;li&gt;
&lt;li&gt;Easier to maintain and modify&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;operational-benefits&quot;&gt;Operational Benefits&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Can implement automation-specific features&lt;&#x2F;li&gt;
&lt;li&gt;Independent deployment and updates&lt;&#x2F;li&gt;
&lt;li&gt;Separate rate limiting and throttling&lt;&#x2F;li&gt;
&lt;li&gt;Dedicated audit trails for automated access&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;implementation-considerations&quot;&gt;Implementation Considerations&lt;&#x2F;h2&gt;
&lt;p&gt;When implementing the dedicated OIDC resource server approach, consider:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Authentication&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Implement robust OIDC client authentication&lt;&#x2F;li&gt;
&lt;li&gt;Consider additional authentication methods for different CI&#x2F;CD platforms&lt;&#x2F;li&gt;
&lt;li&gt;Implement proper token validation and management&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Authorization&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Define clear RBAC policies for CI&#x2F;CD access&lt;&#x2F;li&gt;
&lt;li&gt;Implement fine-grained access control&lt;&#x2F;li&gt;
&lt;li&gt;Consider environment-based restrictions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Implement rate limiting&lt;&#x2F;li&gt;
&lt;li&gt;Add robust audit logging&lt;&#x2F;li&gt;
&lt;li&gt;Consider request validation and sanitization&lt;&#x2F;li&gt;
&lt;li&gt;Implement proper error handling that doesn’t leak sensitive information&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monitoring&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Add detailed operational metrics&lt;&#x2F;li&gt;
&lt;li&gt;Implement automated access pattern analysis&lt;&#x2F;li&gt;
&lt;li&gt;Set up alerting for suspicious activities&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;While all three approaches could work, creating a dedicated OIDC resource server provides the best balance of security, maintainability, and flexibility. It allows for proper separation of concerns while maintaining strong security boundaries and enables independent evolution of human and automated access patterns.&lt;&#x2F;p&gt;
&lt;p&gt;This solution might require more initial development effort, but the long-term benefits in terms of security, maintainability, and operational flexibility make it the most robust choice for production environments.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Debugging Git GPG Signing Issuese</title>
        <published>2024-11-27T00:00:00+00:00</published>
        <updated>2024-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/git-gpg-sign/"/>
        <id>https://zerotohero.dev/inbox/git-gpg-sign/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/git-gpg-sign/">&lt;p&gt;When working with signed Git commits, you might encounter this error:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;error: gpg failed to sign the data:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gpg: skipped &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;[EMAIL]&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;: No secret key
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;[GNUPG:] INV_SGNR 9 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;USER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;[GNUPG:] FAILURE sign 17
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gpg: signing failed: No secret key
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fatal: failed to write commit object
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This error occurs when you try to create a signed Git commit (using the &lt;code&gt;-S&lt;&#x2F;code&gt; flag) but GPG can’t find the corresponding secret key for your email address. Let’s walk through how to diagnose and fix this issue.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;checking-your-gpg-keys&quot;&gt;Checking Your GPG Keys&lt;&#x2F;h2&gt;
&lt;p&gt;First, check if you have any GPG keys installed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gpg --list-secret-keys --keyid-format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;long
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This command will show output similar to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;&#x2F;home&#x2F;user&#x2F;.gnupg&#x2F;pubring.kbx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-------------------------------
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sec   ed25519&#x2F;KEYID 2024-11-06 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FULL_KEYID
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;uid                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ultimate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; User Name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;email@example.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ssb   cv25519&#x2F;SUBKEY 2024-11-06 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;if-you-have-a-key&quot;&gt;If You Have a Key&lt;&#x2F;h2&gt;
&lt;p&gt;If you see output like above, you already have a GPG key. The key ID is the string after “ed25519&#x2F;” in the &lt;code&gt;sec&lt;&#x2F;code&gt; line. You’ll need to configure Git to use this key:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git config --global user.signingkey YOUR_KEY_ID
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Also ensure your Git email matches the GPG key email:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git config --global user.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;your.email@example.com&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;if-you-don-t-have-a-key&quot;&gt;If You Don’t Have a Key&lt;&#x2F;h2&gt;
&lt;p&gt;If no keys are listed, you’ll need to generate a new one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gpg --full-generate-key
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Follow the prompts to create your key. Make sure to use the same email address that you use with Git.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;additional-configuration&quot;&gt;Additional Configuration&lt;&#x2F;h2&gt;
&lt;p&gt;Sometimes, you might need to explicitly tell Git which GPG program to use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git config --global gpg.program $(which gpg)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;testing-your-configuration&quot;&gt;Testing Your Configuration&lt;&#x2F;h2&gt;
&lt;p&gt;After setting everything up, try creating a signed commit:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git commit -S -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Your commit message&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;troubleshooting-tips&quot;&gt;Troubleshooting Tips&lt;&#x2F;h2&gt;
&lt;p&gt;If you’re still having issues:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Verify your GPG key email matches your Git email&lt;&#x2F;li&gt;
&lt;li&gt;Ensure your GPG key hasn’t expired&lt;&#x2F;li&gt;
&lt;li&gt;Check if your key has signing capability (look for [S] in the key capabilities)&lt;&#x2F;li&gt;
&lt;li&gt;Make sure you’re using the correct key ID&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;alternative-unsigned-commits&quot;&gt;Alternative: Unsigned Commits&lt;&#x2F;h2&gt;
&lt;p&gt;If you need to make a commit without signing (assuming your repository allows it), you can simply omit the &lt;code&gt;-S&lt;&#x2F;code&gt; flag:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git commit -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Your commit message&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;security-note&quot;&gt;Security Note&lt;&#x2F;h2&gt;
&lt;p&gt;Signing your Git commits adds an extra layer of security by verifying that commits actually came from you. It’s especially important for open-source projects or when working in larger teams. However, make sure to keep your GPG private key secure and never share it with others.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that you can also configure Git to sign all commits by default:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git config --global commit.gpgsign true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This way, you won’t need to add the &lt;code&gt;-S&lt;&#x2F;code&gt; flag to every commit command.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;GPG signing issues in Git are usually straightforward to fix once you understand the relationship between your GPG keys and Git configuration. The key is to ensure that Git knows which GPG key to use and that the key is properly set up with your correct email address.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Creating GitHub Releases with Binary Artifacts: A Complete Guide</title>
        <published>2024-11-27T00:00:00+00:00</published>
        <updated>2024-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/github-releases/"/>
        <id>https://zerotohero.dev/inbox/github-releases/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/github-releases/">&lt;p&gt;Whether you’re distributing compiled binaries, executables, or any other release artifacts, GitHub provides two convenient methods to create releases and share your builds. In this guide, we’ll explore both the manual UI approach and automated workflows for creating GitHub releases.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;method-1-using-github-s-web-interface&quot;&gt;Method 1: Using GitHub’s Web Interface&lt;&#x2F;h2&gt;
&lt;p&gt;The simplest way to create a release is directly through GitHub’s user interface. Here’s a step-by-step guide:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Navigate to Releases&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Go to your repository&lt;&#x2F;li&gt;
&lt;li&gt;Click on “Releases” in the right sidebar&lt;&#x2F;li&gt;
&lt;li&gt;If you don’t see it, you can also access it via “Tags” → “Releases”&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create the Release&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Click the “Create a new release” button&lt;&#x2F;li&gt;
&lt;li&gt;If you have no releases yet, look for “Draft a new release”&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Configure Release Details&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tag&lt;&#x2F;strong&gt;: Either choose an existing tag or create a new one (e.g., &lt;code&gt;v1.0.0&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Release title&lt;&#x2F;strong&gt;: Give your release a descriptive name&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Description&lt;&#x2F;strong&gt;: Add release notes, changelog, or any relevant documentation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Upload Binary Artifacts&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Look for the “Attach binaries” section&lt;&#x2F;li&gt;
&lt;li&gt;Either drag and drop your files directly onto this area&lt;&#x2F;li&gt;
&lt;li&gt;Or use the “Choose files” button to select them from your computer&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Set Release Type&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Regular release: For stable versions&lt;&#x2F;li&gt;
&lt;li&gt;Pre-release: For beta or testing versions&lt;&#x2F;li&gt;
&lt;li&gt;Draft: To save without publishing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Publish&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Click “Publish release” to make it public&lt;&#x2F;li&gt;
&lt;li&gt;Or “Save draft” to continue editing later&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;method-2-automated-releases-with-github-actions&quot;&gt;Method 2: Automated Releases with GitHub Actions&lt;&#x2F;h2&gt;
&lt;p&gt;For more consistent and automated releases, you can use GitHub Actions. This is particularly useful when you have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Multiple binary artifacts&lt;&#x2F;li&gt;
&lt;li&gt;Cross-platform builds&lt;&#x2F;li&gt;
&lt;li&gt;Regular release cycles&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s how to set it up:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create Workflow File&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a &lt;code&gt;.github&#x2F;workflows&lt;&#x2F;code&gt; directory in your repository&lt;&#x2F;li&gt;
&lt;li&gt;Add a file named &lt;code&gt;release.yml&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Configure the Workflow&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Release Binaries
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;v*&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Define Build and Release Steps&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Set up your build environment&lt;&#x2F;li&gt;
&lt;li&gt;Compile binaries for different platforms&lt;&#x2F;li&gt;
&lt;li&gt;Upload artifacts to the release&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Trigger Release&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git tag v1.0.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git push origin v1.0.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Versioning&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use semantic versioning (e.g., v1.0.0)&lt;&#x2F;li&gt;
&lt;li&gt;Be consistent with your version numbering&lt;&#x2F;li&gt;
&lt;li&gt;Include build numbers if needed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Documentation&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Always include release notes&lt;&#x2F;li&gt;
&lt;li&gt;Document breaking changes&lt;&#x2F;li&gt;
&lt;li&gt;List new features and bug fixes&lt;&#x2F;li&gt;
&lt;li&gt;Add installation instructions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Binary Organization&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use clear naming conventions&lt;&#x2F;li&gt;
&lt;li&gt;Include architecture information in filenames&lt;&#x2F;li&gt;
&lt;li&gt;Consider adding checksums for verification&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Post-Release&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Test download links&lt;&#x2F;li&gt;
&lt;li&gt;Verify binary artifacts&lt;&#x2F;li&gt;
&lt;li&gt;Update documentation references&lt;&#x2F;li&gt;
&lt;li&gt;Announce the release in relevant channels&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;managing-existing-releases&quot;&gt;Managing Existing Releases&lt;&#x2F;h2&gt;
&lt;p&gt;You can also manage releases after publication:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Editing Releases&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to the release page&lt;&#x2F;li&gt;
&lt;li&gt;Click “Edit release”&lt;&#x2F;li&gt;
&lt;li&gt;Modify description, title, or binary artifacts&lt;&#x2F;li&gt;
&lt;li&gt;Save changes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deleting Releases&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use with caution&lt;&#x2F;li&gt;
&lt;li&gt;Can remove individual artifacts&lt;&#x2F;li&gt;
&lt;li&gt;Or delete entire releases&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;GitHub Releases provide a robust platform for distributing your binary artifacts. Whether you choose the manual UI approach or automated workflows, following these guidelines will help you create professional and well-organized releases for your users.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that releases serve as important historical markers for your project, so take time to document them properly and ensure all artifacts are properly tested before publishing.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;Last updated: November 2024&lt;&#x2F;em&gt;&lt;br &#x2F;&gt;
&lt;em&gt;Feel free to share and adapt this guide with attribution.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Implementing JWT Authentication with mTLS in Go</title>
        <published>2024-11-27T00:00:00+00:00</published>
        <updated>2024-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/jwt-mtls/"/>
        <id>https://zerotohero.dev/inbox/jwt-mtls/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/jwt-mtls/">&lt;p&gt;Mutual TLS (mTLS) and JSON Web Tokens (JWT) are both powerful security mechanisms that serve different purposes. While mTLS ensures secure bidirectional authentication between client and server at the transport layer, JWTs handle authentication and authorization at the application layer. Combining both provides a robust security model for sensitive operations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-setup&quot;&gt;The Setup&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s walk through implementing a secure secret management system that uses both mTLS and JWT authentication. Our example will demonstrate:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A client making authenticated requests&lt;&#x2F;li&gt;
&lt;li&gt;A server validating both mTLS and JWT&lt;&#x2F;li&gt;
&lt;li&gt;Error handling for various authentication scenarios&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;client-side-implementation&quot;&gt;Client-Side Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;First, let’s look at how to make a request with both mTLS and JWT authentication:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mr &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) ([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewRequest&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;POST&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewBuffer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mr&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;{}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Join&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;post: Failed to create request&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Header&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;application&#x2F;json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Add JWT authentication
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadFile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;.spike-admin-token&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Header&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Authorization&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Bearer &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TrimSpace&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Do&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;{}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Join&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;post: Problem connecting to peer&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Handle response...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The client is already configured for mTLS, and we simply add the JWT as a Bearer token in the Authorization header.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;server-side-implementation&quot;&gt;Server-Side Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;On the server side, we need to validate both the mTLS connection (handled by the server configuration) and the JWT token:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;routeGetSecret&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Extract and validate JWT
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;authHeader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Header&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Authorization&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;authHeader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;strings&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;HasPrefix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;authHeader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Bearer &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WriteHeader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusUnauthorized&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tokenString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;strings&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TrimPrefix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;authHeader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Bearer &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Parse and validate the token
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ParseWithClaims&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tokenString&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CustomClaims&lt;&#x2F;span&gt;&lt;span&gt;{}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Token&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span&gt;{}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Method&lt;&#x2F;span&gt;&lt;span&gt;.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;SigningMethodHMAC&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;unexpected signing method: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Header&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;alg&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Valid &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WriteHeader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusUnauthorized&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Process the authenticated request...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;jwt-generation&quot;&gt;JWT Generation&lt;&#x2F;h2&gt;
&lt;p&gt;The JWTs are generated with specific claims that we validate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;claims &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CustomClaims&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RegisteredClaims&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RegisteredClaims&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ExpiresAt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewNumericDate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;24 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Hour&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;IssuedAt&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewNumericDate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NotBefore&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewNumericDate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Issuer&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;nexus&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Subject&lt;&#x2F;span&gt;&lt;span&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spike-admin&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;AdminTokenID&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spike-admin-jwt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;security-considerations&quot;&gt;Security Considerations&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Defense in Depth&lt;&#x2F;strong&gt;: Using both mTLS and JWT provides two independent layers of security:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;mTLS ensures the client has valid certificates and is authorized at the transport layer&lt;&#x2F;li&gt;
&lt;li&gt;JWT ensures the specific request is authorized and hasn’t expired at the application layer&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Token Management&lt;&#x2F;strong&gt;: JWTs are set to expire after 24 hours, requiring periodic renewal. This limits the impact of token compromise.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Validation Checks&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Signature verification ensures the token hasn’t been tampered with&lt;&#x2F;li&gt;
&lt;li&gt;Claims validation ensures the token is being used as intended&lt;&#x2F;li&gt;
&lt;li&gt;Expiry checking prevents use of old tokens&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Error Handling&lt;&#x2F;strong&gt;: Return generic error messages to avoid leaking implementation details:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WriteHeader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusUnauthorized&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Logging&lt;&#x2F;strong&gt;: Log authentication failures for monitoring and alerting, but avoid logging sensitive data:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;routeGetSecret&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;msg&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Invalid token&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Token Storage&lt;&#x2F;strong&gt;: Store tokens securely and never log them. In our example, we read from a protected file.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Combining mTLS and JWT authentication provides a robust security model where:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;mTLS ensures secure transport and mutual authentication&lt;&#x2F;li&gt;
&lt;li&gt;JWT handles fine-grained authorization and session management&lt;&#x2F;li&gt;
&lt;li&gt;Together they provide defense in depth against various attack vectors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When implementing such a system, careful attention to error handling, logging, and security best practices is essential. The extra complexity is justified when dealing with sensitive operations like secret management.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Reading Process Memory: A Deep Dive into Runtime Variable Inspection</title>
        <published>2024-11-27T00:00:00+00:00</published>
        <updated>2024-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/memory-inspection/"/>
        <id>https://zerotohero.dev/inbox/memory-inspection/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/memory-inspection/">&lt;h1 id=&quot;&quot;&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Ever wondered what happens to your variables when a program is running? Can you peek into a program’s memory and see what’s stored there? The answer is yes - with the right privileges and tools, you can observe and even modify variables during runtime. In this post, we’ll explore how to do this safely and understand the underlying concepts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-process-memory&quot;&gt;Understanding Process Memory&lt;&#x2F;h2&gt;
&lt;p&gt;Before we dive into the code, let’s understand what happens when a program runs:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The operating system allocates memory space for the process&lt;&#x2F;li&gt;
&lt;li&gt;Variables are stored in this memory space&lt;&#x2F;li&gt;
&lt;li&gt;The program keeps track of where each variable is stored&lt;&#x2F;li&gt;
&lt;li&gt;Memory addresses can be read and written with proper permissions&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;a-practical-example&quot;&gt;A Practical Example&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s look at a simple demonstration. We’ll create two programs: one that holds a variable we want to read, and another that reads it. Here’s our target program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;time
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    secret_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;12345
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Process started. PID: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{os.getpid()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Keep the program running
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time.sleep(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;__name__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;__main__&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here’s our memory reader:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;ctypes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;sys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;struct
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;MemoryReader&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.pid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;pid
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;read_integer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;address&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Read an integer value from the specified memory address&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;proc&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{self.pid}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&#x2F;mem&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;rb&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;mem_file:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mem_file.seek(address)
&lt;&#x2F;span&gt;&lt;span&gt;                data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mem_file.read(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;struct.unpack(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;Q&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, data)&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error reading memory: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{e}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;How It Works&lt;&#x2F;h2&gt;
&lt;p&gt;When we read process memory, we’re actually doing several things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Opening the Process&lt;&#x2F;strong&gt;: We need sufficient privileges to access another process’s memory space.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Locating the Variable&lt;&#x2F;strong&gt;: We need to know where in memory our target variable is stored.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Reading the Memory&lt;&#x2F;strong&gt;: We read the raw bytes from the specified memory address.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Interpreting the Data&lt;&#x2F;strong&gt;: We convert the raw bytes back into a meaningful value.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;security-considerations&quot;&gt;Security Considerations&lt;&#x2F;h2&gt;
&lt;p&gt;Reading process memory is powerful but comes with risks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Privileges&lt;&#x2F;strong&gt;: Root&#x2F;administrator access is required&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Stability&lt;&#x2F;strong&gt;: Incorrect memory access can crash the target process&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Security Features&lt;&#x2F;strong&gt;: Modern systems have protections like ASLR (Address Space Layout Randomization)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Permission&lt;&#x2F;strong&gt;: Only inspect processes you own or have permission to examine&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;real-world-applications&quot;&gt;Real-World Applications&lt;&#x2F;h2&gt;
&lt;p&gt;While our example is educational, process memory inspection has legitimate uses:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Debugging&lt;&#x2F;strong&gt;: Finding memory leaks and understanding program state&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Game Modifications&lt;&#x2F;strong&gt;: Creating game trainers or mods&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Security Research&lt;&#x2F;strong&gt;: Analyzing malware or vulnerabilities&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Performance Analysis&lt;&#x2F;strong&gt;: Understanding memory usage patterns&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;p&gt;If you’re working with process memory, follow these guidelines:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Use established debugging tools when possible (gdb, WinDbg, etc.)&lt;&#x2F;li&gt;
&lt;li&gt;Always check for sufficient permissions&lt;&#x2F;li&gt;
&lt;li&gt;Handle errors gracefully&lt;&#x2F;li&gt;
&lt;li&gt;Document your memory access patterns&lt;&#x2F;li&gt;
&lt;li&gt;Be aware of system security features&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;beyond-simple-variables&quot;&gt;Beyond Simple Variables&lt;&#x2F;h2&gt;
&lt;p&gt;Real applications are more complex than our example. Variables might be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Objects with complex memory layouts&lt;&#x2F;li&gt;
&lt;li&gt;Dynamically allocated&lt;&#x2F;li&gt;
&lt;li&gt;Optimized by the compiler&lt;&#x2F;li&gt;
&lt;li&gt;Protected by security features&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Process memory inspection is a powerful technique that gives us deep insight into running programs. While it requires careful handling and proper permissions, understanding how to read process memory helps us better understand how our programs work at a fundamental level.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: with great power comes great responsibility. Always ensure you have proper authorization before inspecting or modifying process memory, and prefer using established debugging tools for production environments.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Understanding virtual memory and process space&lt;&#x2F;li&gt;
&lt;li&gt;Debugging tools and techniques&lt;&#x2F;li&gt;
&lt;li&gt;Memory protection mechanisms&lt;&#x2F;li&gt;
&lt;li&gt;Operating system security features&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;Note: The code examples in this post are simplified for educational purposes. Production systems should use established debugging tools and frameworks.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Secure Root Key Encryption in Go: A Practical Guide</title>
        <published>2024-11-27T00:00:00+00:00</published>
        <updated>2024-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/root-key-encryption/"/>
        <id>https://zerotohero.dev/inbox/root-key-encryption/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/root-key-encryption/">&lt;p&gt;When building secure systems, we often need to protect sensitive cryptographic keys. A common pattern is encrypting a root key using an admin password. This post will walk through implementing this pattern securely in Go using industry-standard cryptographic practices.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;Imagine you have a system with a root key that needs to be stored securely. You want to encrypt this key using an admin password (like a secure 16-character random string) so that only someone with the admin password can access the root key. This is a common requirement in key management systems, HSMs, and other security-critical applications.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;security-requirements&quot;&gt;Security Requirements&lt;&#x2F;h2&gt;
&lt;p&gt;For this implementation, we need to ensure:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The encryption key is properly derived from the password using a secure key derivation function&lt;&#x2F;li&gt;
&lt;li&gt;The encryption itself uses an authenticated encryption mode&lt;&#x2F;li&gt;
&lt;li&gt;We use proper random number generation for cryptographic operations&lt;&#x2F;li&gt;
&lt;li&gt;Protection against rainbow table attacks through salting&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a secure implementation using Go’s crypto packages:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryption
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;aes&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;cipher&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;rand&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;crypto&#x2F;sha256&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;golang.org&#x2F;x&#x2F;crypto&#x2F;pbkdf2&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;io&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;saltSize    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;16
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;keySize     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;32 &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; for AES-256
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;iterations  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;480000
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; EncryptRootKey encrypts a root key using an admin password
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;EncryptRootKey&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminPassword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rootKey &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedData &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Generate a random salt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;salt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;saltSize&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadFull&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;salt&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Derive key from password using PBKDF2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pbkdf2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Key&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminPassword&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;salt&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;iterations&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;keySize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Create AES cipher
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewCipher&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Create GCM mode
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gcm&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cipher&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewGCM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Generate nonce
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonce &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gcm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NonceSize&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadFull&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonce&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Encrypt the root key
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Final format: salt + nonce + encrypted data
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gcm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Seal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonce&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rootKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;salt&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonce&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedKey&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Combine salt + nonce + encrypted data into single byte slice
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedData&lt;&#x2F;span&gt;&lt;span&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;saltSize&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;salt&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedData&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;saltSize&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;saltSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonce&lt;&#x2F;span&gt;&lt;span&gt;)], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonce&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedData&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;saltSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonce&lt;&#x2F;span&gt;&lt;span&gt;):], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedData&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; DecryptRootKey decrypts a root key using an admin password
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;DecryptRootKey&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminPassword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedData &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) ([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Extract salt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;salt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedData&lt;&#x2F;span&gt;&lt;span&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;saltSize&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Derive key from password using PBKDF2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pbkdf2&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Key&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminPassword&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;salt&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;iterations&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;keySize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Create AES cipher
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewCipher&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Create GCM mode
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gcm&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cipher&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewGCM&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Extract nonce and ciphertext
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonceSize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gcm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NonceSize&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonce &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedData&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;saltSize &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;saltSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonceSize&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedData&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;saltSize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonceSize&lt;&#x2F;span&gt;&lt;span&gt;:]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Decrypt the root key
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gcm&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;nonce&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ciphertext&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;understanding-the-implementation&quot;&gt;Understanding the Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s break down the key components:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-key-derivation&quot;&gt;1. Key Derivation&lt;&#x2F;h3&gt;
&lt;p&gt;We use PBKDF2 (Password-Based Key Derivation Function 2) to derive an encryption key from the admin password. PBKDF2 applies a pseudorandom function (in this case, HMAC-SHA256) to the password along with a salt value over many iterations. This serves two purposes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Makes the key derivation computationally expensive, slowing down brute-force attacks&lt;&#x2F;li&gt;
&lt;li&gt;With the salt, prevents rainbow table attacks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-encryption&quot;&gt;2. Encryption&lt;&#x2F;h3&gt;
&lt;p&gt;For the actual encryption, we use AES-GCM (Galois&#x2F;Counter Mode), which provides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Confidentiality through AES encryption&lt;&#x2F;li&gt;
&lt;li&gt;Authentication through the GCM mode&lt;&#x2F;li&gt;
&lt;li&gt;Protection against tampering&lt;&#x2F;li&gt;
&lt;li&gt;Built-in nonce handling&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-data-format&quot;&gt;3. Data Format&lt;&#x2F;h3&gt;
&lt;p&gt;The encrypted output combines three pieces of data:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Salt (16 bytes)&lt;&#x2F;li&gt;
&lt;li&gt;Nonce (12 bytes for GCM)&lt;&#x2F;li&gt;
&lt;li&gt;Encrypted data (original length + 16 bytes for GCM tag)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This format allows us to store everything needed for decryption in a single byte slice.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;usage-example&quot;&gt;Usage Example&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s how to use these functions in your code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminPassword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;your-16-char-secure-password&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rootKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Your actual root key
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Read&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rootKey&lt;&#x2F;span&gt;&lt;span&gt;)          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Fill with random data for this example
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Encrypt the root key
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedData&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EncryptRootKey&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminPassword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rootKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Later, decrypt the root key
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decryptedKey&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DecryptRootKey&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminPassword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encryptedData&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;security-considerations&quot;&gt;Security Considerations&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Password Strength&lt;&#x2F;strong&gt;: The admin password should be cryptographically random and at least 16 characters long.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Memory Security&lt;&#x2F;strong&gt;: Consider using techniques to securely clear sensitive data from memory after use.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Error Handling&lt;&#x2F;strong&gt;: The implementation returns errors rather than panicking, allowing proper error handling in production systems.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Key Size&lt;&#x2F;strong&gt;: We use AES-256 (32-byte key) for future-proofing, though AES-128 would also be secure for most current applications.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This implementation provides a secure way to encrypt root keys using admin passwords in Go. It uses well-tested cryptographic primitives and follows security best practices. Remember that cryptographic implementations should be regularly reviewed and updated as security standards evolve.&lt;&#x2F;p&gt;
&lt;p&gt;The code is designed to be straightforward to use while maintaining strong security properties. However, always have your cryptographic implementations reviewed by security experts before using them in production systems.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Implementing Secure Password Input in Go CLI Applications</title>
        <published>2024-11-27T00:00:00+00:00</published>
        <updated>2024-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/secure-password-input/"/>
        <id>https://zerotohero.dev/inbox/secure-password-input/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/secure-password-input/">&lt;p&gt;When building command-line applications in Go, there often comes a time when you need to securely collect sensitive information from users, such as passwords. In this post, we’ll explore how to implement secure password input in a Go CLI application using best practices.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;&#x2F;h2&gt;
&lt;p&gt;Consider a typical CLI initialization command where you need to collect an admin password:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;NewInitCommand&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;workloadapi&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;X509Source&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cobra&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;initCmd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cobra&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Use&lt;&#x2F;span&gt;&lt;span&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;init&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Short&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Initialize spike configuration&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cmd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cobra&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; How do we securely get the password?
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;initCmd
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Simply using &lt;code&gt;fmt.Scanln()&lt;&#x2F;code&gt; or similar methods would display the password in plain text as the user types - a significant security risk. We need a better solution.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution-using-term-readpassword&quot;&gt;The Solution: Using term.ReadPassword&lt;&#x2F;h2&gt;
&lt;p&gt;Go’s &lt;code&gt;golang.org&#x2F;x&#x2F;term&lt;&#x2F;code&gt; package provides a secure way to read passwords from the terminal. Here’s how to implement it:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;First, install the required dependency:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;go get golang.org&#x2F;x&#x2F;term
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Import the necessary packages:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;golang.org&#x2F;x&#x2F;term&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;syscall&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Implement the password collection:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;NewInitCommand&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;workloadapi&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;X509Source&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cobra&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Command &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;initCmd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cobra&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Use&lt;&#x2F;span&gt;&lt;span&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;init&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Short&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Initialize spike configuration&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cmd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cobra&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Command&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Check initialization state
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;net&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CheckInitState&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Failed to check init state:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;AlreadyInitialized &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;SPIKE is already initialized.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Nothing to do.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Collect password securely
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Enter admin password: &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;term&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;syscall&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Stdin&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;\nFailed to read password:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Add newline after password input
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Convert to string if needed
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;passwordStr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Use the password...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;    SPIKE system initialization completed.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;      Generated admin token and saved it to&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;        .&#x2F;.spike-admin-token for future use.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;initCmd
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;why-this-approach-works&quot;&gt;Why This Approach Works&lt;&#x2F;h2&gt;
&lt;p&gt;This implementation offers several security benefits:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Hidden Input&lt;&#x2F;strong&gt;: The password isn’t displayed on screen as the user types&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Memory Security&lt;&#x2F;strong&gt;: Password is initially stored as a byte slice (&lt;code&gt;[]byte&lt;&#x2F;code&gt;), which can be securely wiped from memory&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Clean User Experience&lt;&#x2F;strong&gt;: The interface is professional and familiar to users&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Error Handling&lt;&#x2F;strong&gt;: Robust error handling for input failures&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Cross-Platform&lt;&#x2F;strong&gt;: Works across different operating systems&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;p&gt;When implementing password input in your CLI applications:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Clear Memory&lt;&#x2F;strong&gt;: If possible, clear the password from memory after use&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Validate Input&lt;&#x2F;strong&gt;: Add password strength requirements if needed&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Confirmation&lt;&#x2F;strong&gt;: For new passwords, consider asking users to type twice&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Clear Prompts&lt;&#x2F;strong&gt;: Use clear prompts to indicate what’s expected&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Error Messages&lt;&#x2F;strong&gt;: Provide helpful error messages without revealing sensitive information&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;example-adding-password-confirmation&quot;&gt;Example: Adding Password Confirmation&lt;&#x2F;h2&gt;
&lt;p&gt;For cases where users are setting a new password, here’s how to add confirmation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;getPasswordWithConfirmation&lt;&#x2F;span&gt;&lt;span&gt;() (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Enter new password: &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;password1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;term&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;syscall&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Stdin&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Confirm password: &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;password2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;term&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;syscall&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Stdin&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;password1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;password2&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;passwords do not match&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;password1&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Implementing secure password input in Go CLI applications is straightforward with the right tools. The &lt;code&gt;golang.org&#x2F;x&#x2F;term&lt;&#x2F;code&gt; package provides a robust solution that works across platforms and follows security best practices. By following these patterns, you can ensure your CLI applications handle sensitive information securely and professionally.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to always consider security implications when handling passwords and other sensitive data, and make sure to follow your organization’s security requirements and best practices.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Computing SHA256 Hashes for Binary Files: A Quick Guide</title>
        <published>2024-11-27T00:00:00+00:00</published>
        <updated>2024-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/sha256-guide/"/>
        <id>https://zerotohero.dev/inbox/sha256-guide/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/sha256-guide/">&lt;p&gt;When distributing binary files, it’s crucial to provide cryptographic hashes so users can verify the integrity of their downloads. This guide shows how to generate SHA256 hashes for multiple binary files across different platforms.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s say you have a set of binary files for different platforms and architectures:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;keeper-darwin-arm64
&lt;&#x2F;span&gt;&lt;span&gt;keeper-linux-amd64
&lt;&#x2F;span&gt;&lt;span&gt;keeper-linux-arm64
&lt;&#x2F;span&gt;&lt;span&gt;nexus-darwin-arm64
&lt;&#x2F;span&gt;&lt;span&gt;nexus-linux-amd64
&lt;&#x2F;span&gt;&lt;span&gt;nexus-linux-arm64
&lt;&#x2F;span&gt;&lt;span&gt;spike-darwin-arm64
&lt;&#x2F;span&gt;&lt;span&gt;spike-linux-amd64
&lt;&#x2F;span&gt;&lt;span&gt;spike-linux-arm64
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You want to generate SHA256 hash files for each binary, with each hash saved in its own file next to the binary.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;platform-specific-solutions&quot;&gt;Platform-Specific Solutions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;on-macos&quot;&gt;On macOS&lt;&#x2F;h3&gt;
&lt;p&gt;On macOS, we use the &lt;code&gt;shasum&lt;&#x2F;code&gt; command with the &lt;code&gt;-a 256&lt;&#x2F;code&gt; flag to specify SHA256:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; keeper-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; nexus-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; spike-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shasum -a 256 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;.sum.txt&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;on-linux&quot;&gt;On Linux&lt;&#x2F;h3&gt;
&lt;p&gt;Linux systems typically use &lt;code&gt;sha256sum&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; keeper-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; nexus-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; spike-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;.sum.txt&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;what-this-does&quot;&gt;What This Does&lt;&#x2F;h2&gt;
&lt;p&gt;The script will:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Loop through all files matching the patterns &lt;code&gt;keeper-*&lt;&#x2F;code&gt;, &lt;code&gt;nexus-*&lt;&#x2F;code&gt;, and &lt;code&gt;spike-*&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;For each file, compute its SHA256 hash&lt;&#x2F;li&gt;
&lt;li&gt;Save the hash and filename in a corresponding &lt;code&gt;.sum.txt&lt;&#x2F;code&gt; file&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For example, if you have a file named &lt;code&gt;keeper-darwin-arm64&lt;&#x2F;code&gt;, it will create &lt;code&gt;keeper-darwin-arm64.sum.txt&lt;&#x2F;code&gt; containing something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855  keeper-darwin-arm64
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;verifying-hashes&quot;&gt;Verifying Hashes&lt;&#x2F;h2&gt;
&lt;p&gt;Users can verify the files using:&lt;&#x2F;p&gt;
&lt;p&gt;On macOS:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shasum -a 256 -c filename.sum.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On Linux:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256sum -c filename.sum.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Always use quotation marks around filenames in scripts to handle spaces and special characters&lt;&#x2F;li&gt;
&lt;li&gt;Keep hash files alongside binaries for easy reference&lt;&#x2F;li&gt;
&lt;li&gt;Consider also creating a single file containing all hashes for batch verification&lt;&#x2F;li&gt;
&lt;li&gt;Document which hashing algorithm was used (in this case, SHA256)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This approach provides a secure way to distribute binaries while allowing users to verify their integrity through cryptographic hashes.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>SPIFFE IDs and Human Identity: Bridging the Gapl</title>
        <published>2024-11-27T00:00:00+00:00</published>
        <updated>2024-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/spiffe-human-identity/"/>
        <id>https://zerotohero.dev/inbox/spiffe-human-identity/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/spiffe-human-identity/">&lt;h1 id=&quot;&quot;&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;In the world of zero-trust security and service mesh architectures, SPIFFE (Secure Production Identity Framework for Everyone) has emerged as a crucial standard for managing workload identities. However, a common question arises: How do you handle human identity in a SPIFFE-based system?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-the-challenge&quot;&gt;Understanding the Challenge&lt;&#x2F;h2&gt;
&lt;p&gt;SPIFFE was designed specifically for machine-to-machine authentication and workload identity. It provides a standardized way to identify and authenticate workloads across different platforms and environments. However, human identity management presents unique challenges and requirements that don’t perfectly align with SPIFFE’s primary use case.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;potential-approaches&quot;&gt;Potential Approaches&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s explore several approaches to bridge the gap between human identity and SPIFFE-based systems.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-workload-based-approach&quot;&gt;1. Workload-Based Approach&lt;&#x2F;h3&gt;
&lt;p&gt;The most straightforward solution is to keep human identity separate and focus on assigning SPIFFE IDs to the services that humans interact with. In this model:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;User-facing services receive SPIFFE IDs&lt;&#x2F;li&gt;
&lt;li&gt;Human authentication is handled by these services&lt;&#x2F;li&gt;
&lt;li&gt;The services then interact with other workloads using their SPIFFE identities&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For example, a web portal might have a SPIFFE ID like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;spiffe:&#x2F;&#x2F;domain.com&#x2F;portal&#x2F;user-auth-service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach maintains a clear separation between human identity management and workload identity.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-identity-provider-integration&quot;&gt;2. Identity Provider Integration&lt;&#x2F;h3&gt;
&lt;p&gt;Another approach involves creating a bridge between existing Identity Provider (IdP) systems and SPIFFE-based workloads:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Keep human authentication in traditional IdP systems&lt;&#x2F;li&gt;
&lt;li&gt;Implement a bridge service with a SPIFFE ID&lt;&#x2F;li&gt;
&lt;li&gt;The bridge service validates human credentials and facilitates access to SPIFFE-authenticated services&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A bridge service might have a SPIFFE ID like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;spiffe:&#x2F;&#x2F;domain.com&#x2F;auth&#x2F;human-idp-bridge
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach leverages existing IAM infrastructure while enabling integration with SPIFFE-based systems.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-federated-identity-not-recommended&quot;&gt;3. Federated Identity (Not Recommended)&lt;&#x2F;h3&gt;
&lt;p&gt;While it’s technically possible to represent humans using SPIFFE IDs by creating a special trust domain:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;spiffe:&#x2F;&#x2F;humans.domain.com&#x2F;users&#x2F;username
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach is generally not recommended because:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It goes against SPIFFE’s intended design&lt;&#x2F;li&gt;
&lt;li&gt;It lacks support for human-specific identity management features&lt;&#x2F;li&gt;
&lt;li&gt;It might create confusion between human and workload identities&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;best-practices-and-recommendations&quot;&gt;Best Practices and Recommendations&lt;&#x2F;h2&gt;
&lt;p&gt;When dealing with human identity in SPIFFE-based systems:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Keep human authentication separate from workload identity&lt;&#x2F;li&gt;
&lt;li&gt;Use established IAM solutions for human identity management&lt;&#x2F;li&gt;
&lt;li&gt;Focus SPIFFE IDs on the services and workloads that humans interact with&lt;&#x2F;li&gt;
&lt;li&gt;Implement proper access controls at the service level&lt;&#x2F;li&gt;
&lt;li&gt;Maintain clear documentation about how human identity maps to workload access&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;While SPIFFE provides excellent solutions for workload identity, it’s important to recognize its limitations when it comes to human identity management. Instead of trying to force human identity into SPIFFE, focus on building proper integrations between human IAM systems and SPIFFE-authenticated workloads.&lt;&#x2F;p&gt;
&lt;p&gt;By maintaining this separation while building proper bridges between systems, you can create a robust and secure identity management system that serves both human and machine authentication needs effectively.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: The goal isn’t to make SPIFFE handle human identity, but rather to create a cohesive system where human and workload identity management work together seamlessly.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>SQLite Security: Understanding Authentication and Protectio</title>
        <published>2024-11-27T00:00:00+00:00</published>
        <updated>2024-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/sqlite-security/"/>
        <id>https://zerotohero.dev/inbox/sqlite-security/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/sqlite-security/">&lt;p&gt;SQLite is unique among database management systems in that it doesn’t come with built-in password protection or user authentication. This might seem strange at first, especially if you’re familiar with other databases like MySQL or PostgreSQL. However, understanding how SQLite handles security is crucial for developers building applications with this popular database.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-doesn-t-sqlite-have-passwords&quot;&gt;Why Doesn’t SQLite Have Passwords?&lt;&#x2F;h2&gt;
&lt;p&gt;SQLite is a serverless database, which means it operates quite differently from client-server database systems. Instead of running as a separate service that accepts connections from multiple clients, SQLite directly reads and writes to a single file on your disk. This fundamental architectural difference explains the absence of traditional authentication mechanisms.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-secure-your-sqlite-database&quot;&gt;How to Secure Your SQLite Database&lt;&#x2F;h2&gt;
&lt;p&gt;Despite not having built-in password protection, there are several effective ways to secure your SQLite database:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-file-system-permissions&quot;&gt;1. File System Permissions&lt;&#x2F;h3&gt;
&lt;p&gt;The most basic and often most effective way to protect your SQLite database is through your operating system’s file permissions. Here’s how you can implement this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On Unix-like systems (Linux, macOS):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod 600 mydatabase.db
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This command restricts read and write access to only the file owner.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;On Windows:
Use the file properties dialog or NTFS permissions to restrict access to specific users or groups.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-file-encryption&quot;&gt;2. File Encryption&lt;&#x2F;h3&gt;
&lt;p&gt;For enhanced security, you can encrypt your entire SQLite database file. There are several approaches:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use SQLite Encryption Extension (SEE)&lt;&#x2F;li&gt;
&lt;li&gt;Implement transparent disk encryption&lt;&#x2F;li&gt;
&lt;li&gt;Use third-party encryption tools&lt;&#x2F;li&gt;
&lt;li&gt;Create your own encryption wrapper&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-application-level-authentication&quot;&gt;3. Application-Level Authentication&lt;&#x2F;h3&gt;
&lt;p&gt;Many developers implement security at the application level. This approach involves:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Building a user authentication system in your application&lt;&#x2F;li&gt;
&lt;li&gt;Managing access control through your application’s code&lt;&#x2F;li&gt;
&lt;li&gt;Creating middleware that checks user credentials before allowing database access&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;best-practices-for-sqlite-security&quot;&gt;Best Practices for SQLite Security&lt;&#x2F;h2&gt;
&lt;p&gt;To maintain a secure SQLite implementation:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Never store your database file in a publicly accessible directory&lt;&#x2F;li&gt;
&lt;li&gt;Regularly backup your database file&lt;&#x2F;li&gt;
&lt;li&gt;Implement proper input validation to prevent SQL injection attacks&lt;&#x2F;li&gt;
&lt;li&gt;Consider using prepared statements for all database queries&lt;&#x2F;li&gt;
&lt;li&gt;Monitor file system permissions regularly&lt;&#x2F;li&gt;
&lt;li&gt;Keep your SQLite library updated to the latest version&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;when-to-consider-alternative-databases&quot;&gt;When to Consider Alternative Databases&lt;&#x2F;h2&gt;
&lt;p&gt;While SQLite’s security model works well for many use cases, you might want to consider a different database system if you need:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Built-in user authentication&lt;&#x2F;li&gt;
&lt;li&gt;Fine-grained access control&lt;&#x2F;li&gt;
&lt;li&gt;Multiple concurrent users with different permission levels&lt;&#x2F;li&gt;
&lt;li&gt;Network-based access control&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;SQLite’s approach to security might be different from what you’re used to, but it’s not inherently less secure. By understanding its serverless nature and implementing appropriate security measures at the file system and application levels, you can build robust and secure applications with SQLite. The key is choosing the right security measures for your specific use case and implementing them correctly.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: security is only as strong as its weakest link. Always consider your entire application’s security architecture, not just database access control.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Managing Background Processes in Bash: A Complete Guide</title>
        <published>2024-11-24T00:00:00+00:00</published>
        <updated>2024-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/background-processes/"/>
        <id>https://zerotohero.dev/inbox/background-processes/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/background-processes/">&lt;p&gt;When developing applications or running multiple services locally, you often need to run several scripts simultaneously. While you could open multiple terminal windows, a more elegant solution is to manage these processes programmatically. In this post, I’ll show you how to create a robust script that can run multiple processes in the background, manage their logs, and clean up properly when shutting down.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;&#x2F;h2&gt;
&lt;p&gt;Common scenarios where you might need this approach include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Running multiple microservices locally for development&lt;&#x2F;li&gt;
&lt;li&gt;Starting various components of a distributed system&lt;&#x2F;li&gt;
&lt;li&gt;Running long-running tasks that need to be monitored&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The key requirements for our solution are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Run multiple scripts in the background&lt;&#x2F;li&gt;
&lt;li&gt;Capture logs from each process&lt;&#x2F;li&gt;
&lt;li&gt;Clean up processes properly when the main script exits&lt;&#x2F;li&gt;
&lt;li&gt;Handle interrupts gracefully&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a complete script that handles all these requirements:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;declare &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-a BG_PIDS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LOG_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;logs&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;cleanup&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Cleaning up background processes...&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; pid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BG_PIDS[@]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;kill&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; -0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;&#x2F;dev&#x2F;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Killing process $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;kill &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;wait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;&#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;exit
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;trap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; cleanup EXIT INT TERM
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LOG_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;run_background&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logfile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LOG_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&#x2F;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;basename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;).log&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt; is not executable&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logfile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;!
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BG_PIDS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Started $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt; with PID $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, logging to $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logfile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;run_background &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;.&#x2F;hack&#x2F;spike-agent-starter.sh&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# run_background &amp;quot;.&#x2F;path&#x2F;to&#x2F;another&#x2F;script.sh&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Scripts running in background. Logs in $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LOG_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;. Press Ctrl+C to stop all processes.&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;wait
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;How It Works&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s break down the key components:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;process-management&quot;&gt;Process Management&lt;&#x2F;h3&gt;
&lt;p&gt;The script uses an array (&lt;code&gt;BG_PIDS&lt;&#x2F;code&gt;) to keep track of all background processes. This is crucial for proper cleanup later.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;declare &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-a BG_PIDS
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;log-management&quot;&gt;Log Management&lt;&#x2F;h3&gt;
&lt;p&gt;Each process gets its own log file in a dedicated logs directory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LOG_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;logs&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mkdir -p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LOG_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;the-cleanup-function&quot;&gt;The Cleanup Function&lt;&#x2F;h3&gt;
&lt;p&gt;The cleanup function is responsible for gracefully shutting down all background processes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;cleanup&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Cleaning up background processes...&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; pid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BG_PIDS[@]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;kill&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; -0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;&#x2F;dev&#x2F;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Killing process $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;kill &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;wait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;&#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;done
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;exit
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;signal-handling&quot;&gt;Signal Handling&lt;&#x2F;h3&gt;
&lt;p&gt;The script uses &lt;code&gt;trap&lt;&#x2F;code&gt; to ensure cleanup happens in all exit scenarios:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;trap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; cleanup EXIT INT TERM
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This catches:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Normal script exit (EXIT)&lt;&#x2F;li&gt;
&lt;li&gt;Ctrl+C interrupts (INT)&lt;&#x2F;li&gt;
&lt;li&gt;Termination signals (TERM)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;running-background-processes&quot;&gt;Running Background Processes&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;run_background&lt;&#x2F;code&gt; function handles starting processes and setting up their logs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;run_background&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logfile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LOG_DIR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&#x2F;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;basename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;).log&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt; is not executable&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logfile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;!
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BG_PIDS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Started $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt; with PID $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, logging to $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logfile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Save the script as &lt;code&gt;run-background.sh&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Make it executable:&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod +x run-background.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Add your scripts to the main execution section:&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;run_background &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;.&#x2F;your-script.sh&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Run it:&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&#x2F;run-background.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Always check executability&lt;&#x2F;strong&gt;: The script verifies that each program is executable before attempting to run it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Proper signal handling&lt;&#x2F;strong&gt;: Using &lt;code&gt;trap&lt;&#x2F;code&gt; ensures no processes are left running.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Organized logging&lt;&#x2F;strong&gt;: Each process gets its own log file, making debugging easier.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Clean exit handling&lt;&#x2F;strong&gt;: The cleanup function verifies each process exists before attempting to kill it.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;common-issues-and-solutions&quot;&gt;Common Issues and Solutions&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Zombie Processes&lt;&#x2F;strong&gt;: The script uses &lt;code&gt;wait&lt;&#x2F;code&gt; to properly reap child processes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Log Management&lt;&#x2F;strong&gt;: Logs are automatically organized by script name in the logs directory.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Permission Issues&lt;&#x2F;strong&gt;: The script checks for executable permissions before running each program.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This script provides a robust foundation for managing background processes in a development environment. It’s particularly useful for microservices development, where you need to run multiple services simultaneously.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to modify the script paths and add any specific error handling your use case might require. The modular nature of the script makes it easy to extend with additional functionality like log rotation or process monitoring.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding Unix Directory Permissions: A Common Pitfall</title>
        <published>2024-11-24T00:00:00+00:00</published>
        <updated>2024-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/file-permission/"/>
        <id>https://zerotohero.dev/inbox/file-permission/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/file-permission/">&lt;p&gt;When working with Unix-like systems, you might occasionally encounter situations where you can’t create files in a directory even though you own it. This usually happens because of a common misunderstanding about how directory permissions work in Unix systems.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s look at a real-world example. Consider this output from &lt;code&gt;ls -al&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;drw-------  2 volkan volkan  4096 Nov 15 15:22 .spike
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At first glance, this might seem fine - the owner has read and write permissions (&lt;code&gt;rw-&lt;&#x2F;code&gt;). However, trying to create a file in this directory will fail. Why?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-directory-permissions&quot;&gt;Understanding Directory Permissions&lt;&#x2F;h2&gt;
&lt;p&gt;In Unix systems, directory permissions work differently than file permissions. The permission bits have different meanings when applied to directories:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Read (r)&lt;&#x2F;strong&gt;: Allows listing directory contents&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Write (w)&lt;&#x2F;strong&gt;: Allows creating and deleting files within the directory&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Execute (x)&lt;&#x2F;strong&gt;: Allows accessing the directory and its contents&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The crucial detail here is that the &lt;strong&gt;execute&lt;&#x2F;strong&gt; permission is required to use a directory effectively. Without it, you can’t:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Enter the directory (&lt;code&gt;cd&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Access files within it&lt;&#x2F;li&gt;
&lt;li&gt;Create new files&lt;&#x2F;li&gt;
&lt;li&gt;Delete existing files&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;breaking-down-the-permission-string&quot;&gt;Breaking Down the Permission String&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s decode &lt;code&gt;drw-------&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d&lt;&#x2F;code&gt;: This is a directory&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rw-&lt;&#x2F;code&gt;: Owner has read and write permissions, but no execute&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;---&lt;&#x2F;code&gt;: Group has no permissions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;---&lt;&#x2F;code&gt;: Others have no permissions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This translates to mode &lt;code&gt;600&lt;&#x2F;code&gt; in octal notation. However, this is rarely what you want for a directory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h2&gt;
&lt;p&gt;To fix this, you need to add the execute permission for the owner. There are two ways to do this:&lt;&#x2F;p&gt;
&lt;p&gt;Using symbolic mode:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod u+x ~&#x2F;.spike
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or using octal mode (more common):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod 700 ~&#x2F;.spike
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After this change, the permission string will show as &lt;code&gt;drwx------&lt;&#x2F;code&gt;, giving you full control over the directory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;p&gt;For private directories that only you should access:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use mode &lt;code&gt;700&lt;&#x2F;code&gt; (&lt;code&gt;rwx------&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;This gives you full permissions while keeping the directory private&lt;&#x2F;li&gt;
&lt;li&gt;It’s more secure than &lt;code&gt;777&lt;&#x2F;code&gt; which would allow anyone to access the directory&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For shared directories:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Consider who needs access and adjust group permissions accordingly&lt;&#x2F;li&gt;
&lt;li&gt;Common modes include &lt;code&gt;750&lt;&#x2F;code&gt; (&lt;code&gt;rwxr-x---&lt;&#x2F;code&gt;) for group-readable directories&lt;&#x2F;li&gt;
&lt;li&gt;Always be cautious with world-readable&#x2F;writable permissions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;command-reference&quot;&gt;Command Reference&lt;&#x2F;h2&gt;
&lt;p&gt;Useful commands for managing directory permissions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# View permissions in human-readable format
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ls -al directory_name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# View permissions in numeric format
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;stat -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;%a&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; directory_name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Change permissions using symbolic notation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod u+x directory_name  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Add execute for user
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod g+rx directory_name &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Add read and execute for group
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Change permissions using octal notation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod 700 directory_name  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# rwx------ (private)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod 750 directory_name  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# rwxr-x--- (group readable)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remember: when working with directories, the execute permission is essential for basic operations. Always ensure it’s set appropriately for your use case.&lt;&#x2F;p&gt;
&lt;p&gt;Happy permissions managing! 🐧&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Type-Safe Configuration Keys in Go: Finding the Right Balance</title>
        <published>2024-11-24T00:00:00+00:00</published>
        <updated>2024-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/go-config/"/>
        <id>https://zerotohero.dev/inbox/go-config/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/go-config/">&lt;p&gt;When working with configuration in Go applications, we often face the challenge of managing configuration keys in a type-safe and maintainable way. Should we use simple strings? Create custom types? How do we balance type safety with readability? Let’s explore these questions through a real-world example.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;&#x2F;h2&gt;
&lt;p&gt;Consider a typical database configuration scenario. We need to manage several configuration keys for settings like data directory, connection limits, and timeout values. A naive approach might use string literals:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;data_dir&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;max_open_conns&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach is prone to errors: typos in strings won’t be caught at compile time, and there’s no clear indication of which keys are valid.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;evolution-of-a-solution&quot;&gt;Evolution of a Solution&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s walk through the evolution of a more robust solution.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;first-attempt-basic-type-safety&quot;&gt;First Attempt: Basic Type Safety&lt;&#x2F;h3&gt;
&lt;p&gt;We might start with a simple custom type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeyDataDir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;data_dir&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeyDatabaseFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;database_file&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeyJournalMode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;journal_mode&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This provides basic type safety but raises some interesting questions. The &lt;code&gt;Key&lt;&#x2F;code&gt; prefix on constants might feel like Hungarian notation - the practice of embedding type information in variable names. However, it serves a different purpose here: it’s a semantic indicator rather than a type indicator.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;improved-version-domain-specific-type&quot;&gt;Improved Version: Domain-Specific Type&lt;&#x2F;h3&gt;
&lt;p&gt;A better approach is to make the type name more specific to its domain:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;DatabaseConfigKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeyDataDir                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;DatabaseConfigKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;data_dir&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeyDatabaseFile           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;DatabaseConfigKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;database_file&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeyJournalMode            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;DatabaseConfigKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;journal_mode&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeyBusyTimeoutMs          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;DatabaseConfigKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;busy_timeout_ms&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeyMaxOpenConns           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;DatabaseConfigKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;max_open_conns&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeyMaxIdleConns           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;DatabaseConfigKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;max_idle_conns&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeyConnMaxLifetimeSeconds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;DatabaseConfigKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;conn_max_lifetime_seconds&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This version has several advantages:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Type Safety&lt;&#x2F;strong&gt;: The compiler ensures you can’t accidentally use arbitrary strings where configuration keys are expected&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Domain Clarity&lt;&#x2F;strong&gt;: The type name &lt;code&gt;DatabaseConfigKey&lt;&#x2F;code&gt; clearly indicates the purpose of these constants&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Semantic Grouping&lt;&#x2F;strong&gt;: The &lt;code&gt;Key&lt;&#x2F;code&gt; prefix on constants helps prevent confusion with potential string literals&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Maintainability&lt;&#x2F;strong&gt;: Using a &lt;code&gt;const&lt;&#x2F;code&gt; block groups related constants together and makes alignment easier&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;alternative-approaches&quot;&gt;Alternative Approaches&lt;&#x2F;h2&gt;
&lt;p&gt;There are other ways to solve this problem:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;namespace-prefix-approach&quot;&gt;Namespace Prefix Approach&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ConfigDataDir       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;data_dir&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ConfigDatabaseFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;database_file&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;struct-with-tags&quot;&gt;Struct with Tags&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Config &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DataDir       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;data_dir&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DatabaseFile &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;database_file&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;enum-like-pattern&quot;&gt;Enum-like Pattern&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ConfigKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DataDir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ConfigKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;iota
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DatabaseFile
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ConfigKey&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Convert to string representation
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;making-the-right-choice&quot;&gt;Making the Right Choice&lt;&#x2F;h2&gt;
&lt;p&gt;The choice between these approaches depends on your specific needs:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Choose the type-safe approach (DatabaseConfigKey) when:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You need compile-time type checking&lt;&#x2F;li&gt;
&lt;li&gt;The keys are used across different packages&lt;&#x2F;li&gt;
&lt;li&gt;You want to prevent accidental use of arbitrary strings&lt;&#x2F;li&gt;
&lt;li&gt;Documentation and IDE support are important&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Choose simpler approaches when:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The configuration is used in a limited scope&lt;&#x2F;li&gt;
&lt;li&gt;The context makes the meaning clear&lt;&#x2F;li&gt;
&lt;li&gt;You have other validation mechanisms&lt;&#x2F;li&gt;
&lt;li&gt;Simplicity is more valuable than type safety&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;DatabaseConfigKey&lt;&#x2F;code&gt; approach with the &lt;code&gt;Key&lt;&#x2F;code&gt; prefix strikes a good balance between type safety, clarity, and maintainability. It’s not Hungarian notation in the traditional sense - instead, it’s a domain-specific type system that adds both safety and semantic meaning to your code.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: The goal isn’t to follow any particular naming convention blindly, but to make your code clear, safe, and maintainable. Choose the approach that best serves these goals in your specific context.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding the &#x27;Superfluous Response.WriteHeader&#x27; Error in Go</title>
        <published>2024-11-24T00:00:00+00:00</published>
        <updated>2024-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/go-http-headers/"/>
        <id>https://zerotohero.dev/inbox/go-http-headers/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/go-http-headers/">&lt;p&gt;When working with Go’s HTTP server, you might encounter the cryptic error message “http: superfluous response.WriteHeader”. This error occurs when your code attempts to modify response headers after the response has already been written. Let’s dive into what causes this and how to fix it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;Consider this seemingly straightforward JWT validation middleware:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ValidateJwt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ensureValidJwt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Error occurs here
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Header&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;application&#x2F;json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WriteHeader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusUnauthorized&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WriteString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`{&amp;quot;status&amp;quot;: &amp;quot;unauthorized&amp;quot;}`&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;routeDeleteSecret&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;msg&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Problem writing response&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;err&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;errorString&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At first glance, this code looks correct. We’re:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Validating the JWT&lt;&#x2F;li&gt;
&lt;li&gt;Setting the content type header&lt;&#x2F;li&gt;
&lt;li&gt;Setting the status code&lt;&#x2F;li&gt;
&lt;li&gt;Writing the response body&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;However, if you’re getting the “superfluous response.WriteHeader” error, it means something is already writing to the response before these lines execute.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-the-http-response-lifecycle&quot;&gt;Understanding the HTTP Response Lifecycle&lt;&#x2F;h2&gt;
&lt;p&gt;In Go’s HTTP server, there’s a specific order of operations when sending responses:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Set headers (&lt;code&gt;w.Header().Set()&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Set status code (&lt;code&gt;w.WriteHeader()&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Write body (&lt;code&gt;w.Write()&lt;&#x2F;code&gt; or &lt;code&gt;io.WriteString()&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Once you perform step 2 or 3, you can’t go back and modify headers or status codes. It’s a one-way street.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;common-causes&quot;&gt;Common Causes&lt;&#x2F;h2&gt;
&lt;p&gt;The most frequent cause of this error is middleware or helper functions that write to the response writer before returning. In our example, the likely culprit is &lt;code&gt;ensureValidJwt()&lt;&#x2F;code&gt;. It’s probably writing its own response before returning &lt;code&gt;false&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;solutions&quot;&gt;Solutions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;option-1-single-point-of-response&quot;&gt;Option 1: Single Point of Response&lt;&#x2F;h3&gt;
&lt;p&gt;Modify your validation function to only handle validation, not responses:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;validateJwtToken&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Only validate the token, don&amp;#39;t write responses
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Return true if valid, false if invalid
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ValidateJwt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;validateJwtToken&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Header&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;application&#x2F;json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WriteHeader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusUnauthorized&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WriteString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`{&amp;quot;status&amp;quot;: &amp;quot;unauthorized&amp;quot;}`&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;routeDeleteSecret&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;msg&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Problem writing response&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;err&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;errorString&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;option-2-consistent-response-handling&quot;&gt;Option 2: Consistent Response Handling&lt;&#x2F;h3&gt;
&lt;p&gt;If you need the helper function to handle responses, make it responsible for all response writing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ensureValidJwt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; If invalid, handle the entire response here
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;isValid &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Header&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;application&#x2F;json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WriteHeader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusUnauthorized&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WriteString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`{&amp;quot;status&amp;quot;: &amp;quot;unauthorized&amp;quot;}`&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ValidateJwt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Let ensureValidJwt handle all response writing
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ensureValidJwt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adminToken&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Single Responsibility&lt;&#x2F;strong&gt;: Decide whether a function validates or writes responses, not both&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Clear Documentation&lt;&#x2F;strong&gt;: Document whether your functions write to the response writer&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Consistent Patterns&lt;&#x2F;strong&gt;: Stick to one pattern throughout your codebase&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Early Returns&lt;&#x2F;strong&gt;: Handle error cases early and return to avoid nested conditions&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The “superfluous response.WriteHeader” error is Go’s way of telling you that you’re trying to modify a response that’s already been sent. By understanding the HTTP response lifecycle and maintaining clear responsibilities in your functions, you can avoid this error and write more maintainable code.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: Headers → Status → Body. Once you start writing the response, there’s no going back to modify headers or status codes.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Working with User Home Directory in Go: A Security-First Approachl</title>
        <published>2024-11-24T00:00:00+00:00</published>
        <updated>2024-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/home-dir-in-go/"/>
        <id>https://zerotohero.dev/inbox/home-dir-in-go/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/home-dir-in-go/">&lt;h1 id=&quot;&quot;&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;When building command-line tools or applications that need to store configuration files, it’s common to use the user’s home directory. In this post, we’ll explore how to safely create and manage a hidden directory in the user’s home folder using Go, with a focus on security.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-the-user-s-home-directory&quot;&gt;Getting the User’s Home Directory&lt;&#x2F;h2&gt;
&lt;p&gt;Go provides a straightforward way to get the user’s home directory through the &lt;code&gt;os&lt;&#x2F;code&gt; package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;homeDir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;UserHomeDir&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This works cross-platform, handling the differences between Windows (&lt;code&gt;C:\Users\username&lt;&#x2F;code&gt;), Unix (&lt;code&gt;&#x2F;home&#x2F;username&lt;&#x2F;code&gt;), and macOS (&lt;code&gt;&#x2F;Users&#x2F;username&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-hidden-directory&quot;&gt;Creating a Hidden Directory&lt;&#x2F;h2&gt;
&lt;p&gt;In Unix-like systems, directories starting with a dot (&lt;code&gt;.&lt;&#x2F;code&gt;) are hidden by default. Let’s create a &lt;code&gt;.spike&lt;&#x2F;code&gt; directory in the user’s home folder:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;os&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;path&#x2F;filepath&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;homeDir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;UserHomeDir&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spikeDir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;filepath&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Join&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;homeDir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;.spike&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MkdirAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spikeDir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0600&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;understanding-file-permissions&quot;&gt;Understanding File Permissions&lt;&#x2F;h2&gt;
&lt;p&gt;The permission value &lt;code&gt;0600&lt;&#x2F;code&gt; in the code above is crucial for security:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;6&lt;&#x2F;code&gt; (owner): Read (4) + Write (2) = 6&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;0&lt;&#x2F;code&gt; (group): No permissions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;0&lt;&#x2F;code&gt; (others): No permissions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This ensures that only the owner can read and write to the directory, while all other users on the system are denied access.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;handling-existing-directories&quot;&gt;Handling Existing Directories&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;MkdirAll&lt;&#x2F;code&gt; has some interesting behavior when the directory already exists:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;If the directory doesn’t exist, it creates it with the specified permissions&lt;&#x2F;li&gt;
&lt;li&gt;If the directory exists, it does nothing and returns &lt;code&gt;nil&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;It won’t modify permissions of an existing directory&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;To ensure consistent permissions, we should explicitly set them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Create if doesn&amp;#39;t exist
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MkdirAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spikeDir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0600&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Ensure correct permissions even if directory already existed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Chmod&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spikeDir&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0600&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;platform-considerations&quot;&gt;Platform Considerations&lt;&#x2F;h2&gt;
&lt;p&gt;While Unix-style permissions (&lt;code&gt;0600&lt;&#x2F;code&gt;) work well on Unix-like systems, Windows handles permissions differently. Go will attempt to map these permissions to Windows Access Control Lists (ACLs), but the exact behavior might vary.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Always check for errors when dealing with file operations&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;filepath.Join()&lt;&#x2F;code&gt; instead of string concatenation for paths&lt;&#x2F;li&gt;
&lt;li&gt;Set restrictive permissions for directories containing sensitive data&lt;&#x2F;li&gt;
&lt;li&gt;Consider explicitly setting permissions after directory creation&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;os.UserHomeDir()&lt;&#x2F;code&gt; instead of environment variables for better cross-platform support&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;When creating directories in a user’s home folder, it’s crucial to consider security implications. By using appropriate permissions and handling existing directories correctly, we can ensure our application safely stores its data while preventing unauthorized access.&lt;&#x2F;p&gt;
&lt;p&gt;Remember, security is not just about functionality—it’s about protecting user data and maintaining trust in your application.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>O-RAN R1 Interface</title>
        <published>2024-11-24T00:00:00+00:00</published>
        <updated>2024-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/o-ran-r1-interface/"/>
        <id>https://zerotohero.dev/inbox/o-ran-r1-interface/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/o-ran-r1-interface/">&lt;p&gt;Here is a brief explanation of the O-RAN R1 Interface:&lt;&#x2F;p&gt;
&lt;p&gt;O-RAN stands for Open Radio Access Network. It is an industry standard that
defines open and interoperable interfaces for 5G RANs (Radio Access Networks).&lt;&#x2F;p&gt;
&lt;p&gt;The R1 interface is one of the key interfaces defined by O-RAN. It connects the
O-RU (O-RAN Radio Unit) and the O-DU (O-RAN Distributed Unit).&lt;&#x2F;p&gt;
&lt;p&gt;The main functions of the R1 interface are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Transport of user plane data between O-RU and O-DU via Ethernet fronthaul.&lt;br &#x2F;&gt;
This includes downlink and uplink user data.&lt;&#x2F;li&gt;
&lt;li&gt;Transport of control and management plane information between O-RU and O-DU.
This includes control signaling, synchronization, and performance measurements.&lt;&#x2F;li&gt;
&lt;li&gt;Configuration and control of the O-RU by the O-DU. The O-DU can configure
parameters like frequency bands, transmission power, etc.&lt;&#x2F;li&gt;
&lt;li&gt;Performance monitoring of O-RU by O-DU. The O-RU regularly sends KPIs and
measurements that allow the O-DU to monitor and manage the RU.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some key properties of the R1 interface are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It uses Ethernet as the transport mechanism.&lt;&#x2F;li&gt;
&lt;li&gt;It supports functional split option 7-2x between O-RU and O-DU.&lt;&#x2F;li&gt;
&lt;li&gt;It provides open interfaces with standard models for configuration, control,&lt;br &#x2F;&gt;
performance monitoring etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In summary, the R1 interface enables open and interoperable connectivity between
the radio unit and distributed unit in an O-RAN architecture. It transports user
data, control signaling, and facilitates management of the RU by the DU.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Design Patterns in Go: Building a Policy Management System</title>
        <published>2024-11-24T00:00:00+00:00</published>
        <updated>2024-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/policy-management-system/"/>
        <id>https://zerotohero.dev/inbox/policy-management-system/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/policy-management-system/">&lt;p&gt;When building systems that require access control, one common requirement is managing policies that define who can access what. In this post, I’ll walk through the design and implementation of a policy management system in Go, highlighting important design decisions and patterns along the way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-initial-design&quot;&gt;The Initial Design&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s start with a basic policy model. Our policies need to track permissions for different paths and SPIFFE IDs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;PolicyPermission &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PermissionRead  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;PolicyPermission &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;read&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PermissionWrite &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;PolicyPermission &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;write&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Policy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Id              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;id&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;name&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SpiffeIdPattern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;spiffe_id_pattern&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PathPattern     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;path_pattern&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Permissions     &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;PolicyPermission &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;permissions&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreatedAt       time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Time          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;created_at&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreatedBy       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;created_by&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For thread-safe storage, we’ll use Go’s &lt;code&gt;sync.Map&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policies sync&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Map
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-evolution-of-the-design&quot;&gt;The Evolution of the Design&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;first-iteration-basic-crud&quot;&gt;First Iteration: Basic CRUD&lt;&#x2F;h3&gt;
&lt;p&gt;Our first attempt might look something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;CreatePolicy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sync&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Policy&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ErrInvalidPolicy
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;exists &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policies&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Load&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;exists &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ErrPolicyExists
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policies&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Store&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, this design has a few issues:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;It requires clients to generate their own IDs&lt;&#x2F;li&gt;
&lt;li&gt;It mixes validation with storage logic&lt;&#x2F;li&gt;
&lt;li&gt;It doesn’t return the created policy&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;second-iteration-adding-request-response-types&quot;&gt;Second Iteration: Adding Request&#x2F;Response Types&lt;&#x2F;h3&gt;
&lt;p&gt;We might be tempted to add request&#x2F;response types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;PolicyRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SpiffeIdPattern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PathPattern     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Permissions     &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;PolicyPermission
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreatedBy       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;CreatePolicy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sync&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;PolicyRequest&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Policy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But this introduces a new problem: we’re mixing API concerns with our core policy management logic. The policy package should remain focused on managing Policy objects, regardless of how they’re being created or accessed.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;final-design-clean-separation-of-concerns&quot;&gt;Final Design: Clean Separation of Concerns&lt;&#x2F;h3&gt;
&lt;p&gt;The better approach is to keep the policy package focused on managing Policy objects and handle request&#x2F;response mapping at the API layer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; In the policy package
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;CreatePolicy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sync&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Policy&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Policy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Policy&lt;&#x2F;span&gt;&lt;span&gt;{}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ErrInvalidPolicy
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;uuid&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreatedAt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;IsZero&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreatedAt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Now&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policies&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Store&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then in your HTTP handler or API layer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; In your API package
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Handler&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;CreatePolicy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;CreatePolicyRequest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewDecoder&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusBadRequest&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Policy&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;:            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SpiffeIdPattern&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SpiffeIdPattern&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PathPattern&lt;&#x2F;span&gt;&lt;span&gt;:     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PathPattern&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Permissions&lt;&#x2F;span&gt;&lt;span&gt;:     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Permissions&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreatedBy&lt;&#x2F;span&gt;&lt;span&gt;:       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;getUserFromContext&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;()),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;createdPolicy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreatePolicy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policies&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Handle error
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewEncoder&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Encode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;createdPolicy&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;key-design-principles&quot;&gt;Key Design Principles&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Separation of Concerns&lt;&#x2F;strong&gt;: Keep the core policy logic separate from API concerns. The policy package shouldn’t know about HTTP requests or JSON serialization.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Single Responsibility&lt;&#x2F;strong&gt;: Each component should have one job:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Policy package: Manage policy objects&lt;&#x2F;li&gt;
&lt;li&gt;API layer: Handle HTTP requests&#x2F;responses&lt;&#x2F;li&gt;
&lt;li&gt;Validation layer: Validate inputs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interface Segregation&lt;&#x2F;strong&gt;: The policy package exposes simple operations (Create, Read, Update, Delete) that can be composed into more complex operations at higher levels.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Immutability&lt;&#x2F;strong&gt;: Operations that modify policies return new Policy objects rather than modifying existing ones.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;benefits-of-this-design&quot;&gt;Benefits of This Design&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Testability&lt;&#x2F;strong&gt;: Core policy logic can be tested without HTTP concerns&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Reusability&lt;&#x2F;strong&gt;: The policy package can be used with different interfaces (HTTP, gRPC, CLI)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Maintainability&lt;&#x2F;strong&gt;: Changes to API formats don’t require changes to core logic&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Flexibility&lt;&#x2F;strong&gt;: Easy to add new features or change implementation details&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;When designing systems, it’s tempting to mix concerns for convenience. However, keeping clear boundaries between different layers of your application leads to more maintainable and flexible code. In our policy management system, separating the core policy logic from API concerns gives us a more robust and reusable solution.&lt;&#x2F;p&gt;
&lt;p&gt;The final implementation allows for easy extension and modification while maintaining clean separation between the different concerns in the system. This makes it easier to test, maintain, and evolve the system as requirements change.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: Good design isn’t about getting it perfect the first time - it’s about making it easy to change as you learn more about your requirements.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Designing a Reusable Retry Package in Go: Beyond the Logger Antipatterne</title>
        <published>2024-11-24T00:00:00+00:00</published>
        <updated>2024-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/reusable-retry-package-in-go/"/>
        <id>https://zerotohero.dev/inbox/reusable-retry-package-in-go/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/reusable-retry-package-in-go/">&lt;h1 id=&quot;&quot;&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;When building reusable Go packages, one common challenge is handling cross-cutting concerns like logging. Recently, I encountered this issue while working with a retry package that had a hard dependency on a specific logger implementation. Let’s explore how to refactor this into a more reusable module.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;Consider this implementation of a retry mechanism:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ExponentialRetrier&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;RetryWithBackoff&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;operation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;newBackOff&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;totalDuration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;backoff&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RetryNotify&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;backoff&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WithContext&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;duration time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;totalDuration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;duration
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Direct logger dependency - this is problematic!
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Retrying operation after error&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;error&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(), 
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;duration&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;duration&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;total duration&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;totalDuration&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code has two main issues:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;It depends on a specific logger implementation (&lt;code&gt;log.Log()&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;It violates the principle that reusable modules shouldn’t log directly&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;solution-approaches&quot;&gt;Solution Approaches&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s explore three different ways to solve this problem, each with its own trade-offs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-callback-functions-simple-and-flexible&quot;&gt;1. Callback Functions: Simple and Flexible&lt;&#x2F;h3&gt;
&lt;p&gt;The simplest approach is to use a callback function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;NotifyFunc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ExponentialRetrier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;OnRetry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;NotifyFunc
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ExponentialRetrier&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;RetryWithBackoff&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;operation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;newBackOff&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;totalDuration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;notify &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;OnRetry
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;notify &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;notify &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;) {} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; noop
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;backoff&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RetryNotify&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;backoff&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WithContext&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;duration time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;totalDuration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;duration
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;notify&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;duration&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;totalDuration&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Usage is straightforward:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;retrier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ExponentialRetrier&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;OnRetry&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;total time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Retrying operation&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;error&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;duration&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Simple to implement and understand&lt;&#x2F;li&gt;
&lt;li&gt;Very flexible&lt;&#x2F;li&gt;
&lt;li&gt;Minimal boilerplate&lt;&#x2F;li&gt;
&lt;li&gt;Easy to integrate with any logging system&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;No built-in support for async processing&lt;&#x2F;li&gt;
&lt;li&gt;Can be harder to test complex notification logic&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-channel-based-async-and-decoupled&quot;&gt;2. Channel-Based: Async and Decoupled&lt;&#x2F;h3&gt;
&lt;p&gt;For more complex scenarios, we can use channels:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;RetryEvent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Duration      time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Duration
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TotalDuration time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Duration
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ExponentialRetrier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;chan RetryEvent
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This allows for asynchronous processing of retry events:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;events &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;chan RetryEvent&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;retrier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ExponentialRetrier&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Events&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;events&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Process events asynchronously
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;go func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;events &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Retry event&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;error&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;duration&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Decoupled event processing&lt;&#x2F;li&gt;
&lt;li&gt;Built-in buffering capability&lt;&#x2F;li&gt;
&lt;li&gt;Great for high-performance scenarios&lt;&#x2F;li&gt;
&lt;li&gt;Allows for complex event processing pipelines&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;More complex to implement&lt;&#x2F;li&gt;
&lt;li&gt;Requires careful channel management&lt;&#x2F;li&gt;
&lt;li&gt;May be overkill for simple use cases&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-interface-based-clean-and-testable&quot;&gt;3. Interface-Based: Clean and Testable&lt;&#x2F;h3&gt;
&lt;p&gt;The most formal approach is to define an interface:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;RetryNotifier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;OnRetry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ExponentialRetrier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Notifier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;RetryNotifier
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This enables clean separation of concerns:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;LogNotifier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Logger
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;LogNotifier&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;OnRetry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;total time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logger&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Debug&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Retrying operation&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;error&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;retrier &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ExponentialRetrier&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Notifier&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LogNotifier&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logger&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Pros:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Clear separation of concerns&lt;&#x2F;li&gt;
&lt;li&gt;Highly testable&lt;&#x2F;li&gt;
&lt;li&gt;Follows Go interface best practices&lt;&#x2F;li&gt;
&lt;li&gt;Easy to create multiple implementations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Cons:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Most verbose approach&lt;&#x2F;li&gt;
&lt;li&gt;May be unnecessary for simple use cases&lt;&#x2F;li&gt;
&lt;li&gt;Requires more initial setup&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;making-the-choice&quot;&gt;Making the Choice&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s when to use each approach:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use Callbacks&lt;&#x2F;strong&gt; when:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You need a simple, straightforward solution&lt;&#x2F;li&gt;
&lt;li&gt;The notification logic is simple&lt;&#x2F;li&gt;
&lt;li&gt;You want minimal boilerplate&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use Channels&lt;&#x2F;strong&gt; when:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You need async processing&lt;&#x2F;li&gt;
&lt;li&gt;You want to buffer events&lt;&#x2F;li&gt;
&lt;li&gt;You’re building a high-performance system&lt;&#x2F;li&gt;
&lt;li&gt;You need to process events in batches&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use Interfaces&lt;&#x2F;strong&gt; when:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You need strong separation of concerns&lt;&#x2F;li&gt;
&lt;li&gt;Testing is a primary concern&lt;&#x2F;li&gt;
&lt;li&gt;You expect multiple implementations&lt;&#x2F;li&gt;
&lt;li&gt;You’re building a large system with many components&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;When building reusable Go packages, it’s crucial to avoid hard dependencies on cross-cutting concerns like logging. By using one of these patterns, you can create more flexible and maintainable code that can be easily integrated into any project.&lt;&#x2F;p&gt;
&lt;p&gt;For most cases, I recommend starting with the callback approach due to its simplicity and flexibility. If you need more sophisticated features or better separation of concerns, you can graduate to channels or interfaces as needed.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: The goal is to make your package as reusable as possible while maintaining clean separation of concerns. Choose the approach that best fits your specific needs while keeping the code simple and maintainable.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Building an ACL System for SPIFFE-based Secrets Store</title>
        <published>2024-11-24T00:00:00+00:00</published>
        <updated>2024-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/spiffe-acl/"/>
        <id>https://zerotohero.dev/inbox/spiffe-acl/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/spiffe-acl/">&lt;p&gt;Managing secrets in a microservices environment is challenging. While tools like HashiCorp Vault are excellent, sometimes you need a lighter solution that integrates deeply with your existing SPIFFE-based identity system. In this post, we’ll build an ACL (Access Control List) system for a SPIFFE-aware secrets store.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;In a SPIFFE-enabled infrastructure, each workload has a unique SPIFFE ID. For example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spiffe:&#x2F;&#x2F;example.org&#x2F;web-server&#x2F;prod&#x2F;001&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;spiffe:&#x2F;&#x2F;example.org&#x2F;payment-service&#x2F;staging&#x2F;002&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These IDs authenticate workloads, but we need authorization too. Which secrets can each workload access? How do we manage these permissions at scale?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;design-goals&quot;&gt;Design Goals&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Pattern-Based Access&lt;&#x2F;strong&gt;: Allow policies using SPIFFE ID patterns and path patterns&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Simple but Powerful&lt;&#x2F;strong&gt;: Keep the API simple while supporting complex use cases&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Integration Ready&lt;&#x2F;strong&gt;: Easy to integrate with existing SPIFFE&#x2F;SPIRE deployments&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Developer Friendly&lt;&#x2F;strong&gt;: Clear API design with intuitive client usage&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;api-design&quot;&gt;API Design&lt;&#x2F;h2&gt;
&lt;p&gt;We’ll organize our API endpoints logically:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Authentication endpoints
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlAuthInit  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;auth&#x2F;init&amp;quot;     
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlAuthLogin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;auth&#x2F;login&amp;quot;    
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Store endpoints
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlStoreSecrets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;store&#x2F;secrets&amp;quot;          
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlStoreSecret  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;store&#x2F;secrets&#x2F;{path:*}&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlStoreList    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;store&#x2F;list&#x2F;{path:*}&amp;quot;    
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Access Control endpoints
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlAclPolicies   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;store&#x2F;acl&#x2F;policies&amp;quot;      
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlAclPolicyByID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;store&#x2F;acl&#x2F;policies&#x2F;{id}&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlAclCheck      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;store&#x2F;acl&#x2F;check&amp;quot;         
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;core-components&quot;&gt;Core Components&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-policy-definition&quot;&gt;1. Policy Definition&lt;&#x2F;h3&gt;
&lt;p&gt;A policy connects SPIFFE ID patterns to secret paths:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Policy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ID              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;id&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;name&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SpiffeIDPattern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;spiffe_id_pattern&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PathPattern     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;path_pattern&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Permissions     &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;permissions&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreatedAt       time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;created_at&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreatedBy       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;created_by&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Example policy:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;web-servers-prod&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spiffe_id_pattern&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spiffe:&#x2F;&#x2F;example.org&#x2F;web-server&#x2F;prod&#x2F;.*&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;path_pattern&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;secrets&#x2F;web&#x2F;prod&#x2F;*&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;permissions&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;read&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;list&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-server-implementation&quot;&gt;2. Server Implementation&lt;&#x2F;h3&gt;
&lt;p&gt;The server handles policy management and access checking:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ACLService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policies sync&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Map
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ACLService&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;CheckAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;CheckAccessRequest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewDecoder&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusBadRequest&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matchingPolicies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;allowed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policies&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span&gt;{}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Policy&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Check SPIFFE ID pattern
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matched&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;regexp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MatchString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SpiffeIDPattern&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SpiffeID&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matched &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Check path pattern
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matched&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PathPattern&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matched &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Check permissions
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;perm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Permissions &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;perm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Action &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matchingPolicies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matchingPolicies&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;allowed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewEncoder&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Encode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CheckAccessResponse&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Allowed&lt;&#x2F;span&gt;&lt;span&gt;:          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;allowed&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MatchingPolicies&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matchingPolicies&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-client-sdk&quot;&gt;3. Client SDK&lt;&#x2F;h3&gt;
&lt;p&gt;A clean client SDK makes integration easy:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ACLClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;baseURL    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;httpClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Client
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ACLClient&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;CheckAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spiffeID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;action &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;CheckAccessResponse&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CheckAccessRequest&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SpiffeID&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spiffeID&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;:     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Action&lt;&#x2F;span&gt;&lt;span&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Marshal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;marshaling request: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;httpReq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewRequestWithContext&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;POST&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&#x2F;v1&#x2F;store&#x2F;acl&#x2F;check&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;baseURL&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewReader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;creating request: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ... handle response ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;usage-examples&quot;&gt;Usage Examples&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s how to use the system:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Create a policy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewACLClient&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;localhost:8080&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreatePolicy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreatePolicyRequest&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;:            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;web-servers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SpiffeIDPattern&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spiffe:&#x2F;&#x2F;example.org&#x2F;web-server&#x2F;.*&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PathPattern&lt;&#x2F;span&gt;&lt;span&gt;:     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;secrets&#x2F;web&#x2F;*&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Permissions&lt;&#x2F;span&gt;&lt;span&gt;:     []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;read&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;list&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Check access
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;resp&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CheckAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spiffe:&#x2F;&#x2F;example.org&#x2F;web-server&#x2F;001&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;secrets&#x2F;web&#x2F;config&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;read&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Access allowed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;resp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Allowed&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;production-considerations&quot;&gt;Production Considerations&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;&#x2F;strong&gt;: Replace &lt;code&gt;sync.Map&lt;&#x2F;code&gt; with a proper database&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Caching&lt;&#x2F;strong&gt;: Add policy cache with TTL&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Monitoring&lt;&#x2F;strong&gt;: Add metrics for policy evaluations&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Audit Logging&lt;&#x2F;strong&gt;: Log all access checks&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Rate Limiting&lt;&#x2F;strong&gt;: Protect the API from abuse&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;security-considerations&quot;&gt;Security Considerations&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Pattern Validation&lt;&#x2F;strong&gt;: Validate SPIFFE ID patterns strictly&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Least Privilege&lt;&#x2F;strong&gt;: Start with minimal permissions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Policy Versioning&lt;&#x2F;strong&gt;: Consider versioning policies&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Audit Trail&lt;&#x2F;strong&gt;: Log all policy changes&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Regular Reviews&lt;&#x2F;strong&gt;: Implement policy review processes&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This SPIFFE-aware ACL system provides a solid foundation for securing your secrets store. It’s simple enough to understand quickly but flexible enough to handle complex access patterns. The pattern-based matching makes it easy to manage permissions at scale.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to adapt the implementation based on your specific needs. You might want to add features like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Policy inheritance&lt;&#x2F;li&gt;
&lt;li&gt;Temporary access grants&lt;&#x2F;li&gt;
&lt;li&gt;More sophisticated pattern matching&lt;&#x2F;li&gt;
&lt;li&gt;Integration with external policy engines&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The complete code is available in the examples above. Feel free to use and modify it for your needs!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;This post is part of our series on SPIFFE-based infrastructure. Stay tuned for more posts about secrets management, workload identity, and secure service-to-service communication.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>About Inbox</title>
        <published>2024-11-24T00:00:00+00:00</published>
        <updated>2024-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/this-is-the-inbox/"/>
        <id>https://zerotohero.dev/inbox/this-is-the-inbox/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/this-is-the-inbox/">&lt;h2 id=&quot;about-inbox&quot;&gt;About Inbox&lt;&#x2F;h2&gt;
&lt;p&gt;This is my inbox, it contains rough ideas that may move elsewhere.&lt;&#x2F;p&gt;
&lt;p&gt;There can be almost anything in here, from a random thought to a draft of
a blog post.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Properly Handling URL Query Parameters in Go</title>
        <published>2024-11-24T00:00:00+00:00</published>
        <updated>2024-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/url-params-in-go/"/>
        <id>https://zerotohero.dev/inbox/url-params-in-go/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/url-params-in-go/">&lt;h1 id=&quot;&quot;&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;When building URLs in Go, especially those containing query parameters, it’s crucial to handle parameter encoding correctly. A common mistake is concatenating query parameters directly to the URL string, which can lead to issues with special characters and improper URL formatting.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;Consider this seemingly simple code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;UrlInitState&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;JoinPath&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NexusApiRoot&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;init?action=check&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;u
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While this might work for basic cases, it has several potential issues:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Special characters in parameter values won’t be properly encoded&lt;&#x2F;li&gt;
&lt;li&gt;Multiple parameters become harder to manage&lt;&#x2F;li&gt;
&lt;li&gt;The code becomes more error-prone as complexity increases&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h2&gt;
&lt;p&gt;Instead, use Go’s &lt;code&gt;url.Values&lt;&#x2F;code&gt; type to properly handle query parameters:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;UrlInitState&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;JoinPath&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NexusApiRoot&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;init&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Values&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;action&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;check&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;?&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Encode&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach offers several benefits:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Automatic proper encoding of special characters&lt;&#x2F;li&gt;
&lt;li&gt;Easy addition of multiple parameters&lt;&#x2F;li&gt;
&lt;li&gt;Clean separation between the base URL and query parameters&lt;&#x2F;li&gt;
&lt;li&gt;Built-in validation and encoding handling&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;advanced-usage&quot;&gt;Advanced Usage&lt;&#x2F;h2&gt;
&lt;p&gt;For more complex scenarios, you can add multiple parameters:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;BuildComplexURL&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;JoinPath&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NexusApiRoot&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;search&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Values&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;q&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;search term with spaces&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;category&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;books&amp;amp;movies&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Special characters handled automatically
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;limit&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;50&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;?&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Encode&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Always use &lt;code&gt;url.Values&lt;&#x2F;code&gt; for query parameters&lt;&#x2F;li&gt;
&lt;li&gt;Separate base URL construction from parameter handling&lt;&#x2F;li&gt;
&lt;li&gt;Handle errors from &lt;code&gt;url.JoinPath&lt;&#x2F;code&gt; appropriately in production code&lt;&#x2F;li&gt;
&lt;li&gt;Consider using &lt;code&gt;url.Parse&lt;&#x2F;code&gt; and &lt;code&gt;url.URL&lt;&#x2F;code&gt; for more complex URL manipulation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Remember: URL encoding isn’t just about making URLs look nice – it’s about ensuring your applications handle data correctly and securely.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Exploring Rust as a Go Developer</title>
        <published>2024-07-21T00:00:00+00:00</published>
        <updated>2024-07-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/learning-rust/"/>
        <id>https://zerotohero.dev/roadmap/learning-rust/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/learning-rust/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2024&amp;#x2F;rust&amp;#x2F;go-rust.png&quot; alt=&quot;Learning from each other.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Learning from each other.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;In this article, I will explore &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot; title=&quot;Rust Programming Language&quot;&gt;&lt;strong&gt;Rust&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; from the perspective of a
&lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;&quot; title=&quot;Go Programming Language&quot;&gt;&lt;strong&gt;Go&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; developer.&lt;&#x2F;p&gt;
&lt;p&gt;I am using this article as my study notes while learning Rust.&lt;&#x2F;p&gt;
&lt;p&gt;While I’ll occasionally compare &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot; title=&quot;Rust Programming Language&quot;&gt;&lt;strong&gt;Rust&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;&quot; title=&quot;Go Programming Language&quot;&gt;&lt;strong&gt;Go&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, I will not
focus on the differences too much. I will highlight the features of &lt;strong&gt;Rust&lt;&#x2F;strong&gt;
and share my thoughts on the language instead.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-read-this-article&quot;&gt;How To Read This Article&lt;&#x2F;h2&gt;
&lt;p&gt;As in any profound topic, it’s virtually impossible to introduce basic concepts
without referring to more advanced ones, and vice versa. So, this article
feels more like a directed graph than a linear narrative.&lt;&#x2F;p&gt;
&lt;p&gt;To get the best value out of this article, I recommend reading four times:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Read it from start to finish once, getting a general idea of the concepts.&lt;&#x2F;li&gt;
&lt;li&gt;Read it again, focusing on the details and examples, using your favorite
editor to write, run, and experiment with the code, changing it and trying
to see what happens.&lt;&#x2F;li&gt;
&lt;li&gt;And one final time, doing a deep dive and exploring the concepts in a
non-linear way, jumping from one section to another, and trying to connect
the dots.&lt;&#x2F;li&gt;
&lt;li&gt;And one final time, but, this time doing the exploration with external
supporting resources, such as &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;&quot; title=&quot;The Rust Programming Language&quot;&gt;the Rust documentation&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;&quot; title=&quot;Rust by Example&quot;&gt;Rust by
Example&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rustlings&quot; title=&quot;Rustlings&quot;&gt;Rustlings&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;&quot; title=&quot;Rust Reddit&quot;&gt;Reddit&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCaYhcUwRBNscFNUKTjgPFiA&quot; title=&quot;Rust on YouTube&quot;&gt;Rust on YouTube&lt;&#x2F;a&gt;, and the &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Programming-Rust-Fast-Systems-Development&#x2F;dp&#x2F;1492052590&quot; title=&quot;Programming Rust&quot;&gt;Programming Rust&lt;&#x2F;a&gt;
book.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-tooling&quot;&gt;The Tooling&lt;&#x2F;h2&gt;
&lt;p&gt;Before we even get started with Rust, let’s install the toolchain.&lt;&#x2F;p&gt;
&lt;p&gt;I am on a Mac, so my instructions will be for macOS. Adjust them as needed
for your operating system.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll install &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;tools&#x2F;install&quot; title=&quot;Rust Installation&quot;&gt;&lt;code&gt;rustup&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, which is the recommended tool to install Rust
and Cargo, the Rust package manager.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;curl https:&#x2F;&#x2F;sh.rustup.rs -sSf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The command above will download a script and start the installation.&lt;&#x2F;p&gt;
&lt;p&gt;By the end of the process you should see something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;Rust is installed now. Great!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To check that everything is working, run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rustc --version
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Output will look like: 
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# 1.79.0 (129f3b996 2024-06-10)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo --version
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Output will look like:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#  1.79.0 (ffa9cf99a 2024-06-03)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;choosing-an-ide&quot;&gt;Choosing an IDE&lt;&#x2F;h2&gt;
&lt;p&gt;You can program Rust in your favorite text editor or IDE.&lt;&#x2F;p&gt;
&lt;p&gt;Some popular choices are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;&quot;&gt;Visual Studio Code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;rust&#x2F;&quot;&gt;RustRover&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.vim.org&#x2F;&quot;&gt;Vim&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I prefer &lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;rust&#x2F;&quot;&gt;RustRover&lt;&#x2F;a&gt; because I am already
familiar with JetBrains products and their keyboard shortcuts; however,
you should choose the one that you feel most comfortable with.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-new-project&quot;&gt;Creating a New Project&lt;&#x2F;h2&gt;
&lt;p&gt;To create a new Rust project, use the &lt;code&gt;cargo&lt;&#x2F;code&gt; command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Go to a common workspace directory:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$WORKSPACE
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# &amp;quot;hello-rust&amp;quot; is the name of the project:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo new hello-rust
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Switch to the project directory:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; hello-rust
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Run the project:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo run
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Output will look like:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#   Compiling hello-rust v0.1.0 
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#    Finished `dev` profile [unoptimized + debuginfo] target(s) 
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#     Running `target&#x2F;debug&#x2F;hello-rust`
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hello, world!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;hello-rust&quot;&gt;Hello Rust&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;cargo new&lt;&#x2F;code&gt; creates a new project with the following structure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;├── Cargo.lock
&lt;&#x2F;span&gt;&lt;span&gt;├── Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;├── src
&lt;&#x2F;span&gt;&lt;span&gt;│   └── main.rs
&lt;&#x2F;span&gt;&lt;span&gt;└── target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here is the content of &lt;code&gt;.&#x2F;src&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;fn&lt;&#x2F;code&gt; keyword is used to define a function.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;main&lt;&#x2F;code&gt; function is the entry point of the program.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;println!&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch19-06-macros.html&quot; title=&quot;Rust Macros&quot;&gt;macro&lt;&#x2F;a&gt; is used to print text to the console.&lt;&#x2F;li&gt;
&lt;li&gt;Indentation is not significant in Rust, the style guide suggest using
&lt;strong&gt;four spaces&lt;&#x2F;strong&gt; for indentation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By merely looking at this “&lt;em&gt;Hello, world&lt;&#x2F;em&gt;” example, syntactically, Rust feels
a bit like Go, with its own oddities and quirks.&lt;&#x2F;p&gt;
&lt;p&gt;When you run the above code using &lt;code&gt;cargo run&lt;&#x2F;code&gt;, the output should be similar
to the following:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;println()!&lt;&#x2F;code&gt; is a macro that prints text to the console and returns the unit
type &lt;code&gt;()&lt;&#x2F;code&gt;. This is similar to &lt;code&gt;void&lt;&#x2F;code&gt; in other languages.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo run
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Output:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#   Finished `dev` profile target(s) in 0.04s
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#   Running `target&#x2F;debug&#x2F;hello-rust`
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Hello, world!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Not bad for a first program, right?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;unit-type&quot;&gt;Unit Type&lt;&#x2F;h2&gt;
&lt;p&gt;The unit type &lt;code&gt;()&lt;&#x2F;code&gt; in Rust is a special type that represents an empty tuple.
It’s often referred to as the “&lt;em&gt;unit&lt;&#x2F;em&gt;” type because it has only one value,
which is also written as &lt;code&gt;()&lt;&#x2F;code&gt;. This type and its value are used in situations
where you need to return or represent “nothing” in a type-safe way.&lt;&#x2F;p&gt;
&lt;p&gt;The unit type occupies no memory because it contains no data.&lt;&#x2F;p&gt;
&lt;p&gt;The unit time is commonly used in the following scenarios:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;As a return type for functions that perform an action but don’t produce a
meaningful result (&lt;em&gt;similar to &lt;code&gt;void&lt;&#x2F;code&gt; in C or C++&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;As a placeholder in generic types.&lt;&#x2F;li&gt;
&lt;li&gt;In &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;&#x2F;code&gt;: when there’s no meaningful success value, you might use
&lt;code&gt;Result&amp;lt;(), E&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;In expressions: The unit value &lt;code&gt;()&lt;&#x2F;code&gt; is the implicit return value of
expressions if no other value is returned.&lt;&#x2F;li&gt;
&lt;li&gt;If a function doesn’t return a value, it implicitly returns &lt;code&gt;()&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here are some interesting use cases of the unit type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Holder&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Callable &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Output&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Output;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;NoOp&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Callable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;NoOp &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Output {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Do nothing and return ()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Using () as a placeholder when we don&amp;#39;t need to store any data
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; empty_holder: Holder&amp;lt;()&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Holder { value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Using an actual type when we want to store data
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; int_holder: Holder&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Holder { value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;) };
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; no_op &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NoOp;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; no_op.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(result, ());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We will see more about traits and generics later in this article where the
above example will make more sense.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rust-tooling&quot;&gt;Rust Tooling&lt;&#x2F;h2&gt;
&lt;p&gt;Rust comes with a set of tools that help you write, build, and test your code.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some of the most commonly used tools:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rustc&lt;&#x2F;code&gt;: The Rust compiler.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cargo&lt;&#x2F;code&gt;: The Rust package manager and build tool.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rustup&lt;&#x2F;code&gt;: The Rust toolchain installer.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rustdoc&lt;&#x2F;code&gt;: The Rust documentation generator.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;clippy&lt;&#x2F;code&gt;: A linter for Rust code.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rustfmt&lt;&#x2F;code&gt;: A code formatter for Rust code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are more tools that you can install as needed using &lt;code&gt;cargo install&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rustfmt-and-code-formatting&quot;&gt;&lt;code&gt;rustfmt&lt;&#x2F;code&gt; And Code Formatting&lt;&#x2F;h2&gt;
&lt;p&gt;Rust has something similar to &lt;code&gt;gofmt&lt;&#x2F;code&gt;. It’s called &lt;code&gt;rustfmt&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some key points about &lt;code&gt;rustfmt&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;&#x2F;strong&gt;: Like &lt;code&gt;gofmt&lt;&#x2F;code&gt;, &lt;code&gt;rustfmt&lt;&#x2F;code&gt; is an automatic code formatter for Rust. It
enforces a consistent coding style across Rust projects.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Installation&lt;&#x2F;strong&gt;: It comes bundled with Rust when you install via &lt;code&gt;rustup&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Usage&lt;&#x2F;strong&gt;: You can run it from the command line: &lt;code&gt;rustfmt filename.rs&lt;&#x2F;code&gt; or
format an entire project: &lt;code&gt;cargo fmt&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;IDE Integration&lt;&#x2F;strong&gt;: Most Rust-aware IDEs and text editors can be configured
to run rustfmt automatically on save.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Configuration&lt;&#x2F;strong&gt;: Unlike &lt;code&gt;gofmt&lt;&#x2F;code&gt;, which is deliberately unconfigurable,
&lt;code&gt;rustfmt&lt;&#x2F;code&gt; allows some customization through a &lt;code&gt;rustfmt.toml&lt;&#x2F;code&gt; file in your
project root.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Style Guide&lt;&#x2F;strong&gt;: &lt;code&gt;rustfmt&lt;&#x2F;code&gt; follows the Rust style guide by default, which
helps maintain consistency across the Rust ecosystem.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;CI Integration&lt;&#x2F;strong&gt;: Many projects run &lt;code&gt;rustfmt&lt;&#x2F;code&gt; in their CI pipelines to
ensure all code follows the agreed-upon style.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;crates&quot;&gt;Crates&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Crates are the smallest amount of code that the Rust compiler considers at a time.&lt;&#x2F;li&gt;
&lt;li&gt;They can contain modules, and the modules may be split into different files.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;types-of-crates&quot;&gt;Types of Crates&lt;&#x2F;h3&gt;
&lt;p&gt;There are two types of crates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Binary Crates&lt;&#x2F;strong&gt;: Compile to an executable&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Library Crates&lt;&#x2F;strong&gt;: Don’t compile to an executable but are meant to be used
in other programs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;using-external-crates&quot;&gt;Using External Crates&lt;&#x2F;h3&gt;
&lt;p&gt;Add dependencies to your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;rand &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;0.8.5&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then use the crate in your code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rand::Rng;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; random_number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;rand::thread_rng().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;gen_range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;101&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Random number: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, random_number);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;creating-your-own-crate&quot;&gt;Creating Your Own Crate&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;cargo new my_crate&lt;&#x2F;code&gt; for a binary crate&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;cargo new my_crate --lib&lt;&#x2F;code&gt; for a library crate&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;publishing-a-crate&quot;&gt;Publishing a Crate&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Sign up for an account on &lt;code&gt;crates.io&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Set up your crate metadata in &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;cargo publish&lt;&#x2F;code&gt; to publish your crate&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;cargo-workspaces&quot;&gt;Cargo Workspaces&lt;&#x2F;h3&gt;
&lt;p&gt;Cargo workspaces can manage multiple related crates.&lt;&#x2F;p&gt;
&lt;p&gt;Workspaces can also allow you to manage multiple related packages from one
location.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;crate-features&quot;&gt;Crate Features&lt;&#x2F;h3&gt;
&lt;p&gt;Create features allow conditional compilation of crate functionalities.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;alternative-registries&quot;&gt;Alternative Registries&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Cargo supports alternative registries other than &lt;code&gt;crates.io&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;You can set up your own private registry.&lt;&#x2F;li&gt;
&lt;li&gt;You can even use Git repositories as dependencies.&lt;&#x2F;li&gt;
&lt;li&gt;For local development, you can use path dependencies to reference local crates.&lt;&#x2F;li&gt;
&lt;li&gt;There are also options for hosting your own private crate registry.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is how you would configure Cargo to user your private registry:&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;code&gt;.cargo&#x2F;config.toml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;registries&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;my-company &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;my-company-registry.com&#x2F;index&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In your project’s &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;private-crate &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;0.1.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;registry &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;my-company&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or you can specify Git dependencies like this.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;private-crate &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;git &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;github.com&#x2F;my-company&#x2F;private-crate.git&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;branch &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;dev&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here is how to create path dependencies:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;private-crate &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;..&#x2F;private-crate&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;what-is-a-macro&quot;&gt;What Is a Macro?&lt;&#x2F;h2&gt;
&lt;p&gt;In Rust, a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch19-06-macros.html&quot; title=&quot;Rust Macros&quot;&gt;macro&lt;&#x2F;a&gt; is a way of writing code that writes other code,
which is also known as &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Metaprogramming&quot; title=&quot;Metaprogramming&quot;&gt;metaprogramming&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Macros provide a powerful and flexible tool to generate repetitive code,
define domain-specific languages, or even alter the syntax of Rust itself.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll go back to macros later, but now let’s focus our attention on more funner
things.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;about-stack-memory-and-heap-memory&quot;&gt;About Stack Memory and Heap Memory&lt;&#x2F;h2&gt;
&lt;p&gt;Before going any further, it’s essential to understand the difference between
stack and heap memory models as they come up frequently in Rust programming,
and they will immensely clarify your understanding of the important concepts
such as ownership, borrowing, and lifetimes.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll, again, get into the details of what &lt;em&gt;ownership&lt;&#x2F;em&gt;, &lt;em&gt;borrowing&lt;&#x2F;em&gt; and
&lt;em&gt;lifetimes&lt;&#x2F;em&gt; are later in this article, but here’s a concise explanation of
&lt;strong&gt;why&lt;&#x2F;strong&gt; &lt;em&gt;stack&lt;&#x2F;em&gt; and &lt;em&gt;heap&lt;&#x2F;em&gt; memory are important in &lt;strong&gt;Rust&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ownership and borrowing&lt;&#x2F;strong&gt;: Rust’s ownership rules are closely tied to how
data is stored on the stack or heap. This affects how variables are passed,
moved, or borrowed.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;&#x2F;strong&gt;: Stack allocations are generally faster than heap allocations.
Knowing where data is stored helps in writing more efficient code.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Lifetimes&lt;&#x2F;strong&gt;: The stack’s LIFO (&lt;em&gt;Last In, First Out&lt;&#x2F;em&gt;) nature directly relates
to Rust’s lifetime concept, which ensures memory safety.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Memory safety&lt;&#x2F;strong&gt;: Rust’s guarantees about preventing null or dangling pointer
dereferences, data races, and buffer overflows are implemented through strict
control over stack and heap usage.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Resource management&lt;&#x2F;strong&gt;: Understanding stack vs. heap helps in making informed
decisions about how to structure data for optimal resource use.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Zero-cost abstractions&lt;&#x2F;strong&gt;: Rust’s ability to provide high-level abstractions
without runtime overhead is partly due to its sophisticated use of stack and
heap.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Having said that, let’s dive into the details of stack and heap memory.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stack-memory&quot;&gt;Stack Memory&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Stack memory is dynamically allocated and deallocated, but in a very specific
way. Allocation and deallocation happen automatically as functions are called
and return.&lt;&#x2F;li&gt;
&lt;li&gt;Stack follows a strict last-in, first-out (&lt;em&gt;LIFO&lt;&#x2F;em&gt;) order.&lt;&#x2F;li&gt;
&lt;li&gt;The size of stack allocations must be known at compile time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;heap-memory&quot;&gt;Heap Memory&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Heap memory, can be allocated and deallocated at any time during program
execution. This allows for more flexible memory management.&lt;&#x2F;li&gt;
&lt;li&gt;The size can be determined at runtime.&lt;&#x2F;li&gt;
&lt;li&gt;On the stack, the allocations and deallocations occur automatically with
function calls and returns. Whereas on the heap, the allocations and
deallocations can happen at any point in the program’s execution.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;size-flexibility&quot;&gt;Size Flexibility&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stack&lt;&#x2F;strong&gt;: The size of allocations must be known at compile time.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Heap&lt;&#x2F;strong&gt;: The size can be determined at runtime.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;lifetime&quot;&gt;Lifetime&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stack&lt;&#x2F;strong&gt;: Memory is automatically reclaimed when a function returns.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Heap&lt;&#x2F;strong&gt;: Memory persists until explicitly deallocated or the program ends.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;speed&quot;&gt;Speed&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stack&lt;&#x2F;strong&gt;: Generally faster, as it just involves moving a stack pointer.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Heap&lt;&#x2F;strong&gt;: Typically slower, as it involves more complex memory management.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fragmentation&quot;&gt;Fragmentation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stack&lt;&#x2F;strong&gt;: Less prone to fragmentation.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Heap&lt;&#x2F;strong&gt;: More susceptible to memory fragmentation over time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In Rust, Stack versus Heap distinction is particularly important because the
language’s ownership system and borrowing rules are designed to make stack
allocation safe and efficient while also providing tools for safe heap
allocation when needed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fat-pointers&quot;&gt;Fat Pointers&lt;&#x2F;h2&gt;
&lt;p&gt;A fat pointer in Rust, as it relates to the String type, refers to a pointer
that contains not just the memory address of the data, but also additional
information about the data it points to. In the case of &lt;code&gt;String&lt;&#x2F;code&gt; data type
(&lt;em&gt;that we’ll see later&lt;&#x2F;em&gt;), the fat pointer contains three pieces of information:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;pointer&lt;&#x2F;strong&gt; to the heap-allocated buffer containing the string data,&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;length&lt;&#x2F;strong&gt; of the string (&lt;em&gt;number of bytes currently in use&lt;&#x2F;em&gt;),&lt;&#x2F;li&gt;
&lt;li&gt;And the &lt;strong&gt;capacity&lt;&#x2F;strong&gt; of the allocated buffer (&lt;em&gt;total number of bytes
allocated&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;svg xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; viewBox=&quot;0 0 600 300&quot;&gt;
  &lt;!-- Fat Pointer Box --&gt;
  &lt;rect x=&quot;10&quot; y=&quot;10&quot; width=&quot;280&quot; height=&quot;100&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot;&#x2F;&gt;
  &lt;text x=&quot;20&quot; y=&quot;30&quot; font-family=&quot;Arial&quot; font-size=&quot;14&quot;&gt;Fat Pointer (String)&lt;&#x2F;text&gt;
  &lt;!-- Pointer --&gt;
  &lt;rect x=&quot;20&quot; y=&quot;40&quot; width=&quot;80&quot; height=&quot;30&quot; fill=&quot;lightblue&quot; stroke=&quot;black&quot;&#x2F;&gt;
  &lt;text x=&quot;30&quot; y=&quot;60&quot; font-family=&quot;Arial&quot; font-size=&quot;12&quot;&gt;Pointer&lt;&#x2F;text&gt;
  &lt;!-- Length --&gt;
  &lt;rect x=&quot;110&quot; y=&quot;40&quot; width=&quot;80&quot; height=&quot;30&quot; fill=&quot;lightgreen&quot; stroke=&quot;black&quot;&#x2F;&gt;
  &lt;text x=&quot;120&quot; y=&quot;60&quot; font-family=&quot;Arial&quot; font-size=&quot;12&quot;&gt;Length: 5&lt;&#x2F;text&gt;
  &lt;!-- Capacity --&gt;
  &lt;rect x=&quot;200&quot; y=&quot;40&quot; width=&quot;80&quot; height=&quot;30&quot; fill=&quot;lightyellow&quot; stroke=&quot;black&quot;&#x2F;&gt;
  &lt;text x=&quot;210&quot; y=&quot;60&quot; font-family=&quot;Arial&quot; font-size=&quot;12&quot;&gt;Capacity: 8&lt;&#x2F;text&gt;
  &lt;!-- Heap memory --&gt;
  &lt;rect x=&quot;10&quot; y=&quot;160&quot; width=&quot;400&quot; height=&quot;60&quot; fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot;&#x2F;&gt;
  &lt;text x=&quot;20&quot; y=&quot;180&quot; font-family=&quot;Arial&quot; font-size=&quot;14&quot;&gt;Heap Memory&lt;&#x2F;text&gt;
  &lt;!-- String content --&gt;
  &lt;rect x=&quot;20&quot; y=&quot;190&quot; width=&quot;240&quot; height=&quot;20&quot; fill=&quot;lightpink&quot; stroke=&quot;black&quot;&#x2F;&gt;
  &lt;text x=&quot;30&quot; y=&quot;205&quot; font-family=&quot;Arial&quot; font-size=&quot;12&quot;&gt;H&lt;&#x2F;text&gt;
  &lt;text x=&quot;70&quot; y=&quot;205&quot; font-family=&quot;Arial&quot; font-size=&quot;12&quot;&gt;e&lt;&#x2F;text&gt;
  &lt;text x=&quot;110&quot; y=&quot;205&quot; font-family=&quot;Arial&quot; font-size=&quot;12&quot;&gt;l&lt;&#x2F;text&gt;
  &lt;text x=&quot;150&quot; y=&quot;205&quot; font-family=&quot;Arial&quot; font-size=&quot;12&quot;&gt;l&lt;&#x2F;text&gt;
  &lt;text x=&quot;190&quot; y=&quot;205&quot; font-family=&quot;Arial&quot; font-size=&quot;12&quot;&gt;o&lt;&#x2F;text&gt;
  &lt;!-- Unused capacity --&gt;
  &lt;rect x=&quot;260&quot; y=&quot;190&quot; width=&quot;140&quot; height=&quot;20&quot; fill=&quot;lightgray&quot; stroke=&quot;black&quot;&#x2F;&gt;
  &lt;text x=&quot;270&quot; y=&quot;205&quot; font-family=&quot;Arial&quot; font-size=&quot;12&quot;&gt;Unused&lt;&#x2F;text&gt;
  &lt;!-- Arrow --&gt;
  &lt;line x1=&quot;60&quot; y1=&quot;70&quot; x2=&quot;60&quot; y2=&quot;190&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; marker-end=&quot;url(#arrowhead)&quot;&#x2F;&gt;
  &lt;!-- Arrow marker --&gt;
  &lt;defs&gt;
    &lt;marker id=&quot;arrowhead&quot; markerWidth=&quot;10&quot; markerHeight=&quot;7&quot; refX=&quot;0&quot; refY=&quot;3.5&quot; orient=&quot;auto&quot;&gt;
      &lt;polygon points=&quot;0 0, 10 3.5, 0 7&quot; &#x2F;&gt;
    &lt;&#x2F;marker&gt;
  &lt;&#x2F;defs&gt;
&lt;&#x2F;svg&gt;
&lt;p&gt;This structure allows Rust to efficiently manage String objects with several
benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;O(1) length checks&lt;&#x2F;strong&gt;: The length is stored directly in the fat pointer, so
checking the length of a string is a constant-time operation.&lt;&#x2F;li&gt;
&lt;li&gt;** &lt;strong&gt;Efficient capacity management&lt;&#x2F;strong&gt;: By tracking both length and capacity,
Rust can avoid unnecessary allocations when growing strings.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Safe borrowing&lt;&#x2F;strong&gt;: The fat pointer enables Rust to enforce borrowing rules at
compile-time, preventing data races and other memory safety issues. We will
cover borrowing and ownership in more detail later in this article.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Efficient slicing&lt;&#x2F;strong&gt;: Creating string slices (&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;) is cheap because they
can reuse the same heap-allocated buffer while adjusting the pointer and
length.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It’s worth noting that while we commonly refer to this as a “&lt;em&gt;fat pointer&lt;&#x2F;em&gt;,”
in Rust terminology, it’s more accurately described as a &lt;code&gt;struct&lt;&#x2F;code&gt; containing a
&lt;code&gt;pointer&lt;&#x2F;code&gt; and two &lt;code&gt;usize&lt;&#x2F;code&gt; values for &lt;code&gt;length&lt;&#x2F;code&gt; and &lt;code&gt;capacity&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;in-a-nutshell&quot;&gt;In a Nutshell&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;stack&quot;&gt;Stack&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Fast allocation and deallocation&lt;&#x2F;li&gt;
&lt;li&gt;Fixed size, known at compile time&lt;&#x2F;li&gt;
&lt;li&gt;LIFO (&lt;em&gt;Last In, First Out&lt;&#x2F;em&gt;) data structure&lt;&#x2F;li&gt;
&lt;li&gt;Limited in size&lt;&#x2F;li&gt;
&lt;li&gt;Automatically managed by the program&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;heap&quot;&gt;Heap&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Slower allocation and deallocation&lt;&#x2F;li&gt;
&lt;li&gt;Dynamic size, can grow or shrink at runtime&lt;&#x2F;li&gt;
&lt;li&gt;No particular order of allocation&#x2F;deallocation&lt;&#x2F;li&gt;
&lt;li&gt;Limited only by system memory&lt;&#x2F;li&gt;
&lt;li&gt;Manually managed (&lt;em&gt;in many languages, but Rust helps automate this&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;key-differences&quot;&gt;Key Differences&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Performance&lt;&#x2F;strong&gt;: Stack allocation is generally faster because it’s just a
matter of moving the stack pointer. Heap allocation requires more complex
bookkeeping.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Size flexibility&lt;&#x2F;strong&gt;: If you need a data structure that can change size,
you’ll need to use the heap.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Lifetime&lt;&#x2F;strong&gt;: Stack-allocated data lives only as long as the function it’s in.
Heap-allocated data can live for as long as it’s needed, even beyond the
function it was created in.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Ownership&lt;&#x2F;strong&gt;: In Rust, heap-allocated data is subject to &lt;strong&gt;ownership rules&lt;&#x2F;strong&gt;,
which help prevent memory leaks and data races. We will cover the concept of
ownership later in this article.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Rust’s borrow checker and ownership system help manage heap allocations safely
without a garbage collector, which is one of its key innovations.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a simple example to illustrate what is allocated where:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Stack allocation
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Integer, known fixed size
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Boolean, known fixed size
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Heap allocation
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; String, can grow or shrink
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Vector (similar to slice in Go) is heap-allocated
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;]; 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;&#x2F;code&gt; and &lt;code&gt;y&lt;&#x2F;code&gt; are stack-allocated. Their size is known at compile time, and
they’re automatically pushed onto and popped off the stack.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;s&lt;&#x2F;code&gt; and &lt;code&gt;v&lt;&#x2F;code&gt; are heap-allocated. The &lt;code&gt;String&lt;&#x2F;code&gt; and &lt;code&gt;Vector&lt;&#x2F;code&gt; can grow or shrink,
so they’re stored on the heap. What’s on the stack is actually a pointer to
the heap data, along with length and capacity information.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Having overviewed pointers, and how memory management in the &lt;strong&gt;stack&lt;&#x2F;strong&gt; and
&lt;strong&gt;heap&lt;&#x2F;strong&gt;, now let’s shift gears and move on to some basic Rust syntax.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;variables-and-mutability&quot;&gt;Variables and Mutability&lt;&#x2F;h2&gt;
&lt;p&gt;Variables are &lt;strong&gt;immutable&lt;&#x2F;strong&gt; by default. This means that once a variable
is assigned a value, it cannot be changed.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Immutable
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The value of x is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, x);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; x = 6; &#x2F;&#x2F; This would cause an error
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Mutable
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The value of y is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, y);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This is allowed
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The value of y is now: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, y);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let&lt;&#x2F;code&gt; is used to define variables (&lt;em&gt;similar to &lt;code&gt;:=&lt;&#x2F;code&gt; in Go&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Adding &lt;code&gt;mut&lt;&#x2F;code&gt; makes things mutable.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;{}&lt;&#x2F;code&gt; in &lt;code&gt;println!&lt;&#x2F;code&gt; is a placeholder for the value of the variable.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;returning-from-functions&quot;&gt;Returning From Functions&lt;&#x2F;h2&gt;
&lt;p&gt;To define a function, we use the &lt;code&gt;fn&lt;&#x2F;code&gt; keyword. Functions can return values
either explicitly using the &lt;code&gt;return&lt;&#x2F;code&gt; keyword or implicitly by omitting the
semicolon at the end of the expression.&lt;&#x2F;p&gt;
&lt;p&gt;If you are omitting the semicolon, what you return should be the last
expression in the function.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some examples:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;returning-from-a-block&quot;&gt;Returning From a Block&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; No semicolon here
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The value of x is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, x); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This will print 6
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;implicit-return&quot;&gt;Implicit Return&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Implicit return
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Note: no semicolon
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;explicit-return&quot;&gt;Explicit Return&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Explicit return
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;subtract&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; b;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;mixed-style&quot;&gt;Mixed Style&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Mixed style
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;x; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Early return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    x  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Implicit return for the positive case
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Implicit return in Rust allows for allows for concise return statements and
is particularly useful in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Functional_programming&quot; title=&quot;Functional Programming&quot;&gt;functional-style programming&lt;&#x2F;a&gt; patterns.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;coding-conventions&quot;&gt;Coding Conventions&lt;&#x2F;h2&gt;
&lt;p&gt;In &lt;strong&gt;Rust&lt;&#x2F;strong&gt;, the convention is to use &lt;code&gt;snake_case&lt;&#x2F;code&gt; for both functions and
variables. This is different from &lt;em&gt;Go&lt;&#x2F;em&gt;, which uses &lt;code&gt;camelCase&lt;&#x2F;code&gt; for functions
and variables.&lt;&#x2F;p&gt;
&lt;p&gt;Another difference between Rust and Go is, by convention you indent using
“&lt;em&gt;four spaces&lt;&#x2F;em&gt;” in Rust, whereas in Go you use Tab for indentation.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a quick overview of Rust naming conventions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Functions: snake_case
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;calculate_total&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;Variables: snake_case
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; user_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Alice&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Constants: SCREAMING_SNAKE_CASE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MAX_CONNECTIONS&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Types (structs, enums, traits): PascalCase
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;UserProfile &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Modules: snake_case
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;network_utils&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Macros: Usually snake_case!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here’s a small example demonstrating these conventions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MAX_USERS&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;UserAccount &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;user_name&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;create_user&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; UserAccount {
&lt;&#x2F;span&gt;&lt;span&gt;    UserAccount {
&lt;&#x2F;span&gt;&lt;span&gt;        user_name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(name),
&lt;&#x2F;span&gt;&lt;span&gt;        email: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(email),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;create_user&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;alice&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;alice@example.com&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Created user: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, new_user.user_name);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Following these conventions helps make Rust code more consistent and easier to
read across different projects and the Rust ecosystem. They are not enforced
by the compiler, but it’s considered good practice following them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;data-types&quot;&gt;Data Types&lt;&#x2F;h2&gt;
&lt;p&gt;Rust has a strong, static type system, which means that the type of every
variable must be known at compile time.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Integer types
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 32-bit signed integer
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 64-bit unsigned integer
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Floating-point types
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 64-bit float
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Boolean type
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; d: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Character type
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; e: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;z&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; String type
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; f: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello, Rust!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, a, b, c, d, e, f);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Type annotations are optional if Rust can infer the type.&lt;&#x2F;li&gt;
&lt;li&gt;Integers can be signed (&lt;code&gt;i8&lt;&#x2F;code&gt;, &lt;code&gt;i16&lt;&#x2F;code&gt;, &lt;code&gt;i32&lt;&#x2F;code&gt;, &lt;code&gt;i64&lt;&#x2F;code&gt;, &lt;code&gt;i128&lt;&#x2F;code&gt;) or unsigned
(&lt;code&gt;u8&lt;&#x2F;code&gt;, &lt;code&gt;u16&lt;&#x2F;code&gt;, &lt;code&gt;u32&lt;&#x2F;code&gt;, &lt;code&gt;u64&lt;&#x2F;code&gt;, &lt;code&gt;u128&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Floats come in &lt;code&gt;f32&lt;&#x2F;code&gt; and &lt;code&gt;f64&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Booleans are &lt;code&gt;true&lt;&#x2F;code&gt; or &lt;code&gt;false&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Chars are &lt;strong&gt;Unicode&lt;&#x2F;strong&gt; scalar values.&lt;&#x2F;li&gt;
&lt;li&gt;Strings are &lt;strong&gt;UTF-8&lt;&#x2F;strong&gt; encoded.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;string-versus-str&quot;&gt;&lt;code&gt;String&lt;&#x2F;code&gt; versus &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Stack and Heap&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you haven’t paid attention to the Stack and Heap memory section near the
beginning of this article, now is the time to revisit it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;code&gt;String&lt;&#x2F;code&gt; and &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; are two different types used for working with text, each
with its own characteristics and use cases.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see some of the key differences:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;allocation&quot;&gt;Allocation&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;string&quot;&gt;&lt;code&gt;String&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The &lt;code&gt;String&lt;&#x2F;code&gt; type itself is typically allocated on the stack.&lt;&#x2F;p&gt;
&lt;p&gt;However, the actual string &lt;strong&gt;data&lt;&#x2F;strong&gt; that the &lt;code&gt;String&lt;&#x2F;code&gt; manages is allocated on
the heap. This allows &lt;code&gt;String&lt;&#x2F;code&gt; to be resizable, as heap memory can be
dynamically allocated and deallocated.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;str&quot;&gt;&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; itself (the reference or “&lt;em&gt;fat pointer&lt;&#x2F;em&gt;”) is typically allocated on
the &lt;strong&gt;stack&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The data it refers to can be anywhere in memory, depending on its origin:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If it’s a string literal, the data is in the &lt;em&gt;read-only data&lt;&#x2F;em&gt; section of the
program’s memory.&lt;&#x2F;li&gt;
&lt;li&gt;If it’s a slice of a &lt;code&gt;String&lt;&#x2F;code&gt;, the data it refers to is on the heap (&lt;em&gt;where
the &lt;code&gt;String&lt;&#x2F;code&gt;’s data lives&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;If it’s a slice of a string in a static variable, the data is in the &lt;em&gt;static
memory&lt;&#x2F;em&gt; section.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is a diagram to illustrate the difference:&lt;&#x2F;p&gt;
&lt;svg viewBox=&quot;0 0 500 300&quot; xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;&gt;
  &lt;rect x=&quot;10&quot; y=&quot;10&quot; width=&quot;230&quot; height=&quot;280&quot; fill=&quot;#f0f0f0&quot; stroke=&quot;#000&quot; &#x2F;&gt;
  &lt;text x=&quot;15&quot; y=&quot;30&quot; font-family=&quot;Arial&quot; font-size=&quot;16&quot;&gt;Stack&lt;&#x2F;text&gt;
  &lt;rect x=&quot;260&quot; y=&quot;10&quot; width=&quot;230&quot; height=&quot;280&quot; fill=&quot;#e0e0e0&quot; stroke=&quot;#000&quot; &#x2F;&gt;
  &lt;text x=&quot;265&quot; y=&quot;30&quot; font-family=&quot;Arial&quot; font-size=&quot;16&quot;&gt;Heap&lt;&#x2F;text&gt;
  &lt;rect x=&quot;20&quot; y=&quot;50&quot; width=&quot;100&quot; height=&quot;60&quot; fill=&quot;#ff9999&quot; stroke=&quot;#000&quot; &#x2F;&gt;
  &lt;text x=&quot;25&quot; y=&quot;70&quot; font-family=&quot;Arial&quot; font-size=&quot;14&quot;&gt;String&lt;&#x2F;text&gt;
  &lt;text x=&quot;25&quot; y=&quot;90&quot; font-family=&quot;Arial&quot; font-size=&quot;12&quot;&gt;ptr&lt;&#x2F;text&gt;
  &lt;text x=&quot;25&quot; y=&quot;105&quot; font-family=&quot;Arial&quot; font-size=&quot;12&quot;&gt;len: 5&lt;&#x2F;text&gt;
  &lt;rect x=&quot;270&quot; y=&quot;50&quot; width=&quot;120&quot; height=&quot;30&quot; fill=&quot;#ff9999&quot; stroke=&quot;#000&quot; &#x2F;&gt;
  &lt;text x=&quot;275&quot; y=&quot;70&quot; font-family=&quot;Arial&quot; font-size=&quot;14&quot;&gt;&quot;Hello&quot;&lt;&#x2F;text&gt;
  &lt;path d=&quot;M120 80 L270 65&quot; stroke=&quot;#000&quot; fill=&quot;none&quot; &#x2F;&gt;
  &lt;rect x=&quot;20&quot; y=&quot;150&quot; width=&quot;100&quot; height=&quot;40&quot; fill=&quot;#99ff99&quot; stroke=&quot;#000&quot; &#x2F;&gt;
  &lt;text x=&quot;25&quot; y=&quot;170&quot; font-family=&quot;Arial&quot; font-size=&quot;14&quot;&gt;&amp;amp;str&lt;&#x2F;text&gt;
  &lt;text x=&quot;25&quot; y=&quot;185&quot; font-family=&quot;Arial&quot; font-size=&quot;12&quot;&gt;ptr, len&lt;&#x2F;text&gt;
  &lt;rect x=&quot;270&quot; y=&quot;200&quot; width=&quot;200&quot; height=&quot;30&quot; fill=&quot;#cccccc&quot; stroke=&quot;#000&quot; &#x2F;&gt;
  &lt;text x=&quot;275&quot; y=&quot;220&quot; font-family=&quot;Arial&quot; font-size=&quot;14&quot;&gt;&quot;Static string data&quot;&lt;&#x2F;text&gt;
  &lt;path d=&quot;M120 170 L270 215&quot; stroke=&quot;#000&quot; fill=&quot;none&quot; &#x2F;&gt;
&lt;&#x2F;svg&gt;
&lt;p&gt;Here is another diagram that illustrates a program’s memory layout:&lt;&#x2F;p&gt;
&lt;svg viewBox=&quot;0 0 300 400&quot; xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;&gt;
  &lt;rect x=&quot;10&quot; y=&quot;10&quot; width=&quot;280&quot; height=&quot;380&quot; fill=&quot;#f0f0f0&quot; stroke=&quot;#000&quot; &#x2F;&gt;
  &lt;rect x=&quot;20&quot; y=&quot;20&quot; width=&quot;260&quot; height=&quot;60&quot; fill=&quot;#ffcccc&quot; stroke=&quot;#000&quot; &#x2F;&gt;
  &lt;text x=&quot;30&quot; y=&quot;50&quot; font-family=&quot;Arial&quot; font-size=&quot;14&quot;&gt;Stack&lt;&#x2F;text&gt;
  &lt;rect x=&quot;20&quot; y=&quot;90&quot; width=&quot;260&quot; height=&quot;100&quot; fill=&quot;#ccffcc&quot; stroke=&quot;#000&quot; &#x2F;&gt;
  &lt;text x=&quot;30&quot; y=&quot;120&quot; font-family=&quot;Arial&quot; font-size=&quot;14&quot;&gt;Heap&lt;&#x2F;text&gt;
  &lt;rect x=&quot;20&quot; y=&quot;200&quot; width=&quot;260&quot; height=&quot;60&quot; fill=&quot;#ccccff&quot; stroke=&quot;#000&quot; &#x2F;&gt;
  &lt;text x=&quot;30&quot; y=&quot;230&quot; font-family=&quot;Arial&quot; font-size=&quot;14&quot;&gt;Static&#x2F;Global Memory&lt;&#x2F;text&gt;
  &lt;rect x=&quot;20&quot; y=&quot;270&quot; width=&quot;260&quot; height=&quot;60&quot; fill=&quot;#ffffcc&quot; stroke=&quot;#000&quot; &#x2F;&gt;
  &lt;text x=&quot;30&quot; y=&quot;300&quot; font-family=&quot;Arial&quot; font-size=&quot;14&quot;&gt;Read-only Data&lt;&#x2F;text&gt;
  &lt;rect x=&quot;20&quot; y=&quot;340&quot; width=&quot;260&quot; height=&quot;40&quot; fill=&quot;#ffccff&quot; stroke=&quot;#000&quot; &#x2F;&gt;
  &lt;text x=&quot;30&quot; y=&quot;365&quot; font-family=&quot;Arial&quot; font-size=&quot;14&quot;&gt;Code (Text)&lt;&#x2F;text&gt;
&lt;&#x2F;svg&gt;
&lt;h3 id=&quot;ownership&quot;&gt;Ownership&lt;&#x2F;h3&gt;
&lt;p&gt;I will cover ownership later in this article, but for now, remember that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String&lt;&#x2F;code&gt; is an &lt;strong&gt;owned type&lt;&#x2F;strong&gt;, meaning it owns its data and is responsible for
allocating and deallocating memory.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; is a &lt;strong&gt;borrowed type&lt;&#x2F;strong&gt;, specifically a string slice. It’s a reference
to a sequence of UTF-8 bytes, typically part of another string or string-like
data.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;mutability&quot;&gt;Mutability&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String&lt;&#x2F;code&gt; is &lt;strong&gt;mutable&lt;&#x2F;strong&gt; by default. You can modify its contents, append to it,
etc.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; is &lt;strong&gt;immutable&lt;&#x2F;strong&gt;. You cannot modify the contents of a string slice.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;memory-allocation&quot;&gt;Memory Allocation&lt;&#x2F;h3&gt;
&lt;p&gt;String allocates memory on the heap. It can grow or shrink as needed.
&amp;amp;str doesn’t allocate memory; it’s just a view into existing memory.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;flexibility&quot;&gt;Flexibility&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String&lt;&#x2F;code&gt; is more flexible. You can easily append, remove, or modify its
contents.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; is more rigid but more efficient for read-only operations.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;common-uses&quot;&gt;Common Uses&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;String&lt;&#x2F;code&gt; when you need to own and &lt;strong&gt;modify&lt;&#x2F;strong&gt; string data.&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; for function parameters, string literals, or when you only need to
&lt;strong&gt;read&lt;&#x2F;strong&gt; string data.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conversion-between-string-and-str&quot;&gt;Conversion between &lt;code&gt;String&lt;&#x2F;code&gt; and &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;You can convert a &lt;code&gt;String&lt;&#x2F;code&gt; to a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; with &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Converting &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; to &lt;code&gt;String&lt;&#x2F;code&gt; requires allocation (*e.g.,
&lt;code&gt;String::from()&lt;&#x2F;code&gt; or &lt;code&gt;.to_string()&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Likely, &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; will often be used for function parameters when you just need
to read the string data, and &lt;code&gt;String&lt;&#x2F;code&gt; when you need to own or modify the string.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;print_string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, s);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; &amp;amp;str
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;World&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; String
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print_string&lt;&#x2F;span&gt;&lt;span&gt;(s1);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print_string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;s2);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; &amp;amp;String coerces to &amp;amp;str
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;functions&quot;&gt;Functions&lt;&#x2F;h2&gt;
&lt;p&gt;Now, let’s look at how we define functions in Rust. We have already seen one
function at least: &lt;code&gt;main()&lt;&#x2F;code&gt;. Here are some more examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Sum: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Difference: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;subtract&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; y  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Note: no semicolon here
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;subtract&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; y;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Using &amp;#39;return&amp;#39; keyword
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Functions are declared using &lt;code&gt;fn&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Parameters are typed.&lt;&#x2F;li&gt;
&lt;li&gt;Return type is specified after &lt;code&gt;-&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;You can use an implicit return (&lt;em&gt;last expression without semicolon&lt;&#x2F;em&gt;)
or the return keyword.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; in Rust is similar to but not exactly the same as the &lt;em&gt;address-of&lt;&#x2F;em&gt; operator
in languages like C or C++.&lt;&#x2F;p&gt;
&lt;p&gt;In Rust, &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; is used to create a &lt;strong&gt;reference&lt;&#x2F;strong&gt;, which is similar to a pointer
but with some important differences:&lt;&#x2F;p&gt;
&lt;p&gt;References in Rust:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Are always valid (&lt;em&gt;i.e., non-null&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Have a &lt;strong&gt;lifetime&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Can be &lt;strong&gt;mutable&lt;&#x2F;strong&gt; or &lt;strong&gt;immutable&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Don’t require manual memory management&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In comparison, the address-of operator in C&#x2F;C++:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Returns a raw memory address&lt;&#x2F;li&gt;
&lt;li&gt;Can be &lt;code&gt;null&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Doesn’t have built-in lifetime tracking&lt;&#x2F;li&gt;
&lt;li&gt;Doesn’t distinguish between mutable and immutable at the type level&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s a simple example to illustrate this concept:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; y is a reference to x
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;x is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, x);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;y is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, y);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This will print the value, not the address
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;y points to: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;y);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Dereferencing, similar to C&#x2F;C++
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Output:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; x is: 5
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; y is: 5
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; y points to: 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&amp;amp;x creates a reference to x, not just its memory address.&lt;&#x2F;li&gt;
&lt;li&gt;When you print y, you get the value it points to, not the address.&lt;&#x2F;li&gt;
&lt;li&gt;You can use *y to explicitly dereference, similar to C&#x2F;C++. Which will
again print the value &lt;code&gt;y&lt;&#x2F;code&gt; points to.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Rust also distinguishes between mutable and immutable references:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;a;     &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Immutable reference
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; a; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Mutable reference
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; *b += 1;  &#x2F;&#x2F; This would be a compile-time error
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;     &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This is allowed
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;a is now: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, a);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;a&lt;&#x2F;code&gt; creates an immutable reference&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;mut a&lt;&#x2F;code&gt; creates a mutable reference&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Which also means, references are immutable by default.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some more examples to illustrate the concept of references:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; a = 43; &#x2F;&#x2F; error: a is immutable.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;43&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; this is fine.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;a; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; immutable reference to a
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; c = &amp;amp;b; &#x2F;&#x2F; not allowed; c is immutable.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; mutable variable holding immutable reference:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;a;
&lt;&#x2F;span&gt;&lt;span&gt;    c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;b; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This is fine.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;a;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; d = d + 1; &#x2F;&#x2F; not allowed: &amp;amp;a is immutable.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; z;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= *&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;borrow-rules&quot;&gt;Borrow Rules&lt;&#x2F;h2&gt;
&lt;p&gt;The Rust &lt;em&gt;borrow checker&lt;&#x2F;em&gt; enforces rules about these references:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You can have any number of immutable references to a value&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;OR&lt;&#x2F;strong&gt; you can have exactly one mutable reference&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;BUT&lt;&#x2F;strong&gt; you can’t have both at the same time&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This system allows Rust to prevent data races at compile time, which is a key
feature of the language.&lt;&#x2F;p&gt;
&lt;p&gt;Hold onto these rules because they will be important. We will cover them later
in more detail with examples.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;aren-t-references-just-pointers&quot;&gt;Aren’t References Just Pointers?&lt;&#x2F;h2&gt;
&lt;p&gt;In Rust, we say “&lt;strong&gt;reference to&lt;&#x2F;strong&gt;” rather than “&lt;em&gt;pointer to&lt;&#x2F;em&gt;”
(&lt;em&gt;unlike Go, or C&lt;&#x2F;em&gt;) for several reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Safety&lt;&#x2F;strong&gt;: References in Rust are always valid. They can never be &lt;code&gt;null&lt;&#x2F;code&gt; and
are guaranteed to point to valid memory. This is unlike raw pointers in
languages like C or C++, which can be null or dangling.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Borrowing semantics&lt;&#x2F;strong&gt;: References in Rust come with built-in rules about
how they can be used, enforced by the borrow checker. These rules prevent
data races and ensure memory safety.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Abstraction level&lt;&#x2F;strong&gt;: References operate at a higher level of abstraction
than raw pointers. They’re designed to be safe and ergonomic to use, hiding
some of the low-level details that pointers expose.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Lifetime association&lt;&#x2F;strong&gt;: References in Rust have an associated lifetime,
which the compiler uses to ensure they don’t outlive the data they refer to.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Semantic meaning&lt;&#x2F;strong&gt;: The term “&lt;em&gt;reference&lt;&#x2F;em&gt;” implies a &lt;strong&gt;temporary&lt;&#x2F;strong&gt; borrowing
of data, which aligns well with Rust’s ownership model. You’re “&lt;em&gt;referring&lt;&#x2F;em&gt;”
to data owned by someone else, not taking possession of it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Distinction from raw pointers&lt;&#x2F;strong&gt;: Rust does have raw pointers (&lt;em&gt;&lt;code&gt;*const T&lt;&#x2F;code&gt;
and &lt;code&gt;*mut T&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;), which are more similar to pointers in C. By using different
terminology, Rust makes a clear distinction between its safe references and
these unsafe raw pointers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It’s worth noting that despite the different terminology, Rust references are
typically implemented as pointers under the hood. The difference is in the
&lt;strong&gt;guarantees&lt;&#x2F;strong&gt; and &lt;strong&gt;rules&lt;&#x2F;strong&gt; that Rust provides around their use.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-kinds-of-return-to-use-where&quot;&gt;What Kinds of Return to Use Where&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;For short, single-expression functions, implicit return is often preferred as
it’s more concise.&lt;&#x2F;li&gt;
&lt;li&gt;For longer functions or those with complex logic, explicit returns can
sometimes be clearer, especially for early returns.&lt;&#x2F;li&gt;
&lt;li&gt;The Rust style guide doesn’t strictly mandate one over the other, but it does
encourage consistent style within a codebase.&lt;&#x2F;li&gt;
&lt;li&gt;Many &lt;em&gt;Rustaceans&lt;&#x2F;em&gt; prefer implicit returns where possible, as it aligns well
with Rust’s expression-based nature.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;return&lt;&#x2F;code&gt; keyword is always necessary for early returns (&lt;em&gt;i.e., returning
before the end of the function body&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;For very short functions, you might see the body written on the same line as
the function signature: &lt;code&gt;fn square(x: i32) -&amp;gt; i32 { x * x }&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The key is to &lt;strong&gt;prioritize readability and consistency&lt;&#x2F;strong&gt;. Choose the style that
makes your code clearest in each specific context.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dereferencing-in-rust&quot;&gt;Dereferencing in Rust&lt;&#x2F;h2&gt;
&lt;p&gt;Rust handles dereferencing differently (&lt;em&gt;and more ergonomically&lt;&#x2F;em&gt;) from C.&lt;&#x2F;p&gt;
&lt;p&gt;In C here is how you would dereference:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Address: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)ptr)&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints hexadecimal address
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;printf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ptr)&lt;&#x2F;span&gt;&lt;span&gt;;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Whereas in Rust here is how it works:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ref_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;ref_x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:p}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, ref_x);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints hexadecimal address
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, ref_x);    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints 5
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Also value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ref_x);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Also prints 5
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;In Rust, when you print a reference with &lt;code&gt;{}&lt;&#x2F;code&gt;, it automatically dereferences
and prints the value.&lt;&#x2F;li&gt;
&lt;li&gt;To print the address, you need to use the &lt;code&gt;{:p}&lt;&#x2F;code&gt; format specifier.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In Rust, you can use &lt;code&gt;*ref_x&lt;&#x2F;code&gt; to explicitly dereference, similar to C.
However, in many contexts, Rust will &lt;em&gt;automatically&lt;&#x2F;em&gt; dereference for you.&lt;&#x2F;p&gt;
&lt;p&gt;Also, it’s worth to mention once more that Rust references are always valid, so
you don’t risk undefined behavior by dereferencing a null pointer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;format-specifiers&quot;&gt;Format Specifiers&lt;&#x2F;h2&gt;
&lt;p&gt;Rust uses a powerful formatting system that allows for flexible and precise
control over how values are displayed. Here’s an overview of the common
format specifiers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{}&lt;&#x2F;code&gt;: Default formatter
&lt;ul&gt;
&lt;li&gt;Used for general purpose formatting&lt;&#x2F;li&gt;
&lt;li&gt;Automatically chooses an appropriate format based on the type&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{:?}&lt;&#x2F;code&gt;: Debug formatter
&lt;ul&gt;
&lt;li&gt;Outputs a debug representation of a value&lt;&#x2F;li&gt;
&lt;li&gt;Useful for debugging and development&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{:#?}&lt;&#x2F;code&gt;: Pretty print debug formatter
&lt;ul&gt;
&lt;li&gt;Similar to &lt;code&gt;{:?}&lt;&#x2F;code&gt;, but with more readable, multi-line output&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{:b}&lt;&#x2F;code&gt;: Binary formatter
&lt;ul&gt;
&lt;li&gt;Outputs integers in binary format&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{:o}&lt;&#x2F;code&gt;: Octal formatter
&lt;ul&gt;
&lt;li&gt;Outputs integers in octal format&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{:x}&lt;&#x2F;code&gt;: Lowercase hexadecimal formatter
&lt;ul&gt;
&lt;li&gt;Outputs integers in lowercase hexadecimal format&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{:X}&lt;&#x2F;code&gt;: Uppercase hexadecimal formatter
&lt;ul&gt;
&lt;li&gt;Outputs integers in uppercase hexadecimal format&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{:e}&lt;&#x2F;code&gt;: Lowercase exponential notation
&lt;ul&gt;
&lt;li&gt;Formats floating-point numbers in scientific notation with a lowercase “e”.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{:E}&lt;&#x2F;code&gt;: Uppercase exponential notation
&lt;ul&gt;
&lt;li&gt;Formats floating-point numbers in scientific notation with an uppercase “E”.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{:.}&lt;&#x2F;code&gt;: Precision specifier
&lt;ul&gt;
&lt;li&gt;Controls the number of decimal places for floating-point numbers. For
example, &lt;code&gt;{:.2}&lt;&#x2F;code&gt; for two decimal places&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{:width$}&lt;&#x2F;code&gt;: Width specifier
&lt;ul&gt;
&lt;li&gt;Sets the minimum width of the output. Pads with spaces if the value is
shorter than the specified width&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{:0width$}&lt;&#x2F;code&gt;: Zero-padded width specifier
&lt;ul&gt;
&lt;li&gt;Similar to &lt;code&gt;width$&lt;&#x2F;code&gt;, but pads with zeros instead of spaces&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{:&amp;lt;}&lt;&#x2F;code&gt;, &lt;code&gt;{:^}&lt;&#x2F;code&gt;, &lt;code&gt;{:&amp;gt;}&lt;&#x2F;code&gt;: Alignment specifiers
&lt;ul&gt;
&lt;li&gt;Left-align, center-align, and right-align respectively&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{:+}&lt;&#x2F;code&gt;: Sign specifier
&lt;ul&gt;
&lt;li&gt;Always prints the sign (&lt;em&gt;&lt;code&gt;+&lt;&#x2F;code&gt; or &lt;code&gt;-&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;) for numeric types&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is an example code that demonstrates these:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3.14159&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Alice&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Default formatter
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Default: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, num);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Debug formatter
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Debug: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, num);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Pretty print debug formatter
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; complex_data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Pretty print debug: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:#?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, complex_data);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Binary, octal, and hexadecimal formatters
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Binary: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:b}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, num);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Octal: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:o}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, num);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Lowercase hex: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:x}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, num);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Uppercase hex: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:X}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, num);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Exponential notation
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Lowercase exponential: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:e}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, pi);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Uppercase exponential: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:E}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, pi);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Precision specifier
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Pi with 2 decimal places: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:.2}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, pi);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Width specifier
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Width of 10: {:10}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, num);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Zero-padded width specifier
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Zero-padded width of 5: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:05}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, num);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Alignment specifiers
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Left-aligned: {:&amp;lt;10}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, name);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Center-aligned: {:^10}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, name);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Right-aligned: {:&amp;gt;10}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, name);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Sign specifier
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Always show sign: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:+}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, num);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Combining specifiers
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Combined: {:+10.2}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, pi);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;method-calls-on-references&quot;&gt;Method Calls on References&lt;&#x2F;h2&gt;
&lt;p&gt;In Rust, you can call methods on references without explicit dereferencing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;s).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Works, but parentheses are unnecessary
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;();    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This is the idiomatic way
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here is a more intricate example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;();   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Works, but &amp;amp; is unnecessary
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;s).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Works, but unusual
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;s).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Works, but &amp;amp; is unnecessary
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;();    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This is the idiomatic way
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s break down what’s happening here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;s.len()&lt;&#x2F;code&gt;: This takes a reference to the result of s.len(). It’s unnecessary
but harmless. In Rust, when you call a method on a value, you don’t need to
explicitly take a reference. The compiler automatically borrows a reference
when calling methods.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;(*s).len()&lt;&#x2F;code&gt;: Although it looks (&lt;em&gt;and feels&lt;&#x2F;em&gt;) invalid, this is actually valid
Rust code. &lt;code&gt;*s&lt;&#x2F;code&gt; would typically mean “&lt;em&gt;dereference s&lt;&#x2F;em&gt;”, but &lt;code&gt;String&lt;&#x2F;code&gt;
implements the Deref &lt;code&gt;trait&lt;&#x2F;code&gt; (&lt;em&gt;we will se more about traits later&lt;&#x2F;em&gt;). When
you use &lt;code&gt;*&lt;&#x2F;code&gt; on a type that implements &lt;code&gt;Deref&lt;&#x2F;code&gt;, it calls the &lt;code&gt;deref&lt;&#x2F;code&gt; method,
which for &lt;code&gt;String&lt;&#x2F;code&gt; returns a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;. So &lt;code&gt;(*s).len()&lt;&#x2F;code&gt; is equivalent to
&lt;code&gt;s.deref().len()&lt;&#x2F;code&gt;, which works but is &lt;strong&gt;unnecessarily&lt;&#x2F;strong&gt; complex.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;(&amp;amp;s).len()&lt;&#x2F;code&gt;: This takes a reference to &lt;code&gt;s&lt;&#x2F;code&gt; and then calls &lt;code&gt;len()&lt;&#x2F;code&gt;. It works,
but the &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; (*and the parentheses around &lt;code&gt;&amp;amp;s&lt;&#x2F;code&gt;) is unnecessary.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;s.len()&lt;&#x2F;code&gt;: This is the idiomatic way.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In all cases, we are ultimately calling the &lt;code&gt;len()&lt;&#x2F;code&gt; method on either the
&lt;code&gt;String&lt;&#x2F;code&gt; itself or a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; derived from it.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Deref&lt;&#x2F;code&gt; trait and Rust’s automatic referencing&#x2F;dereferencing make all these
forms work, even though some are more idiomatic than others.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;automatic-referencing-and-dereferencing&quot;&gt;Automatic Referencing and Dereferencing&lt;&#x2F;h2&gt;
&lt;p&gt;Rust has a feature called “&lt;em&gt;deref coercion&lt;&#x2F;em&gt;” which automatically dereferences as
needed in many contexts.&lt;&#x2F;p&gt;
&lt;p&gt;This behavior in Rust is designed to make working with references more ergonomic
and less error-prone compared to raw pointers in C, while still allowing
low-level control when needed.&lt;&#x2F;p&gt;
&lt;p&gt;In Rust, references are designed to behave much like regular variables in many
contexts, with the language doing a lot of the “&lt;em&gt;dirty work&lt;&#x2F;em&gt;” behind the scenes.&lt;&#x2F;p&gt;
&lt;p&gt;This design choice has several benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ergonomics&lt;&#x2F;strong&gt;: It makes code more readable and intuitive to write. You can
often work with references as if they were the values themselves.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Safety&lt;&#x2F;strong&gt;: By handling dereferencing automatically in many cases, Rust
reduces the chance of errors that can occur with manual pointer manipulation.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Zero-cost abstractions&lt;&#x2F;strong&gt;: Despite this high-level behavior, Rust compiles
references down to efficient machine code, typically equivalent to raw pointers.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;&#x2F;strong&gt;: This behavior is part of a broader pattern in Rust where the
language tries to do the “&lt;em&gt;obvious&lt;&#x2F;em&gt;” thing automatically, reducing boilerplate
code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some examples of how Rust handles references “behind the scenes”:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic dereferencing for method calls.&lt;&#x2F;li&gt;
&lt;li&gt;Deref coercion, which can convert between different levels of indirection.&lt;&#x2F;li&gt;
&lt;li&gt;Borrow checking, which ensures references are used safely without runtime
overhead.&lt;&#x2F;li&gt;
&lt;li&gt;Lifetime elision, where the compiler often infers lifetimes without explicit
annotation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We will see “&lt;em&gt;borrow checking&lt;&#x2F;em&gt;” and “&lt;em&gt;lifetime elision&lt;&#x2F;em&gt;” later in this article.&lt;&#x2F;p&gt;
&lt;p&gt;These approaches allow Rust to provide the power and efficiency of low-level
programming with the safety and ergonomics more commonly associated with
high-level languages. It’s a key part of Rust’s goal to empower developers to
write safe, concurrent, and performant code without sacrificing control over
low-level details.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;borrow-checking&quot;&gt;Borrow Checking&lt;&#x2F;h2&gt;
&lt;p&gt;Borrow checking is Rust’s system for ensuring memory safety and preventing
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;races.html&quot; title=&quot;Data Races and Race Conditions&quot;&gt;data races&lt;&#x2F;a&gt; at compile time. It’s based on a set of rules about how
references can be created and used.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some key concepts that relate to &lt;strong&gt;borrow checking&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ownership&lt;&#x2F;strong&gt;: Every value in Rust has an owner (&lt;em&gt;i.e., a variable&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Borrowing&lt;&#x2F;strong&gt;: References allow you to refer to a value without taking
ownership.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Lifetimes&lt;&#x2F;strong&gt;: The compiler tracks how long references are valid.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can also explicitly define lifetimes for variables too, but it’s better
to dive that topic later in this article.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some basic rules of borrowing:&lt;&#x2F;p&gt;
&lt;p&gt;At any given time, you can have either:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;One mutable reference (&lt;code&gt;&amp;amp;mut T&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Any number of immutable references (&lt;code&gt;&amp;amp;T&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;References must always be valid (no dangling references).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Immutable borrow
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Another immutable borrow - this is fine
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; We are using two immutable borrows here:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{} {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, y, z);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; We stopped using y and z here, so we can create a mutable borrow.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Remember that you cannot have both mutable and immutable borrows at the
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; same time.
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; x;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Mutable borrow
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;w &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; println!(&amp;quot;{}&amp;quot;, y);  &#x2F;&#x2F; Error: can&amp;#39;t use y here as x is mutably borrowed.
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, x);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This is okay - mutable borrow has ended
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;non-lexical-lifetimes-nll&quot;&gt;Non-Lexical Lifetimes (NLL)&lt;&#x2F;h2&gt;
&lt;p&gt;When verifying borrow rules, the Rust borrow checker first considers lexical
scope, but it goes beyond that with a more sophisticated analysis.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see how this works:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Lexical analysis&lt;&#x2F;strong&gt;: The borrow checker looks at lexical scope as a starting
point. This is why you can have multiple borrows that don’t overlap in their
lexical scopes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Non-lexical lifetimes (&lt;em&gt;NLL&lt;&#x2F;em&gt;)&lt;&#x2F;strong&gt;: However, Rust’s borrow checker uses a more
advanced system called &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2022&#x2F;08&#x2F;05&#x2F;nll-by-default.html&quot; title=&quot;Non-Lexical Lifetimes&quot;&gt;“&lt;em&gt;non-lexical lifetimes&lt;&#x2F;em&gt;” (&lt;em&gt;NLL&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;. This system
was introduced to make the borrow checker smarter and more flexible.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s how NLL works differently from pure lexical analysis:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flow-sensitive analysis&lt;&#x2F;strong&gt;: The borrow checker analyzes the actual control
flow of the program, not just the lexical structure. It tracks where variables
are actually used, not just where they’re in scope.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Finer-grained lifetimes&lt;&#x2F;strong&gt;: NLL allows the compiler to end a borrow’s
lifetime as soon as it’s no longer needed, even if it’s still in lexical scope.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Multiple lifetime regions&lt;&#x2F;strong&gt;: The borrow checker can now reason about
multiple lifetime regions within a single lexical scope.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; While y (an immutable reference) is active,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; x cannot be borrowed or mutated.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; While y is active, x is effectively frozen.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; * The borrowed value (x in this case) cannot be mutated directly.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; * No mutable borrows of x can be created.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; * But additional immutable borrows are allowed.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; x = 6;  &#x2F;&#x2F; This would fail because y is still active.
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, y); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This is fine.
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; y is not used anymore. x can be mutated now.
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This would fail with lexical analysis, 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; but works with NLL.
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, x);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With purely lexical analysis, this code wouldn’t compile because &lt;code&gt;y&lt;&#x2F;code&gt; is still
in scope when we try to mutate &lt;code&gt;x&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However, with NLL, the compiler recognizes that &lt;code&gt;y&lt;&#x2F;code&gt; isn’t used after the first
&lt;code&gt;println!&lt;&#x2F;code&gt;, so it’s safe to mutate x.&lt;&#x2F;p&gt;
&lt;p&gt;In essence, Rust’s borrow checker is more sophisticated than just lexical
analysis. It uses lexical scope as a starting point but then applies more
advanced techniques to provide a more accurate and flexible analysis of
lifetimes and borrows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-do-we-need-borrow-rules&quot;&gt;Why Do We Need Borrow Rules?&lt;&#x2F;h2&gt;
&lt;p&gt;But why do we need those rules. Let’s see some of the reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data Races&lt;&#x2F;strong&gt;: In a multi-threaded context, if one thread could mutate data
while another thread is reading it, this could lead to data races. &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;races.html&quot; title=&quot;Data Races and Race Conditions&quot;&gt;Data
races&lt;&#x2F;a&gt; occur when multiple threads access the same memory location
concurrently, and at least one of the accesses is a write. This can result in
unpredictable behavior and is a common source of bugs in concurrent systems.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Iterator Invalidation&lt;&#x2F;strong&gt;: If you’re iterating over a collection and the
underlying data is modified during iteration, it could invalidate the
iterator, potentially causing crashes or undefined behavior.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Unexpected Value Changes&lt;&#x2F;strong&gt;: If code is reading a value through an immutable
reference, it generally assumes that value won’t change. Allowing mutation
through another path would violate this assumption, leading to logical errors
in the program.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Violation of Aliasing XOR Mutability&lt;&#x2F;strong&gt;: Rust’s type system is built on the
principle that you can have either multiple readers (&lt;em&gt;aliasing&lt;&#x2F;em&gt;) or a single
writer (&lt;em&gt;mutability&lt;&#x2F;em&gt;) at any given time, but not both. Violating this
principle would undermine many of Rust’s safety guarantees.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Breaking Optimizations&lt;&#x2F;strong&gt;: Compilers often make optimizations based on the
assumption that immutably borrowed data doesn’t change. Allowing mutation
through other means would break these optimizations.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Memory Safety Issues&lt;&#x2F;strong&gt;: In more complex scenarios, this could lead to
use-after-free bugs, dangling pointers, or other memory safety issues that
Rust is specifically designed to prevent.&lt;&#x2F;li&gt;
&lt;li&gt;Borrow checking prevents data races at compile time.&lt;&#x2F;li&gt;
&lt;li&gt;Borrow checking eliminates entire classes of bugs (&lt;em&gt;null&#x2F;dangling pointer
dereferences, use after free, etc.&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Borrow checking enables fearless concurrency.&lt;&#x2F;li&gt;
&lt;li&gt;No runtime overhead - all checks are done at compile time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;other-benefits-of-borrow-checking&quot;&gt;Other Benefits of Borrow Checking&lt;&#x2F;h2&gt;
&lt;p&gt;The borrow checker also prevents common errors:&lt;&#x2F;p&gt;
&lt;p&gt;Use after free:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Error: `x` does not live long enough
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, y);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Double free:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; s owns the string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Ownership moved to t
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, s); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Error: use of moved value
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Note that at any given time, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; a value can have only one owner.
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ownership-and-borrowing&quot;&gt;Ownership and Borrowing&lt;&#x2F;h2&gt;
&lt;p&gt;There’s a significant difference between &lt;strong&gt;ownership&lt;&#x2F;strong&gt; and &lt;strong&gt;borrowing&lt;&#x2F;strong&gt; in
Rust.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s break this down:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ownership-1&quot;&gt;Ownership&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;In Rust, each value has a variable that is its “&lt;em&gt;owner&lt;&#x2F;em&gt;”.&lt;&#x2F;li&gt;
&lt;li&gt;There can only be one owner at a time.&lt;&#x2F;li&gt;
&lt;li&gt;When the owner goes out of scope, the value will be dropped (&lt;em&gt;freed&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;borrowing&quot;&gt;Borrowing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Borrowing allows you to refer to some value without taking ownership of it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;There are two types of borrows: shared (&lt;code&gt;&amp;amp;T&lt;&#x2F;code&gt;) and mutable (&lt;code&gt;&amp;amp;mut T&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;You can have multiple shared borrows or one mutable borrow at a time,
but not both simultaneously.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Here’s an example to illustrate the difference:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; s owns the string
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;calculate_length&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;s); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; s is borrowed here
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The length of &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, s, len);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; s is still valid here because it was only borrowed, not moved
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;calculate_length&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;String) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; s is a borrowed reference
&lt;&#x2F;span&gt;&lt;span&gt;    s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;s owns the &lt;code&gt;String&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;We pass a reference &lt;code&gt;&amp;amp;s&lt;&#x2F;code&gt; to &lt;code&gt;calculate_length&lt;&#x2F;code&gt;. This is borrowing:
&lt;code&gt;calculate_length&lt;&#x2F;code&gt; can use the &lt;code&gt;String&lt;&#x2F;code&gt;, but doesn’t own it.&lt;&#x2F;li&gt;
&lt;li&gt;After &lt;code&gt;calculate_length&lt;&#x2F;code&gt; returns, &lt;code&gt;s&lt;&#x2F;code&gt; is still valid and owned by the
main function.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What if &lt;code&gt;calculate_length&lt;&#x2F;code&gt; tried to take ownership of &lt;code&gt;s&lt;&#x2F;code&gt;?
Let’s see:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;calculate_length&lt;&#x2F;span&gt;&lt;span&gt;(s);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; s is no longer valid here because ownership was transferred
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; println(&amp;quot;{}&amp;quot;, s); &#x2F;&#x2F; Error: value borrowed here after move.
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The length was: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, len);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;calculate_length&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you want to use a value after it is moved to another function, you will
get an error. This is because Rust prevents you from using a value after it
has been moved to another owner.&lt;&#x2F;p&gt;
&lt;p&gt;Borrowing is powerful because it allows you to use data without transferring
ownership, which means you can use it in multiple places without cloning or
moving the data.&lt;&#x2F;p&gt;
&lt;p&gt;The key differences are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Ownership involves responsibility for cleaning up the data.&lt;&#x2F;li&gt;
&lt;li&gt;Borrowed data is &lt;em&gt;temporary&lt;&#x2F;em&gt; and the borrower is not responsible for cleaning
it up.&lt;&#x2F;li&gt;
&lt;li&gt;Owned data can be modified freely (&lt;em&gt;if it’s mutable&lt;&#x2F;em&gt;), while borrowed data
has restrictions (&lt;em&gt;shared borrows can’t modify, only one mutable borrow
at a time&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is another example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; f is not used here, so we can create a mutable borrow.
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, g);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Compare the code above with this one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; f is used below ([1]), 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; so we can&amp;#39;t create a mutable borrow here.
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; let g = &amp;amp;mut x; &#x2F;&#x2F; This is an error.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, f); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; [1]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Yet another example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; x; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; &amp;lt;---- lifecycle of g starts here
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; |
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, x); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;&amp;lt;--- Cannot borrow `x` when something can change `x`.
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; |  i.e., cannot borrow `x` when there is an
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; |  active mutable borrow of `x`. 
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; |
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= *&lt;&#x2F;span&gt;&lt;span&gt;g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; &amp;lt;---- lifecycle of g ends here.
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;       i.e. x&amp;#39;s borrow ends here.
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;mutable-variable-to-a-mutable-reference&quot;&gt;Mutable Variable to a Mutable Reference&lt;&#x2F;h2&gt;
&lt;p&gt;The mutability of the reference itself (&lt;em&gt;i.e., whether g can be reassigned&lt;&#x2F;em&gt;)
is separate from the mutability of the value it points to.&lt;&#x2F;p&gt;
&lt;p&gt;There are some scenarios where you might want a mutable variable holding a
mutable reference, but they’re not common. One example might be if you wanted
to reassign g to point to different mutable references:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; y;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Reassigning g to point to y
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But in most cases, you don’t need the extra mutability on the variable holding
the reference. It’s generally cleaner and clearer to keep things as immutable
as possible whenever you can.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;give-it-time-to-sink-in&quot;&gt;Give It Time to Sink In&lt;&#x2F;h2&gt;
&lt;p&gt;The borrow checker can be frustrating for newcomers. Sometimes requires
rethinking algorithms or data structures to satisfy the borrow checker.&lt;&#x2F;p&gt;
&lt;p&gt;As you work more with Rust, you’ll develop an intuition for what the borrow
checker allows and disallows. It’s a powerful tool that, once understood,
allows you to write safe and efficient code with confidence.&lt;&#x2F;p&gt;
&lt;p&gt;The key thing to remember is that Rust’s borrow checker ensures that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You don’t have multiple mutable references to the same data simultaneously.&lt;&#x2F;li&gt;
&lt;li&gt;You don’t have a mutable reference and an immutable reference to the same
data simultaneously.&lt;&#x2F;li&gt;
&lt;li&gt;Last Use Principle: A borrow is considered to end after its last use in the
control flow of the program.&lt;&#x2F;li&gt;
&lt;li&gt;Compiler Analysis: The Rust compiler analyzes the code to determine where
references are no longer used.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Thus, at any given point in the program’s execution, there can be only one
mutable reference to a particular piece of data. This is indeed true not just
within a function, but across the entire program.&lt;&#x2F;p&gt;
&lt;p&gt;This means, Rust’s borrow checker works based on the potential for use, not
actual use. It doesn’t wait to see if you actually use the references.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summarizing-ownership-and-borrowing&quot;&gt;Summarizing Ownership and Borrowing&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s summarize the key points about ownership and borrowing in Rust that
we’ve covered so far:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Every value in Rust has an owner (&lt;em&gt;which is a variable&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;There can only be one owner at a time.&lt;&#x2F;li&gt;
&lt;li&gt;When the owner goes out of scope, the value is dropped.&lt;&#x2F;li&gt;
&lt;li&gt;References allow you to refer to a value without taking ownership.&lt;&#x2F;li&gt;
&lt;li&gt;In Rust, we say “&lt;em&gt;reference to&lt;&#x2F;em&gt;” rather than “&lt;em&gt;pointer to&lt;&#x2F;em&gt;”.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; symbol is used to create a reference.&lt;&#x2F;li&gt;
&lt;li&gt;At any given time, you can have either:
&lt;ul&gt;
&lt;li&gt;One mutable reference (&lt;code&gt;&amp;amp;mut T&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Any number of immutable references (&lt;code&gt;&amp;amp;T&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;But not both at the same time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;References must always be valid (&lt;em&gt;no dangling references&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;You can borrow a variable mutably or immutably.&lt;&#x2F;li&gt;
&lt;li&gt;Mutable borrows are exclusive; immutable borrows are not.&lt;&#x2F;li&gt;
&lt;li&gt;A borrow’s lifetime ends at its last use, &lt;strong&gt;not&lt;&#x2F;strong&gt; necessarily at the end of
its lexical scope. This is known as Non-Lexical Lifetimes (&lt;em&gt;NLL&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;You can have multiple mutable borrows of different variables simultaneously.&lt;&#x2F;li&gt;
&lt;li&gt;You can’t have multiple simultaneous mutable borrows of the same variable.&lt;&#x2F;li&gt;
&lt;li&gt;Using a variable often creates an implicit borrow.&lt;&#x2F;li&gt;
&lt;li&gt;You can use the original variable once all mutable borrows of it have ended.&lt;&#x2F;li&gt;
&lt;li&gt;Rust’s borrow checker enforces these rules at compile-time.&lt;&#x2F;li&gt;
&lt;li&gt;It analyzes the flow of borrows through the program.&lt;&#x2F;li&gt;
&lt;li&gt;The borrow checker prevents data races and ensures memory safety.&lt;&#x2F;li&gt;
&lt;li&gt;The borrow checker has become more flexible with Non-Lexical Lifetimes.&lt;&#x2F;li&gt;
&lt;li&gt;It now considers the actual usage of borrows, not just their lexical scope.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These rules and concepts form the foundation of Rust’s memory safety guarantees,
allowing for safe concurrent programming without a garbage collector.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;structs-and-methods&quot;&gt;Structs and Methods&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Structs&lt;&#x2F;strong&gt; in Rust are similar to structs in C or classes in other languages.
They allow you to create custom data types by grouping related data together.
&lt;strong&gt;Methods&lt;&#x2F;strong&gt; are functions associated with a particular struct.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s start with a basic example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Rectangle &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Rectangle &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.height
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Rectangle {
&lt;&#x2F;span&gt;&lt;span&gt;        Rectangle { width, height }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rectangle::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The area of the rectangle is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt; square pixels.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;      rect.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;In the above code, we define a &lt;code&gt;Rectangle&lt;&#x2F;code&gt; struct &lt;code&gt;with&lt;&#x2F;code&gt; width and &lt;code&gt;height&lt;&#x2F;code&gt;
fields. Fields in a struct are &lt;strong&gt;private&lt;&#x2F;strong&gt; by default.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;impl&lt;&#x2F;code&gt; block is where we define methods associated with the Rectangle struct.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;area&lt;&#x2F;code&gt; is an &lt;strong&gt;instance method&lt;&#x2F;strong&gt;. It takes &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt; as its first parameter, which
is a reference to the instance.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;new&lt;&#x2F;code&gt; is an &lt;strong&gt;associated function&lt;&#x2F;strong&gt; (&lt;em&gt;similar to a static method in other
languages&lt;&#x2F;em&gt;). It doesn’t take &lt;code&gt;self&lt;&#x2F;code&gt; and is often used as a constructor.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;method-receivers&quot;&gt;Method Receivers&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt; for read-only access to the instance&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt; for mutable access&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;self&lt;&#x2F;code&gt; for taking ownership (&lt;em&gt;rare&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;associated-functions&quot;&gt;Associated Functions&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Functions in the &lt;code&gt;impl&lt;&#x2F;code&gt; block that don’t take self are called &lt;strong&gt;associated
functions&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;They are often used for constructors or utility functions related to the struct.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;multiple-impl-blocks&quot;&gt;Multiple impl Blocks&lt;&#x2F;h3&gt;
&lt;p&gt;You can have multiple impl blocks for a struct, which is useful for organizing code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;taking-ownership-of-self&quot;&gt;Taking Ownership of &lt;code&gt;self&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt; is a mutable reference to the instance. The method can modify the
instance, but doesn’t take ownership of it. This means, after the method call,
the caller still owns the instance and can use it.&lt;&#x2F;p&gt;
&lt;p&gt;Whereas &lt;code&gt;self&lt;&#x2F;code&gt; takes ownership of the instance. We say that “the method consumes
the instance”, meaning the caller can no longer use it after the method call ends.&lt;&#x2F;p&gt;
&lt;p&gt;This is less common and is typically used when you want to transform the
instance into something else or when you’re done with it and want to essentially
clean it up and prevent further use.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Counter &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Counter &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Method with &amp;amp;mut self
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;increment&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Method with self
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;reset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Counter {
&lt;&#x2F;span&gt;&lt;span&gt;        Counter { count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Counter { count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;increment&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, counter.count);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This is fine
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;reset&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; println!(&amp;quot;Old count: {}&amp;quot;, counter.count);  &#x2F;&#x2F; This would be an error
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;New count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, new_counter.count); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This is fine.
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The choice between &amp;amp;mut self and self depends on what you want to do with the
instance:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt; when you want to modify the instance but keep using it.&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;self&lt;&#x2F;code&gt; when you’re transforming the instance into something else or when
you’re done with it and want to ensure it’s not used again.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;enums-and-pattern-matching&quot;&gt;Enums and Pattern Matching&lt;&#x2F;h2&gt;
&lt;p&gt;Enums (&lt;em&gt;short for enumerations&lt;&#x2F;em&gt;) allow you to define a type by enumerating its
possible variants.&lt;&#x2F;p&gt;
&lt;p&gt;Rust enums are much more flexible than Go enums.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a basic example of an enum and how to use pattern matching with it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Message &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Quit,
&lt;&#x2F;span&gt;&lt;span&gt;    Move { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    Write(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    ChangeColor(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;process_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;: Message) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; msg {
&lt;&#x2F;span&gt;&lt;span&gt;        Message::Quit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Quitting&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        Message::Move { x, y } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Moving to (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, x, y);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        Message::Write(text) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Writing: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, text);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        Message::ChangeColor(r, g, b) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Changing color to (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, r, g, b);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; msg1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Message::Move { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;20 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; msg2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Message::Write(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello, Rust!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;process_message&lt;&#x2F;span&gt;&lt;span&gt;(msg1);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;process_message&lt;&#x2F;span&gt;&lt;span&gt;(msg2);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Variants&lt;&#x2F;strong&gt;: Each enum can have multiple variants (&lt;code&gt;Quit&lt;&#x2F;code&gt;, &lt;code&gt;Move&lt;&#x2F;code&gt;, &lt;code&gt;Write&lt;&#x2F;code&gt;,
&lt;code&gt;ChangeColor&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Data in variants&lt;&#x2F;strong&gt;: Variants can hold different types and amounts of data.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No null&lt;&#x2F;strong&gt;: Enums are often used instead of null values in Rust.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;advanced-pattern-matching&quot;&gt;Advanced Pattern Matching&lt;&#x2F;h2&gt;
&lt;p&gt;Pattern matching with &lt;code&gt;match&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Exhaustive&lt;&#x2F;strong&gt;: match &lt;strong&gt;must&lt;&#x2F;strong&gt; cover all possible variants of the enum.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Binding&lt;&#x2F;strong&gt;: You can bind variables to the data inside enum variants.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Multiple patterns&lt;&#x2F;strong&gt;: You can match multiple patterns with &lt;code&gt;|&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Catch-all&lt;&#x2F;strong&gt;: &lt;code&gt;_&lt;&#x2F;code&gt; can be used as a catch-all pattern.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example of more advanced pattern matching:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;OptionalInt &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Value(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;describe_optional_int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;oi&lt;&#x2F;span&gt;&lt;span&gt;: OptionalInt) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; oi {
&lt;&#x2F;span&gt;&lt;span&gt;        OptionalInt::Value(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The answer!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        OptionalInt::Value(n) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Big number: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, n),
&lt;&#x2F;span&gt;&lt;span&gt;        OptionalInt::Value(n) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Number: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, n),
&lt;&#x2F;span&gt;&lt;span&gt;        OptionalInt::None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;No value&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;describe_optional_int&lt;&#x2F;span&gt;&lt;span&gt;(OptionalInt::Value(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;describe_optional_int&lt;&#x2F;span&gt;&lt;span&gt;(OptionalInt::Value(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;describe_optional_int&lt;&#x2F;span&gt;&lt;span&gt;(OptionalInt::Value(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;describe_optional_int&lt;&#x2F;span&gt;&lt;span&gt;(OptionalInt::None);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This example demonstrates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Matching specific values (&lt;code&gt;42&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Using guards (&lt;code&gt;if n &amp;gt; 100&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Binding variables (&lt;code&gt;n&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Catch-all patterns&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enums and pattern matching are often used together in Rust for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Representing and handling different states&lt;&#x2F;li&gt;
&lt;li&gt;Error handling (with the &lt;code&gt;Result&lt;&#x2F;code&gt; enum)&lt;&#x2F;li&gt;
&lt;li&gt;Optional values (with the &lt;code&gt;Option&lt;&#x2F;code&gt; enum)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pattern-matching-order&quot;&gt;Pattern Matching Order&lt;&#x2F;h2&gt;
&lt;p&gt;In a &lt;code&gt;match&lt;&#x2F;code&gt; expression, patterns are evaluated from top to bottom, and only
the first matching pattern is executed. Once a match is found, the corresponding
code block is run, and the rest of the patterns are not evaluated.&lt;&#x2F;p&gt;
&lt;p&gt;This behavior allows you to put more specific patterns before more general ones.&lt;&#x2F;p&gt;
&lt;p&gt;For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; some_value {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Zero&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Negative&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Positive&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If some_value is 0, only the first arm will execute. If it’s negative, only the
second arm will execute. The last arm only executes if the previous patterns
don’t match.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;guards-in-pattern-matching&quot;&gt;Guards in Pattern Matching&lt;&#x2F;h2&gt;
&lt;p&gt;Guards are additional conditions you can add to a match arm using the &lt;code&gt;if&lt;&#x2F;code&gt;
keyword. They allow you to express more complex conditions than pattern
matching alone.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s how guards work:&lt;&#x2F;p&gt;
&lt;p&gt;*The pattern is matched first.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If the pattern matches, the guard condition is evaluated.&lt;&#x2F;li&gt;
&lt;li&gt;If the guard condition is &lt;code&gt;true&lt;&#x2F;code&gt;, the arm is selected.&lt;&#x2F;li&gt;
&lt;li&gt;If the guard condition is &lt;code&gt;false&lt;&#x2F;code&gt;, matching continues with the next arm.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let’s look at an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Temperature &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Celsius(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    Fahrenheit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;describe_temperature&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;temp&lt;&#x2F;span&gt;&lt;span&gt;: Temperature) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; temp {
&lt;&#x2F;span&gt;&lt;span&gt;        Temperature::Celsius(c) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;30.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hot day! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;°C&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, c),
&lt;&#x2F;span&gt;&lt;span&gt;        Temperature::Celsius(c) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Cold day! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;°C&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, c),
&lt;&#x2F;span&gt;&lt;span&gt;        Temperature::Celsius(c) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Moderate temperature: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;°C&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, c),
&lt;&#x2F;span&gt;&lt;span&gt;        Temperature::Fahrenheit(f) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;86.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hot day! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;°F&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, f),
&lt;&#x2F;span&gt;&lt;span&gt;        Temperature::Fahrenheit(f) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;50.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Cold day! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;°F&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, f),
&lt;&#x2F;span&gt;&lt;span&gt;        Temperature::Fahrenheit(f) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Moderate temperature: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;°F&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, f),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;describe_temperature&lt;&#x2F;span&gt;&lt;span&gt;(Temperature::Celsius(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;35.0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;describe_temperature&lt;&#x2F;span&gt;&lt;span&gt;(Temperature::Fahrenheit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;68.0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Guards are powerful because they allow you to express conditions that can’t be
represented by patterns alone, such as ranges or complex logical conditions.&lt;&#x2F;p&gt;
&lt;p&gt;Remember, the order matters here too. More specific guards should come &lt;strong&gt;before&lt;&#x2F;strong&gt;
more general ones to ensure they have a chance to match.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;this-looks-a-lot-like-haskell&quot;&gt;This Looks A Lot Like Haskell&lt;&#x2F;h2&gt;
&lt;p&gt;Here are some key points of similarity between Rust and &lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;&quot; title=&quot;Haskell Programming Language&quot;&gt;Haskell&lt;&#x2F;a&gt; in
the context of pattern matching:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Algebraic Data Types&lt;&#x2F;strong&gt;: Rust’s enums are similar to Haskell’s algebraic data
types. Both allow you to define types with multiple variants that can hold
different kinds of data.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Pattern Matching&lt;&#x2F;strong&gt;: Both languages use pattern matching as a core feature
for working with these types. The syntax and exhaustiveness checking are quite
similar.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Guards&lt;&#x2F;strong&gt;: As we just discussed, both Rust and Haskell allow the use of
guards in pattern matching to add extra conditions.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Expression-based&lt;&#x2F;strong&gt;: Both languages treat if statements, match expressions,
and many other constructs as expressions that return values.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Strong Static Typing&lt;&#x2F;strong&gt;: Both languages have strong, static type systems that
catch many errors at compile time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;However, Rust differs from Haskell in several important ways:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mutability&lt;&#x2F;strong&gt;: Rust allows controlled mutability, whereas Haskell is purely
functional with immutable data by default.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Memory Management&lt;&#x2F;strong&gt;: Rust uses its ownership system for memory management,
while Haskell uses garbage collection.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Side Effects&lt;&#x2F;strong&gt;: Rust doesn’t isolate side effects in the type system the
way Haskell does with its &lt;a href=&quot;https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;Haskell&#x2F;Understanding_monads&#x2F;IO&quot; title=&quot;Understanding Monads&quot;&gt;IO monad&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Performance Focus&lt;&#x2F;strong&gt;: Rust is designed as a systems programming language
with a focus on performance, while Haskell is more oriented towards high-level
abstraction.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This design philosophy reveals itself in many aspects, not only pattern matching:
Rust’s design philosophy has been to take powerful ideas from functional
programming (&lt;em&gt;like those found in Haskell&lt;&#x2F;em&gt;) and apply them in a way that’s
suitable for systems programming.&lt;&#x2F;p&gt;
&lt;p&gt;This results in a language that can feel familiar to functional programmers in
many ways, while still providing the low-level control needed for systems
programming.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;patterns-and-traits&quot;&gt;Patterns and Traits&lt;&#x2F;h2&gt;
&lt;p&gt;We will cover traits later in this article. But, still, it’s a good time to
compare patterns and traits and see when to use each.&lt;&#x2F;p&gt;
&lt;p&gt;Pattern matching and traits in Rust serve different purposes, although they can
sometimes be used to solve similar problems.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Use pattern matching when&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You want to destructure complex data types&lt;&#x2F;li&gt;
&lt;li&gt;You need to handle multiple cases based on the structure or value of data&lt;&#x2F;li&gt;
&lt;li&gt;You are working with enums and want to handle different variants&lt;&#x2F;li&gt;
&lt;li&gt;You want to extract values from Option or Result types&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Matching on enum variants&lt;&#x2F;li&gt;
&lt;li&gt;Destructuring tuples or structs&lt;&#x2F;li&gt;
&lt;li&gt;Implementing control flow based on data structure&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Use traits when&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You want to define shared behavior across different types&lt;&#x2F;li&gt;
&lt;li&gt;You need to implement polymorphism&lt;&#x2F;li&gt;
&lt;li&gt;You are designing generic code that works with multiple types&lt;&#x2F;li&gt;
&lt;li&gt;You want to extend the functionality of existing types without modifying
their source code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Defining common methods for different structs&lt;&#x2F;li&gt;
&lt;li&gt;Implementing interfaces for various types&lt;&#x2F;li&gt;
&lt;li&gt;Creating generic functions that work with any type implementing a specific
trait&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The following example illustrates the difference:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Pattern matching example
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Shape &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Circle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    Rectangle(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shape&lt;&#x2F;span&gt;&lt;span&gt;: Shape) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; shape {
&lt;&#x2F;span&gt;&lt;span&gt;        Shape::Circle(radius) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;std::f64::consts::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PI &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; radius &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; radius,
&lt;&#x2F;span&gt;&lt;span&gt;        Shape::Rectangle(width, height) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; height,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Trait example
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Area &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Circle &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;radius&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Rectangle &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Area &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Circle &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::f64::consts::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PI &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.radius &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.radius
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Area &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Rectangle &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;area&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.width &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.height
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, pattern matching is used to handle different variants of the
&lt;code&gt;Shape&lt;&#x2F;code&gt; enum, while traits are used to define a common &lt;code&gt;Area&lt;&#x2F;code&gt; &lt;strong&gt;behavior&lt;&#x2F;strong&gt;
for different struct types.&lt;&#x2F;p&gt;
&lt;p&gt;To summarize:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;pattern matching&lt;&#x2F;strong&gt; for &lt;strong&gt;control flow&lt;&#x2F;strong&gt; and data extraction based on the
structure or value of data.&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;strong&gt;traits&lt;&#x2F;strong&gt; for defining &lt;strong&gt;shared behavior&lt;&#x2F;strong&gt; across different types and
creating generic, polymorphic code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;collections-in-rust&quot;&gt;Collections in Rust&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s focus on three of the most commonly used collections:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; (&lt;em&gt;Vector&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;&#x2F;code&gt; (&lt;em&gt;Hash Map&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HashSet&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; (&lt;em&gt;Hash Set&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;vector&quot;&gt;Vector&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Creating a vector
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; v: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;    v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Another way to create a vector
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Accessing elements
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; third: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;v[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The third element is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, third);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Safe access with get()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The third element is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, x),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;There is no third element.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Iterating over values
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;v {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, i);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Mutating while iterating
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; v {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Vector provides a growable array type&lt;&#x2F;li&gt;
&lt;li&gt;Elements are stored contiguously in memory&lt;&#x2F;li&gt;
&lt;li&gt;Vector can add or remove elements from the end efficiently&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hash-map&quot;&gt;Hash Map&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;use std::collections::HashMap;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; Creating a HashMap
&lt;&#x2F;span&gt;&lt;span&gt;    let mut scores = HashMap::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; Inserting values
&lt;&#x2F;span&gt;&lt;span&gt;    scores.insert(String::from(&amp;quot;Blue&amp;quot;), 10);
&lt;&#x2F;span&gt;&lt;span&gt;    scores.insert(String::from(&amp;quot;Yellow&amp;quot;), 50);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; Accessing values
&lt;&#x2F;span&gt;&lt;span&gt;    let team_name = String::from(&amp;quot;Blue&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    let score = scores.get(&amp;amp;team_name);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; Updating a value
&lt;&#x2F;span&gt;&lt;span&gt;    scores.entry(String::from(&amp;quot;Yellow&amp;quot;)).or_insert(50);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; Iterating over key&#x2F;value pairs
&lt;&#x2F;span&gt;&lt;span&gt;    for (key, value) in &amp;amp;scores {
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;{}: {}&amp;quot;, key, value);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;A Hash Map stores key-value pairs&lt;&#x2F;li&gt;
&lt;li&gt;Allows you to look up data by using a key&lt;&#x2F;li&gt;
&lt;li&gt;Uses hashing function to determine how to store the data&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hash-set&quot;&gt;Hash Set&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::collections::HashSet;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Creating a HashSet
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; fruits &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;HashSet::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Inserting values
&lt;&#x2F;span&gt;&lt;span&gt;    fruits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Apple&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    fruits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Banana&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    fruits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Cherry&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Checking for a value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Contains Apple? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, fruits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Apple&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Removing a value
&lt;&#x2F;span&gt;&lt;span&gt;    fruits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Banana&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Iterating over values
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; fruit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;fruits {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, fruit);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Set operations
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; set1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;HashSet::new();
&lt;&#x2F;span&gt;&lt;span&gt;    set1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    set1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; set2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;HashSet::new();
&lt;&#x2F;span&gt;&lt;span&gt;    set2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    set2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Union
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; union: HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; set1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;set2).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Union: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, union);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;A Hash Set stores unique values of type T&lt;&#x2F;li&gt;
&lt;li&gt;Useful for eliminating duplicates&lt;&#x2F;li&gt;
&lt;li&gt;Allows for efficient membership testing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;collections-and-ownership&quot;&gt;Collections and Ownership&lt;&#x2F;h2&gt;
&lt;p&gt;Rust collections interact with Rust’s ownership system:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When you put a value into a collection, the collection becomes the &lt;strong&gt;owner&lt;&#x2F;strong&gt;
of that value. That means the collection is responsible for cleaning up the
value when it’s dropped. Also, no one else can use the value while it’s in
the collection.&lt;&#x2F;li&gt;
&lt;li&gt;When the collection is dropped, all of its contents are also dropped.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-use-keyword&quot;&gt;The &lt;code&gt;use&lt;&#x2F;code&gt; Keyword&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;use&lt;&#x2F;code&gt; keyword in Rust is indeed similar to &lt;code&gt;import&lt;&#x2F;code&gt; in Go. Here are the key
things to know about &lt;code&gt;use&lt;&#x2F;code&gt; in Rust:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Purpose&lt;&#x2F;strong&gt;: It brings items (&lt;em&gt;like types, functions, or modules&lt;&#x2F;em&gt;) into scope,
allowing you to use them without fully qualified paths.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Syntax&lt;&#x2F;strong&gt;: The basic syntax is use &lt;code&gt;path::to::item&lt;&#x2F;code&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Multiple items&lt;&#x2F;strong&gt;: You can bring multiple items from the same path using
curly braces: &lt;code&gt;use std::collections::{HashMap, HashSet};&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Renaming&lt;&#x2F;strong&gt;: You can rename items as you import them using the &lt;code&gt;as&lt;&#x2F;code&gt; keyword:
&lt;code&gt;use std::collections::HashMap as Map;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Nested paths&lt;&#x2F;strong&gt;: Rust allows nesting paths to avoid repetition:
&lt;code&gt;use std::{collections::HashMap, io::Read}&lt;&#x2F;code&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Glob imports&lt;&#x2F;strong&gt;: You can bring all public items from a module into scope
using &lt;code&gt;*&lt;&#x2F;code&gt;: &lt;code&gt;use std::collections::*;&lt;&#x2F;code&gt; (&lt;em&gt;this is generally &lt;strong&gt;discouraged&lt;&#x2F;strong&gt;
except in specific cases like tests&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Re-exporting&lt;&#x2F;strong&gt;: You can combine &lt;code&gt;use&lt;&#x2F;code&gt; with &lt;code&gt;pub&lt;&#x2F;code&gt; to re-export items:
&lt;code&gt;pub use self::some_module::SomeType&lt;&#x2F;code&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Prelude&lt;&#x2F;strong&gt;: Some common items are automatically imported via the standard
prelude, so you don’t need to explicitly use them.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;generics&quot;&gt;Generics&lt;&#x2F;h2&gt;
&lt;p&gt;Generics allow you to write code that works with multiple types.
Generics in Rust are similar to generics in languages like Java or C#,
or templates in C++.&lt;&#x2F;p&gt;
&lt;p&gt;Rust’s generics are &lt;strong&gt;zero-cost abstractions&lt;&#x2F;strong&gt;, meaning they don’t add runtime
overhead.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s define a few generics:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; A generic struct
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Pair&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;: T,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;: T,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; A generic enum
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(T),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; A generic function
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;print_pair&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: std::fmt::Display&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pair&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Pair&amp;lt;T&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, pair.first, pair.second);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Generic implementation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Pair&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;: T, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;: T) -&amp;gt; Pair&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        Pair { first, second }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Using the generic struct with different types
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; integer_pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Pair::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; float_pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Pair::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; string_pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Pair::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;world&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;integer_pair);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;float_pair);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print_pair&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;string_pair);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some important points about generics:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Type Parameters&lt;&#x2F;code&gt;: The &lt;code&gt;&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; in &lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is a type parameter. You can use
any valid identifier, but single uppercase letters are conventional.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Multiple Type Parameters&lt;&#x2F;strong&gt;: You can have multiple type parameters,
e.g., &lt;code&gt;struct KeyValue&amp;lt;K, V&amp;gt; { key: K, value: V }&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Trait Bounds&lt;&#x2F;strong&gt;: You can specify that a type parameter must implement certain
traits, as in &lt;code&gt;T: std::fmt::Display&lt;&#x2F;code&gt; in the &lt;code&gt;print_pair&lt;&#x2F;code&gt; function.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Generic Functions&lt;&#x2F;strong&gt;: Functions can also be generic over types they accept
or return.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Generic Implementations&lt;&#x2F;strong&gt;: You can implement methods for generic types, as
shown with the &lt;code&gt;new&lt;&#x2F;code&gt; method for &lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Monomorphization&lt;&#x2F;strong&gt;: Rust generates specialized code for each concrete type
used with a generic type or function, ensuring no runtime cost for generics.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Generics are widely used in Rust’s standard library, including in
the collections we just discussed (&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;, &lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;&#x2F;code&gt;, etc.).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;copy-and-non-copy-types&quot;&gt;Copy and Non-Copy Types&lt;&#x2F;h2&gt;
&lt;p&gt;Let think about the following example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; v: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This borrows an element of the vector.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; third &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;v[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This copies an element of the vector
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; and it is valid because i32 is a Copy type:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; let third = v[2];
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The third element is &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, third)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead of &lt;code&gt;let third = &amp;amp;v[2];&lt;&#x2F;code&gt;, if we change it to &lt;code&gt;let third = v[2];&lt;&#x2F;code&gt;,
(i.e., if we copy the value instead of borrowing it), the code would still
compile.&lt;&#x2F;p&gt;
&lt;p&gt;Here are a few things that would happen in that case:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If you change &lt;code&gt;let third = &amp;amp;v[2];&lt;&#x2F;code&gt; to &lt;code&gt;let third = v[2];&lt;&#x2F;code&gt;, the code
would still compile and run correctly.&lt;&#x2F;li&gt;
&lt;li&gt;Instead of borrowing the value, you’d be copying it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The key difference is in how Rust treats the types involved:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;i32&lt;&#x2F;code&gt; (&lt;em&gt;32-bit integer&lt;&#x2F;em&gt;) is a “Copy” type in Rust. This means it’s small and
stored entirely on the stack, so Rust will copy its value rather than move it.&lt;&#x2F;p&gt;
&lt;p&gt;For “Copy” types, there’s no significant performance difference between
borrowing and copying for small, simple types like integers. But still you’d
want to borrow for several reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;&#x2F;strong&gt;: Borrowing is a common pattern in Rust, especially when
working with collections.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Flexibility&lt;&#x2F;strong&gt;: If you later change the vector to contain a non-Copy type
(like &lt;code&gt;String&lt;&#x2F;code&gt;), the borrowing approach would still work without modification.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Preventing Accidental Mutations&lt;&#x2F;strong&gt;: If &lt;code&gt;v&lt;&#x2F;code&gt; were mutable, and you wanted to
ensure third always reflected the current state of the vector, a reference
would be necessary.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example to illustrate the difference with a non-Copy type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; v: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;    v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;world&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This borrows - it&amp;#39;s always valid
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; third_ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;v[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Borrowed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, third_ref);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This moves the String out of the vector!
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; let third_owned = v[1];  &#x2F;&#x2F; This would cause an error
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; println!(&amp;quot;Owned: {}&amp;quot;, third_owned);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Instead, we could clone if we really need ownership
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; third_cloned &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; v[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Cloned: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, third_cloned);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Borrowing with &lt;code&gt;&amp;amp;v[1]&lt;&#x2F;code&gt; is efficient and doesn’t change the vector.&lt;&#x2F;li&gt;
&lt;li&gt;Trying to move with &lt;code&gt;v[1]&lt;&#x2F;code&gt; would actually be an error, as it would leave a
“&lt;em&gt;hole&lt;&#x2F;em&gt;” in the vector.&lt;&#x2F;li&gt;
&lt;li&gt;If you need ownership, you’d typically clone the value explicitly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The decision to &lt;strong&gt;borrow by default&lt;&#x2F;strong&gt; is part of Rust’s design philosophy,
encouraging developers to think about ownership and minimize unnecessary
copying or moving of data.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;syntactical-similarities-between-rust-and-go&quot;&gt;Syntactical Similarities Between Rust and Go&lt;&#x2F;h2&gt;
&lt;p&gt;If you squint hard enough, Rust reads just like Go.&lt;&#x2F;p&gt;
&lt;p&gt;Rust and Go share some syntactical similarities, but they differ significantly
in their underlying philosophies and features, particularly when it comes to
memory management and type systems.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s explore this a bit:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;similarities-between-rust-and-go&quot;&gt;Similarities Between Rust and Go&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Syntax for basic constructs:
&lt;ul&gt;
&lt;li&gt;Curly braces for blocks&lt;&#x2F;li&gt;
&lt;li&gt;Similar function declaration syntax&lt;&#x2F;li&gt;
&lt;li&gt;Use of &lt;code&gt;let&lt;&#x2F;code&gt; (Rust) and &lt;code&gt;:=&lt;&#x2F;code&gt; (Go) for variable declaration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Focus on systems programming and performance
&lt;ul&gt;
&lt;li&gt;Built-in concurrency support (&lt;em&gt;though implemented differently&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Strong static typing&lt;&#x2F;li&gt;
&lt;li&gt;Emphasis on simplicity and readability&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;key-differences-between-rust-and-go&quot;&gt;Key Differences Between Rust and Go&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Memory Management
&lt;ul&gt;
&lt;li&gt;Rust: Ownership system, borrow checker, no garbage collection&lt;&#x2F;li&gt;
&lt;li&gt;Go: Garbage collection&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Generics
&lt;ul&gt;
&lt;li&gt;Rust: Robust generics system&lt;&#x2F;li&gt;
&lt;li&gt;Go: Only recently added generics (&lt;em&gt;Go 1.18+&lt;&#x2F;em&gt;), more limited&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Null Safety
&lt;ul&gt;
&lt;li&gt;Rust: No null, uses &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Go: Has nil, no built-in null safety&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Error Handling
&lt;ul&gt;
&lt;li&gt;Rust: &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;&#x2F;code&gt; type, no exceptions&lt;&#x2F;li&gt;
&lt;li&gt;Go: Multiple return values, error as second return&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Inheritance
&lt;ul&gt;
&lt;li&gt;Rust: No inheritance, uses traits for shared behavior&lt;&#x2F;li&gt;
&lt;li&gt;Go: No inheritance, uses interfaces&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Lifetimes
&lt;ul&gt;
&lt;li&gt;Rust: Explicit lifetime annotations&lt;&#x2F;li&gt;
&lt;li&gt;Go: No concept of lifetimes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Compile-time Guarantees
&lt;ul&gt;
&lt;li&gt;Rust: Prevents data races, null pointer dereferences at compile time&lt;&#x2F;li&gt;
&lt;li&gt;Go: Relies more on runtime checks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let’s compare two similar code snippets in Rust and Go:&lt;&#x2F;p&gt;
&lt;p&gt;Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sum: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; numbers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Sum: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, sum);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Go:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;numbers &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;num
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Sum:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While the basic structure looks similar, Rust’s version showcases its powerful
iterator system and functional programming features.&lt;&#x2F;p&gt;
&lt;p&gt;Rust’s design choices, particularly around &lt;strong&gt;ownership&lt;&#x2F;strong&gt; and &lt;strong&gt;borrowing&lt;&#x2F;strong&gt;, aim
to provide memory safety without garbage collection, which is a key
distinguishing feature from Go.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;about-type-inference&quot;&gt;About &lt;code&gt;&amp;lt;_&amp;gt;&lt;&#x2F;code&gt; (&lt;em&gt;Type Inference&lt;&#x2F;em&gt;)&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s examine the following code snippet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; set1: HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; set2: HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Using type inference with &amp;lt;_&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; union: HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; set1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;set2).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Union with &amp;lt;_&amp;gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, union);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Explicitly specifying the type
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; union_explicit: HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; set1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;set2).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Union with explicit type: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, union_explicit);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Without cloned(), we&amp;#39;d need to collect references
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; union_refs: HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; set1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;set2).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Union of references: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, union_refs);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;&quot;&gt;&lt;code&gt;&amp;lt;_&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The underscore &lt;code&gt;_&lt;&#x2F;code&gt; in &lt;code&gt;&amp;lt;_&amp;gt;&lt;&#x2F;code&gt; here is a placeholder that tells the Rust compiler
to infer the type. In this case, it’s inferring the type of elements in the
&lt;code&gt;HashSet&lt;&#x2F;code&gt; based on the input.&lt;&#x2F;p&gt;
&lt;p&gt;If &lt;code&gt;set1&lt;&#x2F;code&gt; and &lt;code&gt;set2&lt;&#x2F;code&gt; contain integers, Rust will infer &lt;code&gt;HashSet&amp;lt;i32&amp;gt;&lt;&#x2F;code&gt;
(&lt;em&gt;or whatever the specific integer type is&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;So, &lt;code&gt;&amp;lt;_&amp;gt;&lt;&#x2F;code&gt; is a way to say “figure out the type for me” rather than explicitly
specifying it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cloned&quot;&gt;&lt;code&gt;.cloned()&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;union()&lt;&#x2F;code&gt; returns an iterator of references to the elements.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.cloned()&lt;&#x2F;code&gt; creates an iterator that clones each element.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is necessary because &lt;code&gt;union()&lt;&#x2F;code&gt; returns references, but we want to own the
values in our new &lt;code&gt;HashSet&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Without &lt;code&gt;.cloned()&lt;&#x2F;code&gt;, you might think that we’d have an iterator of references,
which can’t be collected into a new owned &lt;code&gt;HashSet&lt;&#x2F;code&gt;. But, again, Rust is
smart enough to handle this for us:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; The elements are automatically cloned when collected into the HashSet.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; union: HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; set1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;set2).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Compare this with the next code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; .cloned() creates an iterator of references to cloned values.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; union: HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; set1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;union&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;set2).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;collect&quot;&gt;&lt;code&gt;.collect()&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This method transforms an iterator into a collection. It’s very flexible and
can create different types of collections depending on the context. Here,
because we specified &lt;code&gt;HashSet&amp;lt;_&amp;gt;&lt;&#x2F;code&gt;, &lt;code&gt;collect()&lt;&#x2F;code&gt; knows to create a &lt;code&gt;HashSet&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;collect()&lt;&#x2F;code&gt; is part of Rust’s powerful iterator system, allowing for efficient,
expressive data processing.&lt;&#x2F;p&gt;
&lt;p&gt;Key points:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set1.union(&amp;amp;set2)&lt;&#x2F;code&gt; returns an iterator over &lt;code&gt;&amp;amp;i32&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;When we &lt;code&gt;collect()&lt;&#x2F;code&gt; without &lt;code&gt;cloned()&lt;&#x2F;code&gt;, Rust automatically dereferences and
clones the values to create a &lt;code&gt;HashSet&amp;lt;i32&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;When we use cloned(), we’re creating an iterator of &lt;code&gt;&amp;amp;i32&lt;&#x2F;code&gt;, which then
collects into a &lt;code&gt;HashSet&amp;lt;&amp;amp;i32&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cloned()&lt;&#x2F;code&gt; works with any type that implements &lt;code&gt;Clone&lt;&#x2F;code&gt;, not just with types
that have special &lt;code&gt;FromIterator&lt;&#x2F;code&gt; implementations.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That being said, using &lt;code&gt;cloned()&lt;&#x2F;code&gt; makes it clear in the code that you’re
intentionally creating clones. It can make the code more self-documenting.&lt;&#x2F;p&gt;
&lt;p&gt;Here is another variation of this theme:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Without cloned(), we work with &amp;amp;i32 references.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; doubled: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; numbers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; With cloned(), we can work directly with i32 values
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; doubled_explicit: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; numbers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Doubled: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, doubled);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Doubled explicit: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, doubled_explicit);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Here&amp;#39;s an example where cloned() is necessary:
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; strings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;world&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; first_chars: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; strings.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;| s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;chars&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      ).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; If we wanted to modify these strings, we&amp;#39;d need cloned().
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Remember that iter() returns references to String (`&amp;amp;String`); 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; you cannot map over `&amp;amp;String` and modify it.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Why? Because the trait `FromIterator&amp;lt;&amp;amp;String&amp;gt;` is not implemented for 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; `Vec&amp;lt;String&amp;gt;`. So, you will need `Strings`s as elements to `collect()` 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; them (instead of `&amp;amp;String`s).
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; modified: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; strings.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;!&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        s
&lt;&#x2F;span&gt;&lt;span&gt;    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;First chars: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, first_chars);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Modified: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, modified);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Original strings: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, strings);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Unchanged
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In summary, while &lt;code&gt;cloned()&lt;&#x2F;code&gt; might seem redundant in some cases like the
&lt;code&gt;HashSet&lt;&#x2F;code&gt; example above, it becomes crucial when:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You need to perform operations that require owned values.&lt;&#x2F;li&gt;
&lt;li&gt;You’re working with types that don’t have specialized &lt;code&gt;FromIterator&lt;&#x2F;code&gt;
implementations.&lt;&#x2F;li&gt;
&lt;li&gt;You want to make cloning explicit in your code for &lt;strong&gt;clarity&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;You’re doing complex iterator chains where owning the values is necessary
at some intermediate step.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;purpose-of-collect&quot;&gt;Purpose of &lt;code&gt;collect()&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;collect()&lt;&#x2F;code&gt; consumes an iterator and creates a collection from its elements.
It’s part of Rust’s “&lt;em&gt;zero-cost abstractions&lt;&#x2F;em&gt;” philosophy, often being as
efficient as manual iteration.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;collect()&lt;&#x2F;code&gt; can create many different collection types, not just &lt;code&gt;Vec&lt;&#x2F;code&gt; or
&lt;code&gt;HashSet&lt;&#x2F;code&gt;. The type it creates is often inferred from context, but can be
explicitly specified.&lt;&#x2F;p&gt;
&lt;p&gt;For many common cases, &lt;code&gt;collect()&lt;&#x2F;code&gt; is optimized to allocate the correct amount
of memory upfront.&lt;&#x2F;p&gt;
&lt;p&gt;In addition &lt;code&gt;collect()&lt;&#x2F;code&gt; can also be used to accumulate &lt;code&gt;Result&lt;&#x2F;code&gt;s, turning an
iterator of &lt;code&gt;Result&lt;&#x2F;code&gt;s into a &lt;code&gt;Result&lt;&#x2F;code&gt; of a collection.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s compare this with an imperative approach:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; numbers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Using collect()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; doubled: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; numbers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Imperative approach
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; doubled_imperative &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;numbers {
&lt;&#x2F;span&gt;&lt;span&gt;        doubled_imperative.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Doubled (collect): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, doubled);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Doubled (imperative): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, doubled_imperative);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; collect() with type inference
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; set: HashSet&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; numbers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; collect() for error handling
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; results: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;oops&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; collected_results: 
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; results.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Set: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, set);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Collected results: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, collected_results);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some highlights:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;collect()&lt;&#x2F;code&gt; version is more concise and focuses on the transformation
(map), not the mechanics of building the collection.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;collect()&lt;&#x2F;code&gt; can infer the type of collection to create, making it very
flexible.&lt;&#x2F;li&gt;
&lt;li&gt;It can be used in more complex scenarios, like accumulating Result types.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Yes, you can always write an imperative loop to achieve the same result,
however, &lt;code&gt;collect()&lt;&#x2F;code&gt; offers several advantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It’s more declarative, focusing on what you want, not how to do it.&lt;&#x2F;li&gt;
&lt;li&gt;It’s often more concise and can be chained with other iterator methods.&lt;&#x2F;li&gt;
&lt;li&gt;It can be more efficient in some cases, as the compiler can optimize it better.&lt;&#x2F;li&gt;
&lt;li&gt;It’s more flexible, easily allowing you to collect into different types of collections.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In essence, collect() is a bridge between Rust’s iterator system and its
collections, embodying Rust’s approach to combining high-level abstractions
with low-level performance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;result-type-in-rust&quot;&gt;&lt;code&gt;Result&lt;&#x2F;code&gt; Type in Rust&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Result&lt;&#x2F;code&gt; is a crucial type in Rust’s error handling system.
It is an &lt;code&gt;enum&lt;&#x2F;code&gt; used for returning and propagating errors.
It’s defined as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T, E&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(T),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(E),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s break it down:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ok(T)&lt;&#x2F;code&gt;: Represents success and contains a value of type &lt;code&gt;T&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Err(E)&lt;&#x2F;code&gt;: Represents an error and contains an error value of type &lt;code&gt;E&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;Result&lt;&#x2F;code&gt; is used for operations that can fail. It allows you to handle errors
explicitly without exceptions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Result&lt;&#x2F;code&gt; is often used as the return type for functions that might fail.
It forces error handling, improving reliability&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a simple example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fs::File;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::Read;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;read_file_contents&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, std::io::Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;File::open(path)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; contents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;    file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;read_to_string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; contents)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(contents)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;read_file_contents&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;example.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(contents) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;File contents: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, contents),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(error) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error reading file: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, error),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;The function returns &lt;code&gt;Result&amp;lt;String, std::io::Error&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;On success, it returns &lt;code&gt;Ok(contents)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;On failure, it returns &lt;code&gt;Err(error)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In &lt;code&gt;File::open(path)?;&lt;&#x2F;code&gt;, the &lt;code&gt;?&lt;&#x2F;code&gt; operator is used for easy error propagation.
It’s shorthand for a match expression that returns early on error.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a more explicit version:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;File::open(path) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(file) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; file,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()),
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;main()&lt;&#x2F;code&gt;, we use pattern matching to handle both success and failure cases.&lt;&#x2F;p&gt;
&lt;p&gt;Here are other some common ways to work with &lt;code&gt;Result&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Don&amp;#39;t care about error details.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(contents) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;read_file_contents&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;example.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;File contents: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, contents);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Expect panics with a custom message.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; contents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;read_file_contents&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;example.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Failed to read file&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; A combination
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; line_count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;read_file_contents&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;example.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;contents&lt;&#x2F;span&gt;&lt;span&gt;| contents.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; .unwrap() panics, unwrap_or() provides a default value.
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Result&lt;&#x2F;code&gt; is a key part of Rust’s approach to creating reliable, error-resistant
code. It encourages explicit error handling and helps prevent issues like
unchecked null values or unhandled exceptions found in some other languages.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;result-versus-promises&quot;&gt;&lt;code&gt;Result&lt;&#x2F;code&gt; versus Promises&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;Result&lt;&#x2F;code&gt; type in Rust does share some conceptual similarities with
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;Haskell&#x2F;Understanding_monads&#x2F;IO&quot; title=&quot;Understanding Monads&quot;&gt;Deferreds, Promises, and Monads&lt;&#x2F;a&gt;. Let’s explore these connections:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;similarity-to-promises-deferreds&quot;&gt;Similarity to Promises&#x2F;Deferreds&lt;&#x2F;h3&gt;
&lt;p&gt;Like Promises, &lt;code&gt;Result&lt;&#x2F;code&gt; represents the outcome of an operation that may succeed
or fail. Both provide a structured way to handle success and failure cases.
However, &lt;code&gt;Result&lt;&#x2F;code&gt; is &lt;strong&gt;synchronous&lt;&#x2F;strong&gt;, while Promises typically deal with
&lt;em&gt;asynchronous&lt;&#x2F;em&gt; operations.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;monadic-nature&quot;&gt;Monadic Nature&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Result&lt;&#x2F;code&gt; is indeed very similar to a &lt;code&gt;Monad&lt;&#x2F;code&gt;, particularly the &lt;code&gt;Either&lt;&#x2F;code&gt; monad
in functional programming languages. It provides a way to chain operations that
might fail, similar to how Monads allow sequencing of computations.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s how Result exhibits monad-like behavior:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;divide&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Division by zero&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; y)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;divide&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;divide&lt;&#x2F;span&gt;&lt;span&gt;(x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; result {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(value) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, value),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;and_then&lt;&#x2F;code&gt; is similar to &lt;code&gt;flatMap&lt;&#x2F;code&gt; or &lt;code&gt;bind&lt;&#x2F;code&gt; in other monadic systems.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;map&lt;&#x2F;code&gt; allows transforming the success value, similar to functor operations.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;Result&lt;&#x2F;code&gt; is monadic because it allows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Encapsulation of computation,&lt;&#x2F;li&gt;
&lt;li&gt;Sequencing of operations,&lt;&#x2F;li&gt;
&lt;li&gt;And error short-circuiting.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;However, there are differences, too:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Result&lt;&#x2F;code&gt; is &lt;strong&gt;synchronous&lt;&#x2F;strong&gt; and immediately available.&lt;&#x2F;li&gt;
&lt;li&gt;It’s used for error handling rather than managing asynchronous operations.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Rust’s approach with Result:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Enforces explicit error handling at compile-time.&lt;&#x2F;li&gt;
&lt;li&gt;Provides a type-safe way to handle errors without exceptions.&lt;&#x2F;li&gt;
&lt;li&gt;Allows for expressive, functional-style composition of fallible operations.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The similarity to monads and functional programming concepts is not accidental.
Rust incorporates many ideas from functional programming, including this approach
to error handling, while still maintaining its systems programming focus.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;std-fmt-display&quot;&gt;&lt;code&gt;std::fmt::Display&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the above code, &lt;code&gt;std::fmt::Display&lt;&#x2F;code&gt; is a trait that allows for text-based
display of a type. It’s similar to &lt;code&gt;Stringer&lt;&#x2F;code&gt; in Go or &lt;code&gt;toString()&lt;&#x2F;code&gt; in other
languages.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std&lt;&#x2F;code&gt; is the standard library.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fmt&lt;&#x2F;code&gt; is a &lt;strong&gt;module&lt;&#x2F;strong&gt; within the standard library for formatting and display.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;::&lt;&#x2F;code&gt; is used to access items within modules.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This hierarchical structure helps organize code and prevent naming conflicts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;display-as-a-trait&quot;&gt;`Display as a Trait&lt;&#x2F;h2&gt;
&lt;p&gt;Display is a trait.&lt;&#x2F;p&gt;
&lt;p&gt;Traits in Rust are similar to interfaces in other languages, but more powerful.
They define a set of methods that a type must implement. You can think of
them as defining an “&lt;em&gt;ability&lt;&#x2F;em&gt;” or “&lt;em&gt;behavior&lt;&#x2F;em&gt;” that a type can have.&lt;&#x2F;p&gt;
&lt;p&gt;In the context of the above example code, &lt;code&gt;T: std::fmt::Display&lt;&#x2F;code&gt;
is a &lt;strong&gt;trait bound&lt;&#x2F;strong&gt;. It means, “&lt;em&gt;T can be any type that implements the
&lt;code&gt;Display&lt;&#x2F;code&gt; trait&lt;&#x2F;em&gt;”.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Display&lt;&#x2F;code&gt; trait defines how a type should be formatted for user-facing
output.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a brief example of how a type implements &lt;code&gt;Display&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fmt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Point &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;fmt::Display &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Point &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;fmt::Formatter) -&amp;gt; fmt::Result {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;write!&lt;&#x2F;span&gt;&lt;span&gt;(f, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.y)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Point { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, p);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: (1, 2)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Traits (&lt;em&gt;like &lt;code&gt;Display&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;) define a contract that types can implement.&lt;&#x2F;li&gt;
&lt;li&gt;They are used extensively in Rust for polymorphism and to define shared behavior.&lt;&#x2F;li&gt;
&lt;li&gt;In generic functions, trait bounds (like &lt;code&gt;T: std::fmt::Display&lt;&#x2F;code&gt;) specify what
capabilities the generic types must have.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So, in our &lt;code&gt;print_pair&lt;&#x2F;code&gt; function, it can work with any &lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; where &lt;code&gt;T&lt;&#x2F;code&gt; is
any type that knows how to display itself (i.e., implements &lt;code&gt;Display&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;This is how Rust achieves polymorphism and code reuse without traditional
inheritance.&lt;&#x2F;p&gt;
&lt;p&gt;You can also bind multiple traits to a type.&lt;&#x2F;p&gt;
&lt;p&gt;You can use the &lt;code&gt;+&lt;&#x2F;code&gt; syntax:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;print_info&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: std::fmt::Display &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;std::fmt::Debug&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: T) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Display: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, value);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Debug: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, value);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or, you can use &lt;code&gt;where&lt;&#x2F;code&gt; clauses for more complex bounds:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;complex_function&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T, U&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;: T, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt;: U) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    T: std::fmt::Display + Clone,
&lt;&#x2F;span&gt;&lt;span&gt;    U: std::fmt::Debug + PartialEq,
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Function body
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can use traits in trait definitions too:
In trait definitions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;MyTrait&lt;&#x2F;span&gt;&lt;span&gt;: std::fmt::Display + std::fmt::Debug {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Trait methods
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Also, traits can be helpful in struct or enum definitions with trait bounds:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Wrapper&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: std::fmt::Display &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;std::fmt::Debug&amp;gt;(T);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here’s a more complete example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fmt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; A trait for things that can be doubled
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Doubler &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Implement Doubler for i32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Doubler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; A function that uses multiple trait bounds
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;double_and_print&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Doubler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;fmt::Display&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: T) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; doubled &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Original: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, Doubled: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, value, doubled);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;double_and_print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;about-self&quot;&gt;About &lt;code&gt;Self&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Self&lt;&#x2F;code&gt; is a special keyword in Rust that refers to the type that’s implementing
a trait or method. It’s a way to refer to the current type without naming it
explicitly.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In trait definitions: &lt;code&gt;Self&lt;&#x2F;code&gt; represents the type that will implement the trait.&lt;&#x2F;li&gt;
&lt;li&gt;In method implementations: &lt;code&gt;Self&lt;&#x2F;code&gt; refers to the type the &lt;code&gt;impl&lt;&#x2F;code&gt; block is for.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Self&lt;&#x2F;code&gt; is always capitalized when used as a type.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here are some examples:&lt;&#x2F;p&gt;
&lt;p&gt;In a trait definition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Cloneable &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code&gt;Self&lt;&#x2F;code&gt; will be whatever type implements this trait.&lt;&#x2F;p&gt;
&lt;p&gt;In an impl block:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Point &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Point &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{ x, y }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case, &lt;code&gt;Self&lt;&#x2F;code&gt; is equivalent to &lt;code&gt;Point&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In trait implementations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Cloneable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Point &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.x,
&lt;&#x2F;span&gt;&lt;span&gt;            y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.y,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As a return type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Builder &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;reset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut Self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Point &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;reset&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In associated types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Container &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Item&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some important notes about &lt;code&gt;Self&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It allows for more generic and reusable code.&lt;&#x2F;li&gt;
&lt;li&gt;It is particularly useful in traits where you don’t know the concrete type
implementing the trait.&lt;&#x2F;li&gt;
&lt;li&gt;It can be used as a return type, parameter type, or in type annotations within
methods or associated functions.&lt;&#x2F;li&gt;
&lt;li&gt;It helps in writing self-referential structs or in implementing the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Builder_pattern&quot; title=&quot;Builder Pattern&quot;&gt;builder pattern&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One thing to note is &lt;code&gt;Self&lt;&#x2F;code&gt; refers the type itself, not an instance of the type.
This is different from &lt;code&gt;self&lt;&#x2F;code&gt; (&lt;em&gt;lowercase&lt;&#x2F;em&gt;), which refers to the current instance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;with-borrowing-do-we-ever-need-pointers&quot;&gt;With Borrowing, Do We “Ever” Need Pointers?&lt;&#x2F;h2&gt;
&lt;p&gt;With all this reference and borrowing semantics, you will seldom need to use
pointers in Rust. Instead of raw pointers, references are much more frequently
used and are safer due to the borrow checker.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;References (&lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; and &lt;code&gt;&amp;amp;mut&lt;&#x2F;code&gt;) are the primary way to share access to data
without transferring ownership.&lt;&#x2F;li&gt;
&lt;li&gt;References are always valid (non-null) and checked by the borrow checker.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Rust’s reference system provides memory safety guarantees at &lt;strong&gt;compile time&lt;&#x2F;strong&gt;.
This prevents common issues like null pointer dereferencing, dangling pointers,
and &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;races.html&quot; title=&quot;Data Races and Race Conditions&quot;&gt;data races&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Raw pointers (&lt;code&gt;*const T&lt;&#x2F;code&gt; and &lt;code&gt;*mut T&lt;&#x2F;code&gt;) do exist in Rust, but they’re used much
less frequently. They’re primarily used in &lt;code&gt;unsafe&lt;&#x2F;code&gt; code blocks for low-level
operations or interfacing with C libraries.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a comparison:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Reference (safe, common)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ref_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Reference value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ref_x);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Raw pointer (unsafe, uncommon)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ptr_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;*const i32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Pointer value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr_x);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pointers can (&lt;em&gt;as a very very VERY last resort&lt;&#x2F;em&gt;) be used to work around
the limitations of the borrow checker.&lt;&#x2F;p&gt;
&lt;p&gt;Rust’s approach offers several advantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Memory safety without garbage collection&lt;&#x2F;li&gt;
&lt;li&gt;Elimination of entire classes of bugs at compile time&lt;&#x2F;li&gt;
&lt;li&gt;Clear ownership semantics&lt;&#x2F;li&gt;
&lt;li&gt;Performance comparable to manual memory management&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This design allows Rust to achieve its goal of being a systems programming
language that is safe, concurrent, and practical.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lifetimes&quot;&gt;Lifetimes&lt;&#x2F;h2&gt;
&lt;p&gt;Lifetimes are a crucial and unique feature of Rust that deserve their own
discussion.&lt;&#x2F;p&gt;
&lt;p&gt;Lifetimes are Rust’s way of ensuring that references are valid for the duration
they are used. They are part of Rust’s borrow checker, preventing
&lt;em&gt;use-after-free&lt;&#x2F;em&gt; and &lt;em&gt;dangling pointer&lt;&#x2F;em&gt; errors.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-do-we-need-lifetimes&quot;&gt;Why Do We Need Lifetimes?&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Lifetimes help the compiler ensure that references don’t outlive the data
they refer to.&lt;&#x2F;li&gt;
&lt;li&gt;They allow for more complex borrowing patterns while maintaining memory safety.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;implicit-lifetime-elision&quot;&gt;Implicit Lifetime Elision&lt;&#x2F;h3&gt;
&lt;p&gt;In many cases, Rust can infer lifetimes without explicit annotation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;explicit-lifetime-annotation&quot;&gt;Explicit Lifetime Annotation&lt;&#x2F;h3&gt;
&lt;p&gt;You can use the syntax &lt;code&gt;&#x27;a&lt;&#x2F;code&gt;, &lt;code&gt;&#x27;b&lt;&#x2F;code&gt;, etc. (&lt;em&gt;the names are arbitrary but
&lt;code&gt;&#x27;a&lt;&#x2F;code&gt; is conventional for a single lifetime&lt;&#x2F;em&gt;) to annotate lifetimes explicitly.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see some examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Implicit lifetime
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;longest&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; y.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        x
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        y
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Explicit lifetime
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;longest&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; y.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;          x
&lt;&#x2F;span&gt;&lt;span&gt;      } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          y
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; string1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;short&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; string2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;longer&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;longest&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;string1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;string2);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Longest string is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, result);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the explicit version:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x27;a&lt;&#x2F;code&gt; is a lifetime parameter.&lt;&#x2F;li&gt;
&lt;li&gt;It tells the compiler that all the references in the arguments and return
value must have the same lifetime.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Rust has rules to infer lifetimes in common patterns, reducing the need for
explicit annotations. That’s called &lt;strong&gt;lifetime elision&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see another example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ImportantExcerpt&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;part&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This struct can’t outlive the reference it holds.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;static-lifetime&quot;&gt;Static Lifetime&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;&#x27;static&lt;&#x2F;code&gt; is a special lifetime that lasts for the entire program execution.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;multiple-lifetimes&quot;&gt;Multiple Lifetimes&lt;&#x2F;h3&gt;
&lt;p&gt;You can specify different lifetimes for different references:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;complex&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;b str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    x
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;lifetime-bounds&quot;&gt;Lifetime Bounds&lt;&#x2F;h3&gt;
&lt;p&gt;You can specify that a type must live for a certain lifetime:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;print_type&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Display &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;T) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, t);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lifetimes are one of the more challenging concepts in Rust, but they’re crucial
for the language’s memory safety guarantees without garbage collection.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see some more complex scenarios involving lifetimes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lifetimes-with-structs-and-implementation-blocks&quot;&gt;Lifetimes with Structs and Implementation Blocks&lt;&#x2F;h3&gt;
&lt;p&gt;In Rust, when you use references in struct definitions, you need to specify
lifetime parameters to help the compiler ensure that the references remain
valid for as long as the struct instance exists.&lt;&#x2F;p&gt;
&lt;p&gt;For example, the following code will raise an error:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Excerpt &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;    ^ expected named lifetime parameter!
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s fix that below:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Excerpt&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Excerpt&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;announce_and_return_part&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;announcement&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Attention please: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, announcement);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.text
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; novel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Call me Volkan. Some years ago...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; first_sentence &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; novel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;.&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Could not find a &amp;#39;.&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Excerpt {
&lt;&#x2F;span&gt;&lt;span&gt;      text: first_sentence,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Excerpt level: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, i.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Excerpt: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, i.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;announce_and_return_part&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Here&amp;#39;s an excerpt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the code above, &lt;code&gt;&amp;lt;&#x27;a&amp;gt;&lt;&#x2F;code&gt; declares a lifetime parameter that the struct uses,
and &lt;code&gt;&amp;amp;&#x27;a str&lt;&#x2F;code&gt; specifies that the text field must live for at least as long as
this lifetime &lt;code&gt;&#x27;a&#x27;&lt;&#x2F;code&gt;. Any instance of &lt;code&gt;Excerpt&lt;&#x2F;code&gt; is then constrained to live no
longer than the concrete lifetime that &lt;code&gt;&#x27;a&#x27;&lt;&#x2F;code&gt; represents when the struct is
instantiated.&lt;&#x2F;p&gt;
&lt;p&gt;For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; long_lived_string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;I live long&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; excerpt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; short_lived_string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;I&amp;#39;m short-lived&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; We borrow from short_lived_string
&lt;&#x2F;span&gt;&lt;span&gt;        excerpt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Excerpt { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;short_lived_string };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; short_lived_string goes out of scope here
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; We cannot used excerpt here because short_lived_string 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; is no longer valid.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; long_lived_string and excerpt go out of scope here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s compare it with this one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; long_lived_string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;I live long&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; excerpt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; short_lived_string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;I&amp;#39;m short-lived&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; We borrow from long_lived_string
&lt;&#x2F;span&gt;&lt;span&gt;        excerpt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Excerpt { text: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;long_lived_string };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; short_lived_string goes out of scope here
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; We can use excerpt here because `&amp;#39;a` refers to the lifetime of
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; long_lived_string which is still valid.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, excerpt.text)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; long_lived_string and excerpt go out of scope here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;lifetimes-with-trait-bounds&quot;&gt;Lifetimes With Trait Bounds&lt;&#x2F;h3&gt;
&lt;p&gt;The next example demonstrates how lifetimes can be used with traits and trait
implementations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Summarizable&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;#39;a&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;summary&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Article&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Summarizable&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Article&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;summary&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.title
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; article &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Article {
&lt;&#x2F;span&gt;&lt;span&gt;        title: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Rust Lifetimes&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        content: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Lifetimes are a complex but powerful feature...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Article summary: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, article.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;summary&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;higher-rank-trait-bounds-hrtb&quot;&gt;Higher-Rank Trait Bounds (&lt;em&gt;HRTB&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Type_theory&quot; title=&quot;Type Theory&quot;&gt;type theory&lt;&#x2F;a&gt;, “&lt;em&gt;higher-rank&lt;&#x2F;em&gt;” refers to types that involve
quantifiers (like “&lt;em&gt;for all&lt;&#x2F;em&gt;” or “&lt;em&gt;exists&lt;&#x2F;em&gt;”) in positions other than just the
outermost level. In Rust, this translates to lifetimes or types that are
quantified in nested positions.&lt;&#x2F;p&gt;
&lt;p&gt;The following example introduces Higher-Rank Trait Bounds, allowing for more
flexible lifetime relationships.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Matcher&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;match_with&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;: T) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; A function that works with any reference lifetime
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;match_any&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T, M&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matcher&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;M, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[T]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    M: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Matcher&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; T&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        items.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;| matcher.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;match_with&lt;&#x2F;span&gt;&lt;span&gt;(item))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;StartsWith&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Matcher&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;StartsWith &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;match_with&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        item.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;starts_with&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; items &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;apple&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;banana&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;cherry&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; matcher &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; StartsWith(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;b&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Matched: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;match_any&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;matcher, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;items));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Why is the above trait bound considered higher-rank?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It’s saying that &lt;code&gt;M&lt;&#x2F;code&gt; must implement &lt;code&gt;Matcher&amp;lt;&amp;amp;&#x27;a T&amp;gt;&lt;&#x2F;code&gt; for all
possible lifetimes &lt;code&gt;&#x27;a&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;This is different from a simple generic lifetime because it’s quantifying the
lifetime at the trait bound level, not at the function level.&lt;&#x2F;li&gt;
&lt;li&gt;It’s essentially a “&lt;em&gt;forall&lt;&#x2F;em&gt;” quantifier nested inside the type signature,
hence “&lt;em&gt;higher-rank&lt;&#x2F;em&gt;”.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;lifetime-subtyping&quot;&gt;Lifetime Subtyping&lt;&#x2F;h3&gt;
&lt;p&gt;Lifetime subtyping is an important concept in Rust’s borrowing and lifetime
system. It allows for more flexible and expressive code when dealing with
references that have different lifetimes.&lt;&#x2F;p&gt;
&lt;p&gt;Lifetime subtyping is based on the idea that one lifetime can be a “&lt;em&gt;subtype&lt;&#x2F;em&gt;”
of another, meaning it lives at least as long as the other.&lt;&#x2F;p&gt;
&lt;p&gt;We express this relationship as &lt;code&gt;&#x27;a: &#x27;b&lt;&#x2F;code&gt;, which is read as “&lt;em&gt;&lt;code&gt;&#x27;a&lt;&#x2F;code&gt; outlives &lt;code&gt;&#x27;b&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;”
or “&lt;code&gt;&#x27;a&lt;&#x2F;code&gt; is a subtype of &lt;code&gt;&#x27;b&lt;&#x2F;code&gt;”.&lt;&#x2F;p&gt;
&lt;p&gt;If &lt;code&gt;&#x27;a: &#x27;b&lt;&#x2F;code&gt;, then any reference with lifetime &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; can be used where a reference
with lifetime &lt;code&gt;&#x27;b&lt;&#x2F;code&gt; is expected. This is because &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; is guaranteed to live at
least as long as &lt;code&gt;&#x27;b&lt;&#x2F;code&gt;, so it’s safe to use in place of &lt;code&gt;&#x27;b&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;s str&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Parser&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;c&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;s&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;c&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;c &lt;&#x2F;span&gt;&lt;span&gt;Context&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;c&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Parser&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;c&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;s str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;parse_context&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;: Context) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Parser { context: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;context }.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; context &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Context(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;parse_context&lt;&#x2F;span&gt;&lt;span&gt;(context);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, result);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This showcases lifetime subtyping, where one lifetime must outlive another.&lt;&#x2F;p&gt;
&lt;p&gt;Note that the last few examples are more advanced use cases of lifetimes
that you might not encounter frequently in everyday Rust programming.
Regardless, they demonstrate the flexibility and power of Rust’s lifetime system.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s use a different example to illustrate lifetime without any annotation
to see how Rust infers lifetimes, and how you can intuitively reason about
them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; title: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; content: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; article: Article;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Rust Lifetimes&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Lifetimes are a complex but powerful...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;t;
&lt;&#x2F;span&gt;&lt;span&gt;        content &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;c;
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        article &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Article { title, content };
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Article can be used here
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Title: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, article.title);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; t and c go out of scope here
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This would cause a compile error:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; println!(&amp;quot;Title: {}&amp;quot;, article.title);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It’s good that Rust infers most of the lifetimes for us. Otherwise, the above
code would have looked something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Article&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;b str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;main&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; title: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;main str&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; content: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;main str&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; article: Article&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;main&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;main&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; t: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Rust Lifetimes&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Lifetimes are a complex but powerful...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;main&lt;&#x2F;span&gt;&lt;span&gt; t;
&lt;&#x2F;span&gt;&lt;span&gt;        content &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;main&lt;&#x2F;span&gt;&lt;span&gt; c;
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        article &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Article { title, content };
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Article can be used here
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Title: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, article.title);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; t and c go out of scope here
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This would cause a compile error:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; println!(&amp;quot;Title: {}&amp;quot;, article.title);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example, &lt;code&gt;Article&lt;&#x2F;code&gt; can’t be used after &lt;code&gt;t&lt;&#x2F;code&gt; and &lt;code&gt;c&lt;&#x2F;code&gt; go out of scope
because its lifetime is constrained by the lifetimes of the references it holds.&lt;&#x2F;p&gt;
&lt;p&gt;The Rust compiler ensures that article is not used beyond the scope where both
title and content are valid.&lt;&#x2F;p&gt;
&lt;p&gt;To be clear, lifetimes express constraints, not durations.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; in &lt;code&gt;Article&amp;lt;&#x27;a&amp;gt;&lt;&#x2F;code&gt; means “&lt;em&gt;this struct is parameterized by some
lifetime &lt;code&gt;&#x27;a&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;”. It does &lt;strong&gt;NOT&lt;&#x2F;strong&gt; mean, “&lt;em&gt;this struct’s life is bound by &lt;code&gt;&#x27;a&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;”&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; on the fields means “&lt;em&gt;these references must be valid for at least
the lifetime &lt;code&gt;&#x27;a&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;”.&lt;&#x2F;li&gt;
&lt;li&gt;The struct itself is bound by these constraints–it cannot be used in a
context where these constraints aren’t met.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So, more precisely:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;&#x27;a&amp;gt;&lt;&#x2F;code&gt; doesn’t impose a constraint; it declares a lifetime parameter.&lt;&#x2F;li&gt;
&lt;li&gt;The uses of &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; in the field types create the actual constraints, tying the
struct’s usable lifetime to the lifetimes of its references.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s another way to think about it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Article&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above is conceptually similar to how we use generic types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Pair&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;: T,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;: T,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In both cases, the angle brackets introduce a parameter (&lt;em&gt;lifetime or type&lt;&#x2F;em&gt;)
that’s then used within the struct definition.&lt;&#x2F;p&gt;
&lt;p&gt;The key point is that &lt;code&gt;Article&amp;lt;&#x27;a&amp;gt;&lt;&#x2F;code&gt; is defining a family of types, one for each
possible concrete lifetime. The compiler then ensures that whenever an &lt;code&gt;Article&lt;&#x2F;code&gt;
is instantiated, all the lifetimes line up correctly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closures&quot;&gt;Closures&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s shift our focus to &lt;strong&gt;closures&lt;&#x2F;strong&gt; in Rust. Closures in Rust have some
similarities to those in Go, but there are also significant differences due to
Rust’s unique features like ownership and borrowing.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s start with a basic overview and then compare with Go:&lt;&#x2F;p&gt;
&lt;p&gt;In Rust, a closure looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;add_one &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rust can often infer the types, but you can also be explicit:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; add_one: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;| x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rust closures can capture variables from their environment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;add_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; y;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, let’s compare with Go:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Similarities
&lt;ul&gt;
&lt;li&gt;Both Rust and Go support closures (&lt;em&gt;anonymous functions that can capture
their environment&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Both allow closures to be passed as arguments and returned from functions.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Key Differences
&lt;ul&gt;
&lt;li&gt;Syntax
&lt;ul&gt;
&lt;li&gt;Rust uses &lt;code&gt;|params| body&lt;&#x2F;code&gt; syntax.&lt;&#x2F;li&gt;
&lt;li&gt;Go uses &lt;code&gt;func(params) { body }&lt;&#x2F;code&gt; syntax.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Capture Mechanism
&lt;ul&gt;
&lt;li&gt;Rust has more complex capture rules due to its ownership system.&lt;&#x2F;li&gt;
&lt;li&gt;Go simply captures by reference.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;mutability-1&quot;&gt;Mutability&lt;&#x2F;h3&gt;
&lt;p&gt;Rust requires explicit mutability:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;add_to_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; y;
&lt;&#x2F;span&gt;&lt;span&gt;    x
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ownership-and-borrowing-1&quot;&gt;Ownership and Borrowing&lt;&#x2F;h3&gt;
&lt;p&gt;Rust closures interact with the borrow checker:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;print_vec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, v);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Borrows v
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;print_vec&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; v can be used here because the borrow has ended
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;move-semantics&quot;&gt;Move Semantics&lt;&#x2F;h3&gt;
&lt;p&gt;Rust allows forcing ownership transfer into the closure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; print_vec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, v);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; v is moved into the closure and can&amp;#39;t be used here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;closure-traits&quot;&gt;Closure Traits:&lt;&#x2F;h3&gt;
&lt;p&gt;Rust closures implement traits like &lt;code&gt;Fn&lt;&#x2F;code&gt;, &lt;code&gt;FnMut&lt;&#x2F;code&gt;, or &lt;code&gt;FnOnce&lt;&#x2F;code&gt;, which
determines how they can be called and what they can do with captured variables.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a more complex example in Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;create_adder&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; impl Fn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; y
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; add_5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;create_adder&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;5 + 10 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;add_5&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;));  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Outputs: 5 + 10 = 15
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This demonstrates returning a closure and using the move keyword to transfer
ownership of captured variables.&lt;&#x2F;p&gt;
&lt;p&gt;So, while Rust and Go both support closures, Rust’s implementation is more
complex due to its ownership system. This complexity brings additional safety
guarantees and performance optimizations that aren’t present in Go’s simpler
model.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;concurrency&quot;&gt;Concurrency&lt;&#x2F;h2&gt;
&lt;p&gt;Rust provides OS-level threads through the standard library using threads.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(|| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello from a thread!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unlike Go’s lightweight goroutines, these are OS threads.&lt;&#x2F;p&gt;
&lt;p&gt;Rust uses channels for communication between threads, similar to Go:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::mpsc;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(tx, rx) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;mpsc::channel();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        tx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello from a thread!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Received: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, rx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;recv&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rust allows shared state concurrency, but with strict rules to prevent
data races:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::{Arc, Mutex};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::new(Mutex::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;_ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::clone(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;counter);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        handles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(handle);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; handles {
&lt;&#x2F;span&gt;&lt;span&gt;        handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It’s also worth noting that Rust uses OS-level threads, which are heavier than
Go’s goroutines. In addition, Rust doesn’t have a built-in scheduler like Go’s
runtime.&lt;&#x2F;p&gt;
&lt;p&gt;One more nuance is Rust’s ownership rules apply to concurrent code, ensuring
thread safety. In Go, you need to be careful about sharing mutable state
between goroutines.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;async-await&quot;&gt;Async&#x2F;Await&lt;&#x2F;h2&gt;
&lt;p&gt;Rust also has async&#x2F;await syntax for asynchronous programming:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;async_std::task;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;say_hello&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello, async world!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    task::block_on(async {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;say_hello&lt;&#x2F;span&gt;&lt;span&gt;().await;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is more similar to Go’s goroutines in terms of lightweight concurrency.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;no-built-in-select&quot;&gt;No Built-in Select&lt;&#x2F;h2&gt;
&lt;p&gt;Rust doesn’t have a built-in select statement like Go.
There are crates (&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;crossbeam&#x2F;&quot; title=&quot;Crossbeam Library&quot;&gt;like &lt;code&gt;crossbeam&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;) that provide similar
functionality.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;error-handling&quot;&gt;Error Handling&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Rust’s &lt;code&gt;Result&lt;&#x2F;code&gt; type is often used for error handling in concurrent code.&lt;&#x2F;li&gt;
&lt;li&gt;Go typically uses multiple return values for error handling.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;rust-s-approach-to-concurrency&quot;&gt;Rust’s Approach to Concurrency&lt;&#x2F;h2&gt;
&lt;p&gt;Rust’s approach to concurrency is designed to leverage its ownership and type
system to prevent common concurrency bugs at compile time. This can make
concurrent Rust code more verbose than Go, but it provides stronger
safety guarantees.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;atomic-reference-counter-arc&quot;&gt;Atomic Reference Counter (Arc)&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s copy one of the code snippets above for further discussion:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::{Arc, Mutex};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::new(Mutex::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;_ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::clone(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;counter);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        handles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(handle);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; handles {
&lt;&#x2F;span&gt;&lt;span&gt;        handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code&gt;counter&lt;&#x2F;code&gt; is an &lt;code&gt;Arc&amp;lt;Mutex&amp;lt;i32&amp;gt;&amp;gt;&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;arc&quot;&gt;&lt;code&gt;Arc&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Arc&lt;&#x2F;code&gt; (&lt;em&gt;Atomic Reference Counted&lt;&#x2F;em&gt;) allows multiple ownership across threads.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Mutex&lt;&#x2F;code&gt; (&lt;em&gt;mutual exclusion&lt;&#x2F;em&gt;) ensures only one thread can access the data at
a time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;counter-lock&quot;&gt;&lt;code&gt;counter.lock()&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;counter.lock()&lt;&#x2F;code&gt; attempts to acquire the lock on the &lt;code&gt;Mutex&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;It returns a &lt;code&gt;Result&amp;lt;MutexGuard&amp;lt;i32&amp;gt;, PoisonError&amp;lt;MutexGuard&amp;lt;i32&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;If successful, it gives you a &lt;code&gt;MutexGuard&amp;lt;i32&amp;gt;&lt;&#x2F;code&gt;, which acts like a smart
pointer to the protected data.&lt;&#x2F;li&gt;
&lt;li&gt;If the mutex is already locked, the thread will block until it can acquire
the lock.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;unwrap&quot;&gt;&lt;code&gt;unwrap()&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.unwrap()&lt;&#x2F;code&gt; extracts the &lt;code&gt;MutexGuard&amp;lt;i32&amp;gt;&lt;&#x2F;code&gt; from the &lt;code&gt;Result&lt;&#x2F;code&gt; if the lock was
successfully acquired.&lt;&#x2F;li&gt;
&lt;li&gt;If the lock failed (e.g., due to poison), it will panic.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So, &lt;code&gt;counter.lock().unwrap()&lt;&#x2F;code&gt;; does the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Tries to lock the mutex.&lt;&#x2F;li&gt;
&lt;li&gt;If successful, gives you access to the protected data.&lt;&#x2F;li&gt;
&lt;li&gt;If it fails (&lt;em&gt;which is rare and usually indicates a serious problem like a
panic in another thread while holding the lock&lt;&#x2F;em&gt;), it will panic.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s a more detailed example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::{Arc, Mutex};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::new(Mutex::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;_ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::clone(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;counter);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; MutexGuard automatically unlocks when it goes out of scope
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        handles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(handle);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; handles {
&lt;&#x2F;span&gt;&lt;span&gt;        handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Key points to remember:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lock()&lt;&#x2F;code&gt; is used to safely access the shared data.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;unwrap()&lt;&#x2F;code&gt; is used here for simplicity, but in production code, you might
want to handle potential errors more gracefully.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;MutexGuard&lt;&#x2F;code&gt; returned by &lt;code&gt;lock()&lt;&#x2F;code&gt; automatically releases the lock when it
goes out of scope.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This pattern ensures that only one thread can modify the counter at a time,
preventing data races and other concurrency issues.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-on-unwrap&quot;&gt;More on &lt;code&gt;unwrap()&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;unwrap()&lt;&#x2F;code&gt; is a method available on &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; types.&lt;&#x2F;p&gt;
&lt;p&gt;It’s used to extract the value inside a &lt;code&gt;Result&lt;&#x2F;code&gt; or &lt;code&gt;Option&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;Result&lt;&#x2F;code&gt; is &lt;code&gt;Ok(value)&lt;&#x2F;code&gt;, &lt;code&gt;unwrap()&lt;&#x2F;code&gt; returns the value.&lt;&#x2F;li&gt;
&lt;li&gt;If the &lt;code&gt;Result&lt;&#x2F;code&gt; is &lt;code&gt;Err(e)&lt;&#x2F;code&gt;, &lt;code&gt;unwrap()&lt;&#x2F;code&gt; will panic.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;Option&lt;&#x2F;code&gt; is &lt;code&gt;Some(value)&lt;&#x2F;code&gt;, &lt;code&gt;unwrap()&lt;&#x2F;code&gt; returns the value.&lt;&#x2F;li&gt;
&lt;li&gt;If the &lt;code&gt;Option&lt;&#x2F;code&gt; is &lt;code&gt;None&lt;&#x2F;code&gt;, &lt;code&gt;unwrap()&lt;&#x2F;code&gt; will panic.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;rust &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; With Result
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This is fine, value = 5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; error_result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;oops&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; let value = error_result.unwrap(); &#x2F;&#x2F; This would panic!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; With Option
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; option: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; option.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This is fine, value = 10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; none_option: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; let value = none_option.unwrap();  &#x2F;&#x2F; This would panic!
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;alternatives-to-unwrap&quot;&gt;Alternatives to &lt;code&gt;unwrap()&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expect()&lt;&#x2F;code&gt; works similar to &lt;code&gt;unwrap()&lt;&#x2F;code&gt;, but allows you to specify an error
message.&lt;&#x2F;li&gt;
&lt;li&gt;You can use &lt;code&gt;match&lt;&#x2F;code&gt; foor more fine-grained control over both success and
error cases.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;if let&lt;&#x2F;code&gt;: For concise handling when you only care about the success case.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;?&lt;&#x2F;code&gt; operator: For propagating errors in functions that return &lt;code&gt;Result&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example of more robust error handling:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;divide&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Division by zero&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; b)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;divide&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(result) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, result),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Or using if let
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(result) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;divide&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, result);
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Division failed&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In summary, while &lt;code&gt;unwrap()&lt;&#x2F;code&gt; is a convenient way to quickly get to the value
in a &lt;code&gt;Result&lt;&#x2F;code&gt; or &lt;code&gt;Option&lt;&#x2F;code&gt;, it’s generally better to use more explicit error
handling in production code to avoid unexpected panics and provide better error
information.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mutexes&quot;&gt;Mutexes&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s revisit the example with &lt;code&gt;Mutex&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::{Arc, Mutex};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::new(Mutex::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;_ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::clone(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;counter);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; MutexGuard automatically unlocks when it goes out of scope
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        handles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(handle);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; handles {
&lt;&#x2F;span&gt;&lt;span&gt;        handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some key points in the above example to consider:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mutex-locking&quot;&gt;Mutex Locking&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;When you call &lt;code&gt;counter.lock()&lt;&#x2F;code&gt;, it returns a &lt;code&gt;MutexGuard&lt;&#x2F;code&gt; wrapped in a &lt;code&gt;Result&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;MutexGuard&lt;&#x2F;code&gt; is a smart pointer that provides exclusive access to the data
inside the &lt;code&gt;Mutex&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;While a &lt;code&gt;MutexGuard&lt;&#x2F;code&gt; exists, no other thread can acquire the lock on this
Mutex.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;exclusive-access&quot;&gt;Exclusive Access&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Once you’ve called &lt;code&gt;unwrap()&lt;&#x2F;code&gt; and have the &lt;code&gt;MutexGuard&lt;&#x2F;code&gt;, you have exclusive
access to the data.&lt;&#x2F;li&gt;
&lt;li&gt;Other threads trying to lock the same Mutex will block until your &lt;code&gt;MutexGuard&lt;&#x2F;code&gt;
is dropped.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;borrow-checking-1&quot;&gt;Borrow Checking&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;The borrow checker ensures that you use the &lt;code&gt;MutexGuard&lt;&#x2F;code&gt; correctly within your
thread.&lt;&#x2F;li&gt;
&lt;li&gt;It prevents you from keeping the lock longer than necessary or trying to
acquire it multiple times simultaneously in the same thread.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;lock-release&quot;&gt;Lock Release&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;MutexGuard&lt;&#x2F;code&gt; automatically releases the lock when it goes out of scope
(&lt;em&gt;i.e., at the end of the block or function where it was created&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;annotated-example&quot;&gt;Annotated Example&lt;&#x2F;h3&gt;
&lt;p&gt;Here’s an expanded example to illustrate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::{Arc, Mutex};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::new(Mutex::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;_ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::clone(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;counter);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; At this point, we have exclusive access to the data
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; The lock is released here when `num` goes out of scope
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        handles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(handle);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; handles {
&lt;&#x2F;span&gt;&lt;span&gt;        handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Final count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s review the key points:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;Mutex&lt;&#x2F;code&gt; ensures that only one thread can access the data at a time.&lt;&#x2F;li&gt;
&lt;li&gt;The borrow checker ensures that within a single thread, you’re using the
&lt;code&gt;MutexGuard&lt;&#x2F;code&gt; correctly.&lt;&#x2F;li&gt;
&lt;li&gt;The combination of Mutex and Rust’s ownership system provides thread-safe
access to shared mutable state.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-join-method&quot;&gt;The &lt;code&gt;join()&lt;&#x2F;code&gt; Method&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;join()&lt;&#x2F;code&gt; waits for the thread to finish and returns a &lt;code&gt;Result&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Its signature is: &lt;code&gt;fn join(self) -&amp;gt; Result&amp;lt;T, Box&amp;lt;dyn Any + Send + &#x27;static&amp;gt;&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The Result allows for handling of two scenarios:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The thread completed successfully (Ok variant)&lt;&#x2F;li&gt;
&lt;li&gt;The thread panicked (Err variant)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;modules-and-crates&quot;&gt;Modules and Crates&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Modules&lt;&#x2F;strong&gt; and &lt;strong&gt;crates&lt;&#x2F;strong&gt; are fundamental to organizing Rust code, especially
as projects grow larger.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;modules&quot;&gt;Modules&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Modules&lt;&#x2F;strong&gt; are used to organize code within a &lt;strong&gt;crate&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;They can be defined in a single file or in separate files.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;crates-1&quot;&gt;Crates&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;A crate is the smallest amount of code that the Rust compiler considers at a
time.&lt;&#x2F;li&gt;
&lt;li&gt;It can be a &lt;strong&gt;binary crate&lt;&#x2F;strong&gt; (&lt;em&gt;an executable&lt;&#x2F;em&gt;) or a &lt;strong&gt;library crate&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let’s create a simple project to demonstrate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo new my_project
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; my_project
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, let’s structure our project:&lt;&#x2F;p&gt;
&lt;p&gt;Here is the project file structure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;my_project&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;└── src&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── main.rs
&lt;&#x2F;span&gt;&lt;span&gt;├── lib.rs
&lt;&#x2F;span&gt;&lt;span&gt;└── models&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── mod.rs
&lt;&#x2F;span&gt;&lt;span&gt;├── user.rs
&lt;&#x2F;span&gt;&lt;span&gt;└── product.rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;defining-modules&quot;&gt;Defining Modules&lt;&#x2F;h3&gt;
&lt;p&gt;In &lt;code&gt;src&#x2F;lib.rs&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Declare the models module
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;models&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; You can also define modules inline
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;utils &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;helper_function&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;I&amp;#39;m a helper!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;src&#x2F;models&#x2F;mod.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Declare submodules
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;product&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;src&#x2F;models&#x2F;user.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        User { name, age }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;src&#x2F;models&#x2F;product.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Product &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;price&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;using-modules&quot;&gt;Using Modules&lt;&#x2F;h3&gt;
&lt;p&gt;In &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Import the library crate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;my_project::models::{user::User, product::Product};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;my_project::utils::helper_function;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;User::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Alice&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;User: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt; is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt; years old&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, user.name, user.age);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; product &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Product { name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Book&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(), price: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;29.99 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Product: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt; costs $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, product.name, product.price);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;helper_function&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;visibility&quot;&gt;Visibility&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Items in modules are private by default.&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;pub&lt;&#x2F;code&gt; keyword to make items public.&lt;&#x2F;li&gt;
&lt;li&gt;You can use &lt;code&gt;pub(crate)&lt;&#x2F;code&gt; to make items visible only within the current crate.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-use-keyword-1&quot;&gt;The &lt;code&gt;use&lt;&#x2F;code&gt; Keyword&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Brings items into scope.&lt;&#x2F;li&gt;
&lt;li&gt;Can be used with aliases: &lt;code&gt;use std::io::Result as IoResult;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-mod-keyword&quot;&gt;The &lt;code&gt;mod&lt;&#x2F;code&gt; Keyword&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Declares a module.&lt;&#x2F;li&gt;
&lt;li&gt;Can be used to create inline modules or to load module contents from another
file.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;crate-root&quot;&gt;Crate Root&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt; is the crate root of a binary crate.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;src&#x2F;lib.rs&lt;&#x2F;code&gt; is the crate root of a library crate.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So, &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt; and &lt;code&gt;src&#x2F;lib.rs&lt;&#x2F;code&gt; have special status in Rust projects.
Rust and Cargo automatically recognize these files without needing explicit
module declarations.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;key-points&quot;&gt;Key Points&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Use modules to organize related code together.&lt;&#x2F;li&gt;
&lt;li&gt;The module hierarchy doesn’t need to match your file system structure, but it
often does for clarity.&lt;&#x2F;li&gt;
&lt;li&gt;You can have both a binary and a library crate in the same project.&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;cargo build&lt;&#x2F;code&gt; to compile and &lt;code&gt;cargo run&lt;&#x2F;code&gt; to run your project.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;declaring-modules&quot;&gt;Declaring Modules&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;file-approach&quot;&gt;File Approach&lt;&#x2F;h4&gt;
&lt;p&gt;If you declare &lt;code&gt;pub mod models;&lt;&#x2F;code&gt;, for example, Rust will first look for a file
named &lt;code&gt;models.rs&lt;&#x2F;code&gt; in the same directory as the file where you declared the module.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;directory-approach&quot;&gt;Directory Approach&lt;&#x2F;h4&gt;
&lt;p&gt;If &lt;code&gt;models.rs&lt;&#x2F;code&gt; doesn’t exist, Rust will look for a directory named &lt;code&gt;models&lt;&#x2F;code&gt; with
a file named &lt;code&gt;mod.rs&lt;&#x2F;code&gt; inside it.&lt;&#x2F;p&gt;
&lt;p&gt;You don’t need both models.rs and a models&#x2F; directory; Rust will use one or the
other. If both exist, Rust will use &lt;code&gt;models.rs&lt;&#x2F;code&gt; and ignore the &lt;code&gt;models&#x2F;&lt;&#x2F;code&gt;
directory.&lt;&#x2F;p&gt;
&lt;p&gt;The choice between file and directory approach often depends on the size and
complexity of your module.&lt;&#x2F;p&gt;
&lt;p&gt;As your project grows, you can easily switch from the file approach to the
directory approach without changing how other parts of your code import the module.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nested-modules&quot;&gt;Nested Modules&lt;&#x2F;h3&gt;
&lt;p&gt;You can define modules inside other modules.&lt;&#x2F;p&gt;
&lt;p&gt;This creates a hierarchy that can help organize complex code structures.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You can either inline nested modules;&lt;&#x2F;li&gt;
&lt;li&gt;Or use separate files for nested modules.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Nested modules provide a way to create a logical hierarchy in your code, which
is especially useful for large projects. They allow you to group related
functionality together while maintaining clear boundaries between different
parts of your codebase.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;smart-pointers&quot;&gt;Smart Pointers&lt;&#x2F;h2&gt;
&lt;p&gt;Box&lt;T&gt;, Rc&lt;T&gt;, Arc&lt;T&gt; ? EditCertainly!&lt;&#x2F;p&gt;
&lt;p&gt;Smart pointers are an important concept in Rust, providing additional
functionality beyond regular references. Let’s dive into &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;, &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;,
and &lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;box-t&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is a smart pointer for heap allocation.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Stores data on the heap rather than the stack&lt;&#x2F;li&gt;
&lt;li&gt;Useful for recursively defined types or when you need a type of unknown size&lt;&#x2F;li&gt;
&lt;li&gt;Has single ownership semantics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, b);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Recursive type example
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;List &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        Cons(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;List&amp;gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        Nil,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;List::Cons(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;::new(List::Cons(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;::new(List::Nil))));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this code, &lt;code&gt;Cons&lt;&#x2F;code&gt; is a variant of the &lt;code&gt;List&lt;&#x2F;code&gt; enum that represents a node
in a recursively defined linked list.&lt;&#x2F;p&gt;
&lt;p&gt;The List enum is defined with two variants:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cons(i32, Box&amp;lt;List&amp;gt;)&lt;&#x2F;code&gt;: This variant represents a non-empty list node.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Nil&lt;&#x2F;code&gt;: This variant represents the end of the list.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the &lt;code&gt;Cons&lt;&#x2F;code&gt; variant:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The first element (&lt;code&gt;i32&lt;&#x2F;code&gt;) is the value stored in the current node.&lt;&#x2F;li&gt;
&lt;li&gt;The second element (&lt;code&gt;Box&amp;lt;List&amp;gt;&lt;&#x2F;code&gt;) is a boxed pointer to the next node in the list.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;code&gt;Box&lt;&#x2F;code&gt; is used here because Rust needs to know the size of all types at
compile time. Without &lt;code&gt;Box&lt;&#x2F;code&gt;, the &lt;code&gt;List&lt;&#x2F;code&gt; type would have an infinite size due to
its recursive nature. &lt;code&gt;Box&lt;&#x2F;code&gt; provides a fixed-size pointer to heap-allocated
data, solving this issue.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rc-t-reference-counted&quot;&gt;&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; (&lt;em&gt;Reference Counted&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; allows multiple ownership of the same data.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Keeps track of the number of references to a value.&lt;&#x2F;li&gt;
&lt;li&gt;Only for use in &lt;strong&gt;single-threaded&lt;&#x2F;strong&gt; scenarios&lt;&#x2F;li&gt;
&lt;li&gt;Values are &lt;strong&gt;immutable&lt;&#x2F;strong&gt; by default&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::rc::Rc;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rc::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rc::clone(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;a);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rc::clone(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;a);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Reference count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, Rc::strong_count(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;a)); 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: Reference count: 3
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, a, b, c);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;arc-t-atomically-reference-counted&quot;&gt;&lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; (&lt;em&gt;Atomically Reference Counted&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is similar to &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; but safe to use in &lt;strong&gt;concurrent&lt;&#x2F;strong&gt; situations.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Thread-safe version of &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Slightly more expensive than &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; due to the overhead of atomic operations&lt;&#x2F;li&gt;
&lt;li&gt;Commonly used in multithreaded programs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::Arc;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello, threads!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;_ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s_clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::clone(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;s);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, s_clone);
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        handles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(handle);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; handles {
&lt;&#x2F;span&gt;&lt;span&gt;        handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It’s important to note that &lt;code&gt;Arc::clone(&amp;amp;s)&lt;&#x2F;code&gt; doesn’t create a borrow, but a new
owned reference to the same data.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Each clone increases the reference count of the Arc.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;Arc&lt;&#x2F;code&gt; keeps track of how many clones exist.&lt;&#x2F;li&gt;
&lt;li&gt;The data is only dropped when the last &lt;code&gt;Arc&lt;&#x2F;code&gt; is dropped and the count reaches
zero.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Also, &lt;code&gt;Arc&lt;&#x2F;code&gt; allows the data to be safely shared between threads because it uses
atomic operations for its reference counting.&lt;&#x2F;p&gt;
&lt;p&gt;The actual data is kept alive as long as at least one &lt;code&gt;Arc&lt;&#x2F;code&gt; pointing to it exists.
When the last &lt;code&gt;Arc&lt;&#x2F;code&gt; is dropped, the data is automatically deallocated.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Arc&lt;&#x2F;code&gt; provides shared, &lt;strong&gt;immutable&lt;&#x2F;strong&gt; access to its contents.&lt;&#x2F;li&gt;
&lt;li&gt;If you need mutable access, you’d typically combine &lt;code&gt;Arc&lt;&#x2F;code&gt; with something like
&lt;code&gt;Mutex&lt;&#x2F;code&gt; or &lt;code&gt;RwLock&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let’s break down our example a bit more:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::Arc;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello, threads!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;_ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s_clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::clone(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;s);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, s_clone);
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        handles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(handle);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; handles {
&lt;&#x2F;span&gt;&lt;span&gt;        handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here is what’s happening:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Arc::new(String::from(&quot;Hello, threads!&quot;))&lt;&#x2F;code&gt; creates an &lt;code&gt;Arc&lt;&#x2F;code&gt; containing the
string.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Arc::clone(&amp;amp;s)&lt;&#x2F;code&gt; creates a new &lt;code&gt;Arc&lt;&#x2F;code&gt; pointing to the same data, incrementing
the reference count.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;thread::spawn(move || { ... })&lt;&#x2F;code&gt; &lt;strong&gt;moves&lt;&#x2F;strong&gt; the &lt;code&gt;s_clone&lt;&#x2F;code&gt; into the new thread,
giving that thread ownership of this &lt;code&gt;Arc&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Each thread can safely read the string because &lt;code&gt;Arc&lt;&#x2F;code&gt; provides thread-safe
shared access.&lt;&#x2F;li&gt;
&lt;li&gt;As each thread finishes, its &lt;code&gt;Arc&lt;&#x2F;code&gt; is dropped, decrementing the reference
count.&lt;&#x2F;li&gt;
&lt;li&gt;The original &lt;code&gt;Arc&lt;&#x2F;code&gt; in the main thread keeps the data alive until all threads
have finished.&lt;&#x2F;li&gt;
&lt;li&gt;When the main thread ends and the last &lt;code&gt;Arc&lt;&#x2F;code&gt; is dropped, the string is
deallocated.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Also note that we can’t move the original Arc into multiple threads: Each thread
needs its own Arc pointing to the shared data.&lt;&#x2F;p&gt;
&lt;p&gt;Other key points:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Arc&lt;&#x2F;code&gt; is about shared ownership, not borrowing.&lt;&#x2F;li&gt;
&lt;li&gt;It’s safe for concurrent use because its reference counting is atomic.&lt;&#x2F;li&gt;
&lt;li&gt;It keeps the data alive until all references are dropped.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Arc&lt;&#x2F;code&gt; itself only provides immutable access; for mutable access, you’d need
to combine it with synchronization primitives.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s how you can implement a shared, mutable counter using Arc and Mutex:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::{Arc, Mutex};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Create a shared, mutable counter
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::new(Mutex::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;_ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::clone(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;counter);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        handles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(handle);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; handles {
&lt;&#x2F;span&gt;&lt;span&gt;        handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Final count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;comparison-and-use-cases&quot;&gt;Comparison and Use Cases&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;box-t-1&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Use when you have a large amount of data you want to transfer ownership of
without copying:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;For recursive types&lt;&#x2F;li&gt;
&lt;li&gt;When you need a trait object&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;rc-t&quot;&gt;&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Use it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When you need multiple ownership in a single-threaded context&lt;&#x2F;li&gt;
&lt;li&gt;For implementing shared data structures like graphs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;arc-t&quot;&gt;&lt;code&gt;Arc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Use it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When you need multiple ownership in a multithreaded context&lt;&#x2F;li&gt;
&lt;li&gt;For sharing data between threads&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;refcell-t&quot;&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is often used with &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; to allow mutable borrowing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::cell::RefCell;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::rc::Rc;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rc::new(RefCell::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rc::clone(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;data);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rc::clone(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;data);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;borrow_mut&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;borrow_mut&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;data: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, data); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: data: RefCell { value: 12 }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Provides interior mutability&lt;&#x2F;li&gt;
&lt;li&gt;Enforces borrowing rules at runtime instead of compile time&lt;&#x2F;li&gt;
&lt;li&gt;Often used with &lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; to create mutable, shared data structures&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Smart pointers in Rust provide powerful tools for managing memory and ownership
in various scenarios, allowing you to build complex data structures and manage
shared state effectively.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll cover &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; in more detail in &lt;strong&gt;Interior Mutability&lt;&#x2F;strong&gt;
section that follows.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;atomic-types&quot;&gt;Atomic Types&lt;&#x2F;h3&gt;
&lt;p&gt;For simple counters, you might consider using atomic types, which can be more
efficient:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::atomic::{AtomicUsize, Ordering};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::Arc;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::new(AtomicUsize::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;_ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::clone(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;counter);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;fetch_add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, Ordering::SeqCst);
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        handles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(handle);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; handles {
&lt;&#x2F;span&gt;&lt;span&gt;        handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Final count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(Ordering::SeqCst));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach using &lt;code&gt;AtomicUsize&lt;&#x2F;code&gt; is often more efficient for simple operations
like counters, as it doesn’t require locking.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;interior-mutability&quot;&gt;Interior Mutability&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Interior Mutability&lt;&#x2F;strong&gt; is the ability to mutate data even when there are
immutable references to that data. It’s a way to bend Rust’s strict borrowing
rules in a controlled, safe manner.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cell-t&quot;&gt;&lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; provides interior mutability for types that implement &lt;code&gt;Copy&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This has no runtime cost, but limited to &lt;code&gt;Copy&lt;&#x2F;code&gt; types.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::cell::Cell;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Counter &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: Cell&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Counter &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        Counter { value: Cell::new(value) }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;increment&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Counter::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;increment&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;increment&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Count: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: Count: 2
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Works only with &lt;code&gt;Copy&lt;&#x2F;code&gt; types (&lt;em&gt;like &lt;code&gt;i32&lt;&#x2F;code&gt;, &lt;code&gt;bool&lt;&#x2F;code&gt;, etc.&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Provides &lt;code&gt;get()&lt;&#x2F;code&gt; and &lt;code&gt;set()&lt;&#x2F;code&gt; methods&lt;&#x2F;li&gt;
&lt;li&gt;No runtime borrow checking&lt;&#x2F;li&gt;
&lt;li&gt;Useful for simple, thread-local mutable state&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;refcell-t-1&quot;&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; provides interior mutability for any type.&lt;&#x2F;p&gt;
&lt;p&gt;It enforces borrowing rules at &lt;strong&gt;runtime&lt;&#x2F;strong&gt; instead of compile-time.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::cell::RefCell;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Logger &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;logs&lt;&#x2F;span&gt;&lt;span&gt;: RefCell&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Logger &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        Logger { logs: RefCell::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new()) }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;add_log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.logs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;borrow_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(message.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;logs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.logs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; logger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Logger::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;add_log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;First log&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;add_log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Second log&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Logs: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;logs&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Works with any type &lt;code&gt;T&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Provides &lt;code&gt;borrow()&lt;&#x2F;code&gt; and &lt;code&gt;borrow_mut()&lt;&#x2F;code&gt; methods&lt;&#x2F;li&gt;
&lt;li&gt;Enforces borrowing rules at &lt;strong&gt;runtime&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Panics if borrowing rules are violated&lt;&#x2F;li&gt;
&lt;li&gt;Useful for more complex scenarios where compile-time borrowing is
too restrictive&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;when-to-use-cell-t-and-refcell-t&quot;&gt;When to Use &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; for simple types that implement &lt;code&gt;Copy&lt;&#x2F;code&gt; when you need interior
mutability.&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; when you need interior mutability for &lt;em&gt;non-Copy&lt;&#x2F;em&gt; types or
when you need more complex borrowing patterns.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;safety-and-performance-or-cell-t-and-refcell-t&quot;&gt;Safety and Performance or &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; has no runtime cost but is limited to &lt;code&gt;Copy&lt;&#x2F;code&gt; types.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; has a small runtime cost but can be used with any type.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; can panic if borrowing rules are violated at runtime.&lt;&#x2F;li&gt;
&lt;li&gt;Both are &lt;strong&gt;not thread-safe&lt;&#x2F;strong&gt;. For thread-safe versions, use &lt;code&gt;Mutex&lt;&#x2F;code&gt; or
&lt;code&gt;RwLock&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;common-use-cases-for-interior-mutability&quot;&gt;Common Use Cases for Interior Mutability&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Implementing self-referential structures&lt;&#x2F;li&gt;
&lt;li&gt;Modifying data in callbacks&lt;&#x2F;li&gt;
&lt;li&gt;Implementing caches or memoization&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example combining &lt;code&gt;RefCell&lt;&#x2F;code&gt; with &lt;code&gt;Rc&lt;&#x2F;code&gt; for a shared, mutable data
structure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::cell::RefCell;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::rc::Rc;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SharedData &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: RefCell&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rc::new(SharedData { value: RefCell::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data_clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rc::clone(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;data);
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Modify the value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;data.value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;borrow_mut&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Read the value from the clone
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;data_clone.value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span&gt;()); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: Value: 11
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This pattern allows for shared mutable state, but be cautious as it can lead to
runtime panics if not used correctly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;macros&quot;&gt;Macros&lt;&#x2F;h2&gt;
&lt;p&gt;Macros are a powerful feature in Rust that allow you to write code that writes
other code, which is known as &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Metaprogramming&quot; title=&quot;Metaprogramming&quot;&gt;metaprogramming&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There are two main types of macros in Rust:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Declarative Macros (macro_rules!)&lt;&#x2F;li&gt;
&lt;li&gt;Procedural Macros&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let’s start with Declarative Macros:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;declarative-macros-macro-rules&quot;&gt;Declarative Macros (macro_rules!)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;These are also known as “&lt;em&gt;macro by example&lt;&#x2F;em&gt;” or “&lt;em&gt;macro_rules macros&lt;&#x2F;em&gt;”&lt;&#x2F;li&gt;
&lt;li&gt;They are Defined using the &lt;code&gt;macro_rules!&lt;&#x2F;code&gt; syntax&lt;&#x2F;li&gt;
&lt;li&gt;They Allow you to write something similar to a match expression&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;macro_rules! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;say_hello &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$name&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$name&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;say_hello!&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: Hello!
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;say_hello!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Rust&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: Hello, Rust!
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Declarative macros use pattern matching to define different behaviors&lt;&#x2F;li&gt;
&lt;li&gt;They are expanded before the compiler interprets the meaning of the code&lt;&#x2F;li&gt;
&lt;li&gt;They are useful for reducing repetitive code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now, let’s look at Procedural Macros:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;procedural-macros&quot;&gt;Procedural Macros&lt;&#x2F;h3&gt;
&lt;p&gt;These are more powerful and flexible than declarative macros&lt;&#x2F;p&gt;
&lt;p&gt;They come in three flavors:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Function-like macros&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Derive macros&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Attribute macros&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;They operate on the [abstract syntax tree (&lt;em&gt;AST&lt;&#x2F;em&gt;)] of Rust code&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is an example of a simple function-like procedural macro:&lt;&#x2F;p&gt;
&lt;p&gt;First, in a separate crate (typically with a name like &lt;code&gt;my_macro&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;proc_macro::TokenStream;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;quote::quote;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; syn;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;proc_macro&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;make_answer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_item&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; answer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; expanded &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;quote! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The answer is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;answer);
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    expanded.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, in your main crate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;my_macro::make_answer;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make_answer!&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will print: &lt;code&gt;&quot;The answer is: 42&quot;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here are some important points of procedural macros:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;They are more complex but more powerful than declarative macros&lt;&#x2F;li&gt;
&lt;li&gt;They require a separate crate to define&lt;&#x2F;li&gt;
&lt;li&gt;They can generate arbitrary Rust code&lt;&#x2F;li&gt;
&lt;li&gt;The are commonly used for deriving traits, generating boilerplate code, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;differences-between-macros-and-functions&quot;&gt;Differences between Macros and Functions&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Macros are expanded at compile time, functions are called at runtime&lt;&#x2F;li&gt;
&lt;li&gt;Macros can take a variable number of arguments, functions have a fixed number&lt;&#x2F;li&gt;
&lt;li&gt;Macros can generate repetitive code more easily&lt;&#x2F;li&gt;
&lt;li&gt;Macros are more complex and can be harder to debug&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;common-use-cases-for-macros&quot;&gt;Common Use Cases for Macros:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Creating domain-specific languages (&lt;em&gt;DSLs&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Reducing boilerplate code&lt;&#x2F;li&gt;
&lt;li&gt;Implementing traits automatically (&lt;em&gt;with derive macros&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Creating test frameworks or assertion macros&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example of a more complex declarative macro:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;macro_rules! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;vec_of_strings &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$x&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;),&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; temp_vec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;               temp_vec.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$x&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;            )&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span&gt;            temp_vec
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec_of_strings!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, v);  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: [&amp;quot;1&amp;quot;, &amp;quot;hello&amp;quot;, &amp;quot;3.14&amp;quot;, &amp;quot;true&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This macro creates a vector of strings from a variety of input types.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;unsafe-rust&quot;&gt;Unsafe Rust&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Unsafe Rust&lt;&#x2F;strong&gt; is a way to tell the Rust compiler “&lt;em&gt;I know what I’m doing&lt;&#x2F;em&gt;”
for operations it can’t verify as safe. It allows you to perform operations
that might violate Rust’s safety guarantees.&lt;&#x2F;p&gt;
&lt;p&gt;Unsafe Rust is typically used to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Interact with hardware or other languages (like C)&lt;&#x2F;li&gt;
&lt;li&gt;Implement fundamental abstractions that safe Rust builds upon&lt;&#x2F;li&gt;
&lt;li&gt;Optimize performance-critical code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here are certain things that you can do with unsafe Rust:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Dereference raw pointers&lt;&#x2F;li&gt;
&lt;li&gt;Call unsafe functions (&lt;em&gt;including C functions&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Access or modify mutable static variables&lt;&#x2F;li&gt;
&lt;li&gt;Implement unsafe traits&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Since you are bypassing Rust’s safety checks, you have
certain responsibilities when using unsafe code:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure memory safety&lt;&#x2F;li&gt;
&lt;li&gt;Prevent data races&lt;&#x2F;li&gt;
&lt;li&gt;Avoid undefined behavior&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example of unsafe Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; r1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;*const i32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; r2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;*mut i32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;r1 is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;r1);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;r2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;r2 is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;r2);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We create raw pointers (&lt;code&gt;*const i32&lt;&#x2F;code&gt; and &lt;code&gt;*mut i32&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;We dereference these pointers in an unsafe block&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Common use cases for unsafe:&lt;&#x2F;p&gt;
&lt;p&gt;Here are things to keep in ming when using unsafe Rust:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Minimize the amount of unsafe code&lt;&#x2F;li&gt;
&lt;li&gt;Encapsulate unsafe code in safe abstractions&lt;&#x2F;li&gt;
&lt;li&gt;Document your safety assumptions and invariants&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;debug_assert! &lt;&#x2F;code&gt;to check invariants in debug builds&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It’s important to note that “unsafe” doesn’t mean the code is necessarily
dangerous; it means the compiler can’t verify its safety. Well-written unsafe
code can be just as safe as safe Rust, but it requires more care and expertise
to get right.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;debug-assert-and-assert&quot;&gt;&lt;code&gt;debug_assert!&lt;&#x2F;code&gt; and &lt;code&gt;assert!&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;assert!&lt;&#x2F;code&gt; is a macro used for debugging and testing purposes. It allows you to
check if a boolean condition is &lt;code&gt;true&lt;&#x2F;code&gt; and panics if the condition is &lt;code&gt;false&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;debug_assert!&lt;&#x2F;code&gt; is a conditional compilation macro for assertions
Similar to assert!, but only enabled in debug builds.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In debug builds: Acts like &lt;code&gt;assert!&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;In release builds: The code is completely removed, incurring zero runtime cost&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;rustCopyfn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;divide&lt;&#x2F;span&gt;&lt;span&gt;(a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, b: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;debug_assert!&lt;&#x2F;span&gt;&lt;span&gt;(b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Divisor must not be zero!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; b
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;10 &#x2F; 2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;divide&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Uncomment the next line to see the debug assertion in action
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; println!(&amp;quot;10 &#x2F; 0 = {}&amp;quot;, divide(10, 0));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;build-profiles&quot;&gt;Build Profiles&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Debug build (default): &lt;code&gt;cargo build&lt;&#x2F;code&gt; or &lt;code&gt;cargo run&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Release build: &lt;code&gt;cargo build --release&lt;&#x2F;code&gt; or &lt;code&gt;cargo run --release&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;assert-in-test&quot;&gt;&lt;code&gt;assert!&lt;&#x2F;code&gt; in Test&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;assert!&lt;&#x2F;code&gt; is commonly used in tests to check conditions and ensure correctness.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;tests &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use super&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;test_calculate_average&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; nums &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3.0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;calculate_average&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;nums), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;should_panic&lt;&#x2F;span&gt;&lt;span&gt;(expected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Cannot calculate average of an empty slice&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;test_calculate_average_empty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; empty: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;calculate_average&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;empty);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In tests, &lt;code&gt;assert!&lt;&#x2F;code&gt; and its variants are used extensively.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;assert-in-production-code&quot;&gt;&lt;code&gt;assert!&lt;&#x2F;code&gt; In Production Code&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;when-to-use-assert-in-production-code&quot;&gt;When to Use &lt;code&gt;assert!&lt;&#x2F;code&gt; in Production Code&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Checking invariants that, if violated, indicate a bug in the program.&lt;&#x2F;li&gt;
&lt;li&gt;Verifying preconditions in public APIs where the conditions are clearly
documented.&lt;&#x2F;li&gt;
&lt;li&gt;Ensuring internal consistency in data structures.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;when-not-to-use-assert-in-production-code&quot;&gt;When &lt;strong&gt;Not&lt;&#x2F;strong&gt; to Use &lt;code&gt;assert!&lt;&#x2F;code&gt; in Production Code&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;For handling expected error conditions (&lt;em&gt;use &lt;code&gt;Result&lt;&#x2F;code&gt; instead&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;For checking user input (&lt;em&gt;validate and return errors instead&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;In performance-critical paths where the check is redundant.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;associated-types&quot;&gt;Associated Types&lt;&#x2F;h2&gt;
&lt;p&gt;Associated types are a way to associate a &lt;strong&gt;type&lt;&#x2F;strong&gt; with a &lt;strong&gt;trait&lt;&#x2F;strong&gt;. They’re
used when a trait needs to use a type, but the specific type isn’t known until
the trait is implemented.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Container &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Item&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;VecContainer&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; Container &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;VecContainer&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; T;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(item);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can use associated types:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When you want to associate types with traits without using generics&lt;&#x2F;li&gt;
&lt;li&gt;To improve code readability and reduce the number of generic parameters&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;default-type-parameters&quot;&gt;Default Type Parameters&lt;&#x2F;h2&gt;
&lt;p&gt;Default type parameters allow you to specify a default type for a generic
type parameter. This can be useful for reducing boilerplate when a specific type
is commonly used.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::ops::Add;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, PartialEq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Point&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: T,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: T,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Add&amp;lt;Output = T&amp;gt;&amp;gt; Add &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Point&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;other&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Output {
&lt;&#x2F;span&gt;&lt;span&gt;        Point {
&lt;&#x2F;span&gt;&lt;span&gt;            x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; other.x,
&lt;&#x2F;span&gt;&lt;span&gt;            y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; other.y,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Point { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2.0 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Point { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3.0&lt;&#x2F;span&gt;&lt;span&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4.0 &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; p2;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(p3, Point { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4.0&lt;&#x2F;span&gt;&lt;span&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;6.0 &lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You’d use default types parameters:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;To provide a commonly used default type&lt;&#x2F;li&gt;
&lt;li&gt;To maintain backwards compatibility when adding new type parameters
to existing code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fully-qualified-syntax&quot;&gt;Fully Qualified Syntax&lt;&#x2F;h2&gt;
&lt;p&gt;This syntax allows you to disambiguate between multiple implementations of a
trait for a type, or to call a specific trait method.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Animal &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;make_sound&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Cat &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;make_sound&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;MyCat&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Animal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;MyCat &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;make_sound&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Animal sound&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;MyCat &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;make_sound&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Meow&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; MyCat;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; cat.make_sound(); &#x2F;&#x2F; Ambiguous, won&amp;#39;t compile
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Fully qualified syntax
&lt;&#x2F;span&gt;&lt;span&gt;    Animal::make_sound(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;cat); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: Animal sound
&lt;&#x2F;span&gt;&lt;span&gt;    Cat::make_sound(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;cat);    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: Meow
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Alternative syntax
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;MyCat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span&gt; Animal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;::make_sound(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;cat); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: Animal sound
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;MyCat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span&gt; Cat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;::make_sound(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;cat);    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: Meow
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can use fully-qualified syntax:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;To disambiguate between multiple trait implementations&lt;&#x2F;li&gt;
&lt;li&gt;To explicitly call a trait method when there might be ambiguity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These features contribute to Rust’s powerful type system:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;newtype-pattern&quot;&gt;Newtype Pattern&lt;&#x2F;h2&gt;
&lt;p&gt;The newtype pattern involves creating a new type, usually to wrap an existing
type. This is done using a tuple struct with a single field.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Meters&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Kilometers&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Meters &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;to_kilometers&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Kilometers {
&lt;&#x2F;span&gt;&lt;span&gt;        Kilometers(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1000.0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Meters(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5000.0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Distance in km: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, distance.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;to_kilometers&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some use cases for ths pattern:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Type safety: Prevent mixing up different units or concepts&lt;&#x2F;li&gt;
&lt;li&gt;Implementing traits for types you don’t own&lt;&#x2F;li&gt;
&lt;li&gt;Adding methods to existing types without modifying them&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;type-aliases&quot;&gt;Type Aliases&lt;&#x2F;h2&gt;
&lt;p&gt;Type aliases create a new name for an existing type. They don’t create a new
type; they’re just a &lt;strong&gt;shorthand&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Kilometers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;distance_to_mars&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;speed&lt;&#x2F;span&gt;&lt;span&gt;: Kilometers) -&amp;gt; Kilometers {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;225.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1_000_000.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; speed
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; speed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;100.0&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; km&#x2F;h
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Time to Mars: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt; hours&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;distance_to_mars&lt;&#x2F;span&gt;&lt;span&gt;(speed));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some use cases for type aliases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Simplifying complex type signatures&lt;&#x2F;li&gt;
&lt;li&gt;Creating domain-specific vocabularies&lt;&#x2F;li&gt;
&lt;li&gt;Improving code readability&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;never-type&quot;&gt;Never Type (&lt;code&gt;!&lt;&#x2F;code&gt;)&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;strong&gt;never type&lt;&#x2F;strong&gt;, denoted by &lt;code&gt;!&lt;&#x2F;code&gt;, represents a type that can never be instantiated.
It’s used for functions that never return.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::process::exit(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;some_condition&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;break &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;another_condition&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;();  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This function never returns
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;x is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, x);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;some_condition&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;another_condition&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are when you might use the &lt;em&gt;never type&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Indicating that a function never returns (like &lt;code&gt;panic!&lt;&#x2F;code&gt; or &lt;code&gt;exit&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;In match expressions where some arms diverge&lt;&#x2F;li&gt;
&lt;li&gt;Representing the “&lt;em&gt;bottom&lt;&#x2F;em&gt;” type in type theory&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let’s look at a more complex example combining these concepts:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::ops::Add;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Newtype
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Money&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Type alias
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; = &lt;&#x2F;span&gt;&lt;span&gt;std::result::Result&amp;lt;T, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Function that returns the never type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;transaction_error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Transaction Error: {}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, msg);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Add &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Money &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Money&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;other&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Output {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;checked_add&lt;&#x2F;span&gt;&lt;span&gt;(other.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;ok_or_else&lt;&#x2F;span&gt;&lt;span&gt;(|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Overflow occurred&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(Money(sum))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;process_transaction&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: Money, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: Money) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Money&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(sum) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(sum),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;transaction_error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;e),  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This arm has type `!`
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; wallet1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Money(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; wallet2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Money(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;process_transaction&lt;&#x2F;span&gt;&lt;span&gt;(wallet1, wallet2)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Total money: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, total.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this example above:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Money&lt;&#x2F;code&gt; is a newtype, providing type safety for monetary values.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Result&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is a type alias, simplifying error handling syntax.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;transaction_error&lt;&#x2F;code&gt; returns &lt;code&gt;!&lt;&#x2F;code&gt;, indicating it never returns normally.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These features contribute to Rust’s type system by:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Enhancing type safety and encapsulation (&lt;em&gt;newtype&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Improving code readability and maintenance (&lt;em&gt;type aliases&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Expressing control flow and type-level constraints (&lt;em&gt;never type&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let see &lt;em&gt;never type&lt;&#x2F;em&gt; in some more action:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; A function that returns !
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;forever&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;I&amp;#39;m running forever!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ! in a match expression
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;check_number&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;&amp;#39;static str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; x {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;zero&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;one&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Unknown number&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This arm has type !
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Using ! for diverging functions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::process::exit(code)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;u32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;break &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, x);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This works because ! can coerce to u32
&lt;&#x2F;span&gt;&lt;span&gt;                           &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Never type can coerce to any type
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This would run forever:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; forever();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Number: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;check_number&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;));  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: Number: one
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This would panic:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; check_number(2);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This would exit the program:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; exit(0);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some key points:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!&lt;&#x2F;code&gt; is used for functions or expressions that don’t return normally.&lt;&#x2F;li&gt;
&lt;li&gt;It doesn’t cause panics, but is often used in contexts where panics occur.&lt;&#x2F;li&gt;
&lt;li&gt;It can be used to satisfy the type system in places where a value is needed
but never actually provided.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;never-type-versus-null&quot;&gt;Never Type versus Null&lt;&#x2F;h2&gt;
&lt;p&gt;The “never type” is more akin to concepts like “bottom” in type theory or &lt;code&gt;void&lt;&#x2F;code&gt;
in some other languages. It is not &lt;code&gt;null&lt;&#x2F;code&gt;, but more like “indeterminate”.&lt;&#x2F;p&gt;
&lt;p&gt;“never type” is a way to represent computations that don’t complete normally,
whether due to infinite loops, program termination, or panics.&lt;&#x2F;p&gt;
&lt;p&gt;In Rust, which doesn’t have &lt;code&gt;Null&lt;&#x2F;code&gt;, the closest equivalent to Null would be
&lt;code&gt;Option&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; with a &lt;code&gt;None&lt;&#x2F;code&gt; value. This is very different from &lt;code&gt;!&lt;&#x2F;code&gt;, as &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;
is about representing the &lt;strong&gt;presence or absence of a value&lt;&#x2F;strong&gt;, while &lt;code&gt;!&lt;&#x2F;code&gt; is
about representing the &lt;strong&gt;absence of a return&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;function-pointers&quot;&gt;Function Pointers&lt;&#x2F;h2&gt;
&lt;p&gt;Function pointers allow you to pass functions as arguments or store them in
structs. They have a concrete size known at compile time.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s the syntax: &lt;code&gt;fn(params) -&amp;gt; return_type&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example that uses function pointers:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;subtract&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; b
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;do_operation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x, y)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Add: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;do_operation&lt;&#x2F;span&gt;&lt;span&gt;(add, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: Add: 8
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Subtract: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;do_operation&lt;&#x2F;span&gt;&lt;span&gt;(subtract, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)); 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: Subtract: 2
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are certain use cases for function pointers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Callbacks&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Strategy_pattern&quot; title=&quot;Strategy Pattern&quot;&gt;Strategy pattern&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Pluggable behavior in algorithms&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;returning-closures&quot;&gt;Returning Closures&lt;&#x2F;h2&gt;
&lt;p&gt;Closures are anonymous functions that can capture their environment. Returning
closures is a bit trickier because their size isn’t known at compile time, so
we need to use &lt;strong&gt;dynamic dispatch&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s the syntax: &lt;code&gt;Box&amp;lt;dyn Fn(params) -&amp;gt; return_type&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example that returns closures:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;create_adder&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dyn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Fn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; y)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; add_5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;create_adder&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;5 + 10 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;add_5&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;));  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: 5 + 10 = 15
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some use cases for returning closures:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Factory functions&lt;&#x2F;li&gt;
&lt;li&gt;Customizable behaviors&lt;&#x2F;li&gt;
&lt;li&gt;Partial function application&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now let’s look at a more complex example combining several concepts:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;math_operation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;op&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dyn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Fn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; op {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;add&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;::new(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;| x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; y),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;subtract&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;::new(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;| x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; y),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;multiply&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;::new(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;| x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; y),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;divide&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;::new(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;| x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; y),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;::new(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, _| x),  
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ^ Identity function for unknown operations
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;apply_operations&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;operations&lt;&#x2F;span&gt;&lt;span&gt;: 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    operations.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;op&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;op&lt;&#x2F;span&gt;&lt;span&gt;(x, y)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; add &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;math_operation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;add&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;10 + 5 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;));  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: 10 + 5 = 15
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; operations &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;math_operation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;add&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;math_operation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;multiply&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; results &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;apply_operations&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;operations, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Results: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, results);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Prints: Results: [15, 50]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some insights and considerations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Function pointers (fn) have a known size and can be used in FFI
(&lt;em&gt;Foreign Function Interface&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Closures returned as &lt;code&gt;Box&amp;lt;dyn Fn(...)&amp;gt;&lt;&#x2F;code&gt; can capture their environment but
require dynamic dispatch.&lt;&#x2F;li&gt;
&lt;li&gt;Function pointers can be coerced to closures, but not vice versa.&lt;&#x2F;li&gt;
&lt;li&gt;Returning closures often requires the use of &lt;code&gt;Box&lt;&#x2F;code&gt; and dynamic dispatch due
to their unknown size.&lt;&#x2F;li&gt;
&lt;li&gt;Function pointers can’t capture environment.&lt;&#x2F;li&gt;
&lt;li&gt;Returned closures have a runtime cost due to dynamic dispatch.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; lifetime is often required for returned closures to ensure
they live long enough.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These features allow for powerful functional programming patterns in Rust,
enabling you to write more flexible and reusable code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;async-await-1&quot;&gt;Async&#x2F;Await&lt;&#x2F;h2&gt;
&lt;p&gt;Here is how you can use async&#x2F;await in Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Tokio is a popular asynchronous runtime for Rust:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; tokio;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;fetch_data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Simulating an async operation
&lt;&#x2F;span&gt;&lt;span&gt;    tokio::time::sleep(std::time::Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Data from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, url))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;fetch_data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;example.com&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Fetched: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, result);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here is an example of concurrent operations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; tokio;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures::future::join_all;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;fetch_multiple&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urls&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dyn std::error::Error&amp;gt;&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fetches &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; urls.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;fetch_data&lt;&#x2F;span&gt;&lt;span&gt;(url));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;join_all&lt;&#x2F;span&gt;&lt;span&gt;(fetches).await
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; urls &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;example.com&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;rust-lang.org&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; results &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;fetch_multiple&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;urls).await;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; results {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; result {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(data) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Fetched: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, data),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(e) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some key points about async&#x2F;await:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Async functions return a &lt;code&gt;Future&lt;&#x2F;code&gt;, which must be polled to make progress.&lt;&#x2F;li&gt;
&lt;li&gt;The runtime is responsible for polling &lt;code&gt;Future&lt;&#x2F;code&gt;s.&lt;&#x2F;li&gt;
&lt;li&gt;You need to choose and set up an async runtime (&lt;em&gt;&lt;code&gt;tokio&lt;&#x2F;code&gt;, &lt;code&gt;async-std&lt;&#x2F;code&gt;, etc.&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;#[tokio::main]&lt;&#x2F;code&gt; attribute sets up the &lt;code&gt;tokio&lt;&#x2F;code&gt; runtime for the &lt;code&gt;main&lt;&#x2F;code&gt;
function.&lt;&#x2F;li&gt;
&lt;li&gt;Async functions typically return &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;&#x2F;code&gt; for error handling.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;?&lt;&#x2F;code&gt; operator is often used for propagating errors in async contexts.&lt;&#x2F;li&gt;
&lt;li&gt;Rust’s async&#x2F;await is designed to have minimal runtime overhead.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Future&lt;&#x2F;code&gt;s in Rust often need to be pinned in memory for safety reasons.&lt;&#x2F;li&gt;
&lt;li&gt;For async iterators, Rust has the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait, similar to JavaScript’s
async iterators.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tokio-main&quot;&gt;&lt;code&gt;#[tokio::main]&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;#[tokio::main]&lt;&#x2F;code&gt; is an attribute macro that sets up the &lt;code&gt;tokio&lt;&#x2F;code&gt; runtime for
the &lt;code&gt;main&lt;&#x2F;code&gt; function. It’s a convenient way to run asynchronous code in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;Attribute macros allow you to create custom attributes that can be applied to
items like functions, structs, or modules. They can generate, modify, or
replace code.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;#[tokio::main]&lt;&#x2F;code&gt; is just one example of this broader concept.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some other common uses:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Test Framework&lt;&#x2F;strong&gt;: &lt;code&gt;#[test]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Derive Macros&lt;&#x2F;strong&gt;: &lt;code&gt;#[derive(Debug, Clone)]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Web Frameworks&lt;&#x2F;strong&gt;: &lt;code&gt;#[get(&quot;&#x2F;&quot;)]&lt;&#x2F;code&gt; in &lt;a href=&quot;https:&#x2F;&#x2F;rocket.rs&#x2F;&quot; title=&quot;Rocket Web Framework&quot;&gt;Rocket&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;actix.rs&#x2F;&quot; title=&quot;Actix Web Framework&quot;&gt;Actix&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Async Runtimes&lt;&#x2F;strong&gt;: &lt;code&gt;#[tokio::main]&lt;&#x2F;code&gt;, &lt;code&gt;#[async_std::main]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Serialization&lt;&#x2F;strong&gt;: &lt;code&gt;#[serde(rename = &quot;my_field&quot;)]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;web-assembly&quot;&gt;Web Assembly&lt;&#x2F;h2&gt;
&lt;p&gt;Compiling Rust to &lt;a href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot; title=&quot;WebAssembly&quot;&gt;WebAssembly (Wasm)&lt;&#x2F;a&gt; is indeed an exciting topic.
Rust is one of the best-supported languages for WebAssembly compilation, thanks
to its low-level control and lack of runtime.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see how we can compile Rust into Web Assembly:&lt;&#x2F;p&gt;
&lt;p&gt;First add the WebAssembly target:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rustup target add wasm32-unknown-unknown
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then install &lt;code&gt;wasm-pack&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo install wasm-pack
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then create a new library project:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo new --lib hello-wasm
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; hello-wasm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, modify &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;lib&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;crate-type &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;cdylib&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;wasm-bindgen &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;0.2&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Write your rust code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;wasm_bindgen::prelude::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;wasm_bindgen&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, name)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Build the WebAssembly module:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;wasm-pack build --target web
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then use in HTML&#x2F;JavaScript:&lt;&#x2F;p&gt;
&lt;p&gt;Create an &lt;code&gt;index.html&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;charset=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;Rust WebAssembly Demo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;type=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;module&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;init, { greet } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;.&#x2F;pkg&#x2F;hello_wasm.js&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;async function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;init();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;greet(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;WebAssembly&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.body.textContent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;result;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;        run();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Use any kind of local statis server to serve the files.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;python3 -m http.server
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here’s what happens in this process:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wasm-bindgen&lt;&#x2F;code&gt; is crucial for creating JavaScript bindings for your Rust functions.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;#[wasm_bindgen]&lt;&#x2F;code&gt; attribute exposes Rust functions to JavaScript.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;wasm-pack&lt;&#x2F;code&gt; handles much of the complexity of building and packaging Wasm modules.&lt;&#x2F;li&gt;
&lt;li&gt;The resulting &lt;code&gt;.wasm&lt;&#x2F;code&gt; file is not used directly; instead, use the generated
JavaScript wrapper.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s a more complex example using web APIs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;wasm_bindgen::prelude::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;web_sys::{Document, HtmlElement};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;wasm_bindgen&lt;&#x2F;span&gt;&lt;span&gt;(start)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), JsValue&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; window &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;web_sys::window().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;no global `window` exists&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; document &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; window.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;should have a document on window&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; body &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;document should have a body&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; document.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;create_element&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;p&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    val.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;set_inner_html&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello from Rust!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    body.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;append_child&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;val)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This example demonstrates how to manipulate the &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Document_Object_Model&quot; title=&quot;Document Object Model&quot;&gt;DOM&lt;&#x2F;a&gt; using Rust compiled to
WebAssembly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-use-rust-for-webassembly&quot;&gt;Why Use Rust for WebAssembly&lt;&#x2F;h2&gt;
&lt;p&gt;Here are certain areas where using Rust for WebAssembly shines:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CPU-intensive calculations (&lt;em&gt;e.g., audio&#x2F;video processing, complex simulations&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Porting existing C&#x2F;C++&#x2F;Rust libraries to the web&lt;&#x2F;li&gt;
&lt;li&gt;Games and graphics-intensive applications&lt;&#x2F;li&gt;
&lt;li&gt;Cryptography and security-related computations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;WebAssembly is about bringing near-native performance to the web for
computationally intensive tasks. Rust’s safety guarantees and performance make it
an excellent choice for WebAssembly.&lt;&#x2F;p&gt;
&lt;p&gt;The real power of &lt;a href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot; title=&quot;WebAssembly&quot;&gt;Wasm&lt;&#x2F;a&gt; comes when you combine WebAssembly’s performance
with JavaScript’s flexibility.&lt;&#x2F;p&gt;
&lt;p&gt;You can use WebAssembly when:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You need high performance for complex computations&lt;&#x2F;li&gt;
&lt;li&gt;You’re working with large amounts of data&lt;&#x2F;li&gt;
&lt;li&gt;You want to port existing Rust libraries to the web&lt;&#x2F;li&gt;
&lt;li&gt;You’re developing performance-critical web applications
(&lt;em&gt;like games or design tools&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;wasm-javascript-wrapper&quot;&gt;Wasm JavaScript Wrapper&lt;&#x2F;h2&gt;
&lt;p&gt;In the generated code&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;.wasm&lt;&#x2F;code&gt; file contains the compiled WebAssembly module. It is a binary file.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;my_wasm_module.js&lt;&#x2F;code&gt; file is a JavaScript wrapper that provides a friendly
interface to the WebAssembly module.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s a conceptual view of how it works:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;[Your JavaScript Code] 
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;-&amp;gt; [JS Wrapper (.js)] 
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;lt;-&amp;gt; [WebAssembly Module (.wasm)]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The JavaScript wrapper is doing several important things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Loading&lt;&#x2F;strong&gt;: It fetches and instantiates the &lt;code&gt;.wasm&lt;&#x2F;code&gt; module.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Type Conversion&lt;&#x2F;strong&gt;: It handles converting between JavaScript types and
WebAssembly types.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Memory Management&lt;&#x2F;strong&gt;: For more complex data structures, it may handle
allocating and freeing memory in the WebAssembly linear memory.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Error Handling&lt;&#x2F;strong&gt;: It can provide more JavaScript-friendly error handling.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;embedded-programming-in-rust&quot;&gt;Embedded Programming In Rust&lt;&#x2F;h2&gt;
&lt;p&gt;Embedded Rust programming is an exciting field that allows you to use Rust’s
safety and performance features for microcontroller-based systems.&lt;&#x2F;p&gt;
&lt;p&gt;To program embedded Rust, first, you’ll need to install some additional tools:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rustup target add thumbv7em-none-eabihf  
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# ^ For ARM Cortex-M4F and Cortex-M7F
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo install cargo-embed cargo-binutils
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some key concepts that you need to be aware of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No Standard Library&lt;&#x2F;strong&gt;: Embedded Rust often uses &lt;code&gt;#![no_std]&lt;&#x2F;code&gt; attribute as
the full standard library isn’t available.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Hardware Abstraction Layers (&lt;em&gt;HAL&lt;&#x2F;em&gt;s)&lt;&#x2F;strong&gt;: Crates that provide a safe,
high-level interface to microcontroller peripherals.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Embedded HAL&lt;&#x2F;strong&gt;: A standardized API for common embedded functionality.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Runtime&lt;&#x2F;strong&gt;: Embedded Rust programs often provide their own runtime,
including interrupt vectors and initialization code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is an example:&lt;&#x2F;p&gt;
&lt;p&gt;Let’s create a simple LED blink program for an &lt;code&gt;STM32F3DISCOVERY&lt;&#x2F;code&gt; board
(&lt;em&gt;which uses an ARM Cortex-M4F&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;First, create a new project:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo new --bin led_blink
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; led_blink
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then update &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;package&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;led_blink&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;0.1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;edition &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2021&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;cortex-m &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;0.7&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;cortex-m-rt &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;0.7&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;panic-halt &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;0.2&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;stm32f3xx-hal &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;0.9&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;stm32f303xc&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;rt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;bin&lt;&#x2F;span&gt;&lt;span&gt;]]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;led_blink&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;test &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;bench &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Replace &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt; with the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;no_std&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;no_main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; panic_halt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;as _&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;cortex_m_rt::entry;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;stm32f3xx_hal::{pac, prelude::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;pac::Peripherals::take().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; rcc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; dp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RCC&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;constrain&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; gpioe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; dp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;GPIOE&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; rcc.ahb);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; led &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; gpioe
&lt;&#x2F;span&gt;&lt;span&gt;        .pe13
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;into_push_pull_output&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; gpioe.moder, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; gpioe.otyper);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        led.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;set_high&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        cortex_m::asm::delay(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8_000_000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        led.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;set_low&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        cortex_m::asm::delay(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;8_000_000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let’s build the project:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo build --release
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Build for release:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo embed --release
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are some important differences from standard Rust:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#![no_std]&lt;&#x2F;code&gt;: We can’t use the standard library.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;#![no_main]&lt;&#x2F;code&gt;: We define our own entry point with &lt;code&gt;#[entry]&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-&amp;gt; !&lt;&#x2F;code&gt;: The main function never returns (it’s an infinite loop).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Direct hardware manipulation&lt;&#x2F;strong&gt;: We’re directly controlling GPIO pins.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No dynamic memory allocation&lt;&#x2F;strong&gt;: Typically, we avoid using the heap in
embedded systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Embedded Rust supports debugging through &lt;strong&gt;GDB&lt;&#x2F;strong&gt; and &lt;strong&gt;OpenOCD&lt;&#x2F;strong&gt;. You can use
&lt;code&gt;cargo run&lt;&#x2F;code&gt; with the appropriate runner configuration to start a debug session.&lt;&#x2F;p&gt;
&lt;p&gt;For more complex applications, you might use an &lt;strong&gt;RTOS&lt;&#x2F;strong&gt; (&lt;em&gt;realtime operating
system&lt;&#x2F;em&gt;). The &lt;a href=&quot;https:&#x2F;&#x2F;rtic.rs&#x2F;&quot; title=&quot;Real-Time Interrupt-driven Concurrency&quot;&gt;&lt;strong&gt;RTIC&lt;&#x2F;strong&gt; (&lt;em&gt;Real-Time Interrupt-driven Concurrency&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;
framework is popular in the Rust embedded community.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some other common creates for embedded development:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;embedded-hal&#x2F;&quot; title=&quot;Embedded HAL&quot;&gt;embedded-hal&lt;&#x2F;a&gt;: Provides traits for common embedded functionalities.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;cortex-m&#x2F;&quot; title=&quot;Cortex-M&quot;&gt;cortex-m&lt;&#x2F;a&gt;: Low-level access to Cortex-M processors.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;cortex-m-rt&#x2F;&quot; title=&quot;Cortex-M RT&quot;&gt;cortex-m-rt&lt;&#x2F;a&gt;: Startup code and minimal runtime for Cortex-M processors.&lt;&#x2F;li&gt;
&lt;li&gt;Various HAL crates for specific microcontroller families (&lt;em&gt;like &lt;code&gt;stm32f3xx-hal&lt;&#x2F;code&gt;
in our example&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Embedded Rust combines the safety and expressiveness of Rust with the ability to
write low-level code for microcontrollers, making it an excellent choice for
developing reliable embedded systems.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rustup&quot;&gt;Rustup&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;rustup&lt;&#x2F;code&gt; is the official Rust toolchain installer and version management tool.
It allows you to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Install and update Rust&lt;&#x2F;li&gt;
&lt;li&gt;Switch between stable, beta, and nightly Rust versions&lt;&#x2F;li&gt;
&lt;li&gt;Keep track of and install different Rust versions&lt;&#x2F;li&gt;
&lt;li&gt;Install additional components like rust-src or rust-analyzer&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here are some key commands:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rustup update                 &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Update Rust
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rustup default stable         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Set the default toolchain
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rustup target add wasm32-unknown-unknown  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Add a compilation target
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rustup component add rustfmt  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Add a component
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;cargo&quot;&gt;Cargo&lt;&#x2F;h2&gt;
&lt;p&gt;Cargo is Rust’s package manager and build system. It’s installed alongside
Rust and handles:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Creating new projects&lt;&#x2F;li&gt;
&lt;li&gt;Building your code&lt;&#x2F;li&gt;
&lt;li&gt;Managing dependencies&lt;&#x2F;li&gt;
&lt;li&gt;Running tests&lt;&#x2F;li&gt;
&lt;li&gt;Generating documentation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here are some key commands:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo new my_project &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Create a new project
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo build          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Compile the project
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo run            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Run the project
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo test           &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Run tests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo doc --open     &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Generate and open documentation
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;rustc&quot;&gt;&lt;code&gt;rustc&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The Rust compiler. You typically interact with it through Cargo, but you can
use it directly too:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rustc main.rs  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Compile a single file
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;rustfmt&quot;&gt;&lt;code&gt;rustfmt&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The official Rust code formatter. It ensures consistent code style across Rust
projects.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;clippy&quot;&gt;Clippy&lt;&#x2F;h2&gt;
&lt;p&gt;A collection of lints to catch common mistakes and improve your Rust code.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo clippy  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Run clippy on your project
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;rust-analyzer&quot;&gt;&lt;code&gt;rust-analyzer&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A language server implementation for Rust, providing IDE-like features to
code editors.&lt;&#x2F;p&gt;
&lt;p&gt;These tools (&lt;em&gt;and some others&lt;&#x2F;em&gt;) form the core of the Rust development experience,
providing a robust, integrated ecosystem for writing, testing, and deploying
Rust code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;testing-rust&quot;&gt;Testing Rust&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;unit-tests&quot;&gt;Unit Tests&lt;&#x2F;h3&gt;
&lt;p&gt;Unit tests in Rust are typically written in the same file as the code they’re
testing.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;They are annotated with &lt;code&gt;#[test]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;They are placed in a module annotated with &lt;code&gt;#[cfg(test)]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; In src&#x2F;lib.rs or src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;tests &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use super&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;test_add&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;integration-tests&quot;&gt;Integration Tests&lt;&#x2F;h3&gt;
&lt;p&gt;Integration tests are external to your library and use it as any other code would.&lt;&#x2F;p&gt;
&lt;p&gt;They’re placed in the tests directory
Each file in the tests directory is compiled as a separate crate&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; In tests&#x2F;integration_test.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; my_crate;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;test_add_integration&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(my_crate::add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;organization&quot;&gt;Organization&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Unit tests: In the same file as the code, within a tests module&lt;&#x2F;li&gt;
&lt;li&gt;Integration tests: In the tests directory&lt;&#x2F;li&gt;
&lt;li&gt;You can have multiple test files in the tests directory&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;running-tests&quot;&gt;Running Tests&lt;&#x2F;h3&gt;
&lt;p&gt;Here is how you run tests:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo test  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Run all tests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo test test_name  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Run a specific test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; --nocapture  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Show println! output
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;test-attributes&quot;&gt;Test Attributes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#[should_panic]&lt;&#x2F;code&gt;: Test should panic&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;#[ignore]&lt;&#x2F;code&gt;: Skip this test unless specifically requested&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;should_panic&lt;&#x2F;span&gt;&lt;span&gt;(expected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;divide by zero&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;test_divide_by_zero&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;divide&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ignore&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;expensive_test&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;test-organization-best-practices&quot;&gt;Test Organization Best Practices&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Keep unit tests close to the code they’re testing&lt;&#x2F;li&gt;
&lt;li&gt;Use descriptive test names&lt;&#x2F;li&gt;
&lt;li&gt;Group related tests in modules&lt;&#x2F;li&gt;
&lt;li&gt;Use helper functions for common setup or assertions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s an example of a more organized test structure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; In src&#x2F;lib.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;math &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;subtract&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; b
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(test)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;tests &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use super&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;test_add&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;test_subtract&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;subtract&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; In tests&#x2F;math_integration_tests.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;my_crate::math;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;test_add_and_subtract&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;math::add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;assert_eq!&lt;&#x2F;span&gt;&lt;span&gt;(math::subtract(result, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;mocking&quot;&gt;Mocking&lt;&#x2F;h3&gt;
&lt;p&gt;Rust doesn’t have a built-in mocking framework, but crates like
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;mockall&#x2F;&quot; title=&quot;Mockall&quot;&gt;mockall&lt;&#x2F;a&gt; can be used for mocking.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;test-coverage&quot;&gt;Test Coverage&lt;&#x2F;h3&gt;
&lt;p&gt;You can use tools like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;xd009642&#x2F;tarpaulin&quot; title=&quot;Tarpaulin&quot;&gt;tarpaulin&lt;&#x2F;a&gt; to measure test coverage:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo install cargo-tarpaulin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo tarpaulin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;publishing-packages&quot;&gt;Publishing Packages&lt;&#x2F;h2&gt;
&lt;p&gt;Here is how you can publish your Rust crate:&lt;&#x2F;p&gt;
&lt;p&gt;First, ensure your Cargo.toml file is properly configured:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;package&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;your_crate_name&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;0.1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;authors &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Your Name &amp;lt;you@example.com&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;edition &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2024&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;A short description of your crate&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;license &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;MIT&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;repository &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;github.com&#x2F;yourusername&#x2F;your_crate&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;documentation &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;docs.rs&#x2F;your_crate_name&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;readme &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;README.md&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;keywords &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;keyword1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;keyword2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;categories &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;category1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;category2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Your dependencies here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, create an Account on crates.io, if you haven’t already done so.&lt;&#x2F;p&gt;
&lt;p&gt;Then login to crates.io via Cargo&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo login
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Before publishing, it’s good to check your package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo package
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This command will create a &lt;code&gt;.crate&lt;&#x2F;code&gt; file in the &lt;code&gt;target&#x2F;package&#x2F;&lt;&#x2F;code&gt; directory.&lt;&#x2F;p&gt;
&lt;p&gt;When you’re ready to publish, execute the following command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cargo publish
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will upload your crate to &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;&quot; title=&quot;Crates.io&quot;&gt;crates.io&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To publish a new version, update the &lt;code&gt;version&lt;&#x2F;code&gt; field in &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; and run
&lt;code&gt;cargo publish&lt;&#x2F;code&gt; again.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;publishing-best-practices&quot;&gt;Publishing Best Practices&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Use semantic versioning (&lt;code&gt;MAJOR.MINOR.PATCH&lt;&#x2F;code&gt;) for your crate versions.&lt;&#x2F;li&gt;
&lt;li&gt;Write good documentation. Use &lt;code&gt;&#x2F;&#x2F;!&lt;&#x2F;code&gt; for module-level docs and &lt;code&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;code&gt; for
function&#x2F;struct docs. Your crate’s documentation will automatically be built
and published on &lt;code&gt;docs.rs&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Include a &lt;code&gt;README.md&lt;&#x2F;code&gt; file with basic usage instructions and examples.&lt;&#x2F;li&gt;
&lt;li&gt;Ensure you’ve chosen an appropriate license for your crate.&lt;&#x2F;li&gt;
&lt;li&gt;Make sure all tests pass before publishing.&lt;&#x2F;li&gt;
&lt;li&gt;If you publish a version with a critical bug, you can
yank it: &lt;code&gt;cargo yank --vers 1.0.1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;If your crate depends on private crates, you can’t publish it on &lt;code&gt;crates.io&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;You can do a dry run of publishing with: &lt;code&gt;cargo publish --dry-run&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Choose appropriate categories and keywords to make your crate discoverable.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;atomics-in-rust&quot;&gt;Atomics in Rust&lt;&#x2F;h2&gt;
&lt;p&gt;Rust provides atomic types in the &lt;code&gt;std::sync::atomic&lt;&#x2F;code&gt; module. These types allow
for &lt;strong&gt;lock-free&lt;&#x2F;strong&gt; synchronization between threads.&lt;&#x2F;p&gt;
&lt;p&gt;Here are basic atomic types:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AtomicBool&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;AtomicI32&lt;&#x2F;code&gt;, &lt;code&gt;AtomicU32&lt;&#x2F;code&gt;, &lt;code&gt;AtomicI64&lt;&#x2F;code&gt;, &lt;code&gt;AtomicU64&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;AtomicUsize&lt;&#x2F;code&gt;, &lt;code&gt;AtomicIsize&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;AtomicPtr&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s a sample code that uses atomics:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::atomic::{AtomicUsize, Ordering};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;AtomicUsize::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;fetch_add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, Ordering::SeqCst);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Counter: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(Ordering::SeqCst));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;memory-ordering&quot;&gt;Memory Ordering&lt;&#x2F;h2&gt;
&lt;p&gt;Rust’s atomics allow you to specify memory ordering constraints:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ordering::Relaxed&lt;&#x2F;code&gt;: Provides no synchronization or ordering guarantees.
It’s the fastest but also the most dangerous to use incorrectly.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Ordering::Release&lt;&#x2F;code&gt;: Ensures that all memory operations before the release
operation are visible to other threads that perform an &lt;strong&gt;acquire&lt;&#x2F;strong&gt; operation
on the same variable.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Ordering::Acquire&lt;&#x2F;code&gt;: Ensures that all memory operations &lt;strong&gt;after&lt;&#x2F;strong&gt; the
&lt;strong&gt;acquire&lt;&#x2F;strong&gt; operation are ordered after the &lt;strong&gt;acquire&lt;&#x2F;strong&gt;. Or, more
concisely, all subsequent operations see the effects of the previous
&lt;strong&gt;release&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Ordering:AcqRel&lt;&#x2F;code&gt;: Combines the effects of both Acquire and Release orderings.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Ordering:SeqCst&lt;&#x2F;code&gt;: Provides the strongest guarantees, ensuring a total order
for all &lt;code&gt;SeqCst&lt;&#x2F;code&gt; operations across all threads.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ordering is crucial for implementing synchronization primitives and lock-free
data structures. It allows one thread to safely communicate changes to shared
data to other threads.&lt;&#x2F;p&gt;
&lt;p&gt;A common pattern is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Thread A: Modify shared data, then do a &lt;code&gt;Release&lt;&#x2F;code&gt; operation
(&lt;em&gt;e.g., &lt;code&gt;store&lt;&#x2F;code&gt; with &lt;code&gt;Release&lt;&#x2F;code&gt; ordering&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Thread B: Perform an &lt;code&gt;Acquire&lt;&#x2F;code&gt; operation (e.g., &lt;code&gt;load&lt;&#x2F;code&gt; with &lt;code&gt;Acquire&lt;&#x2F;code&gt;
ordering), then read the shared data.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;happens-before-relationship&quot;&gt;Happens-before Relationship&lt;&#x2F;h3&gt;
&lt;p&gt;Think of &lt;code&gt;Release&lt;&#x2F;code&gt; as sealing an envelope: Everything you’ve written
(&lt;em&gt;previous memory operations&lt;&#x2F;em&gt;) is sealed inside. The &lt;code&gt;Acquire&lt;&#x2F;code&gt; &lt;code&gt;load&lt;&#x2F;code&gt; is
like opening the envelope, ensuring the recipient sees all its contents.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Release&lt;&#x2F;code&gt; &lt;code&gt;store&lt;&#x2F;code&gt; establishes a &lt;strong&gt;happens-before&lt;&#x2F;strong&gt; relationship with the
corresponding &lt;code&gt;Acquire&lt;&#x2F;code&gt; &lt;code&gt;load&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This means all operations before the &lt;code&gt;Release&lt;&#x2F;code&gt; are guaranteed to happen
&lt;strong&gt;before&lt;&#x2F;strong&gt; all operations &lt;strong&gt;after&lt;&#x2F;strong&gt; the &lt;code&gt;Acquire&lt;&#x2F;code&gt; in the other thread.&lt;&#x2F;p&gt;
&lt;p&gt;The “&lt;em&gt;&lt;code&gt;Acquire&lt;&#x2F;code&gt; first, &lt;code&gt;Release&lt;&#x2F;code&gt; next&lt;&#x2F;em&gt;” pattern typically refers to the
consumer-producer relationship:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Producer&lt;&#x2F;strong&gt; uses &lt;code&gt;Release&lt;&#x2F;code&gt; to signal that data is ready.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Consumer&lt;&#x2F;strong&gt; uses &lt;code&gt;Acquire&lt;&#x2F;code&gt; to wait for and read that signal.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;bringing-balance-to-the-force&quot;&gt;Bringing Balance to the Force&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Release&lt;&#x2F;code&gt; ordering is more expensive than &lt;code&gt;Relaxed&lt;&#x2F;code&gt; but less expensive than
&lt;code&gt;SeqCst&lt;&#x2F;code&gt;. It provides a good balance between performance and necessary
synchronization for this pattern.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-orderings-matter&quot;&gt;Why Orderings Matter&lt;&#x2F;h3&gt;
&lt;p&gt;Without &lt;code&gt;Order::Acquire&lt;&#x2F;code&gt; and other orderings, the CPU might reorder memory
operations for optimization purposes. The &lt;code&gt;Acquire&lt;&#x2F;code&gt; and other orderings prevent
this specific type of reordering.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;For example, with a relaxed &lt;code&gt;load&lt;&#x2F;code&gt;, the CPU might speculatively execute
subsequent reads or writes &lt;em&gt;before&lt;&#x2F;em&gt; the load actually completes. &lt;code&gt;Acquire&lt;&#x2F;code&gt;
ordering prevents this.&lt;&#x2F;li&gt;
&lt;li&gt;Compiler reordering: It’s not just the CPU. The compiler can also reorder
operations for optimization. &lt;code&gt;Acquire&lt;&#x2F;code&gt; ordering also constrains the
compiler, preventing it from moving operations that come after the &lt;code&gt;Acquire&lt;&#x2F;code&gt;
(&lt;em&gt;in program order&lt;&#x2F;em&gt;) to before it.&lt;&#x2F;li&gt;
&lt;li&gt;Memory visibility across cores: In multicore systems, memory operations on
one core might not be immediately visible to other cores. &lt;code&gt;Acquire&lt;&#x2F;code&gt; synchronizes
with Release operations on other cores, ensuring proper visibility of memory
operations across cores.&lt;&#x2F;li&gt;
&lt;li&gt;Out-of-order execution: CPUs can execute instructions out of order if they
determine it’s safe to do so.&lt;&#x2F;li&gt;
&lt;li&gt;Speculative execution: CPUs might execute instructions before they’re certain
they’re needed.&lt;&#x2F;li&gt;
&lt;li&gt;Compiler optimizations: Compilers might reorder operations if they believe
it won’t affect the program’s observable behavior.&lt;&#x2F;li&gt;
&lt;li&gt;Cache coherency: In multicore systems, each core might have its own cache,
leading to potential inconsistencies in memory visibility.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Lets’ see this with a multithreaded example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::atomic::{AtomicBool, Ordering};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FLAG&lt;&#x2F;span&gt;&lt;span&gt;: AtomicBool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;AtomicBool::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DATA&lt;&#x2F;span&gt;&lt;span&gt;: AtomicBool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;AtomicBool::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; t1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(|| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DATA&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, Ordering::Relaxed);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FLAG&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, Ordering::Relaxed);
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; t2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(|| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FLAG&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(Ordering::Relaxed) {}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;assert!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DATA&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(Ordering::Relaxed));
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    t1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    t2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this code, we might expect that if thread 2 sees &lt;code&gt;FLAG&lt;&#x2F;code&gt; set to &lt;code&gt;true&lt;&#x2F;code&gt;,
it would always see &lt;code&gt;DATA&lt;&#x2F;code&gt; as true. However, with &lt;code&gt;Relaxed&lt;&#x2F;code&gt; ordering, this isn’t
guaranteed. The CPU or compiler could reorder the operations in thread 1, or
the write to &lt;code&gt;DATA&lt;&#x2F;code&gt; might not be visible to thread 2 immediately.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s some reasons why this might happen:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Single-thread perspective&lt;&#x2F;strong&gt;: The compiler often reasons about optimizations
from the perspective of a single thread. If swapping two lines doesn’t affect
the observable behavior within that thread, the compiler might indeed reorder
lines of code.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;As-if rule&lt;&#x2F;strong&gt;: Compilers follow what’s known as the “&lt;em&gt;as-if&lt;&#x2F;em&gt;” rule. They
can perform any optimization as long as the observable behavior of the program
remains the same–from the perspective of that single thread.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Lack of inter-thread awareness&lt;&#x2F;strong&gt;: Without explicit synchronization or memory
ordering constraints, the compiler doesn’t consider the effects of its
optimizations on other threads. It assumes that each thread operates
independently.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;By using appropriate memory orderings, you’re essentially saying to the
compiler (and the CPU): “&lt;em&gt;Even though you can’t see why from a single-thread
perspective, these operations need to stay in this order for the program to
work correctly across all threads&lt;&#x2F;em&gt;.”&lt;&#x2F;p&gt;
&lt;p&gt;To fix the random behavior that might happen in the code above, we would use
&lt;code&gt;Release&lt;&#x2F;code&gt; ordering for the &lt;code&gt;store&lt;&#x2F;code&gt;s in thread 1 and &lt;code&gt;Acquire&lt;&#x2F;code&gt; ordering for the
&lt;code&gt;load&lt;&#x2F;code&gt;s in thread 2:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FLAG&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, Ordering::Release);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FLAG&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(Ordering::Acquire) {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;lock-free-programming&quot;&gt;Lock-Free Programming&lt;&#x2F;h3&gt;
&lt;p&gt;Here’s a more practical example of a lock-free stack implementation that
leverages memory ordering:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::atomic::{AtomicPtr, Ordering};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::ptr;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: T,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;: AtomicPtr&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Stack&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span&gt;: AtomicPtr&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Stack&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        Stack { head: AtomicPtr::new(ptr::null_mut()) }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: T) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;::into_raw(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;::new(Node {
&lt;&#x2F;span&gt;&lt;span&gt;            data,
&lt;&#x2F;span&gt;&lt;span&gt;            next: AtomicPtr::new(ptr::null_mut()),
&lt;&#x2F;span&gt;&lt;span&gt;        }));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; old_head &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.head.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(Ordering::Relaxed);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;new_node).next.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span&gt;(old_head, Ordering::Relaxed);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.head.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;compare_exchange&lt;&#x2F;span&gt;&lt;span&gt;(old_head, new_node, 
&lt;&#x2F;span&gt;&lt;span&gt;                Ordering::Release, Ordering::Relaxed).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; old_head &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.head.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(Ordering::Acquire);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; old_head.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;is_null&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; new_head &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ 
&lt;&#x2F;span&gt;&lt;span&gt;                (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;old_head).next.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(Ordering::Relaxed) };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.head.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;compare_exchange&lt;&#x2F;span&gt;&lt;span&gt;(old_head, new_head, 
&lt;&#x2F;span&gt;&lt;span&gt;                Ordering::Release, Ordering::Relaxed).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;::from_raw(old_head).data };
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(data);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ordering-types-for-store-operations&quot;&gt;Ordering Types for &lt;code&gt;store&lt;&#x2F;code&gt; Operations&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;store&lt;&#x2F;code&gt; operations can use &lt;code&gt;Relaxed&lt;&#x2F;code&gt;, &lt;code&gt;Release&lt;&#x2F;code&gt;, or &lt;code&gt;SeqCst&lt;&#x2F;code&gt; ordering.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Acquire&lt;&#x2F;code&gt; and &lt;code&gt;AcqRel&lt;&#x2F;code&gt; orderings are not applicable to store operations.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Acquire&lt;&#x2F;code&gt; ordering is used for &lt;code&gt;load&lt;&#x2F;code&gt; operations. It ensures that subsequent
memory accesses in the same thread cannot be reordered before this &lt;code&gt;load&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;lock-free-programming-is-not-easy&quot;&gt;Lock-Free Programming Is Not Easy&lt;&#x2F;h3&gt;
&lt;p&gt;Remember, while lock-free structures can offer great performance benefits,
they are also much more challenging to implement correctly.&lt;&#x2F;p&gt;
&lt;p&gt;Always profile and benchmark to ensure they are providing real benefits in
your specific use case.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references-and-further-reading&quot;&gt;References and Further Reading&lt;&#x2F;h2&gt;
&lt;p&gt;Here is a non-exhaustive list of tools, resources, references, libraries, and
concepts mentioned in this article:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;&quot; title=&quot;Haskell Programming Language&quot;&gt;Haskell Programming Language&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;&quot; title=&quot;Go Programming Language&quot;&gt;Go Programming Language&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot; title=&quot;Rust Programming Language&quot;&gt;Rust Programming Language&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;&quot; title=&quot;The Rust Programming Language&quot;&gt;“&lt;em&gt;The&lt;&#x2F;em&gt;” Rust Book&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rustlings&quot; title=&quot;Rustlings&quot;&gt;Rustlings&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;&quot; title=&quot;Rust Reddit&quot;&gt;Rust Reddit&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCaYhcUwRBNscFNUKTjgPFiA&quot; title=&quot;Rust on YouTube&quot;&gt;Rust on YouTube&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Programming-Rust-Fast-Systems-Development&#x2F;dp&#x2F;1492052590&quot; title=&quot;Programming Rust&quot;&gt;Programming Rust&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;&quot; title=&quot;Rust by Example&quot;&gt;Rust by Example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;tools&#x2F;install&quot; title=&quot;Rust Installation&quot;&gt;Rust Installation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;&quot; title=&quot;Crates.io&quot;&gt;Crates.io: The Rust community’s crate registry&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch19-06-macros.html&quot; title=&quot;Rust Macros&quot;&gt;Rust Macros&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Metaprogramming&quot; title=&quot;Metaprogramming&quot;&gt;Metaprogramming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Functional_programming&quot; title=&quot;Functional Programming&quot;&gt;Functional Programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;races.html&quot; title=&quot;Data Races and Race Conditions&quot;&gt;Data Races and Race Conditions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2022&#x2F;08&#x2F;05&#x2F;nll-by-default.html&quot; title=&quot;Non-Lexical Lifetimes&quot;&gt;Non-Lexical Lifetimes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;Haskell&#x2F;Understanding_monads&#x2F;IO&quot; title=&quot;Understanding Monads&quot;&gt;Understanding Monads&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Builder_pattern&quot; title=&quot;Builder Pattern&quot;&gt;Builder Pattern&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Type_theory&quot; title=&quot;Type Theory&quot;&gt;Type Theory&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;crossbeam&#x2F;&quot; title=&quot;Crossbeam Library&quot;&gt;Crossbeam Library&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Abstract_syntax_tree&quot; title=&quot;Abstract Syntax Tree&quot;&gt;Abstract Syntax Tree&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Strategy_pattern&quot; title=&quot;Strategy Pattern&quot;&gt;Strategy Pattern&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rocket.rs&#x2F;&quot; title=&quot;Rocket Web Framework&quot;&gt;Rocket Web Framework&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;actix.rs&#x2F;&quot; title=&quot;Actix Web Framework&quot;&gt;Actix Web Framework&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot; title=&quot;WebAssembly&quot;&gt;WebAssembly&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Document_Object_Model&quot; title=&quot;Document Object Model&quot;&gt;Document Object Model&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rtic.rs&#x2F;&quot; title=&quot;Real-Time Interrupt-driven Concurrency&quot;&gt;Real-Time Interrupt-driven Concurrency&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;embedded-hal&#x2F;&quot; title=&quot;Embedded HAL&quot;&gt;Embedded HAL&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;cortex-m&#x2F;&quot; title=&quot;Cortex-M&quot;&gt;Cortex-M&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;cortex-m-rt&#x2F;&quot; title=&quot;Cortex-M RT&quot;&gt;Cortex-M RT&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;mockall&#x2F;&quot; title=&quot;Mockall&quot;&gt;Mockall&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;xd009642&#x2F;tarpaulin&quot; title=&quot;Tarpaulin&quot;&gt;Tarpaulin&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This was a deep dive into a lot of features and paradigms in Rust, while
occasionally comparing it with other languages such as C++ and Go.&lt;&#x2F;p&gt;
&lt;p&gt;Rust is a powerful language that offers a unique blend of performance, safety,
and expressiveness. It’s a great choice for systems programming, web development,
and embedded programming.&lt;&#x2F;p&gt;
&lt;p&gt;Having said that, it’s impossible to get a feeling of it without actually
programming something in Rust. So, I encourage you to start coding in Rust,
copy the examples you see here, and try to modify and make sense of them.&lt;&#x2F;p&gt;
&lt;p&gt;The more you code in Rust, the more you’ll appreciate its design choices and
the benefits it offers. Also the more you code in rust, the more the relatively
weirder parts of it will start to make sense.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How to Make Yourself Heard</title>
        <published>2024-05-27T00:00:00+00:00</published>
        <updated>2024-05-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0009/"/>
        <id>https://zerotohero.dev/highlights/issue-0009/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0009/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;dj.png&quot; alt=&quot;How to Make Yourself Heard&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;How to Make Yourself Heard&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the ninth issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;Last week, I was a bit swamped, so I skipped the weekly update. Yet, I made “*
*&lt;em&gt;a lot&lt;&#x2F;em&gt;**” of progress in the meantime. Here, I’ll out line some of that
progress.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;radio-zero-to-hero&quot;&gt;Radio Zero to Hero&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2024-05-27&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Radio Zero to Hero is no longer active. I’ve archived the project
a while ago because keeping a stream alive without actually hosting the
stream did not work well on Twitch. In addition, I was constantly using
a lot of system resources and it was effecting the device’s life span.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For starters, &lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;we now have a music station that streams cool music for
you to get in the zone&lt;&#x2F;a&gt; non-stop 24&#x2F;7 😀.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;07&amp;#x2F;Screen-Shot-2021-07-16-at-9.25.33-AM.png&quot; alt=&quot;Radio Zero to Hero&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Radio Zero to Hero&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;It even has a terminal aquarium 🐠 that you can watch all day—how nerd is that?
🙂.&lt;&#x2F;p&gt;
&lt;p&gt;Want to see it? &lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;Come join the fun and &lt;strong&gt;follow me&lt;&#x2F;strong&gt; on Twitch&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I listen to it instead of Spotify all day long. I have 1500+ (&lt;em&gt;and increasing&lt;&#x2F;em&gt;)
tracks that I’ve curated and mixed personally. You’ll like it.&lt;&#x2F;p&gt;
&lt;p&gt;Aside from displaying ASCII fishes all day long, I also do real-time coding and
screencasting there: It’s fun.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-on-the-horizon-woman-fried-egg&quot;&gt;What’s on the Horizon 👩‍🍳&lt;&#x2F;h2&gt;
&lt;p&gt;I’m planning to &lt;strong&gt;Create an EKS Cluster&lt;&#x2F;strong&gt; and deploy some of the services
that we’ve created in the former live streams to that cluster.&lt;&#x2F;p&gt;
&lt;p&gt;Once I finish the code of some of these services, I will write articles about
them too to dig into the architectural discussions I’ve gone through while
designing them. Yet, before, I want to finalize and deploy a
micro-services-driven app. I’d like that app to run in the cloud, on a *
&lt;em&gt;Kubernetes&lt;&#x2F;em&gt;* cluster, as a MVP.&lt;&#x2F;p&gt;
&lt;p&gt;So there’s &lt;strong&gt;a lot&lt;&#x2F;strong&gt; of progress; however, not all the progress is on this
site. &lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;If you follow me on &lt;strong&gt;Twitch&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, you’ll witness the progress
closely.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;Do you hold back in meetings? Are you unsure how to jump in and make yourself
heard? Do you often go unnoticed when everyone is excited about a topic?&lt;&#x2F;p&gt;
&lt;p&gt;If yes, then I have a recommendation for you.&lt;&#x2F;p&gt;
&lt;p&gt;To make sure that you are heard, and your voice is in the mix, try &lt;strong&gt;claiming
space&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make everybody aware of your contribution before launching into the main
point.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For example, instead of asking “&lt;em&gt;Can we look at this problem from the customer’s
standpoint?&lt;&#x2F;em&gt;”, you can ease into the issue. Instead, you can ask something
like “&lt;em&gt;Can we pause for a moment, step back, and take a longer-term view of
these metrics? I did some research, and here’s what I found…&lt;&#x2F;em&gt;”&lt;&#x2F;p&gt;
&lt;p&gt;👆This will capture your audience’s attention and position you as a knowledgeable
person in your field.&lt;&#x2F;p&gt;
&lt;p&gt;Once you show that you have done your homework and know what you are talking
about, you can better articulate your proposal. This way, people can have a
sense of understanding of what you are suggesting before you get to the details.&lt;&#x2F;p&gt;
&lt;p&gt;Also, make sure to emphasize why your idea is essential. People in the room
should know &lt;strong&gt;why&lt;&#x2F;strong&gt; they should care to prioritize this idea right now (&lt;em&gt;among
many other things that seem to be equally important&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Finally, don’t stay in the spotlight forever. Invite contribution and feedback
by asking probing questions like&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;“&lt;em&gt;What do you think?&lt;&#x2F;em&gt;”,&lt;&#x2F;li&gt;
&lt;li&gt;“&lt;em&gt;How many of you feel this way?&lt;&#x2F;em&gt;”,&lt;&#x2F;li&gt;
&lt;li&gt;“&lt;em&gt;What are your thoughts, it’s not that crazy of an idea, is it?&lt;&#x2F;em&gt;”.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This will allow people to think more deeply about what you’ve proposed, and
you’ll have a chance to read the room and get a sense of how your message has
been received so far.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;strong&gt;TreeSheets&lt;&#x2F;strong&gt; is an open-source free-form data organizer—it’s like excel
worksheets, but in a tree-like structure—get it? tree…
sheets 🙂][treesheets].&lt;&#x2F;li&gt;
&lt;li&gt;[&lt;strong&gt;BlueMonday&lt;&#x2F;strong&gt; is an HTML sanitized written in Go—in case you need that
kind of a thing][bluemonday].&lt;&#x2F;li&gt;
&lt;li&gt;[Counting is harder than it seems. In his article, Bruno outlines ways to
&lt;strong&gt;safely&lt;&#x2F;strong&gt; count in &lt;strong&gt;Go&lt;&#x2F;strong&gt;][count].&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;[treesheets] :https:&#x2F;&#x2F;strlen.com&#x2F;treesheets&#x2F;
[bluemonday]: https:&#x2F;&#x2F;github.com&#x2F;microcosm-cc&#x2F;bluemonday
[count]: https:&#x2F;&#x2F;brunocalza.me&#x2F;there-are-many-ways-to-safely-count&#x2F;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 9: How to Make Yourself Heard&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tough Conversation</title>
        <published>2024-05-27T00:00:00+00:00</published>
        <updated>2024-05-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0010/"/>
        <id>https://zerotohero.dev/highlights/issue-0010/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0010/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;overwhelmed.png&quot; alt=&quot;Some conversations are tough.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Some conversations are tough.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the tenth issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;Last week, it was part infrastructure, part content creation. Here’s a quick
overview of what has happened.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;radio-zero-to-hero-is-growing-metal&quot;&gt;Radio Zero to Hero is Growing 🤘&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2024-05-27&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Nowadays, I’m now using &lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;loopback&#x2F;&quot;&gt;&lt;strong&gt;Loopback&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; as the audio plugin &#x2F;
virtual audio interface.&lt;&#x2F;p&gt;
&lt;p&gt;It is much stable with a richer feature set. I’m happy with it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I did several optimizations for the &lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;&lt;strong&gt;Radio Zero to Hero&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
stream. Here are the essential highlights.&lt;&#x2F;p&gt;
&lt;p&gt;I figured out that &lt;a href=&quot;https:&#x2F;&#x2F;www.telestream.net&#x2F;wirecast&#x2F;&quot;&gt;&lt;strong&gt;Wirecast&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; already has an audio plugin that
can stream the system audio. It works &lt;strong&gt;much&lt;&#x2F;strong&gt; better than the &lt;a href=&quot;https:&#x2F;&#x2F;shinywhitebox.com&#x2F;&quot;&gt;&lt;strong&gt;Shiny White
Box&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; audio capture plugin that I have. As a result, I don’t have audio
quality problems anymore. I can stream music forever without restarting
my machine (&lt;em&gt;which was not the case before&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;So yeah, overall better audio quality.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, I reduced the frame rate from &lt;em&gt;60fps&lt;&#x2F;em&gt; to &lt;em&gt;25fps&lt;&#x2F;em&gt;, which is still
&lt;strong&gt;more than enough&lt;&#x2F;strong&gt; if you are just streaming live coding sessions on an IDE.
I also figured out &lt;strong&gt;4500Kbps&lt;&#x2F;strong&gt; for &lt;em&gt;bitrate&lt;&#x2F;em&gt; was optimal for me.&lt;&#x2F;p&gt;
&lt;p&gt;Here are my entire settings for the interested.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;07&amp;#x2F;Screen-Shot-2021-07-24-at-10.30.26-AM.png&quot; alt=&quot;Zero to Hero Twitch stream settings.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Zero to Hero Twitch stream settings.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Zero to Hero Twitch stream settings.&lt;&#x2F;p&gt;
&lt;p&gt;But the gist is that I now have &lt;strong&gt;much&lt;&#x2F;strong&gt; better video and audio quality, with
&lt;strong&gt;a much&lt;&#x2F;strong&gt; smoother streaming experience.&lt;&#x2F;p&gt;
&lt;p&gt;Ah, also, as of now, Radio Zero to Hero has…&lt;&#x2F;p&gt;
&lt;p&gt;✨ 3565 (&lt;em&gt;and increasing&lt;&#x2F;em&gt;) tracks&lt;&#x2F;p&gt;
&lt;p&gt;✨ totaling 187 hours 22 minutes and 56 seconds of&lt;&#x2F;p&gt;
&lt;p&gt;✨ non-stop, 24&#x2F;7, beyond-this-world beats 🎶.&lt;&#x2F;p&gt;
&lt;p&gt;Want to see how it looks? &lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;Come join the fun on Twitch&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It’s my primary music source when I’m coding and developing right now (&lt;em&gt;sorry,
Spotify, my old friend&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-on-the-horizon-woman-fried-egg&quot;&gt;What’s on the Horizon 👩‍🍳&lt;&#x2F;h2&gt;
&lt;p&gt;I finally finished configuring a TLS-terminated Kubernetes AWS ALB Ingress for
FizzBuzz Pro (&lt;em&gt;try saying that five times fast, huh? 😃&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;07&amp;#x2F;Screen-Shot-2021-07-24-at-10.41.58-AM-1.png&quot; alt=&quot;FizzBuzz Pro Kubernetes settings.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;FizzBuzz Pro Kubernetes settings.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Anyhoo, I learned &lt;strong&gt;a lot&lt;&#x2F;strong&gt; during the process, which means more articles and
videos are on their way, so that you won’t have to suffer what I’ve suffered 🙂.&lt;&#x2F;p&gt;
&lt;p&gt;Other than that I’m working on the IDM Service, which is all about
user-management things like login, logout, password reset, and all.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;I have also created a video going through the high-level system design
of &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;; you’ll like it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;feeling-stressed-you-are-not-alone&quot;&gt;Feeling Stressed? You are Not Alone&lt;&#x2F;h3&gt;
&lt;p&gt;Feeling stressed? Feeling overwhelmed? You are not alone. Let’s see how you can
manage your productivity under stress.&lt;&#x2F;p&gt;
&lt;p&gt;First of all, you must realize that if you are stressed the hell out that you
cannot get stuff done in time, conventional time management strategies will not
help you. When under stress, trying to improve your efficiency will backfire and
make things worse.&lt;&#x2F;p&gt;
&lt;p&gt;Why? Because when you become more efficient, you’ll make more room for tasks,
and you’ll feel even further under pressure.&lt;&#x2F;p&gt;
&lt;p&gt;If you feel overwhelmed, attack the root cause. &lt;strong&gt;Be honest&lt;&#x2F;strong&gt; with yourself (
&lt;em&gt;and others&lt;&#x2F;em&gt;) about what you can actually commit to. Say “&lt;em&gt;No&lt;&#x2F;em&gt;” often. For the
tasks you maintain, &lt;strong&gt;think in terms of priorities&lt;&#x2F;strong&gt;, &lt;em&gt;not&lt;&#x2F;em&gt; in terms of time.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Saying “&lt;em&gt;I don’t have time for that&lt;&#x2F;em&gt;” to a superior can sound abrupt, awkward,
and negative; however, reframing the phrase like “&lt;em&gt;Where would you like me
prioritize this against these three tasks that I already am committed to?&lt;&#x2F;em&gt;” can
put things into context.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Additionally, this approach places the onus on them to tell you which task is
more important, so you have one less thing to worry about. Win-win 🙌.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tough-conversations&quot;&gt;Tough Conversations&lt;&#x2F;h3&gt;
&lt;p&gt;My next random thought is about “&lt;em&gt;tough conversations&lt;&#x2F;em&gt;”, or “&lt;em&gt;giving though
feedback&lt;&#x2F;em&gt;”.&lt;&#x2F;p&gt;
&lt;p&gt;Tough conversations are challenging for a reason, and—related to the above
discussion—when you are stressed out, it’s easy to say the wrong thing at the
wrong time.&lt;&#x2F;p&gt;
&lt;p&gt;To keep the interaction going sideways, pay special attention to how you
communicate your ideas.&lt;&#x2F;p&gt;
&lt;p&gt;For instance phrases like “&lt;em&gt;obviously&lt;&#x2F;em&gt;”, “&lt;em&gt;clearly&lt;&#x2F;em&gt;”, “&lt;em&gt;certainly&lt;&#x2F;em&gt;”, “&lt;em&gt;no
doubt&lt;&#x2F;em&gt;” will likely trigger defensiveness and negative emotions in your
counterpart.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, don’t exaggerate things. Avoid sentences like “&lt;em&gt;We always…&lt;&#x2F;em&gt;”,
“&lt;em&gt;We never…&lt;&#x2F;em&gt;”. And needless to say, don’t challenge anyone’s character or
integrity.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Focus on the issue, not on the person solving the issue.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Also people generally feel defensive about “&lt;em&gt;Why&lt;&#x2F;em&gt;” statements, and they feel
judged by “&lt;em&gt;Should&lt;&#x2F;em&gt;” statements. Instead, you can say “&lt;em&gt;You might want to
consider…&lt;&#x2F;em&gt;”, “&lt;em&gt;Can this be a possibility…&lt;&#x2F;em&gt;”, “&lt;em&gt;Have you thought of…&lt;&#x2F;em&gt;”.
Leave room for them to elaborate and think creatively.&lt;&#x2F;p&gt;
&lt;p&gt;Ah, one final advice: &lt;strong&gt;Don’t say “&lt;em&gt;it’s not personal&lt;&#x2F;em&gt;”&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It might not be personal to you, but it &lt;strong&gt;is&lt;&#x2F;strong&gt; pretty darn personal to them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Asgoret&#x2F;devopshelper_bot&quot;&gt;&lt;strong&gt;DevOps Helper Bot&lt;&#x2F;strong&gt; is used for helping in administration and
moderation DevOps groups in telegram&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AnyStatus&#x2F;AnyStatus&quot;&gt;&lt;strong&gt;AnyStatus&lt;&#x2F;strong&gt; is a remote control for your CI&#x2F;CD Pipeline&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;derailed&#x2F;popeye&quot;&gt;&lt;strong&gt;Popeye&lt;&#x2F;strong&gt; is a Kubernetes cluster resource sanitizer&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 10: Tough Conversations&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Nine-to-Five? I Don&#x27;t Think So</title>
        <published>2024-05-27T00:00:00+00:00</published>
        <updated>2024-05-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0013/"/>
        <id>https://zerotohero.dev/highlights/issue-0013/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0013/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;nine-to-five.png&quot; alt=&quot;Nine-to-Five? I Don&amp;#x27;t Think So&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Nine-to-Five? I Don&amp;#x27;t Think So&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the thirteenth issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;I was on a &lt;strong&gt;much-needed&lt;&#x2F;strong&gt; family vacation, so it took a while to get back on
track, but I did many cool things in the meantime.&lt;&#x2F;p&gt;
&lt;p&gt;Without further ado, here are the last two weeks’ highlights.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;all-your-ops-belong-to-us&quot;&gt;All Your Ops Belong to Us&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;This is a biggie&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A couple of years ago, with a group of friends and colleagues, we jumped into a
startup adventure called &lt;a href=&quot;https:&#x2F;&#x2F;ob2.ai&#x2F;&quot;&gt;&lt;strong&gt;OpsBeacon&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. The main goal
of &lt;strong&gt;OpsBeacon&lt;&#x2F;strong&gt; is to help the Ops and Support teams’ days turn a little bit
brighter and help them &lt;strong&gt;#sleepmore&lt;&#x2F;strong&gt; at night.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;09&amp;#x2F;Screen-Shot-2021-09-01-at-12.50.28-PM.png&quot; alt=&quot;OpsBeacon: The future of ops is autonomous.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;OpsBeacon: The future of ops is autonomous.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I was the lead architect of the project and had the chance to try changing the
world. I worked with the brightest minds, the most practical thinkers, and the
most creative problem solvers I’ve had an opportunity to work with.&lt;&#x2F;p&gt;
&lt;p&gt;Anyhoo, life happened. Things get dragged along. And we decided to put the
project on hold for a while.&lt;&#x2F;p&gt;
&lt;p&gt;Well, good news. &lt;a href=&quot;https:&#x2F;&#x2F;ob2.ai&#x2F;&quot;&gt;&lt;strong&gt;OpsBeacon&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is back, and it’s
moving full steam ahead.&lt;&#x2F;p&gt;
&lt;p&gt;And I’m delighted to have the opportunity to lead and mentor the team again.&lt;&#x2F;p&gt;
&lt;p&gt;Keep an eye on &lt;a href=&quot;https:&#x2F;&#x2F;ob2.ai&#x2F;&quot;&gt;&lt;strong&gt;OpBeacon&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. You’ll hear more about
them from other industry experts and from me because they have the will,
knowledge, skills, and decades of accumulated field experience to change the
world. And they will do so.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Go Beacons 🤘&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;synestethisia-anyone&quot;&gt;Synestethisia Anyone?&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2024-05-27&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Radio Zero to Hero is no longer active. I’ve archived the project
a while ago because keeping a stream alive without actually hosting the
stream did not work well on Twitch. In addition, I was constantly using
a lot of system resources and it was effecting the device’s life span.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I’ve updated &lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;&lt;strong&gt;Radio ZeroToHero&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to display
AI-generated images based on the music that’s being played.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;09&amp;#x2F;Screen-Shot-2021-09-01-at-12.56.00-PM.png&quot; alt=&quot;Experience Synesthesia on Radio Zero to Hero&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Experience Synesthesia on Radio Zero to Hero&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;It’s a &lt;strong&gt;mesmerizing&lt;&#x2F;strong&gt; experience. &lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;Come check it out&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Aside&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I also started a
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCdpJG2a5xmDRcYjjQuFH8KQ&#x2F;videos&quot;&gt;YouTube channel called &lt;strong&gt;Synesthetic Arrangements&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
where I’m using the same visualization concept on &lt;strong&gt;piano&lt;&#x2F;strong&gt; pieces that I play.&lt;&#x2F;p&gt;
&lt;p&gt;It’s so much fun combining art, technology, IA, and visualization. Plus, it
motivates me sit on the bench and practice piano further. I’m liking it so far.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;fizzbuzz-pro&quot;&gt;FizzBuzz Pro&lt;&#x2F;h2&gt;
&lt;p&gt;I’m mostly done with the “&lt;em&gt;identity management&lt;&#x2F;em&gt;” APIs.&lt;&#x2F;p&gt;
&lt;p&gt;More videos and articles to come. I will also create more articles and use-case
videos down the line. Stay tuned.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-on-the-horizon-woman-fried-egg&quot;&gt;What’s on the Horizon 👩‍🍳&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the first few priorities that I have.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;make-everything-seamless-and-streamlined&quot;&gt;Make Everything Seamless and Streamlined&lt;&#x2F;h3&gt;
&lt;p&gt;For example, if I want to be live stream what I’m doing right now, it should not
take. No more than a few clicks. Which, apparently, I can do it right now 😄.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;09&amp;#x2F;Screen-Shot-2021-09-01-at-1.01.56-PM.png&quot; alt=&quot;Zero to Hero live stream as I&amp;#x27;m typing these lines.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Zero to Hero live stream as I&amp;#x27;m typing these lines.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I have a second “&lt;em&gt;streamer&lt;&#x2F;em&gt;” machine connected to my work computer. I can switch
from the “&lt;strong&gt;&lt;em&gt;synesthetic radio&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” mode, to “&lt;strong&gt;&lt;em&gt;live stream my desktop&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” in
mere seconds. No preparation is necessary.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ll also create an article about that entire setup, but that’s the story of a
different day.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;finalize-fizzbuzz-pro-apis&quot;&gt;Finalize FizzBuzz Pro APIs&lt;&#x2F;h3&gt;
&lt;p&gt;The APIs that are waiting to be completed are&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Question&#x2F;Answer endpoints&lt;&#x2F;li&gt;
&lt;li&gt;Subscription&#x2F;Stripe integration&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And that’s pretty much it. Once these tasks are done, I can focus on the UI of
the application.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;help-opsbeacon-in-total-world-domination&quot;&gt;Help OpsBeacon in Total World Domination&lt;&#x2F;h3&gt;
&lt;p&gt;Total world domination… in a good way. I’m sure it’ll be an fantastic journey.
And I’m fully supporting the team.&lt;&#x2F;p&gt;
&lt;p&gt;🤘 &lt;a href=&quot;https:&#x2F;&#x2F;ob2.ai&#x2F;&quot;&gt;&lt;strong&gt;Go Beacons&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; 🤘.&lt;&#x2F;p&gt;
&lt;p&gt;But yeah, these are my top three focuses in the short term.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;nine-to-five-i-don-t-think-so&quot;&gt;Nine-to-Five? I Don’t Think So&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Move away from the nine-to-five culture&lt;&#x2F;strong&gt;: It’s outdated, it’s disappearing,
and it does not make sense in a global and connected world. Instead, shape your
work around your life, not the other way around.&lt;&#x2F;p&gt;
&lt;p&gt;What’s important is to get work done promptly, with good quality. When, how, and
where you get that work done should be up to you.&lt;&#x2F;p&gt;
&lt;p&gt;If you are leading people, &lt;strong&gt;focus on outcomes&lt;&#x2F;strong&gt;, not the processes. Explain
your desired results, and set clear goals, roadmaps, and expectations.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, there will be occasions where people will need to be
together—physically or virtually—simultaneously. Yet, some of them can be
decided on an ad-hoc basis. And if there is an event (&lt;em&gt;like an “all-hands”&lt;&#x2F;em&gt;)
that everyone has to be present, it should be clearly expressed to the teams to
know how flexible their times are&lt;&#x2F;p&gt;
&lt;p&gt;But other than that, leave the work to those who know how to do the job. You are
leading grown adults; the company is not a daycare.&lt;&#x2F;p&gt;
&lt;p&gt;One last thing, make clear agreements around how you use the technology to stay
together. So people understand expectations of the online presence requirements,
the possible response times, and how urgent issues requiring immediate action
are handled.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;disagreement-is-okay&quot;&gt;Disagreement is Okay&lt;&#x2F;h3&gt;
&lt;p&gt;As a leader, you have to &lt;strong&gt;encourage&lt;&#x2F;strong&gt; people around you to handle **differences
**, respect one another, &lt;strong&gt;listen&lt;&#x2F;strong&gt;, and &lt;strong&gt;learn&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But how? Here are a few suggestions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Build an awareness of other’s views&lt;&#x2F;strong&gt;. Encourage sharing each others’ stories,
mistakes, and vulnerabilities. The only way to build understanding and respect
is through everyday interactions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Welcome differences in opinions&lt;&#x2F;strong&gt;. Lead by example: Admit that you don’t know
everything and have an open mind to alternative points of view.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Accept mistakes with grace and humility&lt;&#x2F;strong&gt;. People may avoid conversations for
fear of saying the wrong thing or being misunderstood. Encourage that asking
dumb questions and making mistakes are totally okay. Give your teammates the
benefit of the doubt.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Disagree without being a jackass&lt;&#x2F;strong&gt;. Be clear that it’s fine to debate as long
as the conversation doesn’t turn into a flamewar of “&lt;em&gt;I’m right&lt;&#x2F;em&gt;” and “&lt;em&gt;You’re
wrong&lt;&#x2F;em&gt;”, Truth can coexist. Moreover, you don’t have to accept someone’s belief
to understand and respect it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;smooth-doc.com&#x2F;&quot;&gt;&lt;strong&gt;SmoothDoc&lt;&#x2F;strong&gt; is a tool where you can create MDX-based awesome
docs&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nnngroup.com&#x2F;articles&#x2F;fighting-linkrot&#x2F;&quot;&gt;An oldie but still valid point of view: &lt;strong&gt;Fighting LinkRot&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fluidtypography.com&#x2F;&quot;&gt;&lt;strong&gt;Fluid Typography&lt;&#x2F;strong&gt; is a technique to make the text scale based on the
viewport size&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Unleash Your Curiosity: Unlock Your Potential as a Leader</title>
        <published>2024-05-27T00:00:00+00:00</published>
        <updated>2024-05-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0023/"/>
        <id>https://zerotohero.dev/highlights/issue-0023/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0023/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;leader.png&quot; alt=&quot;Everyone has a leader within.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Everyone has a leader within.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the 23rd issue of&lt;strong&gt;Zero to Hero Highlights&lt;&#x2F;strong&gt;. A lot has happened
since the last issue. Let’s check them out, shall we?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;it-s-the-wonderful-time-of-the-year&quot;&gt;It’s the Wonderful Time of the Year&lt;&#x2F;h2&gt;
&lt;p&gt;It’s the holiday season when time stops, and you start relaxing and going with
the flow. I hope you spend time with your family and loved ones, enjoying and
cherishing every moment 🎅.&lt;&#x2F;p&gt;
&lt;p&gt;I am sure the new year will be fantastic. I plan to kick some epic ass in the
next year 🙂; I bet you’ll do the same too.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;same-content-new-name&quot;&gt;Same Content, New Name&lt;&#x2F;h2&gt;
&lt;p&gt;You might have realized that I’ve changed this newsletter’s name because calling
it “&lt;em&gt;Zero to Hero Weekly&lt;&#x2F;em&gt;” does not make sense when I publish once a month—if
I’m lucky, that is 😆.&lt;&#x2F;p&gt;
&lt;p&gt;So &lt;strong&gt;Zero to Hero Highlights&lt;&#x2F;strong&gt; is the new name.&lt;&#x2F;p&gt;
&lt;p&gt;Given the dynamic nature of my schedule, the intervals between my updates have
been more extended than a week, which reflects the multitude of ongoing projects
and commitments. However, the newsletter’s content will remain similar, as I’ll
follow a similar theme.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;got-my-mac-burger&quot;&gt;Got My Mac Burger&lt;&#x2F;h2&gt;
&lt;p&gt;As a Thanksgiving (&lt;em&gt;and a post-acquisition—see below&lt;&#x2F;em&gt;) present,&lt;a href=&quot;https:&#x2F;&#x2F;www.apple.com&#x2F;mac-studio&#x2F;&quot;&gt;&lt;strong&gt;I got a
beefy Mac Studio&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;11&amp;#x2F;Screenshot-2023-11-24-at-10.52.44-PM.png&quot; alt=&quot;This thing is a monster!&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;This thing is a monster!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I can achieve a lot with &lt;strong&gt;24 CPUs and 128 gigabytes of RAM&lt;&#x2F;strong&gt;; I can do a lot
with this beast of a machine. For example, it enables me to simulcast to multiple
platforms without requiring a separate streaming machine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;volkan-uses&quot;&gt;Volkan Uses&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan-uses&#x2F;&quot;&gt;I created a website containing a list of tools, gadgets,
software, and hardware&lt;&#x2F;a&gt; that I currently use, have used,
liked, and find worth mentioning.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;deer-in-the-valley&quot;&gt;Deer in the Valley&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2024-05-27&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We paused &lt;strong&gt;TalkSPIFFE&lt;&#x2F;strong&gt; for a while. We might resume it in the future.
SPIFFE already has its official community snyc-ups, and duplicating the
effort didn’t make sense. We might revisit the idea in the future, but for now,
it’s on hold.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Along with&lt;a href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;collections&#x2F;m1nN8r4LZxc-bw&quot;&gt;&lt;strong&gt;TalkSPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;contributor-sync&#x2F;&quot;&gt;&lt;strong&gt;VMware Secrets Manager Contributor
Hours&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, I’ve also started hosting a new tech podcast,
&lt;a href=&quot;https:&#x2F;&#x2F;vadidekigeyik.com&#x2F;&quot;&gt;&lt;strong&gt;Deer in the Valley (&lt;em&gt;Vadideki Geyik&lt;&#x2F;em&gt;)&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;By this writing,&lt;strong&gt;Deer in the Valley&lt;&#x2F;strong&gt;is among Turkey’s&lt;strong&gt;top 10&lt;&#x2F;strong&gt;in
the &lt;strong&gt;Technology&lt;&#x2F;strong&gt;category and&lt;strong&gt;top 16&lt;&#x2F;strong&gt;in Azerbaijan in the same category
again. We are having&lt;strong&gt;so much fun&lt;&#x2F;strong&gt;while recording the sessions, also reflected
in these stats.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With&lt;a href=&quot;https:&#x2F;&#x2F;vadidekigeyik.com&#x2F;team&quot;&gt;&lt;strong&gt;four folks from the Silly Cone Valley&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
we started a podcast about our experiences before and after working there and our
thoughts, ideas, and tips for those who want to follow a similar career path.
It’s very well-received by the community.&lt;&#x2F;p&gt;
&lt;p&gt;One caveat, though: The show is in&lt;strong&gt;Turkish&lt;&#x2F;strong&gt;. So, if you don’t know Turkish,
either use a simultaneous translation AI or maybe it’s time to learn a new
language to expand your horizons—and get lost in translation a little.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;I see the entire thing as therapy&lt;&#x2F;strong&gt;. We talk freely and candidly about the
good, bad, and ugly of the Tech Valley, our lives, and everything in between.&lt;&#x2F;p&gt;
&lt;p&gt;We do live talks on the&lt;a href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;kampus&quot;&gt;&lt;strong&gt;Kampus Discord&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and simulcast it over
&lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;&lt;strong&gt;Twitch&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;@vadideki-geyik&quot;&gt;&lt;strong&gt;YouTube&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. We typically livestream
the session &lt;strong&gt;every other Saturday at 10 am Pacific time&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;radio-geyik-deer-radio&quot;&gt;Radio Geyik 🦌 📻&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2024-05-21&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;This experiment didn’t work out as expected, and I’ve shut down the radio
station. I might revisit the idea in the future.&lt;&#x2F;p&gt;
&lt;p&gt;The YouTube channel still continues to simultcast streams, though.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We simultcast the &lt;em&gt;Deer in the Valley&lt;&#x2F;em&gt; live shows on
&lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;&lt;strong&gt;ZeroToHero Twitch&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;kampus&quot;&gt;&lt;strong&gt;Kampus Discord&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, and
&lt;a href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;@vadideki-geyik&quot;&gt;&lt;strong&gt;Deer in the Valley YouTube&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to all of the above, I’m experimenting with something new. Whenever
the channel is idle, I stream otherworldly beats there. So, if you want
something to listen to while getting stuff done,&lt;a href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;@vadideki-geyik&quot;&gt;&lt;strong&gt;head down to the Dear in the
Valley YouTube channel&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;npm-install-deers&quot;&gt;&lt;code&gt;npm install deers&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We also have an NPM package called&lt;a href=&quot;https:&#x2F;&#x2F;npmjs.com&#x2F;package&#x2F;deers&quot;&gt;&lt;strong&gt;deers&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
which is a helper to provide random deer ASCII art images.&lt;&#x2F;p&gt;
&lt;p&gt;It’s a fun little project; &lt;a href=&quot;https:&#x2F;&#x2F;npmjs.com&#x2F;package&#x2F;deers&quot;&gt;&lt;strong&gt;check it out&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Contributions are—as always—welcome.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hey-what-is-this-kampus-thing-anyway&quot;&gt;Hey, What Is This “&lt;em&gt;Kampus&lt;&#x2F;em&gt;” Thing Anyway&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;kampus&quot;&gt;&lt;strong&gt;Kampus is a Discord community&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; where anyone interested in learning
about tech can join. The closest way to visualize it is to imagine an actual
College Campus with lectures, student clubs, co-working sessions, libraries,
etc.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;So, Is Kampus Like a Study Group? Or…&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We intentionally keep the definition of “&lt;em&gt;Kampus&lt;&#x2F;em&gt;” vague so that it will
evolve and define itself.&lt;&#x2F;p&gt;
&lt;p&gt;I see Kampus as a community of like-minded individuals who want to grow and
become a better version of themselves.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;hello-broadcom&quot;&gt;Hello Broadcom&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reuters.com&#x2F;markets&#x2F;deals&#x2F;broadcom-closes-69-bln-vmware-deal-after-china-approval-2023-11-22&#x2F;&quot;&gt;&lt;strong&gt;Broadcom has acquired VMware&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; after dragging for around
one and a half years.&lt;&#x2F;p&gt;
&lt;p&gt;That has been one and a half years of waiting in relative stress and anxiety.
So, I’m&lt;strong&gt;glad&lt;&#x2F;strong&gt;that the deal has been sealed. This means I will be working at a
new company, doing the same thing: doing epic innovations around Radio Access
Networks, leveraging&lt;a href=&quot;https:&#x2F;&#x2F;www.o-ran.org&#x2F;&quot;&gt;&lt;strong&gt;O-RAN&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This was a**$69B**acquisition, one of the largest (&lt;em&gt;if not “the” largest&lt;&#x2F;em&gt;) of
its kind. So, it will take some time for things to settle down. As things settle
down, I’m sure I’ll have more to share in the next highlight. But overall, it’s
pretty darn good news, and I’m confident things will be epic!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wait-how-about-vsecm&quot;&gt;Wait, How About VSecM?&lt;&#x2F;h2&gt;
&lt;p&gt;One immediate question I’ve received from various channels is whether this
merger will impact&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;&lt;strong&gt;VMware Secrets Manager&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; in any way. As
far as I can tell, there are no immediate changes in the project’s status and
governance. We’ll continue to secure the cloud-native world one secret at a
time. The&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;&lt;strong&gt;VMware Secrets Manager&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; will remain open-source
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vmware-tanzu&#x2F;secrets-manager&quot;&gt;under VMware’s GitHub organization&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That said, things are new. I will inform everyone in various channels, including
VSecM Slack workspace, Twitter, and other communities if I receive any specific
guidance related to&lt;strong&gt;VMware Secrets Manager&lt;&#x2F;strong&gt;. However, I don’t expect any
significant changes. From the vantage point of VSecM, things will continue to
be “&lt;em&gt;business as usual&lt;&#x2F;em&gt;.”&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vmware-secrets-manager-is-growing&quot;&gt;VMware Secrets Manager Is Growing&lt;&#x2F;h2&gt;
&lt;p&gt;On that topic, &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;maintainers&#x2F;&quot;&gt;&lt;strong&gt;VSecM has a team of core maintainers right
now&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. And we are getting external contributions, too.
To contribute to the project, contact me or&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;maintainers&#x2F;&quot;&gt;&lt;strong&gt;any of the core
contributors&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, and we’ll do our best to help you hit
the ground running.&lt;&#x2F;p&gt;
&lt;p&gt;To learn more about VSecM,&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;&lt;strong&gt;check out its website&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;federating-secrets-across-clusters&quot;&gt;Federating Secrets Across Clusters&lt;&#x2F;h2&gt;
&lt;p&gt;For the&lt;strong&gt;VMware Secrets Manager&lt;&#x2F;strong&gt;enthusiasts who have been following the
project’s development for a while, I’ve experimented with cross-cluster
federated secrets sharing using&lt;strong&gt;VSecM&lt;&#x2F;strong&gt;, which went well.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;876814597&quot;&gt;&lt;strong&gt;I also created a quick demo&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;878578526&quot;&gt;&lt;strong&gt;talked about it in SIG SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In addition, I am working on a tutorial to show step-by-step how to establish
cross-cluster secrets federation; I’ll share it in various channels when it’s
done.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;moved-vmware-secrets-manager-s-build-server-to-linode&quot;&gt;Moved VMware Secrets Manager’s Build Server to Linode&lt;&#x2F;h2&gt;
&lt;p&gt;Another&lt;strong&gt;VSecM&lt;&#x2F;strong&gt;news is since I don’t need anything specific to AWS for VSecM’s
build needs, I moved it to&lt;a href=&quot;https:&#x2F;&#x2F;linode.com&#x2F;&quot;&gt;&lt;strong&gt;Linode&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;: fanatical support
and excellent price&#x2F;performance ratio. I am delighted with them so far.&lt;&#x2F;p&gt;
&lt;p&gt;Besides, you can get almost twice the performance from Linode with the same
amount of money you shell out to AWS. And their tech support is top-notch; they
have never let me down.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vmware-secrets-manager-onboarding-session&quot;&gt;VMware Secrets Manager Onboarding Session&lt;&#x2F;h2&gt;
&lt;p&gt;Within the context of&lt;a href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;kampus&quot;&gt;&lt;strong&gt;Kampus&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, I’ve also delivered a 3-hour
onboarding session for&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;&lt;strong&gt;VMware Secrets Manager&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to a group of
interested developers who want to contribute but don’t know where to start.&lt;&#x2F;p&gt;
&lt;p&gt;The training was very well received.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I gave a presentation about what&lt;strong&gt;VSecM&lt;&#x2F;strong&gt;is, what a&lt;strong&gt;Secrets Manager&lt;&#x2F;strong&gt;is, and
why we need such a thing,&lt;&#x2F;li&gt;
&lt;li&gt;Followed by a code walk and architectural overview,&lt;&#x2F;li&gt;
&lt;li&gt;Finally, doing a live demo to show how&lt;strong&gt;VSecM&lt;&#x2F;strong&gt;works in practice,&lt;&#x2F;li&gt;
&lt;li&gt;Then, there was a&lt;strong&gt;Q&amp;amp;A&lt;&#x2F;strong&gt;session to wrap things up.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It was great, and the project received many contributions after the onboarding
session. Which motivates me to do more of the same.&lt;&#x2F;p&gt;
&lt;p&gt;Next, I plan to do a follow-up session about setting up a&lt;strong&gt;VSecM&lt;&#x2F;strong&gt;development
environment.&lt;&#x2F;p&gt;
&lt;p&gt;I record these training sessions and share them&lt;a href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;kampus&quot;&gt;&lt;strong&gt;exclusively with the Kampus
members&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. So, to watch the videos, you’ll need to&lt;a href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;kampus&quot;&gt;&lt;strong&gt;join
Kampus&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zero-to-hero-live-streams-are-back&quot;&gt;Zero to Hero Live Streams are Back&lt;&#x2F;h2&gt;
&lt;p&gt;Another piece of news is that I’ve started streaming on the&lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;&lt;strong&gt;Zero to Hero
Twitch channel&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; more frequently.&lt;&#x2F;p&gt;
&lt;p&gt;Whenever I work on something unrelated to my work at VMware that I can share
with you folks,&lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;&lt;strong&gt;I stream it&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As mentioned, I also simultcast the stream on&lt;a href=&quot;https:&#x2F;&#x2F;youtube.com&#x2F;@vadideki-geyik&quot;&gt;&lt;strong&gt;Deer in the Valley (Vadideki
Geyik) YouTube Channel&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and the&lt;a href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;kampus&quot;&gt;&lt;strong&gt;Ada Lovelace Stage on the
Kampus Discord Server&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;opsbeacon-has-shown-much-progress&quot;&gt;OpsBeacon Has Shown Much Progress&lt;&#x2F;h2&gt;
&lt;p&gt;Another project that has shown much progress is &lt;a href=&quot;https:&#x2F;&#x2F;ob2.ai&#x2F;&quot;&gt;&lt;strong&gt;OpsBeacon&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Although I don’t directly contribute to the code, I’m one of its advisors, so I
constantly communicate with the team, exchanging ideas and discussing
architecture. And they have done a tremendous job in the last couple of months.&lt;&#x2F;p&gt;
&lt;p&gt;I have used&lt;strong&gt;OpsBeacon&lt;&#x2F;strong&gt;in my workflows and automation, and I can honestly say
that it’s incredible. It’s a tool that you don’t know how much you need
OpsBeacon badly until you use it. And after you begin using it, you are hooked.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;Nurturing your curiosity can impact your leadership skills, learning abilities,
and value as a team member. Here are four supported methods to cultivate your
curiosity.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;take-ownership&quot;&gt;Take Ownership&lt;&#x2F;h3&gt;
&lt;p&gt;Don’t wait for factors like being too busy or relying on your mentors or
superiors to drive your growth. Recognize that fostering curiosity is solely
your responsibility. Commit to regularly allocate time to explore topics that
intrigue you.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;identify-your-interests&quot;&gt;Identify Your Interests&lt;&#x2F;h3&gt;
&lt;p&gt;Reflect on the subjects you’re genuinely eager to learn more about or the areas
you aspire to master. Dedicate 20-30 minutes each day pursuing these interests
through reading, writing, or engaging in discussions with like-minded
individuals.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;break-your-routines&quot;&gt;Break Your Routines&lt;&#x2F;h3&gt;
&lt;p&gt;Never underestimate the power of shaking up your routines. By changing how and
when you perform tasks, exploring routes to work, trying out lunch spots, or
engaging in diverse weekend activities, you can significantly expand your
mindset and invite fresh ideas into your life.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;embrace-novelty&quot;&gt;Embrace Novelty&lt;&#x2F;h3&gt;
&lt;p&gt;Be open-minded and willing to try things even if they don’t initially align with
your interests or experiences. Embrace the thrill of discovering hobbies,
indulging in “pleasures,” and embracing diversity in all aspects of life.&lt;&#x2F;p&gt;
&lt;p&gt;These strategies will help foster curiosity within you. Enhance your growth as a
leader, learner, and valued team member.&lt;&#x2F;p&gt;
&lt;p&gt;Feel free to change direction and give something a shot if it doesn’t connect
with you or pan out.&lt;&#x2F;p&gt;
&lt;p&gt;By following these guidelines, you can actively nurture your curiosity,
ultimately contributing to professional development.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;inspektor-gadget&#x2F;inspektor-gadget&quot;&gt;&lt;code&gt;inspektor-gadget&lt;&#x2F;code&gt; is an eBPF tool and systems inspection framework for
Kubernetes, containers, and Linux hosts&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubeshark&#x2F;kubeshark&quot;&gt;&lt;code&gt;kubeshark&lt;&#x2F;code&gt; is an API traffic analyzer for Kubernetes providing real-time
K8s protocol-level visibility&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;esm.sh&#x2F;&quot;&gt;&lt;code&gt;esm.sh&lt;&#x2F;code&gt; is a modern CDN that allows you to import es6 modules from a
URL&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Live Stream Dream</title>
        <published>2024-05-27T00:00:00+00:00</published>
        <updated>2024-05-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/tips/talkspiffe-stream-setup/"/>
        <id>https://zerotohero.dev/tips/talkspiffe-stream-setup/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/tips/talkspiffe-stream-setup/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;stream.png&quot; alt=&quot;Streaming.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Streaming.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;It is an understatement to say that “&lt;em&gt;&lt;strong&gt;streaming is complicated&lt;&#x2F;strong&gt;.&lt;&#x2F;em&gt;”&lt;&#x2F;p&gt;
&lt;p&gt;Live streaming, especially involving &lt;em&gt;multiple participants&lt;&#x2F;em&gt;, is an intricate
technology dance. Each puzzle must harmonize to ensure a seamless, interactive,
high-quality viewer experience.&lt;&#x2F;p&gt;
&lt;p&gt;The complexity increases even more when we decide to share not just our faces or
voices but our desktops too. This is the path we have chosen in &lt;a href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;VadidekiVolkan&#x2F;schedule&quot;&gt;our ongoing
&lt;strong&gt;TalkSPIFFE&lt;&#x2F;strong&gt; series&lt;&#x2F;a&gt;: The live
office hours we dedicate to the &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; community.&lt;&#x2F;p&gt;
&lt;p&gt;This article provides a comprehensive guide for designing an intricate
multi-platform streaming model. I want this to be a resource for my future self
and the fantastic community interested in replicating such a setup. It’s an
insider look into the dynamic and complex world of multi-streaming, showing how
technology, when used innovatively, can foster powerful and engaging digital
experiences.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-16-at-11.33.11-AM.png&quot; alt=&quot;Eli (left) and I (right) enjoying the show.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Eli (left) and I (right) enjoying the show.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;talkspiffe-is-that-something-new-can-i-eat-it&quot;&gt;TalkSPIFFE? Is That Something New? Can I Eat It?&lt;&#x2F;h2&gt;
&lt;p&gt;Before I continue, it’s a perfect moment to delve deeper into what
&lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;&lt;strong&gt;TalkSPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; truly is.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;TalkSPIFFE&lt;&#x2F;strong&gt; is more than just a live stream; it’s a platform designed to
demystify and elucidate the intricacies of the
&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;Secure Production Identity Framework for
Everyone&lt;&#x2F;em&gt;) technology. It’s an opportunity for &lt;strong&gt;SPIFFE&#x2F;SPIRE&lt;&#x2F;strong&gt; enthusiasts,
professionals, and those who want to learn more about &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;
to come together and engage in enlightening discussions, learn from each other,
and help foster a community.&lt;&#x2F;p&gt;
&lt;p&gt;We’ve aimed for &lt;strong&gt;TalkSPIFFE&lt;&#x2F;strong&gt; to be a space that feels both welcoming and
informative rather than being strictly academic or intimidatingly technical. We
believe in a more dynamic interaction that allows anyone and everyone to gain
knowledge and contribute unique insights.&lt;&#x2F;p&gt;
&lt;p&gt;In our weekly sessions every other Friday, we tackle various &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;-related
topics, discuss the latest updates, share best practices, and do live demos.&lt;&#x2F;p&gt;
&lt;p&gt;Whether you’re just dipping your toes into the &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; waters or are a
seasoned professional looking to stay updated and share your wisdom,
&lt;strong&gt;TalkSPIFFE&lt;&#x2F;strong&gt; offers you a place to do just that.&lt;&#x2F;p&gt;
&lt;p&gt;So join us in our upcoming streams, and let’s make &lt;strong&gt;TalkSPIFFE&lt;&#x2F;strong&gt; a thriving
platform for learning, sharing, and collaborative growth in &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and *
&lt;em&gt;SPIRE&lt;&#x2F;em&gt;*.&lt;&#x2F;p&gt;
&lt;p&gt;That was the segue 🙂 Now, back to our setup.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-deep-dive-into-the-talkspiffe-streaming-setup&quot;&gt;A Deep Dive Into the TalkSPIFFE Streaming Setup&lt;&#x2F;h2&gt;
&lt;p&gt;Since my streaming setup is far from ordinary, I wanted to give you an inside
look into the process.&lt;&#x2F;p&gt;
&lt;p&gt;In this article, I’ll share how we’ve used applications like
&lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;audiohijack&#x2F;&quot;&gt;&lt;strong&gt;Audio Hijack&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;loopback&#x2F;&quot;&gt;&lt;strong&gt;Loopback&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;airfoil&#x2F;mac&#x2F;&quot;&gt;&lt;strong&gt;Airfoil Satellite&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;farrago&#x2F;&quot;&gt;&lt;strong&gt;Farrago&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
&lt;strong&gt;&lt;em&gt;Zoom&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;, &lt;strong&gt;&lt;em&gt;Discord&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;help.twitch.tv&#x2F;s&#x2F;article&#x2F;guest-star?language=en_US&quot;&gt;Twitch’s Guest Star feature&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;obsproject.com&#x2F;&quot;&gt;&lt;strong&gt;Open Broadcaster Software (&lt;em&gt;OBS&lt;&#x2F;em&gt;)&lt;&#x2F;strong&gt;,&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;waydabber&#x2F;BetterDisplay&quot;&gt;&lt;strong&gt;BetterDisplay&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to create a
compelling and interactive live streaming experience.&lt;&#x2F;p&gt;
&lt;p&gt;Each platform plays a vital role, from integrating our desktops through Zoom and
routing our audio via a Discord voice channel to broadcasting our video feed on
Twitch. The added twist of background music takes the viewer experience to
another level, immersing them in our conversational and instructional narrative.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;twitch-s-guest-star-feature-is-a-life-saver&quot;&gt;Twitch’s Guest Star Feature is a Life Saver&lt;&#x2F;h2&gt;
&lt;p&gt;Navigating the turbulent waters of streaming a guest’s audio and video on a live
stream can be challenging. This is where &lt;a href=&quot;https:&#x2F;&#x2F;help.twitch.tv&#x2F;s&#x2F;article&#x2F;guest-star&quot;&gt;Twitch’s innovative “&lt;strong&gt;Guest Star&lt;&#x2F;strong&gt;” feature&lt;&#x2F;a&gt;
shines.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;Guest Star&lt;&#x2F;strong&gt; tool lets you establish “guest slot” browser sources you can
deftly arrange in your broadcasting software. With ease, you can swiftly add or
change the guests appearing in that slot directly through &lt;strong&gt;Twitch&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The beauty of this feature is its &lt;strong&gt;simplicity&lt;&#x2F;strong&gt;: Streamlining the process of
integrating a guest’s video feed into your live stream, and all without needing
to dabble with complex configurations or multiple third-party tools.&lt;&#x2F;p&gt;
&lt;p&gt;Using this feature, I can stream the camera of my guest directly as a browser
source into my Open Broadcaster Software (&lt;strong&gt;OBS&lt;&#x2F;strong&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;If I want, I can also change the guests appearing in that slot directly through
Twitch, effortlessly integrating a guest’s video feed into my live stream
without juggling complex configurations or multiple third-party tools.&lt;&#x2F;p&gt;
&lt;p&gt;So far, everything about &lt;strong&gt;Guest Star&lt;&#x2F;strong&gt; works like a charm.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-sneak-peek-at-the-backstage&quot;&gt;A Sneak Peek at the Backstage&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s how we typically initiate our stream:&lt;&#x2F;p&gt;
&lt;p&gt;Before the event starts, there is a 15-minute interval where the stream will be
live and a “&lt;em&gt;starting soon&lt;&#x2F;em&gt;” scene with a countdown timer is displayed life
(&lt;em&gt;the &lt;code&gt;63:46&lt;&#x2F;code&gt; countdown timer in the image below is just for demonstration
purposes; consider it something like 11:25 or similar—starting from 15:00 and
counting backward&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-2.30.25-PM.png&quot; alt=&quot;The &amp;#x27;waiting room&amp;#x27; and the countdown timer.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The &amp;#x27;waiting room&amp;#x27; and the countdown timer.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;During that time, I invite &lt;a href=&quot;https:&#x2F;&#x2F;www.linkedin.com&#x2F;in&#x2F;elinesterov&#x2F;&quot;&gt;&lt;strong&gt;Eli&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
&lt;strong&gt;TalkSPIFFE&lt;&#x2F;strong&gt;’s cohost, as a “&lt;a href=&quot;https:&#x2F;&#x2F;help.twitch.tv&#x2F;s&#x2F;article&#x2F;guest-star?language=en_US&quot;&gt;&lt;em&gt;guest star&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;”
to a virtual backstage. That’s how I can use his camera feed on the stream.&lt;&#x2F;p&gt;
&lt;p&gt;In addition, I initiate a Discord voice chat session from which we air Eli’s
voice feed.&lt;&#x2F;p&gt;
&lt;p&gt;After I ensure the guests’ camera and sound work fine, using the &lt;strong&gt;Studio Mode&lt;&#x2F;strong&gt;
of OBS, I make sure that all the scenes and camera feeds are up and running and
there is no missing source anywhere.&lt;&#x2F;p&gt;
&lt;p&gt;This step is significant because when you reboot your system or restart OBS,
sometimes OBS fails to detect some of the input sources, and you’ll need to
update them manually.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-2.40.42-PM.png&quot; alt=&quot;OBS&amp;#x27;s Studio mode. Left: Upcoming scene; right: the scene streaming live.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;OBS&amp;#x27;s Studio mode. Left: Upcoming scene; right: the scene streaming live.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I use &lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;audiohijack&#x2F;&quot;&gt;&lt;strong&gt;Audio Hijack&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; for chaining,
filtering, and mixing various audio streams. And I use
&lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;loopback&#x2F;&quot;&gt;&lt;strong&gt;Loopback&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to create virtual audio interfaces that I
can set as audio input sources for Zoom and Discord. As you’ll see shortly, the
loopback interfaces I make in Audio Hijack will find their respective places
as “&lt;em&gt;sinks&lt;&#x2F;em&gt;” in Audio Hijack.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-talkspiffe-audio-chain&quot;&gt;The &lt;strong&gt;TalkSPIFFE&lt;&#x2F;strong&gt; Audio Chain&lt;&#x2F;h2&gt;
&lt;p&gt;Here follows our &lt;strong&gt;Audio Hijack&lt;&#x2F;strong&gt; stream setup. You can tap on the image to see
an enlarged version. I will zoom in and explain each box in this layout below:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;audio-hijack.png&quot; alt=&quot;The audio chain.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The audio chain.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;It might look a bit involved, though fear not; we’ll dissect the entire audio
chain piece by piece.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s zoom into the topmost browser source first:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-13-at-1.39.25-PM.png&quot; alt=&quot;Splitting the background music.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Splitting the background music.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The input source named “&lt;strong&gt;MUSIC IN&lt;&#x2F;strong&gt;” is Safari playing a playlist of
instrumental music as background music for &lt;strong&gt;TalkSPIFFE&lt;&#x2F;strong&gt;. I split the audio
into three parts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The top row is adjusted to a lower volume level and is to be used as the
background music when we talk,&lt;&#x2F;li&gt;
&lt;li&gt;The middle row has a higher volume level, and it’s to be played before the
stream starts or during breaks,&lt;&#x2F;li&gt;
&lt;li&gt;And the bottom one is a separate track that will be streamed to my and my
guest Eli’s headphones.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then, there is an A&#x2F;B switch (&lt;em&gt;see the image below&lt;&#x2F;em&gt;) where the top two rows
meet:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-13-at-1.39.55-PM.png&quot; alt=&quot;To the output device.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;To the output device.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Then, there is an A&#x2F;B switch (&lt;em&gt;see the image above&lt;&#x2F;em&gt;) where the top two rows meet
for me to toggle between two different volume levels and send the virtual output
devices named “&lt;strong&gt;Stream Background Pass&lt;&#x2F;strong&gt;” and “&lt;strong&gt;Zoom Mic PassThru&lt;&#x2F;strong&gt;,”
respectively.&lt;&#x2F;p&gt;
&lt;p&gt;These virtual devices are loopback audio interfaces that I created using
&lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;loopback&#x2F;&quot;&gt;&lt;strong&gt;Loopback&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stream Background Pass&lt;&#x2F;strong&gt; is used by OBS as a background music source for the
stream,&lt;&#x2F;li&gt;
&lt;li&gt;and &lt;strong&gt;Zoom Mic PassThru&lt;&#x2F;strong&gt; is sent to the Zoom video chat session that we share
this stream simultaneously.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you look closely, you’ll see that the top set of volume filters is lower than
the bottom ones on the second row. This way, we can have quieter background
music to talk over during the stream without becoming too loud to distract the
audience. During breaks or before the stream begins, I can switch to the bottom
lane to let the audience enjoy the music to its fullest.&lt;&#x2F;p&gt;
&lt;p&gt;Then comes the third row. Follow the arrows in the image below:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-13-at-1.40.25-PM.png&quot; alt=&quot;We also enjoy the background music while streaming.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;We also enjoy the background music while streaming.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The third row is what Eli and I hear in our headphones as a piece of background
music so that we can bob our heads to the same beats during the event 🙂.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s move on to our next audio source: Discord. Discord is where I capture
Eli’s voice and forward it into two mixers.&lt;&#x2F;p&gt;
&lt;p&gt;You’ll also see that “&lt;strong&gt;&lt;em&gt;Guest Star&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” audio is forwarded to the same mixer. I
aim to use the “Guest Star” feature as a backup audio source. So, if anything
happens to Discord, I can disable Discord and swap it to Guest Star instead to
capture Eli’s audio.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-13-at-1.40.58-PM.png&quot; alt=&quot;Splitting the guest audio.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Splitting the guest audio.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Or an alternative way is to use an A&#x2F;B switch and keep both of the input sources
enabled and switch between them using the A&#x2F;B switch:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-10.04.25-PM.png&quot; alt=&quot;Using an A&amp;#x2F;B switch.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Using an A&amp;#x2F;B switch.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Then, in the middle of the setup, I have two audio sources:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ELI AUDIO IN&lt;&#x2F;strong&gt; (&lt;em&gt;Discord&lt;&#x2F;em&gt;) is a Discord voice chat that Eli and I will use.
I take Eli’s audio from that source to push it into
&lt;a href=&quot;https:&#x2F;&#x2F;obsproject.com&#x2F;&quot;&gt;OBS (&lt;em&gt;Open Broadcast Software&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt; as a stream source.
While at that, I’ll also clone it and send it to my headphones through a separate channel.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;GUEST STAR&lt;&#x2F;strong&gt; (&lt;em&gt;Chrome&lt;&#x2F;em&gt;) is where
Eli’s &lt;a href=&quot;https:&#x2F;&#x2F;help.twitch.tv&#x2F;s&#x2F;article&#x2F;guest-star?language=en_US&quot;&gt;Twitch Guest Star&lt;&#x2F;a&gt;
browser source is. I keep it as a backup source in case Discord’s audio fails.
Though I’ve had minor glitches while testing it as an audio source, I’m
reluctant to use it. For now, it’s just a backup for emergencies.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1000&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-13-at-1.42.00-PM.png&quot; alt=&quot;Mixing the vocals.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Mixing the vocals.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The orange lines above pass through my microphone
(&lt;a href=&quot;https:&#x2F;&#x2F;www.shure.com&#x2F;en-US&#x2F;products&#x2F;microphones&#x2F;sm7b&quot;&gt;&lt;strong&gt;&lt;em&gt;Shure SM7B&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;),
a general-purpose noise filter, a vocal-specialized noise filter, and an
equalizer before it reaches an A&#x2F;B switch, respectively.&lt;&#x2F;p&gt;
&lt;p&gt;I use the A&#x2F;B switch to quickly prevent my voice from being sent to the stream.
That way, I can tell something Eli behind the scenes without my voice broadcast
live.&lt;&#x2F;p&gt;
&lt;p&gt;In the image below are my equalizer settings for the curious; this setup makes
more voice subtly deeper. Overdo it, and you’ll sound like Darth Vader or an
accented version of Morgan Freeman. Be very careful.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-13-at-1.28.53-PM.png&quot; alt=&quot;Equalizer settings.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Equalizer settings.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Since everyone’s audio gear, vocal cords, room, and vocal modulation needs
differ, your equalizer setting will likely vary significantly from mine. So, I’m
leaving this just as a reference point. Trust your ears and experiment with the
settings until you are satisfied.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: Subtler is better. Be so subtle that the difference is almost
unnoticeable to an untrained ear. If you realize what you generate sounds
considerably different than you, then you have overdone it. And, trust me, it’s
&lt;strong&gt;very&lt;&#x2F;strong&gt; easy to overdo with one’s own vocals. When you set it up, take a
30-minute break, do something else, and then listen to your audio again. If it
sounds odd, you have overshot some settings; try readjusting it.&lt;&#x2F;p&gt;
&lt;p&gt;And below is my noise gate. Again, this is a representative snapshot and may not
meet your needs. Adjust the configuration yourself, and always use your ears.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-13-at-1.29.12-PM.png&quot; alt=&quot;Noise gate settings.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Noise gate settings.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The green line has the same setup except for the intermediate filtering. It’s
the sound coming from our dear guest, Eli. I’m sharing the image below again for
your convenience:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1000&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-13-at-1.42.00-PM.png&quot; alt=&quot;Mixing the vocals.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Mixing the vocals.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Then my voice and Eli’s are combined, compressed, gain-adjusted, and set to
“&lt;em&gt;&lt;strong&gt;SPIFFE Loopback Audio&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;” as a sink (&lt;em&gt;see below&lt;&#x2F;em&gt;)—&lt;em&gt;SPIFFE Loopback Audio&lt;&#x2F;em&gt;
is a virtual audio device.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-13-at-1.42.32-PM.png&quot; alt=&quot;Onwards to the virtual audio device.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Onwards to the virtual audio device.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I created “&lt;strong&gt;&lt;em&gt;SPIFFE Loopback Audio&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” using &lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;loopback&#x2F;&quot;&gt;&lt;strong&gt;Loopback&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;;
I use it in OBS as an audio source to send to the stream.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-13-at-1.43.14-PM.png&quot; alt=&quot;Combining with the background music.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Combining with the background music.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Then the background music (&lt;em&gt;arrows coming from the top&lt;&#x2F;em&gt;) and our combined
vocals (&lt;em&gt;arrows coming from the bottom&lt;&#x2F;em&gt;) are mixed into a single stream and sent
to the “&lt;strong&gt;Zoom Mic PassTru&lt;&#x2F;strong&gt;” Loopback virtual device to be used as an audio
source in Zoom (&lt;em&gt;see below&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-13-at-1.44.40-PM.png&quot; alt=&quot;Mixing my vocals with the background music.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Mixing my vocals with the background music.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This final image above shows how my vocals are combined with the background
music and pushed toward the “&lt;strong&gt;Volkan Just Mic&lt;&#x2F;strong&gt;” virtual audio device. This is
what Eli hears.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pinning-important-audio-controls&quot;&gt;Pinning Important Audio Controls&lt;&#x2F;h2&gt;
&lt;p&gt;One helpful feature of &lt;strong&gt;Audio Hijack&lt;&#x2F;strong&gt; is I can float and pin almost everything
in the UI. Here are my most frequently used controls dragged to the top corner
of my widescreen.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-4.19.01-AM.png&quot; alt=&quot;You can pin what you want, and ignore the rest.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;You can pin what you want, and ignore the rest.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This feature allows me to hide the convoluted chain of filters from my view
during the stream and focus on the few essential elements that matter most.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recent-changes-after-our-first-pilot&quot;&gt;Recent Changes After Our First Pilot&lt;&#x2F;h2&gt;
&lt;p&gt;After our first pilot today, we decided it would be much easier to simplify
things by not streaming Zoom altogether. In addition, using Twitch’s &lt;strong&gt;Guest
Star&lt;&#x2F;strong&gt; feature as an audio source worked better for Eli than Discord’s audio.
So, for now, we’ll use Discord only to share Eli’s Desktop, and for his camera
and audio, we’ll use Twitch’s &lt;strong&gt;Guest Star&lt;&#x2F;strong&gt; feature.&lt;&#x2F;p&gt;
&lt;p&gt;Considering this, here’s our (&lt;em&gt;quote&lt;&#x2F;em&gt;) “simplified” audio pipeline:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-16-at-12.34.34-PM.png&quot; alt=&quot;Maybe not quite &amp;#x27;as&amp;#x27; simple, but it looks good 🙂.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Maybe not quite &amp;#x27;as&amp;#x27; simple, but it looks good 🙂.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;a-dedicated-streaming-machine&quot;&gt;A Dedicated Streaming Machine&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2021-05-27&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan-uses&#x2F;&quot;&gt;my new Mac Studio&lt;&#x2F;a&gt; I don’t need a dedicated
streaming machine anymore. I can do everything on a single machine.&lt;&#x2F;p&gt;
&lt;p&gt;However, keeping a separate machine for streaming is still a good idea.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To ensure a smooth streaming experience I use two machines:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A Mac Mini that I use as a demo&#x2F;screencast machine. I’ll call it the &lt;strong&gt;demo
machine&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;And a Macbook Pro that I use specifically for OBS and streaming and nothing
else. I make sure that nothing unnecessary runs on it. I’ll call it the
&lt;strong&gt;streaming machine&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But why would I need a different machine to stream? Can’t it be done on the same
box? Well, short answer: If you are using Apple devices, you’ll have to
&lt;strong&gt;&lt;em&gt;cut many corners&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; to make streaming on a single machine work flawlessly.
Using two machines provides better stream quality and will make my life much
easier.&lt;&#x2F;p&gt;
&lt;p&gt;For a longer answer: One of the challenges we tackled in our &lt;strong&gt;TalkSPIFFE&lt;&#x2F;strong&gt;
setup is managing the computational load of running demos while live streaming.
Since some of our demonstrations can be quite resource-intensive, performing
them on the same machine as the live stream could potentially degrade the
stream’s quality, leading to lower bitrates, missing frames, and a sub-optimal
viewing experience.&lt;&#x2F;p&gt;
&lt;p&gt;To set this dual-machine configuration up, firstly, I connected the HDMI output
of my demo machine to an &lt;a href=&quot;https:&#x2F;&#x2F;www.elgato.com&#x2F;us&#x2F;en&#x2F;p&#x2F;cam-link-4khttps:&#x2F;&#x2F;www.elgato.com&#x2F;us&#x2F;en&#x2F;p&#x2F;cam-link-4k&quot;&gt;&lt;strong&gt;Elgato Camlink 4K&lt;&#x2F;strong&gt; capture card&lt;&#x2F;a&gt;,
which is plugged into my streaming machine. I created a 1080p virtual display on
my demo machine to share the required content using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;waydabber&#x2F;BetterDisplay&quot;&gt;&lt;strong&gt;BetterDisplay&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After connecting it to the streaming machine, too, &lt;strong&gt;Camlink 4K&lt;&#x2F;strong&gt; identifies
itself as an additional display on my demo machine.&lt;&#x2F;p&gt;
&lt;p&gt;I mirrored the virtual monitor onto the Camlink 4K to have a separate view that
I can enlarge on my larger 32“ monitor if I need to. In addition, the mirroring
allows me to use a copy of the demo window right in front of me so that I won’t
have to tilt my unnecessarily on the live stream.&lt;&#x2F;p&gt;
&lt;p&gt;The following set of images shows what the overall setup looks like.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2023&#x2F;06&#x2F;Screenshot-2023-06-15-at-2.57.58-PM.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2023&#x2F;06&#x2F;Screenshot-2023-06-15-at-2.58.03-PM.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2023&#x2F;06&#x2F;Screenshot-2023-06-15-at-2.58.21-PM.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2023&#x2F;06&#x2F;Screenshot-2023-06-15-at-2.58.34-PM.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2023&#x2F;06&#x2F;Screenshot-2023-06-15-at-2.59.56-PM.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The feed from the &lt;strong&gt;Camlink 4K&lt;&#x2F;strong&gt; is then directed into
&lt;a href=&quot;https:&#x2F;&#x2F;obsproject.com&#x2F;&quot;&gt;&lt;strong&gt;OBS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; on my streaming machine. You can check the
“Physical Setup” section for additional details on how things connect at the
physical layer.&lt;&#x2F;p&gt;
&lt;p&gt;Once things are set up this way, the demo machine shoulders the burden of
resource-intensive demos. In contrast, my streaming machine remains dedicated to
delivering a smooth streaming experience without system degradation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;making-stream-management-easier&quot;&gt;Making Stream Management Easier&lt;&#x2F;h2&gt;
&lt;p&gt;However, this dual-machine arrangement necessitates fast switching between the
two systems during a live stream. To overcome this challenge, I adopted a few
strategies:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;network-stability&quot;&gt;Network Stability&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;All&lt;&#x2F;strong&gt; &lt;strong&gt;of my connections are wired&lt;&#x2F;strong&gt; to ensure stable network connectivity. I
learned the hard way long ago never to rely on WiFi for such a critical setup.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;remote-connection-to-the-streaming-machine&quot;&gt;Remote Connection to the Streaming Machine&lt;&#x2F;h3&gt;
&lt;p&gt;To streamline the control process, I remotely connect to my streaming machine
from my demo machine. This way, I can use a single keyboard to interact with
both machines.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;keyboard-and-mouse-that-can-connect-to-multiple-devices&quot;&gt;Keyboard and Mouse that Can Connect to Multiple Devices&lt;&#x2F;h3&gt;
&lt;p&gt;There can be tricky moments when I need to move my mouse pointer into the
virtual monitor – a task that’s impossible when you are remotely connected. To
circumnavigate this, I use a
&lt;a href=&quot;https:&#x2F;&#x2F;www.logitech.com&#x2F;en-us&#x2F;mx&#x2F;master-series.html&quot;&gt;&lt;strong&gt;Logi MX Master Wireless Mouse&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
which can be connected to up to three machines.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Logi MX Master&lt;&#x2F;strong&gt;’s ability to instantly switch from one machine to another
allows me to directly control the cursor on the streaming machine when required.
As a fail-safe, I also keep an old (&lt;em&gt;but in perfect working condition&lt;&#x2F;em&gt;) wired
mouse connected to my streaming machine (the MacBook Pro). I never fully trust
remote connectivity!&lt;&#x2F;p&gt;
&lt;p&gt;I’ve crafted a resilient system that handles resource-heavy demonstrations while
maintaining high-quality live streaming by implementing these strategies.&lt;&#x2F;p&gt;
&lt;p&gt;This is a testimony to the idea that you can overcome the challenges and
constraints inherent in live streaming with careful planning and a bit of
technological creativity.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;video-setup&quot;&gt;Video Setup&lt;&#x2F;h2&gt;
&lt;p&gt;The video setup is comparably simpler than the “&lt;em&gt;auido&lt;&#x2F;em&gt;” one.&lt;&#x2F;p&gt;
&lt;p&gt;First of all, I only need to modify my camera’s properties. I need to change
them only because I am using a green screen. Otherwise, I could very well use my
camera feed as is.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll also stream Eli’s camera feed as is without any modification.&lt;&#x2F;p&gt;
&lt;p&gt;Besides, I have a pretty good camera
(&lt;a href=&quot;https:&#x2F;&#x2F;shop.panasonic.com&#x2F;cameras-and-camcorders&#x2F;camcorders&#x2F;consumer-camcorders&#x2F;hc-v180k&quot;&gt;&lt;strong&gt;&lt;em&gt;Panasonic HC-V180K&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;)
that makes my life much easier.&lt;&#x2F;p&gt;
&lt;p&gt;I just applied some alpha filter and color correction to my camera.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the end result:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-8.18.44-AM.png&quot; alt=&quot;Me in front of the green screen, chroma key and color correction applied.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Me in front of the green screen, chroma key and color correction applied.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;And here are the settings for the “&lt;em&gt;color correction&lt;&#x2F;em&gt;” and “&lt;em&gt;chroma-key&lt;&#x2F;em&gt;”
filters, respectively:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-8.20.27-AM.png&quot; alt=&quot;Color correction settings.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Color correction settings.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-8.20.53-AM.png&quot; alt=&quot;Chroma key settings.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Chroma key settings.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;screen-annotations&quot;&gt;Screen Annotations&lt;&#x2F;h2&gt;
&lt;p&gt;You remember the orange arrows in the “&lt;em&gt;Audio Device Chain&lt;&#x2F;em&gt;” section? I made
them using &lt;a href=&quot;https:&#x2F;&#x2F;presentify.compzets.com&#x2F;&quot;&gt;&lt;strong&gt;Presentify&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The benefit of &lt;strong&gt;Presentify&lt;&#x2F;strong&gt; is it’s not only for annotating static images like
this. You can use Presentify for online classes, video presentations, or
tutorials by letting you annotate your screen and highlight your cursor, even
when the application you are drawing over is in full-screen mode.&lt;&#x2F;p&gt;
&lt;p&gt;It’s a great helper, especially when you are demonstrating technical content.
It’s one of those tools you don’t know how much you need before using.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;composing-scenes&quot;&gt;Composing Scenes&lt;&#x2F;h2&gt;
&lt;p&gt;I already showed the camera setup for myself and my guest Eli.&lt;&#x2F;p&gt;
&lt;p&gt;I have two scenes in &lt;strong&gt;OBS&lt;&#x2F;strong&gt; that include those cameras in them. Having a
separate scene for the camera instead of directly embedding the cameras in the
scenes gives me the flexibility to modify them and reflect the changes in all
the scenes I use.&lt;&#x2F;p&gt;
&lt;p&gt;For example, if I add a blue border around the camera view, it will be reflected
everywhere the camera view is used; I won’t have to repeat adding that border
around the camera to all of the scenes.&lt;&#x2F;p&gt;
&lt;p&gt;In addition, I can apply filters both to the camera and to the scene itself.
This layered composition of color correction and chroma key filters gives more
flexibility in configuring the sources.&lt;&#x2F;p&gt;
&lt;p&gt;Also, if I have a problem with a camera source like it is scaled incorrectly or
not showing up, I can fix it in one scene instead of jumping into every scene
that uses the camera and setting it one by one.&lt;&#x2F;p&gt;
&lt;p&gt;That part clarified, let’s begin with the camera scenes and go all the way up,
building larger and larger scenes from sub-scenes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;camera-scenes&quot;&gt;Camera Scenes&lt;&#x2F;h2&gt;
&lt;p&gt;That’s the source of my camera schene called “&lt;strong&gt;my-camera&lt;&#x2F;strong&gt;.”&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-11.19.47-AM.png&quot; alt=&quot;My camera.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;My camera.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;And that’s the source of Eli’s camera view, which is a browser source from
Twitch Guest Star. The view is very creatively named “&lt;strong&gt;twitch-guest-slot-1&lt;&#x2F;strong&gt;”.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-11.22.38-AM.png&quot; alt=&quot;Twitch guest slot 1.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Twitch guest slot 1.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The image source named &lt;strong&gt;frame&lt;&#x2F;strong&gt; is a blue image to give a distinct border
around both of the camera feeds similar to the one below:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-11.20.41-AM.png&quot; alt=&quot;Teal border.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Teal border.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;talking-heads&quot;&gt;Talking Heads&lt;&#x2F;h2&gt;
&lt;p&gt;After setting up the camera primitives, I compose those “&lt;strong&gt;&lt;em&gt;my-camera&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” and
“&lt;strong&gt;&lt;em&gt;twitch-guest-slot-1&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” scenes as the camera feeds into larger screens.&lt;&#x2F;p&gt;
&lt;p&gt;Below is the source layout named “&lt;strong&gt;&lt;em&gt;talking-head&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;,” containing the two camera
scenes mentioned before.&lt;&#x2F;p&gt;
&lt;p&gt;Again, this “&lt;strong&gt;&lt;em&gt;talking-head&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” scene is a &lt;strong&gt;sub-scene&lt;&#x2F;strong&gt; that will be composed
into different scenes.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-11.20.09-AM.png&quot; alt=&quot;Talking head.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Talking head.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Here’s how the scene looks:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-11.20.56-AM.png&quot; alt=&quot;Talking heads on the lower third.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Talking heads on the lower third.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;side-by-side&quot;&gt;Side by Side&lt;&#x2F;h2&gt;
&lt;p&gt;Here is the source layout of another scene named “&lt;strong&gt;&lt;em&gt;talking-heads-lg&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;.”&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-11.20.18-AM.png&quot; alt=&quot;Larger talking heads.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Larger talking heads.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;It creates a larger layout with our names and some turtle embellishments, again
to be embedded into more concrete scenes.&lt;&#x2F;p&gt;
&lt;p&gt;Below you can see what the combined view looks like. Note that there are camera
feeds inside the boxes. Right now, they are disabled, so the boxes look black
and empty.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-11.21.02-AM-1.png&quot; alt=&quot;Talking heads (larger).&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Talking heads (larger).&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;demo-over-zoom&quot;&gt;Demo Over Zoom&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s how the “&lt;em&gt;&lt;strong&gt;talking-heads&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;” scene is embedded into a view that shares a
full-screen zoom session (&lt;em&gt;which, on my OBS Scenes panel, is very creatively
named… … … “&lt;strong&gt;Zoom&lt;&#x2F;strong&gt;”&lt;&#x2F;em&gt; 🙂) so that both of our camera feeds will be visible
when either Eli, or I am demonstrating something over Zoom.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-11.37.11-AM.png&quot; alt=&quot;The zoom view.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The zoom view.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Here is the list of sources in this scene:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-11.38.00-AM.png&quot; alt=&quot;The Zoom view&amp;#x27;s sources&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The Zoom view&amp;#x27;s sources&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;As you see, even the &lt;strong&gt;Asus|Dummy(Zoom)&lt;&#x2F;strong&gt; view (&lt;em&gt;highlighted above&lt;&#x2F;em&gt;) is a scene
in itself. Here’s its source layout.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-11.40.03-AM.png&quot; alt=&quot;Dummy capture device.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Dummy capture device.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The naming suggests that the view reflects a dummy 1080p virtual monitor
(&lt;em&gt;created using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;waydabber&#x2F;BetterDisplay#readme&quot;&gt;&lt;strong&gt;&lt;em&gt;BetterDisplay&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;),
which a real 1080p Asus monitor mirrors.&lt;&#x2F;p&gt;
&lt;p&gt;A virtual display is helpful; I can mirror one of my main displays to it and
have it as a small overview on my large central display, like a rear-view mirror
of sorts so that I don’t miss the action in my peripheral vision when I focused
managing scene transitions and other stream properties.&lt;&#x2F;p&gt;
&lt;p&gt;Keeping the screens bound to 1080p resolution helps me quickly share anything on
the stream at 1080p resolution. This includes full-screen windows too. I can
drag a Zoom desktop sharing session or a remote desktop connection to a
different device or a browser window. Literally, I can easily show anything I
can see on my streaming machine to the audience in 1080p resolution. Having a
spare monitor to stream things gives &lt;strong&gt;a lot&lt;&#x2F;strong&gt; of flexibility.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-11.40.22-AM.png&quot; alt=&quot;Display capture.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Display capture.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I also have a third 1080p monitor that I also pair with a dummy monitor
and &lt;a href=&quot;https:&#x2F;&#x2F;www.elgato.com&#x2F;us&#x2F;en&#x2F;p&#x2F;cam-link-4k&quot;&gt;Elgato Cam Link 4k&lt;&#x2F;a&gt; so that I
can share my demo machine’s desktop with ease:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-1.32.54-PM.png&quot; alt=&quot;Streaming my demo machine&amp;#x27;s desktop.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Streaming my demo machine&amp;#x27;s desktop.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Here is how to compose my desktop into any view:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-1.41.09-PM.png&quot; alt=&quot;Adding the desktop view into another view.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Adding the desktop view into another view.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;And here are the details of the “&lt;strong&gt;&lt;em&gt;(my desktop) cam link4k&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” view highlighted
above:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-1.41.21-PM.png&quot; alt=&quot;Camlink video source view.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Camlink video source view.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;It has &lt;strong&gt;Elgato Cam Link 4K&lt;&#x2F;strong&gt; as the input source and nothing else. Having a
view with a single source might look unnecessary; however, this setup gives the
flexibility to manage the camera, and if something happens to the camera view,
then I’ll only have to fix it in a single place.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-fireside-chat&quot;&gt;The Fireside Chat&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s the “&lt;strong&gt;&lt;em&gt;Fireside Chat&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” screen, where my and Eli’s cameras are
displayed side-by-side. Again, the cameras are off in this screenshot, but both
of our camera feeds will be there in the live stream.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-11.20.18-AM-1.png&quot; alt=&quot;Fireside chat.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Fireside chat.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Here is the source layout of the above scene.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-11.20.18-AM-1.png&quot; alt=&quot;Fireside chat sources.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Fireside chat sources.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;And here is what the &lt;strong&gt;twitch-guest-slot-1&lt;&#x2F;strong&gt; sub-scene looks like:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-11.22.38-AM-1.png&quot; alt=&quot;Twitch guest slot sub-scene.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Twitch guest slot sub-scene.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;It has a teal frame and a browser source from &lt;a href=&quot;https:&#x2F;&#x2F;help.twitch.tv&#x2F;s&#x2F;article&#x2F;guest-star&quot;&gt;Twitch Guest Star&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-big-red-clock&quot;&gt;The Big Red Clock&lt;&#x2F;h2&gt;
&lt;p&gt;Yes, the clock is green to fit the overall theme, but the application’s name
is &lt;a href=&quot;http:&#x2F;&#x2F;www.bigredclock.com&#x2F;&quot;&gt;&lt;strong&gt;The Big Red Clock&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, and it does its job
amazingly well. It’s an app I use as a countdown timer before the show starts or
whenever we need a break.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-13-at-1.22.34-PM.png&quot; alt=&quot;The big red clock.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The big red clock.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;To make it blend in better, I add the following color key filters:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-16-at-2.47.51-PM.png&quot; alt=&quot;Big red clock color filters.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Big red clock color filters.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;And for extra flexibility, I manage the big red clock in its own scene as well:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-1.48.42-PM.png&quot; alt=&quot;Big red clock alignment.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Big red clock alignment.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;the-interstitials&quot;&gt;The Interstitials&lt;&#x2F;h2&gt;
&lt;p&gt;We use these “&lt;strong&gt;&lt;em&gt;break screens&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” during the show whenever needed.&lt;&#x2F;p&gt;
&lt;p&gt;Aside from positioning the &lt;strong&gt;Big Red Clock&lt;&#x2F;strong&gt;, not much configuration is needed.
I’ll share them here for the sake of completeness.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-1.50.47-PM-1.png&quot; alt=&quot;Starting soon.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Starting soon.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-1.50.54-PM-1.png&quot; alt=&quot;Be right back.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Be right back.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-1.51.04-PM.png&quot; alt=&quot;End of stream.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;End of stream.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;streaming-from-twitch-to-zoom&quot;&gt;Streaming from Twitch to Zoom&lt;&#x2F;h2&gt;
&lt;p&gt;Sharing the Zoom session on Twitch is easy: There is a scene for that. However,
if you wanted to send a copy of the Twitch stream back to zoom, it’s not that
straightforward.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily, there is a quick hack: &lt;strong&gt;OBS Virtual Camera&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Press this big fat button, and you can send the entire stream as a camera source
to any application that accepts virtual camera sources.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-2.19.38-PM.png&quot; alt=&quot;OBS virtual camera.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;OBS virtual camera.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Here’s how the camera feed looks on a movie player that can display camera views
too:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-14-at-11.55.58-AM.png&quot; alt=&quot;OBS virtual camera output.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;OBS virtual camera output.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;my-mini-studio&quot;&gt;My Mini Studio&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s how things look from the outside:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1000&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;IMG-7330.jpg&quot; alt=&quot;My workspace.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;My workspace.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Let me unpack the mess for you:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I have a green screen behind me.&lt;&#x2F;li&gt;
&lt;li&gt;A light source to my left is designed to diffuse light gently. And since I
have a white and low ceiling, it creates evenly-spread natural-looking
lighting on me and on the curtain without creating solid shadows. When
possible, bouncing light off of surfaces is always a better option than
directly pointing it to the subjects (&lt;em&gt;the “subject” being me sitting on the
chair in this case&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;There’s a warm fill light below, and &lt;a href=&quot;https:&#x2F;&#x2F;www.ikea.com&#x2F;us&#x2F;en&#x2F;p&#x2F;isjakt-led-floor-uplighter-reading-lamp-dimmable-nickel-plated-70459716&#x2F;&quot;&gt;you can get the fixture (&lt;strong&gt;&lt;em&gt;ISJAKT led
floor uplighter&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;) from
Ikea&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;There are two &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B07T8FBZC2&quot;&gt;&lt;strong&gt;Neewer Key Lights&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; in front of me. They are
dirt cheap and are as effective as their expensive counterparts. But of
course, you get what you pay for: there are no remote controls, you cannot
change the color of the LEDs mid-stream, and you need to adjust its levels
manually by pressing the buttons. But other than that, the lights’ quality,
spread, and intensity are excellent. And nothing can compete with its
price-over-performance ratio.&lt;&#x2F;li&gt;
&lt;li&gt;There’s a camera directly focused on me at an angle from above. It’s my
faithful &lt;a href=&quot;https:&#x2F;&#x2F;shop.panasonic.com&#x2F;cameras-and-camcorders&#x2F;camcorders&#x2F;consumer-camcorders&#x2F;hc-v180k&quot;&gt;&lt;strong&gt;&lt;em&gt;Panasonic HC-V180K&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;I have one sizeable curved monitor as my main stage and two 1080p monitors to
display my guest’s screen and my demo machine’s desktop, respectively.&lt;&#x2F;li&gt;
&lt;li&gt;The large monitor is connected to my demo machine, and I established a remote
desktop connection to the stream machine.&lt;&#x2F;li&gt;
&lt;li&gt;If needed, there is a button below the monitor that I can switch to view the
desktop of the streaming machine without having to remotely connect to it as a
backup measure.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;video-and-audio-capture-layout&quot;&gt;Video and Audio Capture Layout&lt;&#x2F;h2&gt;
&lt;p&gt;To put things into more perspective, here’s a schematic of the stream-related
hardware that I use:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;hardware-setup.jpg&quot; alt=&quot;Streaming setup.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Streaming setup.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The demo machine and the camera are connected to the streaming machine as video
input sources through capture cards. I use
&lt;a href=&quot;https:&#x2F;&#x2F;help.elgato.com&#x2F;hc&#x2F;en-us&#x2F;articles&#x2F;360034170131-Elgato-Game-Capture-HD60-S-Technical-Specifications&quot;&gt;&lt;strong&gt;Elgato HD60S+&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;www.elgato.com&#x2F;us&#x2F;en&#x2F;p&#x2F;cam-link-4k&quot;&gt;&lt;strong&gt;Elgato Cam Link 4K&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; for
capture cards.&lt;&#x2F;p&gt;
&lt;p&gt;I like &lt;strong&gt;Cam Link 4K&lt;&#x2F;strong&gt; for its small form factor, but &lt;strong&gt;HD60S+&lt;&#x2F;strong&gt; offers a
pass-through HDMI output, which can sometimes be helpful.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;store.focusrite.com&#x2F;en-gb&#x2F;product&#x2F;scarlett-solo-3rd-gen&#x2F;MOSC0024DM~MOSC0024DM&quot;&gt;&lt;strong&gt;Focusrite Scarlett Solo&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
is my amplifier choice, and &lt;a href=&quot;https:&#x2F;&#x2F;www.shure.com&#x2F;en-US&#x2F;products&#x2F;microphones&#x2F;sm7b?variant=SM7B&quot;&gt;&lt;strong&gt;Shure SM7B&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
is a microphone I cannot live without.&lt;&#x2F;p&gt;
&lt;p&gt;There’s also &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Cloud-Microphones-CL-1-Cloudlifter-1-channel&#x2F;dp&#x2F;B004MQSV04&quot;&gt;&lt;strong&gt;CloudLifter&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
as a signal booster. I use it to boost the gain of the audio signal, clean it,
and improve the overall signal-to-noise ratio.&lt;&#x2F;p&gt;
&lt;p&gt;But why do I need that gain boost? Because while &lt;strong&gt;Shure SM7B&lt;&#x2F;strong&gt; is known for its
rich and detailed sound (&lt;em&gt;and hefty price tag&lt;&#x2F;em&gt;), it also has a relatively low
output level compared to many other microphones. This means that it requires
more gain from the preamp in the audio interface or mixer to produce a strong,
clean signal.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;camera-and-lighting-setup&quot;&gt;Camera and Lighting Setup&lt;&#x2F;h2&gt;
&lt;p&gt;I use a &lt;a href=&quot;https:&#x2F;&#x2F;shop.panasonic.com&#x2F;cameras-and-camcorders&#x2F;camcorders&#x2F;consumer-camcorders&#x2F;hc-v180k&quot;&gt;&lt;strong&gt;Panasonic HC-V180K&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
camcorder to stream myself. It’s known for its superior performance under good
lighting and has never failed me once so far. The Panasonic HC-V180K feeds
directly into the Elgato HD60S+ capture card, ensuring a crystal-clear,
high-definition video feed.&lt;&#x2F;p&gt;
&lt;p&gt;Lighting is essential to any high-quality video setup, and ours is no exception.
My &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B07T8FBZC2&quot;&gt;&lt;strong&gt;Neewer Key Lights&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
positioned strategically behind the camera as you see below:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;IMG-7337.jpg&quot; alt=&quot;Camera and key lights.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Camera and key lights.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;But… but… but! There’s something else. What’s this little dude?&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-15-at-3.17.17-PM.png&quot; alt=&quot;Perry?&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Perry?&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Well, meet Perry the Platypus!&lt;&#x2F;p&gt;
&lt;p&gt;I use him as an odd trick to complement my stream.&lt;&#x2F;p&gt;
&lt;p&gt;But &lt;strong&gt;how&lt;&#x2F;strong&gt;, or before that, &lt;strong&gt;why&lt;&#x2F;strong&gt;?!&lt;&#x2F;p&gt;
&lt;p&gt;Because to connect to your audience and establish an intimate streaming
experience, you have to make eye contact with the camera.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is: Making eye contact with a camera feels &lt;strong&gt;weird&lt;&#x2F;strong&gt;; it feels like
looking in the eye of a Cyclops, and it gets irritating (&lt;em&gt;for me, at least&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;That’s where &lt;strong&gt;Perry&lt;&#x2F;strong&gt; helps. Instead of the camera, I see eye-to-eye with him,
and I look around the vicinity of the camera. Since the camera is far away, and
Perry sits within a few degrees of my line of sight, it’s as good as looking
into the camera itself.&lt;&#x2F;p&gt;
&lt;p&gt;Just look at him; how can you say no to this little trouble maker 🙂:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;IMG-7338.jpg&quot; alt=&quot;Perry!&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Perry!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Aside from the key lights, I use a white oval light source to achieve a more
natural and even light spread with reduced shadows.&lt;&#x2F;p&gt;
&lt;p&gt;This light bounces off the ceiling, subtly illuminating me and the green screen.
It allows greater flexibility when adjusting the camera’s chroma key and color
correction filters in OBS.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;IMG-7336.jpg&quot; alt=&quot;Bouncing light off of solid surfaces.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Bouncing light off of solid surfaces.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;And finally, to add depth and warmth to the video, I use a small fill light.
Emitting a warm off-white yellow light, it delicately balances any shadows on my
face and adds a touch of warmth to the overall video.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;IMG-7335.jpg&quot; alt=&quot;Fill light.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Fill light.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Of course, this is only possible with the final piece of our video setup: the
green screen. Acting as a backdrop, it allows me to overlay any desired
background during the streaming process, lending an additional layer of
professionalism and versatility.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-16-at-10.45.42-PM.png&quot; alt=&quot;The green screen.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The green screen.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;For your needs, any green screen would do. I use
&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Instahibit-Retractable-Backdrop-Chromakey-Mountable&#x2F;dp&#x2F;B087V2DHTW&quot;&gt;&lt;strong&gt;Instahibit Retractable Green Screen
Backdrop&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;smoothing-the-acoustics&quot;&gt;Smoothing the Acoustics&lt;&#x2F;h2&gt;
&lt;p&gt;Sound in the rooms gets bouncy, especially when that room is not a professional
recording studio. In the quest for crisp and clear sound, I have taken measures
to address potential acoustic challenges too. One of the essential steps in this
direction is using &lt;strong&gt;acoustic canvas panels&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Strategically placed around the room, these panels are vital in managing the
sound environment. Muffling the sounds bouncing off the walls significantly
reduces any potential echo or reverb. This results in a clearer and more
professional-sounding audio output for our stream.&lt;&#x2F;p&gt;
&lt;p&gt;Playing the right sound effects at the right moment during the stream is also a
lot of fun. For that, I use &lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;farrago&#x2F;&quot;&gt;&lt;strong&gt;Farrago&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
which, to me, is the best rapid soundboard ever: Robust, easy to use, and
integrates with almost everything, including your midi keyboard.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-16-at-11.23.47-AM.png&quot; alt=&quot;Farrago.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Farrago.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;After all, no stream is fun without a bleating goat in it!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bonus-game-streaming&quot;&gt;Bonus: Game Streaming&lt;&#x2F;h2&gt;
&lt;p&gt;This one is not directly related to &lt;strong&gt;TalkSPIFFE&lt;&#x2F;strong&gt;, but I use it when I stream
games. And Twitch is not much fun if you don’t stream video games every once in
a while.&lt;&#x2F;p&gt;
&lt;p&gt;Since video games use many system resources, I follow a similar strategy and use
my &lt;strong&gt;capture card&lt;&#x2F;strong&gt; to stream my demo computer’s desktop to &lt;strong&gt;OBS&lt;&#x2F;strong&gt; on my
streaming computer.&lt;&#x2F;p&gt;
&lt;p&gt;And for the audio, I use &lt;strong&gt;Audio Hijack&lt;&#x2F;strong&gt; to redirect the game audio to the
capture card and then from the capture card to one of the virtual audio devices
that &lt;strong&gt;OBS&lt;&#x2F;strong&gt; is listening to.&lt;&#x2F;p&gt;
&lt;p&gt;The audio chain below links my game audio onto the capture card:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-16-at-8.07.21-PM.png&quot; alt=&quot;Game audio to capture card.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Game audio to capture card.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;And this chain links the sound from the capture card to the loopback audio that
OBS takes as an input source.&lt;&#x2F;p&gt;
&lt;p&gt;Sending audio through the capture card does not have to be game-related. You can
get clever with it. For example, I’m thinking of using the Discord audio in my
demo machine instead of the streamer machine and shoving its audio through the
capture card:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-17-at-9.29.44-AM.png&quot; alt=&quot;From discord to capture card.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;From discord to capture card.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Then, I can use it as an audio source, instead of the guest start audio that
comes from Twitch, and disable the “&lt;em&gt;guest star&lt;&#x2F;em&gt;” Chrome audio input entirely as
shown below:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-17-at-9.32.26-AM.png&quot; alt=&quot;From capture card to guest in.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;From capture card to guest in.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;That would mean running one less application on the stream machine, which would
ensure an even smoother streaming experience.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, here is how the game looks on OBS, the game audio streaming from the
Vocals track is seen below:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;06&amp;#x2F;Screenshot-2023-06-16-at-8.08.04-PM.png&quot; alt=&quot;Game streamed in OBS with audio coming from the virtual device.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Game streamed in OBS with audio coming from the virtual device.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Remember that every stream is different, and every streamer’s’ setup, needs, and
wants will differ too. Though I hope that this article can help some of you
folks inspire and that you can use it as a starting point in your streaming
journey.&lt;&#x2F;p&gt;
&lt;p&gt;And things change. There is no perfect setup; you keep on adjusting. For
example, after our first pilot we realized that streaming to Zoom caused some
audio echo&#x2F;feedback issues on the “guest” end of things, and we decided it’s not
worth it at the moment for two reasons:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;First, since we don’t have a very large audience (yet), it’s not worth
splitting it to multiple venues. We can use Twitch as the one single place to
stream things, and we can use SPIFFE slack workspace for questions. That
would unite the community and will result in people exchanging comments and
ideas in the same medium instead of spreading the creative juice to several
mediums.&lt;&#x2F;li&gt;
&lt;li&gt;Second, it makes things simpler to manage, and with less moving parts there’s
less possibility to make errors too.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;That said, the world of live-streaming is an ever-evolving landscape, one that’s
limited only by the boundaries of your imagination. Whether you’re a seasoned
streamer or just dipping your toes into these waters, remember that every stream
is an opportunity to learn, grow, and create unforgettable experiences for your
viewers.&lt;&#x2F;p&gt;
&lt;p&gt;Keep pushing the boundaries, and may the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;base64-decoding-a-string-in-go&#x2F;&quot;&gt;Base64 Decoding a String in Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;destructure&#x2F;&quot;&gt;Use Destructuring to Remove Attributes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;getting-the-body-of-an-http-request-with-go&#x2F;&quot;&gt;Getting the Body of an HTTP Request With Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;lets-create-a-syslog-logger&#x2F;&quot;&gt;Let’s Create a Syslog Logger&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;make-your-code-leaner&#x2F;&quot;&gt;Make Your Code Leaner By Extracting Method&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;mastodon-101&#x2F;&quot;&gt;Who Else Wants to Have Their Own Mastodon Server?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;microservice-env-vars&#x2F;&quot;&gt;How to Ensure Environment Variables Are Set&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;scaling-your-node-api-like-a-boss&#x2F;&quot;&gt;Scaling Your Node.js API Like a Boss&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ The Live Stream Dream&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;zshell-startup-files&#x2F;&quot;&gt;.zprofile, .zshrc, .zenv, OMG! What Do I Put Where?!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;redirect-index-page&#x2F;&quot;&gt;Redirecting a Static Web Page&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Redirecting a Static Web Page</title>
        <published>2024-05-23T00:00:00+00:00</published>
        <updated>2024-05-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/tips/redirect-index-page/"/>
        <id>https://zerotohero.dev/tips/redirect-index-page/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/tips/redirect-index-page/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2024&amp;#x2F;redirect.png&quot; alt=&quot;Hadooken.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Hadooken.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;While migrating &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;&quot;&gt;zerotohero.dev&lt;&#x2F;a&gt; to its new design,
I needed to find a quick and dirty way to redirect incoming requests to
certain websites to their corresponding pages on &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This nugget gives a neat trick to achieve this with the least amount of
effort.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;meta-refresh-to-the-rescue&quot;&gt;&lt;code&gt;&amp;lt;meta&amp;gt;&lt;&#x2F;code&gt; Refresh to the Rescue&lt;&#x2F;h2&gt;
&lt;p&gt;Since all of those websites were static sites backed by an S3 bucket, updating
the error page (&lt;code&gt;404.html&lt;&#x2F;code&gt;) and the index page (&lt;code&gt;index.html&lt;&#x2F;code&gt;) was the quickest
way to achieve this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&amp;lt;!--
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;404.html and index.html are the same.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;S3 bucket is configured to serve 404.html for errors,
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;and index.html is configured to be the default page.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;--&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;lang=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;en&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;charset=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;name=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;viewport&amp;quot; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;   content=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;Redirecting...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;http-equiv=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;refresh&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;content=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;0; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;    url=https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;rel=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;canonical&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;name=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;robots&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;content=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;noindex, follow&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;type=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;text&#x2F;javascript&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;setTimeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.location.href &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;    }, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;If you are not redirected automatically,
&lt;&#x2F;span&gt;&lt;span&gt;  follow this link:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan&#x2F;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#8ec07c;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#83a598;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This way, I won’t have to worry about configuring the S3 bucket to redirect
incoming requests to the new URL. And as a bonus, I can still keep certain
(&lt;em&gt;hidden&lt;&#x2F;em&gt;) pages on the old website without having to worry about them being
indexed by search engines.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;in-a-nutshell&quot;&gt;In a Nutshell&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a breakdown of the code:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;meta&lt;&#x2F;code&gt; tag with the &lt;code&gt;http-equiv&lt;&#x2F;code&gt; attribute is used to refresh the page
after 0 seconds to the new URL.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;script&lt;&#x2F;code&gt; tag is used as a fallback in case the &lt;code&gt;meta&lt;&#x2F;code&gt; tag is not
supported by the browser (&lt;em&gt;very unlikely&lt;&#x2F;em&gt;).
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;setTimeout&lt;&#x2F;code&gt; function is used to redirect the user to the new URL
after 0 seconds (&lt;em&gt;i.e. immediately&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For search engines:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;With &lt;code&gt;&amp;lt;link rel=&quot;canonical&quot; ... &#x2F;&amp;gt;&lt;&#x2F;code&gt;, we are telling the search engines that
the alternative url is the preferred one.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;meta name=&quot;robots&quot; content=&quot;noindex, follow&quot;&amp;gt;&lt;&#x2F;code&gt; tag is used to tell
the search engines not to index the page but to follow the links on the page.&lt;&#x2F;li&gt;
&lt;li&gt;Which is good enough for search engines to understand that the page has been
moved to a new location.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-about-3xx-redirects&quot;&gt;How About &lt;code&gt;3xx&lt;&#x2F;code&gt; Redirects?&lt;&#x2F;h2&gt;
&lt;p&gt;The only thing I am not doing for the search engines is to set the &lt;code&gt;301&lt;&#x2F;code&gt; status
code in the HTTP response.&lt;&#x2F;p&gt;
&lt;p&gt;That is doable with some &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;cloudfront&#x2F;&quot;&gt;CloudFront&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;lambda&#x2F;edge&#x2F;&quot;&gt;AWS Lambda at Edge&lt;&#x2F;a&gt; trickery, but I feel
it’s an overkill.&lt;&#x2F;p&gt;
&lt;p&gt;Why?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Firstly, search engines are a thing of the past.&lt;&#x2F;li&gt;
&lt;li&gt;And, secondly,  we already inform the search engines
about the change anyway.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Hope you liked this little nugget. It’s the fastest to way to achieve the task
without having to worry about the underlying infrastructure.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;base64-decoding-a-string-in-go&#x2F;&quot;&gt;Base64 Decoding a String in Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;destructure&#x2F;&quot;&gt;Use Destructuring to Remove Attributes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;getting-the-body-of-an-http-request-with-go&#x2F;&quot;&gt;Getting the Body of an HTTP Request With Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;lets-create-a-syslog-logger&#x2F;&quot;&gt;Let’s Create a Syslog Logger&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;make-your-code-leaner&#x2F;&quot;&gt;Make Your Code Leaner By Extracting Method&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;mastodon-101&#x2F;&quot;&gt;Who Else Wants to Have Their Own Mastodon Server?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;microservice-env-vars&#x2F;&quot;&gt;How to Ensure Environment Variables Are Set&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;scaling-your-node-api-like-a-boss&#x2F;&quot;&gt;Scaling Your Node.js API Like a Boss&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;talkspiffe-stream-setup&#x2F;&quot;&gt;The Live Stream Dream&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;zshell-startup-files&#x2F;&quot;&gt;.zprofile, .zshrc, .zenv, OMG! What Do I Put Where?!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Redirecting a Static Web Page&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Hello World, Hello Stars, Hello Universe</title>
        <published>2024-05-21T00:00:00+00:00</published>
        <updated>2024-05-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0001/"/>
        <id>https://zerotohero.dev/highlights/issue-0001/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0001/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;jungle.png)&quot; alt=&quot;Welcome to the jungle!.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Welcome to the jungle!.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2024-05-21&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I started this series as a weekly newsletter, however, as my schedule
got busier, I had to convert it into a set of articles that I publish
whenever I have time. The structure and the content of the remain
the same, though.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;hello-world-hello-stars-hello-universe&quot;&gt;Hello World, Hello Stars, Hello Universe&lt;&#x2F;h2&gt;
&lt;p&gt;Hi there,&lt;&#x2F;p&gt;
&lt;p&gt;Welcome to the very first &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights digest where I share my
thoughts about the week and give a brief overview fo what has happened in
“&lt;em&gt;Zero to Hero&lt;&#x2F;em&gt;”, in the industry, and in the open-source ecosystem recently.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;about-these-newsletters&quot;&gt;About These Newsletters&lt;&#x2F;h2&gt;
&lt;p&gt;I’m planning to send these newsletters to the &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; subscribers every
week—possibly on Friday so that you’ll have some nice weekend bedtime reading
material 🙂.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the very first &lt;strong&gt;Zero to Hero Weekly Digest&lt;&#x2F;strong&gt;: The format of this
newsletter will evolve and change in time—of course, your feedback is
vastly appreciated.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a random thought: Have you ever got stuck while doing your work, and
needed help, but you were afraid to ask for help because you feared bothering
your teammates?&lt;&#x2F;p&gt;
&lt;p&gt;When I find myself in that kind of a situation, here’s what I do:&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, I double-check the question is worth asking: I &lt;strong&gt;do my homework&lt;&#x2F;strong&gt;,
search the web, read internal company wiki, read the source code and fiddle
with the problem for a while-if the thing is something that I can learn by
myself with minimal hassle, I just jump on it.&lt;&#x2F;p&gt;
&lt;p&gt;If I cannot effectively handle the issue myself, then the next thing I try to
find is a &lt;strong&gt;path of least resistance&lt;&#x2F;strong&gt;: Oftentimes finding the &lt;strong&gt;best person&lt;&#x2F;strong&gt;
to ask the question, &lt;strong&gt;how&lt;&#x2F;strong&gt; to ask it, and &lt;strong&gt;when&lt;&#x2F;strong&gt; to ask the question are
equally important (&lt;em&gt;if not “more” important&lt;&#x2F;em&gt;) than actually asking the question.&lt;&#x2F;p&gt;
&lt;p&gt;I additionally pay attention to the person’s &lt;strong&gt;communication style&lt;&#x2F;strong&gt;: While some
people are all about Slack messages, some prefer email, and some would rather
do an ad-hoc chat around the water cooler.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: &lt;strong&gt;communication is what the listener does&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the end of the day my goal is to make the life of the person who’s going to
help me as easier. In a sense, I’m helping them help me.&lt;&#x2F;p&gt;
&lt;p&gt;Also whenever possible, I provide as much &lt;strong&gt;context&lt;&#x2F;strong&gt; as I can. I show the
person the work I’ve done so far, and the pain points that I’m having. That also
shows that I value their time.&lt;&#x2F;p&gt;
&lt;p&gt;It might sound trivial, but having a place that I hold the information that I
gathered from this person is also important. I would not want to end up asking
the same questions over and over again after all.&lt;&#x2F;p&gt;
&lt;p&gt;So far these tricks served me well when asking for help. I hope you’ll find them
useful too.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recently-on-zero-to-hero&quot;&gt;Recently on &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a selection from the recent &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; articles:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;a-new-hope&#x2F;&quot;&gt;Every Saga Has a Beginning&lt;&#x2F;a&gt;: This is
the initial article outlining how this all started. It’s a bit personal,
reflecting on myself, my life, and what my plans are for “&lt;em&gt;Zero to Hero&lt;&#x2F;em&gt;“s
future.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=jXi8h44cbQA&quot;&gt;Trisha Gee: Code Review Best Practices - SCLConf 2018&lt;&#x2F;a&gt;:
In this talk, Trisha will identify some best practices to follow. She’ll talk
about what’s really important in a code review, and set out some guidelines to
follow in order to maximize the value of the code review and minimize the
pain.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jendrikseipp&#x2F;vulture&quot;&gt;Vulture: Find Dead Python Code&lt;&#x2F;a&gt;:
Vulture finds unused code in Python programs. This is useful for cleaning up
and finding errors in large code bases. If you run Vulture on both your
library and test suite you can find untested code.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jamanetwork.com&#x2F;journals&#x2F;jama&#x2F;fullarticle&#x2F;2600471&quot;&gt;Mentee Missteps&lt;&#x2F;a&gt;:
Given the importance of the mentor-mentee relationship, it is imperative that
mentees put their “&lt;em&gt;best foot forward&lt;&#x2F;em&gt;”. The article outlines what kind of
“&lt;em&gt;behavior smells&lt;&#x2F;em&gt;” mentees might manifest that can make the mentor-mentee
relationship unsustainable.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week–hope you liked it.&lt;&#x2F;p&gt;
&lt;p&gt;And until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Be the Next Version of Yourself</title>
        <published>2024-05-21T00:00:00+00:00</published>
        <updated>2024-05-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/roadmap/"/>
        <id>https://zerotohero.dev/roadmap/roadmap/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/roadmap/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;journey.png&quot; alt=&quot;It&amp;#x27;s a journey, not a destination.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;It&amp;#x27;s a journey, not a destination.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;about-this-article&quot;&gt;About This Article&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;This is a Living Document&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;What you are reading is a &lt;strong&gt;living document&lt;&#x2F;strong&gt;.&lt;br &#x2F;&gt;
I’ll update this article whenever I get a similar question that has not
entirely been addressed by what I have here.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I tried to keep the suggestions here as much field-agnostic as I can to make it
beneficial to you no matter what part of “&lt;em&gt;the stack&lt;&#x2F;em&gt;” you are interested in.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What Stack?!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I also honestly believe that there is no such thing called “the stack”, and
the boundaries between the layers of “the stack” have vanished long time ago, so
it is a “&lt;strong&gt;mesh&lt;&#x2F;strong&gt;”—&lt;em&gt;if anything&lt;&#x2F;em&gt;—rather than a stack, but that’s the
topic of another article 🙂.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;how-to-read-this-article&quot;&gt;How To Read This Article&lt;&#x2F;h2&gt;
&lt;p&gt;Do not just scan this article as if you are scanning through your birdsite news
feed. I am not going to be humble here: This article it is the accumulation of
years and years of experience. So, give it the &lt;strong&gt;time&lt;&#x2F;strong&gt; and &lt;strong&gt;concentration&lt;&#x2F;strong&gt; it
deserves.&lt;&#x2F;p&gt;
&lt;p&gt;While you are reading, you’ll
find &lt;a href=&quot;https:&#x2F;&#x2F;www.cs.jhu.edu&#x2F;~jason&#x2F;advice&#x2F;how-to-read-a-paper.html&quot;&gt;links to other useful materials, such as this one&lt;&#x2F;a&gt;.
&lt;strong&gt;Do not skip them&lt;&#x2F;strong&gt;: They are as important as the article itself.&lt;&#x2F;p&gt;
&lt;p&gt;With that said, let us begin, shall we?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;People continuously ask me variations of the following questions at least a
couple of times a week:&lt;&#x2F;p&gt;
&lt;p&gt;“&lt;em&gt;I am a self-educated-developer&#x2F;programming-enthusiast&#x2F;you-name-it.&lt;br &#x2F;&gt;
I can write code; however, when I dive into complex codebases, I get lost.&lt;&#x2F;em&gt;”&lt;&#x2F;p&gt;
&lt;p&gt;Or, something like that:&lt;&#x2F;p&gt;
&lt;p&gt;“&lt;em&gt;People assume that I know JavaScript, and I confess: I am a JavaScript
developer who doesn’t know how to develop.&lt;&#x2F;em&gt;”&lt;&#x2F;p&gt;
&lt;p&gt;I even got this one 😄:&lt;&#x2F;p&gt;
&lt;p&gt;“&lt;em&gt;Help me Obi-Wan Kenobi; you’re my only hope.&lt;&#x2F;em&gt;”&lt;&#x2F;p&gt;
&lt;p&gt;Since answering the same question over and over again is not the best use of
the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Opportunity_cost&quot;&gt;opportunity cost of my time&lt;&#x2F;a&gt;,
I wanted to answer them here, once and for all.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;is-it-the-impostor-s-syndrome&quot;&gt;Is It the “Impostor’s Syndrome”?&lt;&#x2F;h2&gt;
&lt;p&gt;Although there’s a hint
of &lt;a href=&quot;https:&#x2F;&#x2F;www.fastcompany.com&#x2F;40421352&#x2F;the-five-types-of-impostor-syndrome-and-how-to-beat-them&quot;&gt;impostor’s syndrome&lt;&#x2F;a&gt;
in those questions, there also exists a &lt;strong&gt;deep concern&lt;&#x2F;strong&gt; that waits to be
addressed.&lt;&#x2F;p&gt;
&lt;p&gt;All of these questions translate to the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;“&lt;em&gt;How do I leap to the next level in my field of expertise?&lt;&#x2F;em&gt;”&lt;&#x2F;li&gt;
&lt;li&gt;“&lt;em&gt;How do I become the next possible version of myself?&lt;&#x2F;em&gt;”&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These questions require a much well-thought-out answer than a “&lt;em&gt;It’s easy; you
see: Learn React and MongoDB, and you are good to go.&lt;&#x2F;em&gt;” answer.&lt;&#x2F;p&gt;
&lt;p&gt;So here it goes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ask-questions-doubt-everything-trust-in-evidence&quot;&gt;Ask Questions, Doubt Everything, Trust in Evidence&lt;&#x2F;h2&gt;
&lt;p&gt;If you forget everything else you read here, take this “&lt;em&gt;red pill&lt;&#x2F;em&gt;”, and you’ll
be fine:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ask&lt;&#x2F;strong&gt; Questions. &lt;strong&gt;Doubt&lt;&#x2F;strong&gt; everything. &lt;strong&gt;Trust&lt;&#x2F;strong&gt; in evidence.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;☝️ That is the &lt;strong&gt;ultimate&lt;&#x2F;strong&gt; way to become a great developer: The rest is just
trivia.&lt;&#x2F;p&gt;
&lt;p&gt;Let me give you a related formula:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Ask questions.&lt;&#x2F;li&gt;
&lt;li&gt;Take initiative.&lt;&#x2F;li&gt;
&lt;li&gt;Move out of your comfort zone.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is how it goes:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ask-questions&quot;&gt;Ask Questions&lt;&#x2F;h3&gt;
&lt;p&gt;As long as there are people around and you know that there are things that you
don’t know: Ask them out.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are naïve questions, tedious questions, ill-phrased questions, questions
put after inadequate self-criticism. However, every question is a cry to
understand the world. There is no such thing as a dumb question.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Carl Sagan&lt;&#x2F;strong&gt;—&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;17349.The_Demon_Haunted_World&quot;&gt;The Demon-Haunted World: Science as a Candle in the
Dark&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Ask dumb questions.&lt;&#x2F;li&gt;
&lt;li&gt;Ask scary questions.&lt;&#x2F;li&gt;
&lt;li&gt;The more you ask, the better.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While you are at
it, &lt;a href=&quot;http:&#x2F;&#x2F;www.catb.org&#x2F;esr&#x2F;faqs&#x2F;smart-questions.html&quot;&gt;learn how to ask smart questions&lt;&#x2F;a&gt;
and digest the fact
that &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;17349.The_Demon_Haunted_World&quot;&gt;there are no dumb questions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;take-initiative&quot;&gt;Take Initiative&lt;&#x2F;h3&gt;
&lt;p&gt;After asking as many questions as you &lt;strong&gt;possibly&lt;&#x2F;strong&gt; can, it is time to take the
reins into your hand because after asking enough questions, you’ll eventually
run into a set of problems that your coworkers, your friends, and your
colleagues don’t know how to solve either.&lt;&#x2F;p&gt;
&lt;p&gt;Trust me; this is &lt;strong&gt;very&lt;&#x2F;strong&gt; easy 😉.&lt;&#x2F;p&gt;
&lt;p&gt;What you’ll do next is even easier:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Decide&lt;&#x2F;strong&gt; that you will figure out and solve this unsolvable problem anyway.&lt;&#x2F;li&gt;
&lt;li&gt;Then solve it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Voila!&lt;&#x2F;p&gt;
&lt;p&gt;You have solved a domain-specific problem that nobody else has an answer to.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;move-out-of-your-comfort-zone&quot;&gt;Move Out of Your Comfort Zone&lt;&#x2F;h3&gt;
&lt;p&gt;The more you program, the more issues you’ll find that…&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You don’t know.&lt;&#x2F;li&gt;
&lt;li&gt;Your colleagues don’t know.&lt;&#x2F;li&gt;
&lt;li&gt;Google doesn’t know.&lt;&#x2F;li&gt;
&lt;li&gt;And you’ll &lt;strong&gt;have to&lt;&#x2F;strong&gt; figure out (&lt;em&gt;as if your job depends on it—’cuz it
does 😉&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Try to challenge yourself to &lt;a href=&quot;https:&#x2F;&#x2F;www.lifehack.org&#x2F;articles&#x2F;communication&#x2F;this-what-happens-when-you-move-out-your-comfort-zone.html&quot;&gt;&lt;strong&gt;move out of your comfort
zone&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Screw everything. Get your pieces together.
&lt;a href=&quot;https:&#x2F;&#x2F;www.heysigmund.com&#x2F;why-what-you-focus-on-is-what-becomes-powerful-why-your-thoughts-and-feelings-matter&#x2F;&quot;&gt;&lt;strong&gt;Focus&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
and solve that problem.&lt;&#x2F;p&gt;
&lt;p&gt;Rinse and repeat this process, and you’ll be a domain expert in no time 🤓!&lt;&#x2F;p&gt;
&lt;p&gt;I’m not kidding. And it’s not &lt;strong&gt;that&lt;&#x2F;strong&gt; hard.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;share-your-knowledge-with-the-community&quot;&gt;Share Your Knowledge with the Community&lt;&#x2F;h3&gt;
&lt;p&gt;Share your knowledge: Help others.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Software engineering is not a path that you walk alone&lt;&#x2F;strong&gt;. Learning to share
your knowledge with the community is as important (&lt;em&gt;if not more&lt;&#x2F;em&gt;) than learning
something new.&lt;&#x2F;p&gt;
&lt;p&gt;There’s a vast community of developers who are willing to help each other: Be
one of them.&lt;&#x2F;p&gt;
&lt;p&gt;Don’t shy away: You don’t have to be a guru to share your knowledge. Opening
yourself up, sharing your experience, asking others’ opinions takes you a long
way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-are-not-your-code&quot;&gt;You Are not Your Code&lt;&#x2F;h2&gt;
&lt;p&gt;“&lt;em&gt;You&lt;&#x2F;em&gt;” and “&lt;em&gt;your code&lt;&#x2F;em&gt;” are
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Orthogonality&quot;&gt;&lt;strong&gt;orthogonal&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to each other.&lt;&#x2F;p&gt;
&lt;p&gt;There is no shame in sharing your code.&lt;&#x2F;p&gt;
&lt;p&gt;Share every semicolon you type on your IDE in
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;&quot;&gt;&lt;strong&gt;GitHub&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;or a similar open source code repository of your
choice&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Whenever you discover something new: &lt;strong&gt;share it&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Whenever you have a problem: &lt;strong&gt;yelp for help&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Whenever you write code: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;&quot;&gt;&lt;strong&gt;put it to GitHub&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; or
&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;&quot;&gt;&lt;strong&gt;create a Gist&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;code-is-nothing&quot;&gt;Code Is Nothing&lt;&#x2F;h2&gt;
&lt;p&gt;Don’t be afraid to put the code you write out in the open.&lt;&#x2F;p&gt;
&lt;p&gt;Don’t be ashamed of your code.&lt;&#x2F;p&gt;
&lt;p&gt;You know what? &lt;strong&gt;Code is nothing&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Trust me; it took a hell lot of years to digest that fact. And it is true:&lt;br &#x2F;&gt;
&lt;strong&gt;Code is nothing&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What you create with your code is everything.&lt;&#x2F;li&gt;
&lt;li&gt;The way you &lt;strong&gt;share&lt;&#x2F;strong&gt; your knowledge is everything.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;value&lt;&#x2F;strong&gt; you add to the &lt;strong&gt;community&lt;&#x2F;strong&gt; is everything.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;All great fighting is the same, Eragon, even as all great warriors are the
same. Past a certain point, &lt;strong&gt;it does not matter&lt;&#x2F;strong&gt; whether you wield a sword, a
claw, a tooth, or a tail. It’s true, you must be capable with your weapon, but
anyone with the time and inclination can acquire technical proficiency.&lt;&#x2F;p&gt;
&lt;p&gt;To achieve greatness though, that requires &lt;strong&gt;artistry&lt;&#x2F;strong&gt;. That requires
&lt;strong&gt;imagination&lt;&#x2F;strong&gt; and &lt;strong&gt;thoughtfulness&lt;&#x2F;strong&gt;, and it’s those qualities that the best
warriors share, even if, on the surface, they appear entirely different.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Christopher Paolini&lt;&#x2F;strong&gt;—&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;7664041-inheritance&quot;&gt;The Inheritance Cycle&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Code, in itself, is &lt;strong&gt;nothing&lt;&#x2F;strong&gt;. It is just a &lt;em&gt;tool&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Code is just a tool: Sharing your code, and asking other’s feedback about your
code will improve you &lt;strong&gt;a lot&lt;&#x2F;strong&gt; as a developer.&lt;&#x2F;p&gt;
&lt;p&gt;With that kept in mind, here are a few developer communities that you might want
to join and share your code.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackexchange.com&#x2F;sites&quot;&gt;Stack Exchange&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;&quot;&gt;Mozilla Developer Network (&lt;em&gt;MDN&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;fedsonslack.com&#x2F;&quot;&gt;FEDs on Slack&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;programming&quot;&gt;Reddit&#x2F;Programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;&quot;&gt;dev.to&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hashnode.com&#x2F;explore&quot;&gt;Hashnode&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;This List is Just a Starting Point&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The list of communities I shared here is, by no means, a definitive or
conclusive list: A google search around your favorite programming language, or
your favorite framework, or your favorite toolchain will reveal at least a dozen
of quality developer groups that you can join in a heart beat.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;stack-exchange&quot;&gt;Stack Exchange&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackexchange.com&#x2F;sites&quot;&gt;Stack Exchange&lt;&#x2F;a&gt; is an absolute must as a
programmer community site for anyone who is serious about &lt;strong&gt;development&lt;&#x2F;strong&gt; and *
&lt;em&gt;programming&lt;&#x2F;em&gt;*.&lt;&#x2F;p&gt;
&lt;p&gt;Don’t just read it. Be a part of it. Participate in its discussions. &lt;strong&gt;Add value
to it&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mozilla-developer-network&quot;&gt;Mozilla Developer Network&lt;&#x2F;h3&gt;
&lt;p&gt;If you’re at all interested in the modern web and the technology stack around
it &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;&quot;&gt;Mozilla Developer Network (&lt;em&gt;MDN&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt; is
the community to join.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;MDN&lt;&#x2F;strong&gt; also provides a ton of information about all of Mozilla’s products and
how to use them properly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;feds-on-slack&quot;&gt;FEDs on Slack&lt;&#x2F;h3&gt;
&lt;p&gt;No, they are not the feds that you are thinking about 🙂.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;fedsonslack.com&#x2F;&quot;&gt;FEDS on Slack&lt;&#x2F;a&gt; is a helpful community for top-notch
front-end developers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;fedsonslack.com&#x2F;&quot;&gt;Join there&lt;&#x2F;a&gt;, and actively contribute to the
discussions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reddit&quot;&gt;Reddit&lt;&#x2F;h3&gt;
&lt;p&gt;There are also some subreddits such
as &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;programming&quot;&gt;&lt;code&gt;&#x2F;r&#x2F;programming&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;learnprogramming&quot;&gt;&lt;code&gt;&#x2F;r&#x2F;learnprogramming&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; that you
might want to follow.&lt;&#x2F;p&gt;
&lt;p&gt;Though reddit is its own universe, don’t get lost in it 😉.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dev-to&quot;&gt;dev.to&lt;&#x2F;h3&gt;
&lt;p&gt;This one is so obvious; it almost hurts that there are people who don’t know it:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;&quot;&gt;&lt;strong&gt;dev.to&lt;&#x2F;strong&gt; is a &lt;strong&gt;capable&lt;&#x2F;strong&gt;, &lt;strong&gt;friendly&lt;&#x2F;strong&gt;, and &lt;strong&gt;vibrant&lt;&#x2F;strong&gt; community of
coders&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you haven’t joined yet, what are you waiting for?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hashnode&quot;&gt;Hashnode&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hashnode.com&#x2F;explore&quot;&gt;Hashnode&lt;&#x2F;a&gt; is the easiest way to start a developer
blog on your personal domain for free and &lt;strong&gt;connect&lt;&#x2F;strong&gt; with the readers through
our global dev community. Like, dev.to, this community is pretty vibrant and
helpful too.Read the Source, Luke&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Copy&lt;&#x2F;strong&gt; what others have done before you.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;learn-to-read-the-source-luke&#x2F;&quot;&gt;Read and &lt;strong&gt;understand&lt;&#x2F;strong&gt; the source code
piece by piece&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;And then, and only then, &lt;strong&gt;replicate&lt;&#x2F;strong&gt; it your own way.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you are planning to become a developer, you are going to be really **intimate
** with &lt;strong&gt;the source&lt;&#x2F;strong&gt;. And that’s coming up next.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;read-the-source-luke&quot;&gt;Read the Source, Luke&lt;&#x2F;h2&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;read-the-source.jpeg&quot; alt=&quot;Read the source, Luke.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Read the source, Luke.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Related to &lt;em&gt;sharing your code openly&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Indulge in open source&lt;&#x2F;strong&gt; and &lt;strong&gt;read&lt;&#x2F;strong&gt; as much code as you can.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Explore Without Fear&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Make “&lt;em&gt;looking ‘under the hood’ of the open source project you like&lt;&#x2F;em&gt;” a habit.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Do. Or do not. There’s no try&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Initially, reading other’s code will feel painful, daunting, even. You’ll feel
yourself like an alien in somebody else’s backyard. It’s difficult to think from
someone else’s point of view, observe how they approach the task at hand,
analyze &lt;strong&gt;how&lt;&#x2F;strong&gt; they solve a particular problem, and more importantly &lt;strong&gt;why&lt;&#x2F;strong&gt;
they chose that particular approach instead of a different one.&lt;&#x2F;p&gt;
&lt;p&gt;Reading others’ code takes time, dedication, and practice: And blimey—it’s a
time well spent.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Reading Others’ Code&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Reading others’ code is just like reading finance: It will feel weird. At
first, it’ll feel difficult. And the more you do it, the more comfortable you’ll
get at it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The more you read, the better you’ll get the hang of the &lt;strong&gt;logical constructs&lt;&#x2F;strong&gt;,
the &lt;strong&gt;terminology&lt;&#x2F;strong&gt;, the &lt;strong&gt;concepts&lt;&#x2F;strong&gt;, and the overall &lt;strong&gt;program flow&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to all these, reading open source code &lt;strong&gt;teaches&lt;&#x2F;strong&gt; you how to
write &lt;a href=&quot;http:&#x2F;&#x2F;wiki.c2.com&#x2F;?CodingConvention&quot;&gt;by using the conventions and idioms of the
language&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;add-value-to-the-community&quot;&gt;Add Value to The Community&lt;&#x2F;h2&gt;
&lt;p&gt;As a follow-up to the above “&lt;em&gt;Share Your Knowledge with the Community&lt;&#x2F;em&gt;”
guideline, &lt;strong&gt;the more you add value to the community, the more value you
receive&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The least you can do to add value is to &lt;a href=&quot;https:&#x2F;&#x2F;opensource.guide&#x2F;how-to-contribute&#x2F;&quot;&gt;contribute to the
&lt;strong&gt;open source&lt;&#x2F;strong&gt; community&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;By adding value to the &lt;strong&gt;open source&lt;&#x2F;strong&gt; community you’ll…&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Improve&lt;&#x2F;strong&gt; your existing skills.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Find&lt;&#x2F;strong&gt; mentors to help you.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Be&lt;&#x2F;strong&gt; a mentor and help others.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Build&lt;&#x2F;strong&gt; public artifacts that help you gain visibility.&lt;&#x2F;li&gt;
&lt;li&gt;Better visibility often means better &lt;strong&gt;career&lt;&#x2F;strong&gt; opportunities too.&lt;&#x2F;li&gt;
&lt;li&gt;You’ll get better at &lt;strong&gt;people skills&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;More importantly, You’ll feel &lt;strong&gt;empowered 💪&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;You’ll gain self-confidence, which will help beat the inner impostor out of
you (&lt;em&gt;more on that later&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;being-a-full-stackoverflow-developer-is-okay&quot;&gt;Being a &lt;strong&gt;Full StackOverflow Developer&lt;&#x2F;strong&gt; is Okay&lt;&#x2F;h2&gt;
&lt;p&gt;Don’t be afraid to search: Even the most experienced developers search the most
uncomplicated things all the time, that’s not a shame.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a recent tweet that I shared on the topic:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, I work at Cisco (which is a networking-focused company) and every time I
need to NAT&#x2F;split a subnet&#x2F;cluster etc I google “IP Subnet Calculator”.&lt;&#x2F;p&gt;
&lt;p&gt;Googling is not a shame:&lt;br &#x2F;&gt;
STFW instead of memorizing stuff, use your brain for more important things:
like solving problems.&lt;&#x2F;p&gt;
&lt;p&gt;— Volkan Özçelik 🦄 (&lt;em&gt;September 3, 2018&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Don’t believe me? Then listen to the other experts who feel the same:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi, I am Chris. I coded 17 years JavaScript and wrote books and articles.
Without looking things up
and &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;code?ref_src=twsrc%5Etfw&quot;&gt;@code&lt;&#x2F;a&gt;
autocomplete, It’d be lost.&lt;&#x2F;p&gt;
&lt;p&gt;— Chris Heilmann (@codepo8) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;codepo8&#x2F;status&#x2F;835986409890672640?ref_src=twsrc%5Etfw&quot;&gt;February 26, 2017&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi, I’m Michael. I’ve been writing JavaScript since 2001 and I still have to
look up how to remove whitespace from a
string. &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;obYoCzKe3b&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;obYoCzKe3b&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;— Michael Bleigh (@mbleigh) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;mbleigh&#x2F;status&#x2F;835942125992759296?ref_src=twsrc%5Etfw&quot;&gt;February 26, 2017&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello, I’m Malte. In 6 years at Google I had to code 3 advanced algorithms.
Looked them up on Wikipedia. &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;BTH3I4TpTO&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;BTH3I4TpTO&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;— Malte Ubl (@cramforce) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;cramforce&#x2F;status&#x2F;835976913160056833?ref_src=twsrc%5Etfw&quot;&gt;February 26, 2017&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi I’m Dan, and I work on Polymer. The other day, I had to read the docs for
how to use Polymer’s data
binding. &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;MarTrxsiKL&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;MarTrxsiKL&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;— Dan Freedman (@danfreedman) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;danfreedman&#x2F;status&#x2F;835978986505166849?ref_src=twsrc%5Etfw&quot;&gt;February 26, 2017&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi, my name is Sean. I maintain ORMs for a living but have to google the
CREATE TABLE syntax every time I do it in
SQL. &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;TP8A2IKjjx&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;TP8A2IKjjx&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;— Spooky Sage Griffin 🏳️‍⚧️🏳️‍🌈 (@sgrif) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;sgrif&#x2F;status&#x2F;835929896794882048?ref_src=twsrc%5Etfw&quot;&gt;February 26, 2017&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi, my name is Sarah. I’ve been writing Rails code since 2006, and I still
get `has_one` and `belongs_to`
confused. &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;NFA4uEmiSz&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;NFA4uEmiSz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;— Sarah Mei (@sarahmei) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;sarahmei&#x2F;status&#x2F;835927143833985024?ref_src=twsrc%5Etfw&quot;&gt;February 26, 2017&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi, my name is Harper. I have programmed computers since the 90s and still
have google to split a string. Or the correct args for
ln. &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;zV7WxrqHc8&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;zV7WxrqHc8&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;— harper 🤯 (@harper) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;harper&#x2F;status&#x2F;835979694264680448?ref_src=twsrc%5Etfw&quot;&gt;February 26, 2017&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi. My name is Erin. I’ve been writing JavaScript for 16 years and I still
have to look up the function signature for
Array.splice. &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;OaxYz1K7Xx&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;OaxYz1K7Xx&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;— she builds their fires (@ErinIshimoticha) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ErinIshimoticha&#x2F;status&#x2F;835981374309941249?ref_src=twsrc%5Etfw&quot;&gt;February 26, 2017&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Looking things up is &lt;strong&gt;not&lt;&#x2F;strong&gt; a shame.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;to-learn-learn-to-learn-first&quot;&gt;To Learn, “&lt;em&gt;Learn to Learn&lt;&#x2F;em&gt;” First&lt;&#x2F;h2&gt;
&lt;p&gt;With one &lt;strong&gt;caveat&lt;&#x2F;strong&gt; though: Do not apply the knowledge you acquired without
learning about the details.&lt;&#x2F;p&gt;
&lt;p&gt;Don’t just copy and paste things. Learn the “&lt;strong&gt;why&lt;&#x2F;strong&gt;“s and “&lt;strong&gt;how&lt;&#x2F;strong&gt;“s of the
knowledge before using it in your code.&lt;&#x2F;p&gt;
&lt;p&gt;Don’t just memorize, “&lt;strong&gt;learn to learn&lt;&#x2F;strong&gt;” instead.&lt;&#x2F;p&gt;
&lt;p&gt;You’ll see more about “&lt;em&gt;learning to learn&lt;&#x2F;em&gt;” down below: Just 🐻 with me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;know-how-your-wetware-brain-works&quot;&gt;Know How Your Wetware 🧠 Works&lt;&#x2F;h2&gt;
&lt;p&gt;Your “&lt;em&gt;wetware&lt;&#x2F;em&gt;” is not good at memorizing: So, don’t memorize those software
design patterns, or those interview questions and algorithmic puzzles.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Don’t Memorize What You Can Look Up&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
There is no reason to memorize anything as long as you can look it up.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;On the other hand, &lt;a href=&quot;https:&#x2F;&#x2F;www.sciencedirect.com&#x2F;science&#x2F;article&#x2F;pii&#x2F;S0020737369800246&quot;&gt;your &lt;strong&gt;wetware&lt;&#x2F;strong&gt; is a Yoda-level-master at &lt;strong&gt;pattern
recognition&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Expose&lt;&#x2F;strong&gt; your wetware to as many patterns and variations as you can, and let
your subconscious do the rest of the job.&lt;&#x2F;p&gt;
&lt;p&gt;That’s why one of the best ways to learn something is to &lt;strong&gt;copy&lt;&#x2F;strong&gt; what others
have done before you:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Imitation Is Learning&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Imitate people you admire to be, to be like them.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;you-learn-by-imitation&quot;&gt;You Learn by Imitation&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jstor.org&#x2F;stable&#x2F;2762020&quot;&gt;You learn by imitation&lt;&#x2F;a&gt;: Learning
software is no exception to that.&lt;&#x2F;p&gt;
&lt;p&gt;Learning how to name variables, or how to create a folder structure, or how to
couple different modules of your code together, how to document your code… is
much easier when you &lt;strong&gt;imitate&lt;&#x2F;strong&gt; how others have done the same thing before you.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Stand on the Shoulders of the Giants&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Learn from the cumulative experience of developers before you.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Even if you want to reinvent the wheel first look at what others have done
already, before doing it your way.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;About that Wheel…&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;The “wheel” is, ironically, the most re-invented tool so far&lt;&#x2F;a&gt;
🙂.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Since the day we are born, we learn by imitating. Our brains are wired to *
&lt;em&gt;recognize patterns&lt;&#x2F;em&gt;*, &lt;strong&gt;copy&lt;&#x2F;strong&gt;, &lt;strong&gt;mimic&lt;&#x2F;strong&gt;, &lt;strong&gt;imitate&lt;&#x2F;strong&gt;, and &lt;strong&gt;mirror&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The same applies when learning how to code, too:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Read&lt;&#x2F;strong&gt; others’ code.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Copy&lt;&#x2F;strong&gt; and &lt;strong&gt;replicate&lt;&#x2F;strong&gt; what you see.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In time, you’ll understand how different patterns tie together:&lt;&#x2F;p&gt;
&lt;p&gt;You’ll see the “&lt;em&gt;why&lt;&#x2F;em&gt;“s behind those “&lt;em&gt;what&lt;&#x2F;em&gt;“s.&lt;&#x2F;p&gt;
&lt;p&gt;And the way to reach there is to…&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;First, &lt;strong&gt;imitate&lt;&#x2F;strong&gt; others,&lt;&#x2F;li&gt;
&lt;li&gt;Then understand &lt;strong&gt;how&lt;&#x2F;strong&gt; the thing you imitated works,&lt;&#x2F;li&gt;
&lt;li&gt;And only then start questioning &lt;strong&gt;why&lt;&#x2F;strong&gt; that code is implemented that way,&lt;&#x2F;li&gt;
&lt;li&gt;And, finally, think about how to write it &lt;strong&gt;differently&lt;&#x2F;strong&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;Then, think about &lt;strong&gt;if&lt;&#x2F;strong&gt; writing it differently solves your problem more
elegantly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;take-your-time&quot;&gt;Take Your Time&lt;&#x2F;h2&gt;
&lt;p&gt;Learning by imitation is a slow and gradual process: It requires a lot of time
and patience. I’m sorry and there are no shortcuts to speed it up. Though, as in
anything, practice makes perfect.&lt;&#x2F;p&gt;
&lt;p&gt;The more you read others’ code, the better you’ll get at it: It’s worth the time
and energy you invest in.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hint&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For starters, you might want to start reading the source code of the open
source frameworks that you love: The transition will feel much easier then.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After you get used to the codebase, it’ll start to feel familiar, and then can
you find a chance to dig in further.&lt;&#x2F;p&gt;
&lt;p&gt;When you feel you are familiar enough with the codebase,
&lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;en&#x2F;github&#x2F;getting-started-with-github&#x2F;fork-a-repo&quot;&gt;&lt;strong&gt;fork&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
the project on your development environment, then &lt;strong&gt;build&lt;&#x2F;strong&gt; it, and then **debug
** it to &lt;strong&gt;understand&lt;&#x2F;strong&gt; how its different pieces of the code interact with each
other.&lt;&#x2F;p&gt;
&lt;p&gt;Do this exercise regularly, &lt;strong&gt;every single day&lt;&#x2F;strong&gt;, and one day you’ll wake up and
utter:&lt;&#x2F;p&gt;
&lt;p&gt;“&lt;em&gt;I know kung-fu.&lt;&#x2F;em&gt;”&lt;&#x2F;p&gt;
&lt;h2 id=&quot;don-t-hang-onto-a-single-paradigm&quot;&gt;Don’t Hang onto a Single Paradigm&lt;&#x2F;h2&gt;
&lt;p&gt;Whatever you do, don’t stick to a single language, or a single paradigm.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Embrace change&lt;&#x2F;strong&gt;, embrace different languages, embrace different approaches.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Don’t Have Firm Opinions on Anything&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There is no single correct solution to any problem. Most of the time, there is
more than a single truth. More often than not, those &lt;strong&gt;truths coexist&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Truth coexists.&lt;&#x2F;p&gt;
&lt;p&gt;Consider this before
talking&#x2F;typing.&lt;&#x2F;p&gt;
&lt;p&gt;— Volkan Özçelik 🦄 (&lt;em&gt;October 6, 2021&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The more languages you know, the broader spectrum of paradigms you’ll be exposed
to. Knowing more than one language will help you shape the way you think. You’ll
approach problems &lt;strong&gt;differently&lt;&#x2F;strong&gt;. And that is &lt;strong&gt;good&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;When you expand your horizon, and when you get out of your comfort zone, you
will be able to combine seemingly unrelated facts with each other to come up
with a solution—That is the &lt;em&gt;very&lt;&#x2F;em&gt; definition of &lt;strong&gt;creativity&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With enough accumulated &lt;strong&gt;creativity&lt;&#x2F;strong&gt; and &lt;strong&gt;artistry&lt;&#x2F;strong&gt;, you will &lt;em&gt;eventually&lt;&#x2F;em&gt;
be the one to find a solution to “&lt;em&gt;that&lt;&#x2F;em&gt;” problem even Google has no answer to.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;there-are-no-shortcuts&quot;&gt;There Are No Shortcuts&lt;&#x2F;h2&gt;
&lt;p&gt;Related, somewhat ironically, to the above quote, we are not in the Matrix.&lt;&#x2F;p&gt;
&lt;p&gt;Anything that claims you to “&lt;em&gt;teach X language in Y weeks&lt;&#x2F;em&gt;” is a big honking
lie.&lt;&#x2F;p&gt;
&lt;p&gt;Take it easy.&lt;&#x2F;p&gt;
&lt;p&gt;Learn gradually.&lt;&#x2F;p&gt;
&lt;p&gt;Give the time your brain deserves to internalize what you have learned.&lt;&#x2F;p&gt;
&lt;p&gt;Learning requires:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Repetition&lt;&#x2F;strong&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;Routines,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blogsociology.wordpress.com&#x2F;tag&#x2F;habitualization&#x2F;&quot;&gt;Habitualization&lt;&#x2F;a&gt; *,&lt;&#x2F;li&gt;
&lt;li&gt;Dedication,&lt;&#x2F;li&gt;
&lt;li&gt;A hell lot of perspiration,&lt;&#x2F;li&gt;
&lt;li&gt;And &lt;strong&gt;repetition&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;* “&lt;a href=&quot;https:&#x2F;&#x2F;blogsociology.wordpress.com&#x2F;tag&#x2F;habitualization&#x2F;&quot;&gt;Habitualization&lt;&#x2F;a&gt;”
is just a big fancy word for creating habits based on stimulation in your
environment.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Moreover, once you dedicate yourself, you’ll be amazed at the progress you make.&lt;&#x2F;p&gt;
&lt;p&gt;The only difference between you and the role model that you want to be will be
the amount of time you &lt;strong&gt;regularly&lt;&#x2F;strong&gt; dedicate yourself to your kung-fu and the
number of things you &lt;strong&gt;sacrifice&lt;&#x2F;strong&gt; on the way.&lt;&#x2F;p&gt;
&lt;p&gt;Learning is a means: It’s &lt;strong&gt;not&lt;&#x2F;strong&gt; the end.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Surprise: Learning Never Ends&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
If you are in this industry, you will continuously learn &lt;strong&gt;forever&lt;&#x2F;strong&gt;, be ready
for that.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;beat-the-out-of-the-impostor-in-you&quot;&gt;Beat the $#!% Out of the Impostor in You&lt;&#x2F;h2&gt;
&lt;p&gt;From time to time, you may feel that you are lagging behind, or you don’t know
as much as your colleagues—That is a well-documented psychological phenomenon
called &lt;a href=&quot;https:&#x2F;&#x2F;www.fastcompany.com&#x2F;40421352&#x2F;the-five-types-of-impostor-syndrome-and-how-to-beat-them&quot;&gt;the impostor’s syndrome&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You might get a feeling that you are just lucky to be in your place. You might
feel that you don’t deserve your place.&lt;&#x2F;p&gt;
&lt;p&gt;You know what? That’s complete and utter 🐴 💩.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s why:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nobody&lt;&#x2F;strong&gt; knows everything.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Nobody&lt;&#x2F;strong&gt; is perfect.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Everyone&lt;&#x2F;strong&gt; has a unique set of skills.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You are &lt;strong&gt;priceless&lt;&#x2F;strong&gt; in what you bring to your environment, and nobody can add
the values you specifically add.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It is the &lt;strong&gt;union&lt;&#x2F;strong&gt; of the individual skills of the people that make the team
more prominent than the sum of its contributors.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Most people experience moments of doubt, and that’s normal. The important part
is not to let your uncertainty control your actions.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Yeet the Impostor Out of You&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a stupid trick that works: If you tell yourself you’ll never feel like
an impostor, guess what? You’ll never feel like an impostor.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Just accept the fact that not knowing everything is normal. You’ll learn things
when you need to learn things—That’s okay.&lt;&#x2F;p&gt;
&lt;p&gt;You don’t have to learn that new API, or that new cool framework.&lt;&#x2F;p&gt;
&lt;p&gt;Also, even if you do have to, you don’t have to learn all of it… like… right
now 😁—Cut yourself some slack. &lt;strong&gt;Give yourself the time you deserve&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you are still not sure how to act like
that, &lt;a href=&quot;https:&#x2F;&#x2F;www.fastcompany.com&#x2F;40421352&#x2F;the-five-types-of-impostor-syndrome-and-how-to-beat-them&quot;&gt;this article gives a couple of tips and
tricks&lt;&#x2F;a&gt;
on how to beat the impostor in you.&lt;&#x2F;p&gt;
&lt;p&gt;After the fact that you are better than you think you are is set straight, we
can move on to the more technical parts of the equation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;be-a-good-software-craftsman&quot;&gt;Be a Good Software Craftsman&lt;&#x2F;h2&gt;
&lt;p&gt;To be a good software craftsman is to read what others have to say about it.&lt;&#x2F;p&gt;
&lt;p&gt;There is so much material about the subject that giving a digestible summary
here is practically impossible. So, I’ll provide a list of &lt;strong&gt;bedtime reading&lt;&#x2F;strong&gt;
material instead.&lt;&#x2F;p&gt;
&lt;p&gt;I recommend you read the following the resources that I’ve listed here
in &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read—No Exceptions&lt;&#x2F;a&gt;
&lt;strong&gt;cover to cover&lt;&#x2F;strong&gt;, twice.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Once&lt;&#x2F;strong&gt;: Before you begin your programming journey.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Next&lt;&#x2F;strong&gt;: After you have been coding for several years, and you have learned
more than one programming language well.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A heads up: It’s a relatively long list, and it might take a while: Take your
time.&lt;&#x2F;p&gt;
&lt;p&gt;What’s common
in &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;all of those resources&lt;&#x2F;a&gt; is that
they don’t talk about how to use a specific programming language, they talk
about things that are bigger than code.&lt;&#x2F;p&gt;
&lt;p&gt;They are &lt;strong&gt;essential&lt;&#x2F;strong&gt;. I can go as far as advising you to read them &lt;strong&gt;before&lt;&#x2F;strong&gt;
you even start learning to code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Why?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you want to be a good software craftsman, &lt;strong&gt;code&lt;&#x2F;strong&gt; is of &lt;strong&gt;secondary&lt;&#x2F;strong&gt;
importance. “&lt;strong&gt;&lt;em&gt;Code is nothing&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;”, remember?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Don’t give code more value than it deserves&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;know-your-tools-well&quot;&gt;Know Your Tools Well&lt;&#x2F;h2&gt;
&lt;p&gt;What tools you choose will depend on what you want to achieve. This section will
introduce a few common paths that you might want to explore. Though, don’t take
is as an end-all be-all reference.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;You Know Where You Want to Go Better&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You know where you want to go better than I do, and it’s virtually impossible
for me to cover every possible niche. Instead, the areas I list below will be
mostly the ones that I’m interested in and regularly exploring. I’ll add more
resources here as I create more content.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For example, if you want to get better at &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; in particular and *
&lt;em&gt;Front-End Development&lt;&#x2F;em&gt;* in
general, &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn Your JavaScript the Unconventional Way&lt;&#x2F;a&gt;
can be a great starting point. While at there, it would be good to remind
yourself
that &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;.
And for an unorthodox take on the subject matter, you might even want
to &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Learn Haskell First to Learn JavaScript Better&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Or maybe you want to follow the path of an User Experience Designer. In that
case, on &lt;strong&gt;Usability&lt;&#x2F;strong&gt; and &lt;strong&gt;User Experience&lt;&#x2F;strong&gt;, I’ve gathered quite a few
resources
in &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Don’t Make the User Think&lt;&#x2F;a&gt;
that might pique your interest.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-about-software-design-patterns&quot;&gt;How About Software Design Patterns?&lt;&#x2F;h2&gt;
&lt;p&gt;A quick advice about studying &lt;strong&gt;Software Design Patterns&lt;&#x2F;strong&gt; is, don’t try to fit
everything into a “&lt;em&gt;pattern&lt;&#x2F;em&gt;”. Go with the flow.&lt;&#x2F;p&gt;
&lt;p&gt;Experimenting with design patterns the first time is like playing paintball the
first time: It’ll be fun, but it sure will be &lt;strong&gt;messy&lt;&#x2F;strong&gt; and it will hurt a lot.&lt;&#x2F;p&gt;
&lt;p&gt;Design patterns are good, and you should read about them; however, keep in mind
that they are &lt;strong&gt;guidelines&lt;&#x2F;strong&gt;, don’t take them as gospel.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2021&#x2F;10&#x2F;Screen-Shot-2021-10-14-at-2.14.30-PM.png&quot; alt=&quot;They are more guidelines than actual rules.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Don’t try to fit every problem you have into a pattern.&lt;&#x2F;p&gt;
&lt;p&gt;Yes, there are specific sets of problems that fit well with certain software
architecture patterns. One the other hand, forcing patterns into every single
problem set will be counterproductive, at the very least.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-about-those-interview-prep-books-and-code-banks&quot;&gt;How About Those “&lt;em&gt;Interview Prep&lt;&#x2F;em&gt;” Books and Code Banks?&lt;&#x2F;h2&gt;
&lt;p&gt;For books like “&lt;em&gt;Cracking the Coding Interview&lt;&#x2F;em&gt;”, and for websites like
“&lt;em&gt;Leetcode&lt;&#x2F;em&gt;”, well, I have mixed feelings.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to pass an interview, sure thing, go ahead and read them.&lt;&#x2F;p&gt;
&lt;p&gt;If you are prepping for an interview, not studying those resources is
&lt;strong&gt;illogical&lt;&#x2F;strong&gt;: If that’s how the game is played, you should play it by the rules
unless you are confident that you can set your own rules.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;About Competitive Programming Challenges&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you want to work for a company as a software developer, and if that company
prefers asking competitive programming questions instead of seeking for a
diversified and complementary mixture of creative human beings, then you have no
other option but study those interview prep books and websites.&lt;&#x2F;p&gt;
&lt;p&gt;From my anecdotal observation, that’s how the majority of the Silly Cone
Valley companies are right now. There are exceptions, but it’s &lt;strong&gt;very&lt;&#x2F;strong&gt; rare.
And from the looks of it, it’s not about to change anytime soon.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Though, I have a sliver of hope that, if you have read this article thus far,
you have a strong belief that you are &lt;strong&gt;meant to be&lt;&#x2F;strong&gt; more than just a &lt;em&gt;walking
scientific calculator&lt;&#x2F;em&gt; that can backtrack a maze, or reverse a binary tree.&lt;&#x2F;p&gt;
&lt;p&gt;For mastering of your craftsmanship, interview prep books and websites are **not
** worth your time.&lt;&#x2F;p&gt;
&lt;p&gt;I mean, &lt;strong&gt;do&lt;&#x2F;strong&gt; buy those interview prep books, and &lt;strong&gt;do&lt;&#x2F;strong&gt; solve the question in
those “&lt;em&gt;programming interview questions code bank&lt;&#x2F;em&gt;” websites; however, treat
them as “&lt;em&gt;side dishes&lt;&#x2F;em&gt;”, not as the main course.&lt;&#x2F;p&gt;
&lt;p&gt;Don’t let a stupid recursive array manipulation interview question dictate how
good a software craftsman you are.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;flex-your-algorithmic-muscle&quot;&gt;Flex Your Algorithmic Muscle&lt;&#x2F;h2&gt;
&lt;p&gt;Though, don’t get me wrong here. Learning algorithms; learning when, why, and
how to use them is &lt;strong&gt;priceless&lt;&#x2F;strong&gt;. Memorizing algorithms, on the other hand, to
pass a technical interview is a waste of time. This is a a subtle, yet
importance difference.&lt;&#x2F;p&gt;
&lt;p&gt;Don’t learn &lt;strong&gt;data structures&lt;&#x2F;strong&gt; and &lt;strong&gt;algorithms&lt;&#x2F;strong&gt; for the sake of studying for
interviews. Learn them &lt;strong&gt;because&lt;&#x2F;strong&gt; it makes you a &lt;strong&gt;better&lt;&#x2F;strong&gt; programmer.&lt;&#x2F;p&gt;
&lt;p&gt;Regardless, studying &lt;a href=&quot;https:&#x2F;&#x2F;projecteuler.net&#x2F;&quot;&gt;&lt;em&gt;competitive programming questions&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;
will help you in your programming interviews. There are even shortcuts (&lt;em&gt;like
websites like leetcode&lt;&#x2F;em&gt;) that help you practice your algorithmic chops.&lt;&#x2F;p&gt;
&lt;p&gt;Yet, that’s not the point. &lt;strong&gt;Do not take shortcuts&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Spend time to &lt;strong&gt;understand&lt;&#x2F;strong&gt; a &lt;strong&gt;broad spectrum&lt;&#x2F;strong&gt; of data structures and
algorithms: Learn &lt;strong&gt;when&lt;&#x2F;strong&gt; to use them, &lt;strong&gt;how&lt;&#x2F;strong&gt; to use them, when &lt;strong&gt;not&lt;&#x2F;strong&gt; to use
them.&lt;&#x2F;p&gt;
&lt;p&gt;Learn what the &lt;strong&gt;benefits&lt;&#x2F;strong&gt; of a particular type of algorithm are.&lt;&#x2F;p&gt;
&lt;p&gt;Learn what the &lt;strong&gt;liabilities&lt;&#x2F;strong&gt; of using specific data structures are.&lt;&#x2F;p&gt;
&lt;p&gt;Here are two excellent (&lt;em&gt;and free&lt;&#x2F;em&gt;) resources to learn your algorithms:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cses.fi&#x2F;book&#x2F;index.html&quot;&gt;Competitive Programmer’s Handbook&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;teachyourselfcs.com&#x2F;&quot;&gt;Teach Yourself CS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Aside from them, I’d suggest reading these two books &lt;strong&gt;cover-to-cover&lt;&#x2F;strong&gt;, not
skipping anything. Genuinely ingest everything in them:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;425208.The_Algorithm_Design_Manual&quot;&gt;The Algorithm Design Manual—S. Skiena&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;108986.Introduction_to_Algorithms&quot;&gt;Introduction to Algorithms—Cormen, et., al.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are other books too, and you can investigate them on your own. Though,
these two books will cover all your algorithm bases.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;learn-to-learn&quot;&gt;Learn to Learn&lt;&#x2F;h2&gt;
&lt;p&gt;Before even beginning your learning adventure, you need to know two things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You should &lt;strong&gt;know&lt;&#x2F;strong&gt; how you learn: What type of learner you are.&lt;&#x2F;li&gt;
&lt;li&gt;You need to “&lt;strong&gt;learn to learn&lt;&#x2F;strong&gt;”.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That might sound “&lt;em&gt;too meta&lt;&#x2F;em&gt;”, so let me elaborate:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Learning to learn&lt;&#x2F;strong&gt; is easier said than done because to “&lt;em&gt;learn to learn&lt;&#x2F;em&gt;”,
you have to &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Know_thyself&quot;&gt;&lt;strong&gt;know yourself&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
first—you have to have an idea of what type of a learner you are: There is
no “&lt;em&gt;one size fits all&lt;&#x2F;em&gt;” solution in learning.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Every fighter has a different way of eating yogurt.”&lt;&#x2F;p&gt;
&lt;p&gt;— Turkish proverb&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Are you an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Inductive_reasoning&quot;&gt;&lt;strong&gt;inductive learner&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
who starts with the foundation and understands the bigger picture by
connecting pieces together.&lt;&#x2F;p&gt;
&lt;p&gt;Alternatively, are you a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Deductive_reasoning&quot;&gt;&lt;strong&gt;deductive learner&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
who likes to see a working system as a whole, only to split it into is building
blocks recursively, and understand each piece until there is nothing left to
split apart.&lt;&#x2F;p&gt;
&lt;p&gt;Are you a &lt;a href=&quot;https:&#x2F;&#x2F;www.thestudygurus.com&#x2F;visual-study-tips&#x2F;&quot;&gt;&lt;strong&gt;visual learner&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;?
Do you use flashcards? Do you want to draw things on a whiteboard? Do you want to
look at things “&lt;em&gt;from a different perspective&lt;&#x2F;em&gt;” to “&lt;em&gt;get the hang of it&lt;&#x2F;em&gt;.” Do
you understand things best when you have a “&lt;em&gt;clear picture&lt;&#x2F;em&gt;” in your mind?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;learn-how-you-learn&quot;&gt;Learn How You Learn&lt;&#x2F;h2&gt;
&lt;p&gt;Do you like watching videos to learn things, or are you more comfortable when
you read books and articles and then apply the concepts you read at your own
pace?&lt;&#x2F;p&gt;
&lt;p&gt;Do you learn by playing toy projects?&lt;&#x2F;p&gt;
&lt;p&gt;Do you learn by reading others’ code?&lt;&#x2F;p&gt;
&lt;p&gt;There’s no exact answer to the “&lt;em&gt;how do I learn?&lt;&#x2F;em&gt;” question.&lt;&#x2F;p&gt;
&lt;p&gt;If you’re not sure, I’d suggest you try a variety of different approaches and
see which ones fit the best for you.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caveat&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
An unrelated cautionary note: Most people don’t fit perfectly into a single
learning-style category, so it’s highly likely that you will be better off using
&lt;strong&gt;a mixture of learning styles&lt;&#x2F;strong&gt; and techniques.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Watch yourself, and be more aware of what styles of learning you prefer the
most.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;don-t-rush&quot;&gt;Don’t Rush&lt;&#x2F;h2&gt;
&lt;p&gt;Learning to code is no different from learning any other skill: It’s a &lt;strong&gt;slow&lt;&#x2F;strong&gt;,
&lt;strong&gt;painstaking&lt;&#x2F;strong&gt;, and &lt;strong&gt;gradual&lt;&#x2F;strong&gt; process. The more you practice, the better
you’ll get.&lt;&#x2F;p&gt;
&lt;p&gt;Take “&lt;em&gt;reading others’ code&lt;&#x2F;em&gt;” for example. Do you have a problem reading others’
code? Then attack the problem right at its heart:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pick&lt;&#x2F;strong&gt; a few open source projects from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;&quot;&gt;GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Read&lt;&#x2F;strong&gt; the code in there until your eyes bleed.&lt;&#x2F;li&gt;
&lt;li&gt;Then &lt;strong&gt;read some more&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It is a slow and gradual process: &lt;strong&gt;Be patient&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;before-you-begin-programming&quot;&gt;Before You Begin Programming…&lt;&#x2F;h2&gt;
&lt;p&gt;No matter what you want to learn, if you aspire to be a good developer, you will
need the following skills. So I encourage you to learn them sooner than later.&lt;&#x2F;p&gt;
&lt;p&gt;After you are comfortable with them, you can continue your programming journey
from where you left off.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a short list of skills that you’ll likely need for starters:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A basic-level of &lt;strong&gt;terminal&lt;&#x2F;strong&gt; knowledge.&lt;&#x2F;li&gt;
&lt;li&gt;Ability to write simple &lt;strong&gt;shell scripts&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Basic knowledge of &lt;strong&gt;git&lt;&#x2F;strong&gt; and &lt;strong&gt;GitHub&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;And knowledge about how to &lt;strong&gt;ssh&lt;&#x2F;strong&gt; into a server.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;where-to-go-from-here&quot;&gt;Where to Go From Here&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;tags&#x2F;roadmap&quot;&gt;There are a handful of articles that I keep on writing to augment
this roadmap&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here, you can find the list below, for your convenience. The list will
update itself automatically as I add more resources and articles later:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Be the Next Version of Yourself&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;If you have been patient enough to read to the end of this article without
skipping anything, &lt;a href=&quot;https:&#x2F;&#x2F;www.nngroup.com&#x2F;articles&#x2F;how-little-do-users-read&#x2F;&quot;&gt;you are better than 75% the world
already&lt;&#x2F;a&gt;.
Congratulations.&lt;&#x2F;p&gt;
&lt;p&gt;Learning is a never-ending journey. And learning is also a way to &lt;strong&gt;find
yourself&lt;&#x2F;strong&gt;. Finding yourself—finding your core idenity—has never been an
easy task.&lt;&#x2F;p&gt;
&lt;p&gt;Of course there will be times you’ll stumble upon. In those times, make sure you
are surrounded by a welcoming community to support you and push you forward.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll write a follow-up article, focusing on a more technical roadmap, especially
focusing on the path of becoming a developer.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Closure</title>
        <published>2024-05-21T00:00:00+00:00</published>
        <updated>2024-05-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/closure/"/>
        <id>https://zerotohero.dev/top-of-mind/closure/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/closure/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;recon.png&quot; alt=&quot;Closure&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;when-reality-fragments&quot;&gt;When Reality Fragments&lt;&#x2F;h2&gt;
&lt;p&gt;In the here and now, the concept of completeness arises from the limitations of
our conscious mind to distinguish the indivisible unity of matter. When
completeness is fragmented, it ceases to exist as a whole.&lt;&#x2F;p&gt;
&lt;p&gt;Consequently, our actions and choices are crucial in determining our material
success. Why does material success matter? Well, mainly because we are
(&lt;em&gt;material squirrels&lt;&#x2F;em&gt;) living in a material world.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“Material squirrel”?&lt;&#x2F;strong&gt; srsly**?!&lt;&#x2F;p&gt;
&lt;p&gt;Well, that’s my neurotype playing word games as a means to keep my mind
occupied. So be ready for other subtle word bombs, hidden secondary, and
tertiary meanings, and finding more questions than answers. And if you
don’t—at this very moment—I honestly and truthfully cannot care less.
Though, I “&lt;em&gt;may&lt;&#x2F;em&gt;” care &lt;em&gt;more&lt;&#x2F;em&gt;, later… maybe.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I like words (more than the average Joe) and bending and twisting them. I like
bending and twisting things, combining them, and re-using them in ways that are
not necessarily meant to be—which, by definition, makes me a hacker.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;there-is-no-spoon&quot;&gt;There Is No Spoon&lt;&#x2F;h2&gt;
&lt;p&gt;But, this braindump you are reading at the moment—while I’m letting my ideas
flow without interruption—is &lt;strong&gt;not&lt;&#x2F;strong&gt; about the hacker’s mindset—I’ve have
written about
that &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;in other places&lt;&#x2F;a&gt;
in &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;depth&lt;&#x2F;a&gt;, a lot—This is more
fundamental, more to the &lt;strong&gt;core&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;See, I often contemplate: Is finding purpose in any task possible, regardless of
how seemingly insignificant it may appear? Can I infuse meaning into everything
I do and be: in every aspect of my existence? What &lt;strong&gt;truly&lt;&#x2F;strong&gt; defines purpose?&lt;&#x2F;p&gt;
&lt;p&gt;Is it to be? Or to do? Or something in between in a harmonic, circular fashion (
which I sometimes call “&lt;strong&gt;&lt;em&gt;do be do be do&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;”)?&lt;&#x2F;p&gt;
&lt;p&gt;Well, “do be do be do” is not as goofy as it sounds because &lt;strong&gt;duality&lt;&#x2F;strong&gt;, and by
that token &lt;strong&gt;oscillation&lt;&#x2F;strong&gt;, and by that token &lt;strong&gt;rotation&lt;&#x2F;strong&gt;, are the three
fundamental invariants that define everything, life, and the universe.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;broken-is-beautiful&quot;&gt;Broken Is Beautiful&lt;&#x2F;h2&gt;
&lt;p&gt;Even in the harshest times, I strive to maintain a realistic outlook, always
seeking practical solutions and outcomes. Trying to be good with weird, trying
to question the not-so-questionable.&lt;&#x2F;p&gt;
&lt;p&gt;The meaning of life may always remain a mystery, but I choose to live my life
with &lt;strong&gt;sincerity&lt;&#x2F;strong&gt;, joy and being the best version of myself.&lt;&#x2F;p&gt;
&lt;p&gt;I believe this is all we can expect of ourselves as human beings. Like, we will
never be a perfect sphere. Or, to put a positive spin on that, We will always be
&lt;strong&gt;rough sphere&lt;&#x2F;strong&gt;s, which is a beautiful thing to celebrate.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;An Optimist Prime in the Land of Negatrons&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When you interact with me, at times you may sense positivity, hope, and joy,
as these emotions result from my realistic outlook on life—At other times, you
may sense a know-it-all asshole — “&lt;em&gt;rough sphere&lt;&#x2F;em&gt;”—remember? :).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Sincerity… I do everything with sincerity and to the best of my ability. Is
that the &lt;strong&gt;purpose&lt;&#x2F;strong&gt;? Well, maybe. Or is it the question we seek but are
mistakenly trying to find the answer?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;We forget the question while we search for the answer&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-mirror&quot;&gt;The Mirror&lt;&#x2F;h2&gt;
&lt;p&gt;Happiness, hope, and joy are the things that I purposefully and intentionally
radiate. So, if you ask me how I am, my answer will likely be, “I’ve never been
better.”&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Changing the Frame of Reference&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;However, those closest to us may see us with a clearer perspective than our
own reflection.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;acceptance&quot;&gt;Acceptance&lt;&#x2F;h2&gt;
&lt;p&gt;For me, and this very moment—as it is “the moment” that matters—I have found
a &lt;strong&gt;balance&lt;&#x2F;strong&gt; between &lt;em&gt;realism&lt;&#x2F;em&gt; and &lt;em&gt;joy&lt;&#x2F;em&gt; and a glimmer of the &lt;em&gt;sense&lt;&#x2F;em&gt; of
purpose in my existence:&lt;&#x2F;p&gt;
&lt;p&gt;I have found &lt;strong&gt;closure&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Closure&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>It&#x27;s Time to Fizz that Buzz</title>
        <published>2024-05-21T00:00:00+00:00</published>
        <updated>2024-05-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/fizz-that-buzz/"/>
        <id>https://zerotohero.dev/zero-to-prod/fizz-that-buzz/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/fizz-that-buzz/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;Volkan_zelik_data_structures_and_algorithms_but_they_are_alive_c53953fa-c2af-4acf-8494-e5d209cc1029.png&quot; alt=&quot;Technical interviews in the valley require a weird mindset.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Technical interviews in the valley require a weird mindset.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2024-05-21&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I have archived &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; project for a while. I still have plans
to repurpose it, but it’s not a priority right now. I’ll keep you posted
when I start working on it again, or when I reuse some of its content
and components in other projects.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In the video at the end of this post, I’m talking about &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;—a
sister project of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the video, I’m outlining a high-level architecture of the login flow of the
project, how it integrates with the &lt;strong&gt;Ghost&lt;&#x2F;strong&gt; content publishing platform as a
membership provider, and how I’m going to proceed.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; is a greenfield project, and as I continue developing and
productizing it, I will be sharing the entire process with y’all with more
videos and articles.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The video that I’m sharing here is a ~30min &lt;strong&gt;uncut&lt;&#x2F;strong&gt; recording: It’s as raw
as it gets.&lt;&#x2F;p&gt;
&lt;p&gt;I wanted to share it in its entirety, before post-production, where I usually
relentlessly cut out at least two-third of the video to increase the
signal-to-noise ratio of it and provide as much value for the time you spend as
I possibly can.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;the-high-level-overview&quot;&gt;The High Level Overview&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s the high-level authentication and identity management architecture that
I’ll be talking about (&lt;em&gt;you can open the image in another tab for a
higher-resolution version&lt;&#x2F;em&gt;):&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;05&amp;#x2F;fizzbuzz-pro-verification-flow-2.png&quot; alt=&quot;FizzBuzz Pro authentication high-level overview.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;FizzBuzz Pro authentication high-level overview.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;video-discussion&quot;&gt;Video Discussion&lt;&#x2F;h2&gt;
&lt;p&gt;So, without further ado, here goes the video.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a quick cut where I’m talking about &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; in general:&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;u_I5azPqgg4?si=W9BdGceygaOCYthm&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;A brief overview of FizzBuzz Pro.&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;A brief overview of FizzBuzz Pro.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Fizz that Buzz&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;on-keeping-things-simple&quot;&gt;On Keeping Things Simple&lt;&#x2F;h2&gt;
&lt;p&gt;After recording the video, I’ve realized that maybe coupling &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; (
&lt;em&gt;ghost&lt;&#x2F;em&gt;) user accounts with the &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; user accounts is not the best
way to proceed.&lt;&#x2F;p&gt;
&lt;p&gt;The architecture I outlined above complicates things without providing any real
business value. It’s better (&lt;em&gt;and simpler, and easier to maintain&lt;&#x2F;em&gt;) to keep *
&lt;em&gt;FizzBuzz Pro&lt;&#x2F;em&gt;* as a separate service, and maybe provide a discounted enrollment
option (&lt;em&gt;using a zero-to-hero-generated discount coupon&lt;&#x2F;em&gt;) to &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;
for the &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; premium members. To do that, we can create a separate
premium-member-only page where they can copy a discount coupon.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll update the diagram accordingly, create a follow-up articles, and also
create another video that walks through the new login flow.&lt;&#x2F;p&gt;
&lt;p&gt;And until then, enjoy… And may the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Promotions Don&#x27;t Happen Overnight</title>
        <published>2024-05-20T00:00:00+00:00</published>
        <updated>2024-05-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0027/"/>
        <id>https://zerotohero.dev/highlights/issue-0027/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0027/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;level-up.png&quot; alt=&quot;Level up.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Level up.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the 27th issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;This issue happens to be almost on Halloween night, so happy Halloween 🎃 to
those who celebrate.&lt;&#x2F;p&gt;
&lt;p&gt;Last week I did a lot of research and wrote a lot of content. I’m sure you’ll
like it. Here are some of the highlights.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;be-the-next-version-of-yourself&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;&quot;&gt;&lt;strong&gt;Be the Next Version of Yourself&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is what I’d call the &lt;strong&gt;roadmap of
all roadmaps&lt;&#x2F;strong&gt;; I strongly suggest you read this if you haven’t already done so.&lt;&#x2F;p&gt;
&lt;p&gt;In the article, I tried to summarize my personal perspective on a path you can
follow to become a great software craftsman. While that’s &lt;strong&gt;not&lt;&#x2F;strong&gt; the only path,
it’s a path that will indeed work and help you become the next version of
yourself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;resources-every-developer-must-read-no-exceptions&quot;&gt;Resources Every Developer Must Read—No Exceptions&lt;&#x2F;h2&gt;
&lt;p&gt;The title says it all 🙂. In &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;&lt;strong&gt;Resources Every Developer Must Read—No
Exceptions&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, I provide you with
an &lt;strong&gt;opinionated&lt;&#x2F;strong&gt; bedtime reading list that will give you perspective. After
completing the bedtime reading list, you’ll look at software development
differently.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;grab-your-chisel-and-start-pounding&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;&lt;strong&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is my take on why I believe
“&lt;em&gt;reinventing the wheel&lt;&#x2F;em&gt;” is crucial for us to grow.&lt;&#x2F;p&gt;
&lt;p&gt;Assuming there is no true answer and continuously asking questions is better
than sticking to a presumed solution. Instead, dream a better dream and reinvent
to make it real.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;don-t-make-the-user-think&quot;&gt;Don’t Make the User Think&lt;&#x2F;h2&gt;
&lt;p&gt;Knowing how and why the user thinks is essential. Knowing what makes the user
“not think” and act instinctively can differentiate between a “good enough”
product and a great product. Knowing how to design usable, consistent, coherent,
and delightful interfaces is an essential skill.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;&lt;strong&gt;Don’t Make the User Think&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
I outline the importance of knowing enough user experience design to be dangerous
at least, no matter which part of the stack you work on. Then I provide helpful
resources that can help you brush up on your UI&#x2F;UX skills.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-liked-them-there-s-more-coming-up&quot;&gt;You Liked Them? There’s More Coming Up&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for now, but there’s &lt;strong&gt;a lot&lt;&#x2F;strong&gt; in my drafts that are coming up in the
following weeks. Here’s a small subsection of my drafts waiting to be published.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;Screen-Shot-2021-10-29-at-4.08.33-PM.png&quot; alt=&quot;Drafts waiting to be published.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Drafts waiting to be published.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Next week, I’ll prepare for my &lt;strong&gt;GopherCon&lt;&#x2F;strong&gt; talk, so probably I won’t have many
published articles, but we’ll see 🙂.&lt;&#x2F;p&gt;
&lt;p&gt;On the topic of &lt;strong&gt;GopherCon&lt;&#x2F;strong&gt;…&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-ll-see-you-at-gophercon-turkey-virtually&quot;&gt;I’ll See You At GopherCon Turkey (virtually)&lt;&#x2F;h2&gt;
&lt;p&gt;Yep, I’ll be speaking at &lt;strong&gt;GopherCon&lt;&#x2F;strong&gt; Turkey. Here are the details:&lt;&#x2F;p&gt;
&lt;p&gt;The talk will be in Turkish, speaker deck, audience notes, and any other
material will be in English.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll upload them somewhere after the talk and share them with you. I believe the
video will be recorded, too; if so, I’ll share it as well.&lt;&#x2F;p&gt;
&lt;p&gt;It will be fun. It has been “a while” I’ve been away from the stage 🙂&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;A promotion is an exciting event. Typically, you assume more responsibilities,
grow up in your career, feel a heightened sense of achievement.&lt;&#x2F;p&gt;
&lt;p&gt;Though, getting promoted takes &lt;strong&gt;more&lt;&#x2F;strong&gt; than a job well done.&lt;&#x2F;p&gt;
&lt;p&gt;Even if you are a high-performer, exceeding expectations, you’ll often still
have to convince your superiors that you deserve to level up.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see what else you need to do to prepare yourself for the next step in your
career.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;it-s-all-about-inception&quot;&gt;It’s All About Inception&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Plant the idea first&lt;&#x2F;strong&gt;. Promotions don’t happen overnight. It can sometimes
take months, even years, to build a case around why you deserve one. So plan to
have an initial conversation with your manager, clearly stating your intentions.&lt;&#x2F;p&gt;
&lt;p&gt;There are several ways you can do this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Mention it during your annual performance review.&lt;&#x2F;li&gt;
&lt;li&gt;Or talk about it in your one-on-one sessions (&lt;em&gt;if you don’t do one-on-one’s
with your manager, then you might want to ask them to set it up
first—one-on-ones are powerful, and you have every right to request a weekly
or bi-weekly one-on-one from your manager&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Wait until you’ve accomplished a primary strategic goal, and then bring the
topic of promotion (&lt;em&gt;this one is my favorite because your achievement already
starts building a case for you&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Then you can initiate a discussion with something along these lines:&lt;&#x2F;p&gt;
&lt;p&gt;“I feel I’ve been meeting the requirements of my current role and the goals we’
ve set together. I’m happy to contribute and make a bigger impact. I’d love your
guidance about how I can assume more responsibility and get to the next level of
my career.”&lt;&#x2F;p&gt;
&lt;p&gt;☝️ That is saying “I deserve a promotion” without saying “I deserve a promotion”
🙂.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;do-your-homework&quot;&gt;Do Your Homework&lt;&#x2F;h3&gt;
&lt;p&gt;You cannot assume that your manager is aware of all of your achievements and
capabilities. More than not, they will need a reminder, &lt;strong&gt;both&lt;&#x2F;strong&gt; from you and
your advocates.&lt;&#x2F;p&gt;
&lt;p&gt;Yes, you’ll need to build a network around you to advocate for you and tell your
manager that you do deserve a promotion.&lt;&#x2F;p&gt;
&lt;p&gt;Also, &lt;strong&gt;document your achievements&lt;&#x2F;strong&gt;. Every. Single. One of them. I cannot
stress this enough: If you don’t demonstrate your achievement, you’ll forget
them. And how can you expect your manager to remember your achievements if even
you cannot remember them? So write down every single win you’ve had, no matter
how small it is. In addition, keep a &lt;strong&gt;brag folder&lt;&#x2F;strong&gt; on your desktop, and put
everything you can brag about into that folder.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;demonstrate-your-soft-skills&quot;&gt;Demonstrate Your Soft Skills&lt;&#x2F;h3&gt;
&lt;p&gt;Identify projects that demonstrate your soft skills. Soft skills are
non-technical skills that show your ability to work well with others and
coordinate them when needed. Soft skills are crucial to your career growth. So
the more you can demonstrate them, the better.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Show that you can take the initiative and go beyond your current role to
collaborate with others in a high-impact project.&lt;&#x2F;li&gt;
&lt;li&gt;Show that you connected with internal and external stakeholders to improve the
team’s outlook.&lt;&#x2F;li&gt;
&lt;li&gt;Demonstrate that you can resolve a dispute with the customer or between your
colleagues.&lt;&#x2F;li&gt;
&lt;li&gt;Show that you can communicate effectively with impact.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;present-a-persuasive-case&quot;&gt;Present a Persuasive Case&lt;&#x2F;h3&gt;
&lt;p&gt;Always keep the bigger picture in mind. Visualize to your boss how your
achivements have helped your team, your business unit, and even the company at
large to reach a collective goal.&lt;&#x2F;p&gt;
&lt;p&gt;However, keep in mind that there is a thin line between self-advocacy and
self-promotion. Let your colleagues promote your work. You just outline facts
and result that you have achieved. Stick to the fact you’ve documented that
reflect your track record, provide vivid examples of your performance and ask
your boss to review those cases from their lens and provide their point of view.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;it-s-hard-work-and-it-s-worth-it&quot;&gt;It’s Hard Work, and It’s Worth It&lt;&#x2F;h3&gt;
&lt;p&gt;Making a case for promotion is a tedious and demanding overtaking. So the
earlier you begin, the better.&lt;&#x2F;p&gt;
&lt;p&gt;Don’t forget: Confidence comes from preparation. Don’t let your case collect
dust until the last minute. Start &lt;strong&gt;right now&lt;&#x2F;strong&gt; so that you’ll be ready when the
time comes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.joshwcomeau.com&#x2F;animation&#x2F;3d-button&#x2F;&quot;&gt;Here’s a tutorial by &lt;strong&gt;Josh Comeau&lt;&#x2F;strong&gt; on building a magical
3D button&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vektra&#x2F;mockery&quot;&gt;&lt;strong&gt;Mockery&lt;&#x2F;strong&gt; is a mock code autogenerator for Go&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;plotly&#x2F;plotly.js&quot;&gt;&lt;strong&gt;Plotly&lt;&#x2F;strong&gt; is an awesome open-source JavaScript plotting and charting
library&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Every Saga Has a Beginning</title>
        <published>2024-05-18T00:00:00+00:00</published>
        <updated>2024-05-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/about/a-new-hope/"/>
        <id>https://zerotohero.dev/about/a-new-hope/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/about/a-new-hope/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;beginning.png&quot; alt=&quot;Pivot, change, and ignite.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Pivot, change, and ignite.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2024-05-18&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is—I believe—the &lt;strong&gt;fourth&lt;&#x2F;strong&gt; incarnation of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Since I wrote this article &lt;strong&gt;a lot&lt;&#x2F;strong&gt; have changed, which I can summarize as&lt;br &#x2F;&gt;
“life got in the way even further.”&lt;&#x2F;p&gt;
&lt;p&gt;The text below is the original article that I wrote on &lt;strong&gt;May the Fourth,
2021&lt;&#x2F;strong&gt;.Since then, a lot have changed in my personal and professional life. So,
keep in mind that the text below is a snapshot of the past, and things have
evolved since then.&lt;&#x2F;p&gt;
&lt;p&gt;Currently, &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; serves as my personal blog where I write about
what I think, when I think. You can find the latest articles on the
&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;&quot;&gt;home page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In addition, I have removed the subscription-based content strategy, and I’m
publishing everything on this platform for free.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;hello-world-hello-stars-hello-universe&quot;&gt;Hello World, Hello Stars, Hello Universe&lt;&#x2F;h2&gt;
&lt;p&gt;Hi there 👋,&lt;&#x2F;p&gt;
&lt;p&gt;As you can see, this is the new &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Which begs the question “&lt;em&gt;What is the ‘old’ ‘Zero to Hero’ then?&lt;&#x2F;em&gt;”.&lt;&#x2F;p&gt;
&lt;p&gt;Just 🐻 with me, I’ll get to it shortly. But, in a nutshell: Around &lt;strong&gt;2018&lt;&#x2F;strong&gt;,
I created a video course titled “&lt;em&gt;JavaScript from Zero to Hero&lt;&#x2F;em&gt;”. I gradually
added more content, videos, lesson notes… Yet, “&lt;em&gt;life&lt;&#x2F;em&gt;” got in the way and
I was never able to finalize the course.&lt;&#x2F;p&gt;
&lt;p&gt;So, as of May the fourth 2021, I decided to make a radical change and start
everything from scratch with a &lt;strong&gt;blank canvas&lt;&#x2F;strong&gt; and a different content
strategy.&lt;&#x2F;p&gt;
&lt;p&gt;Coincidentally, &lt;strong&gt;May the Fourth&lt;&#x2F;strong&gt; 2021, is the
&lt;a href=&quot;https:&#x2F;&#x2F;www.starwars.com&#x2F;star-wars-day&quot; title=&quot;International Star Wars Day&quot;&gt;International Star Wars Day&lt;&#x2F;a&gt;, and also my &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;The_Hitchhiker%27s_Guide_to_the_Galaxy&quot; title=&quot;The Hitchiker&amp;#39;s Guide to the Galaxy&quot;&gt;42&lt;&#x2F;a&gt;nd
birthday. There couldn’t have been any better day for this kind of a
transformation 🙂.&lt;&#x2F;p&gt;
&lt;p&gt;This very page is that &lt;strong&gt;blank canvas&lt;&#x2F;strong&gt; that you are looking at right now.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;so-what-s-coming-up&quot;&gt;So, What’s Coming Up&lt;&#x2F;h2&gt;
&lt;p&gt;Yes, his is ground zero. Yes, I’m starting everything from scratch.&lt;&#x2F;p&gt;
&lt;p&gt;This is a radical decision that deserves an explanation. In this article, I’ll
try to outline the &lt;strong&gt;why&lt;&#x2F;strong&gt;s and &lt;strong&gt;how&lt;&#x2F;strong&gt;s of this decision as best as I can.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-content&quot;&gt;The Content&lt;&#x2F;h2&gt;
&lt;p&gt;I will create one (&lt;em&gt;and only one&lt;&#x2F;em&gt;) kinds of content here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Free&lt;&#x2F;strong&gt;: Where anyone can read and learn from.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Why? Because, simply, and very plainly: I don’t need to make money from this.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I have a day job that pays well. Trying to make a living from this will only
add unnecessary pressure and stress to my life. It will also limit my creativity
and freedom. I will have to end up optimizing for impressions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;I DO NOT WANT THAT&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I want to create because I want to create. I don’t want to create to feed
an algorithm.&lt;&#x2F;p&gt;
&lt;p&gt;I don’t want &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; to turn into a &lt;strong&gt;content mill&lt;&#x2F;strong&gt;. I don’t want
it to be a burden. I want it to be a &lt;strong&gt;joy&lt;&#x2F;strong&gt;, so that I can create more
valuable content, freely, without any constraints.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-pivot&quot;&gt;The Pivot&lt;&#x2F;h2&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;05&amp;#x2F;saga-15.png)&quot; alt=&quot;Every saga has a beginning.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Every saga has a beginning.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;So what’s the plan?&lt;&#x2F;p&gt;
&lt;p&gt;I’m recreating the existing content with a totally different approach:&lt;&#x2F;p&gt;
&lt;p&gt;I’ll focus creating more &lt;strong&gt;textual content&lt;&#x2F;strong&gt;, diagrams and visualizations,
source code, embedded code playgrounds, and the like.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll augment the textual content with videos only when it’s needed (&lt;em&gt;like,
for example, showing a complicated AWS Console setup, which is easier to
&lt;strong&gt;see&lt;&#x2F;strong&gt; than to &lt;strong&gt;read&lt;&#x2F;strong&gt; and follow&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;There are several reasons for that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Creating video content is tenfold harder than creating a textual content:
Publishing a five-minute video lesson takes at least ten-to-fifteen hours of
time. Creating textual content is much faster.&lt;&#x2F;li&gt;
&lt;li&gt;Editing, updating, iterating textual content is &lt;strong&gt;much&lt;&#x2F;strong&gt; more convenient:
It’s as simple as deleting some text, and adding the new text, updating images
and other references. Per contra, for video, you’ll have to reshoot your
entire video, which will cost you at least another fifteen hours per video.&lt;&#x2F;li&gt;
&lt;li&gt;Textual content is searchable and indexable: With videos, you can achieve
something similar with bookmarks, and annotations, but still it won’t be even
close to the comfort you have with text.&lt;&#x2F;li&gt;
&lt;li&gt;You can copy&#x2F;paste, save, backup, mix and mash text. With video, it’s
&lt;strong&gt;a lot&lt;&#x2F;strong&gt; harder to do that.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;content-is-the-king&quot;&gt;Content is the King&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“Success isn’t always about greatness. It’s about consistency. Consistent hard
work leads to success. Greatness will come.”
– &lt;strong&gt;Dwayne (&lt;em&gt;the Rock&lt;&#x2F;em&gt;) Johnson&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It will take a while to think about the &lt;strong&gt;content strategy&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I have a plan… several plans in fact. And I’ll gradually get there.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;My first action item is to &lt;strong&gt;maintain&lt;&#x2F;strong&gt; a writing &lt;strong&gt;cadence&lt;&#x2F;strong&gt;: I don’t know if
this will be daily, every other day, weekly, or something different… but
I’ll reserve an &lt;strong&gt;uninterrupted, focused, content creation time&lt;&#x2F;strong&gt; on my
calendar.&lt;&#x2F;p&gt;
&lt;p&gt;Once I am comfortable with the cadence, then I’ll think about the content
strategy; not before.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;a-change-in-the-process&quot;&gt;A Change in the Process&lt;&#x2F;h2&gt;
&lt;p&gt;I began working on “&lt;em&gt;JavaScript: from Zero to Hero&lt;&#x2F;em&gt;” around &lt;strong&gt;2018&lt;&#x2F;strong&gt;. The course
was a video course about creating and maintaining your &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; stack in a
real-life production environment, paying special attention to things like
&lt;strong&gt;scalability&lt;&#x2F;strong&gt;, &lt;strong&gt;fault-tolerance&lt;&#x2F;strong&gt;, &lt;strong&gt;high availability&lt;&#x2F;strong&gt;,
&lt;strong&gt;disaster recovery&lt;&#x2F;strong&gt;, &lt;strong&gt;auditing&lt;&#x2F;strong&gt;, &lt;strong&gt;security&lt;&#x2F;strong&gt;… As far as I could see, no
one had come closer to creating a course like that. So there was &lt;strong&gt;a lot&lt;&#x2F;strong&gt; of
value in creating it.&lt;&#x2F;p&gt;
&lt;p&gt;So why the sudden shift, you may—rightfully—ask.&lt;&#x2F;p&gt;
&lt;p&gt;By the time of this writing, it is &lt;strong&gt;mid-2021&lt;&#x2F;strong&gt;. And I am… more-or-less
&lt;strong&gt;70%&lt;&#x2F;strong&gt; complete, give or take a few percents.&lt;&#x2F;p&gt;
&lt;p&gt;If I continue with this pace, my guesstimate is, the course will not be released
before late 2023. And I believe, this is turning out to be an uphill battle,
and I need to change my parameters to &lt;strong&gt;expedite&lt;&#x2F;strong&gt; the process.&lt;&#x2F;p&gt;
&lt;p&gt;Right now, I find myself lucky if I can publish one video lesson per week. To be
upfront and honest with you again, I don’t remember when was the last time I
published a new video… it has been at least several months.&lt;&#x2F;p&gt;
&lt;p&gt;I have (&lt;em&gt;as of this writing, again&lt;&#x2F;em&gt;) around &lt;strong&gt;fifty&lt;&#x2F;strong&gt; lectures to add before I
finalize the course. So do the math yourself 🙂.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;… Well, I did the math 🙂 If you consider the ever-changing pace of
technology, that rate is unsustainable for an online technical video course.
It is an uphill battle.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;is-creating-a-video-course-really-that-hard&quot;&gt;Is Creating a Video Course Really “that” Hard?&lt;&#x2F;h2&gt;
&lt;p&gt;But why is that? I mean, isn’t that too much time for a &lt;strong&gt;just&lt;&#x2F;strong&gt; a
“&lt;em&gt;JavaScript&lt;&#x2F;em&gt;” course?&lt;&#x2F;p&gt;
&lt;p&gt;Trust me, I thought about that too.&lt;&#x2F;p&gt;
&lt;p&gt;While thinking, I decided to put my thoughts into words.&lt;&#x2F;p&gt;
&lt;p&gt;There is a multitude of reasons, why the course took more than an average
“&lt;em&gt;let’s make an online recipe sharing web app with React and GraphQL&lt;&#x2F;em&gt;” course:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Firstly, my responsibilities grew as I gained more clout within the company.
This resulted in a more &lt;strong&gt;demanding job&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;In addition, as the kids got older, my responsibilities as a &lt;strong&gt;parent&lt;&#x2F;strong&gt;,
guardian, and a &lt;strong&gt;spouse&lt;&#x2F;strong&gt; grew—Not everyone knows this, but we are a
&lt;strong&gt;non-neurotypical&lt;&#x2F;strong&gt; family of four. And that multiplies the &lt;strong&gt;attention&lt;&#x2F;strong&gt;,
care, and &lt;strong&gt;communication&lt;&#x2F;strong&gt; needs orders of magnitude compared with an
equivalent “&lt;em&gt;typical&lt;&#x2F;em&gt;” (&lt;em&gt;if that’s a thing&lt;&#x2F;em&gt;) household.&lt;&#x2F;li&gt;
&lt;li&gt;Plus, the course was not “&lt;strong&gt;just&lt;&#x2F;strong&gt;” a &lt;em&gt;JavaScript&lt;&#x2F;em&gt; course: In the lessons, I
talked about topics varying from virtual subnet setups to lambda functions to
message queues… It was &lt;strong&gt;deep&lt;&#x2F;strong&gt; and &lt;strong&gt;broad&lt;&#x2F;strong&gt;. And I didn’t want to
sacrifice quality.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ah, as a cherry on top of all of this “’Rona” happened. We jumped into a
seemingly endless year of lockdown, homeschooling, remote work, isolation. I
call that “&lt;em&gt;sheltering at work&lt;&#x2F;em&gt;”, and it’s much more than that indeed. The
lockdown amplified the emotional roller-coasters that we, as a family, were
having.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;resistance-is-futile&quot;&gt;Resistance is Futile&lt;&#x2F;h2&gt;
&lt;p&gt;I am an engineer. Always was, always will be.&lt;&#x2F;p&gt;
&lt;p&gt;Doing &lt;strong&gt;constraint optimizations&lt;&#x2F;strong&gt; is what I’m good at—one way of approaching
the “&lt;em&gt;lack of time&lt;&#x2F;em&gt;” challenge was to set a deadline, set milestones, and
pressure myself to reach those milestones as best as you can.&lt;&#x2F;p&gt;
&lt;p&gt;Pushing myself further would have taken me to the limits of burning myself out.
I simply did not have the luxury to burn out, so I decided to find a different
solution.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-quick-flashback&quot;&gt;A Quick Flashback&lt;&#x2F;h2&gt;
&lt;p&gt;Let me add a few screenshots to show you how the course looked like.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;05&amp;#x2F;Screen-Shot-2021-05-04-at-2.21.04-PM-11.png&quot; alt=&quot;The landing page.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The landing page.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;05&amp;#x2F;Screen-Shot-2021-05-04-at-2.29.18-PM-11.png)&quot; alt=&quot;The learning management system.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The learning management system.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The application was truly slick, micro-services-based, learning management
system. I’m planning to &lt;strong&gt;rework&lt;&#x2F;strong&gt; on it too, and share my progress here with
y’all—although I’m sunsetting the current system, I’m proud of it. And I’m
proud of everyone who has been with me through this journey.&lt;&#x2F;p&gt;
&lt;p&gt;Like I said, the goal of the course was to be something other than yet another
“&lt;em&gt;Let’s build a restaurant rating and comparison app using React and GraphQL&lt;&#x2F;em&gt;”
course. I wanted it to be something that teaches you how a &lt;strong&gt;real-life&lt;&#x2F;strong&gt;
production application was &lt;strong&gt;built&lt;&#x2F;strong&gt;, &lt;strong&gt;evolved&lt;&#x2F;strong&gt;, and &lt;strong&gt;maintained&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I wanted to create a platform where the interested individuals will learn the
following the hard way:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Develop robust, lean, and error-free apps.&lt;&#x2F;li&gt;
&lt;li&gt;Create reusable, modular, and modern codebases that stand the test of time.&lt;&#x2F;li&gt;
&lt;li&gt;Build, scale, diagnose, and monitor a full-stack production application.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It was an ambitious goal, I know. Still, I was step by step getting there.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;then-life-got-in-the-way&quot;&gt;Then Life Got in the Way&lt;&#x2F;h2&gt;
&lt;p&gt;As I outlined before, while I’m working on &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt;, a lot happened in
the meantime. A lot have changed both in my &lt;strong&gt;personal&lt;&#x2F;strong&gt; and &lt;strong&gt;professional&lt;&#x2F;strong&gt;
life. The project almost moved to a halt. And I’ve realized a few things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The scope of the course was way too big to be reasonably completed in time.&lt;&#x2F;li&gt;
&lt;li&gt;Creating a video-heavy content, while having a full-time job and two kids at
school age required a lot of &lt;strong&gt;sacrifice&lt;&#x2F;strong&gt; from my personal time and my
&lt;strong&gt;sanity&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I also realized all of this burden was creating a &lt;strong&gt;very&lt;&#x2F;strong&gt; heavy toll on my
personal well-being and my relationship with my family.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Family&lt;&#x2F;strong&gt; is where I draw the line. Family comes first; &lt;strong&gt;always&lt;&#x2F;strong&gt;;
no exceptions.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;erase-and-rewind&quot;&gt;Erase and Rewind&lt;&#x2F;h2&gt;
&lt;p&gt;Eventually—and took &lt;strong&gt;many&lt;&#x2F;strong&gt; months of debilitation—I’ve decided to put a
“&lt;strong&gt;hard reset&lt;&#x2F;strong&gt;” on everything:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I’ve moved my Twitter to private.&lt;&#x2F;li&gt;
&lt;li&gt;I’ve jumped off all other social media.&lt;&#x2F;li&gt;
&lt;li&gt;The only medium that I’ve been sharing stuff for the last couple of months
is &lt;a href=&quot;https:&#x2F;&#x2F;linkedin.com&#x2F;in&#x2F;volkanozcelik&quot; title=&quot;Volkan Özçelik on LinkedIn&quot;&gt;LinkedIn&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And during that time frame, I’ve been thinking about what to do… how to
&lt;strong&gt;restart&lt;&#x2F;strong&gt;, how to &lt;strong&gt;reignite&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And this web app that you see is the end result of months and months of
thinking, introspection, and self-reflection.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;changing-perspective&quot;&gt;Changing Perspective&lt;&#x2F;h2&gt;
&lt;p&gt;After thinking about this &lt;strong&gt;a lot&lt;&#x2F;strong&gt; and weighing all my options: I’ve decided to
pivot my idea into a knowledge-sharing system that I can populate faster,
easier, without friction—almost naturally.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;05&amp;#x2F;CXYEte2UwAAdugK-10.jpg&quot; alt=&quot;Sometimes you need a shift in your perspective. 
    Sometimes you need a splash of water in your face. 
    Almost always, you need both.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Sometimes you need a shift in your perspective. 
    Sometimes you need a splash of water in your face. 
    Almost always, you need both.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;What will the new &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; be like?&lt;&#x2F;p&gt;
&lt;p&gt;Well, honestly, time will tell. I have a lot of ideas.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;videos-are-holding-you-back&quot;&gt;Videos are Holding You Back&lt;&#x2F;h2&gt;
&lt;p&gt;That said, creating visual content for the last few years, I realized that not
only creating video content is holding me back, but also
&lt;strong&gt;videos are holding you back&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Think about it: The average video course is spoken at 150 words per minute,
while you can read at-the-very-least 250 words per minute.&lt;&#x2F;p&gt;
&lt;p&gt;I know this is a blanket statement, and people with certain conditions have
hard time reading things. And to certain people consuming video content at
2x speed is a much better to learn things than following text. But, in general,
reading something takes much less time than watching an equivalent content.&lt;&#x2F;p&gt;
&lt;p&gt;In addition, you can read a lot faster if you have mastered scanning and
skimming techniques. If you have read that thousand page brick-sized book
before your final exam, you know what I mean 😄—try that with watching
video lessons.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;With textual content, it’s much easier to find your own pace, adjust your
speed, skip blocks of text, scan and skim the text to drill down further
later—that’s the beauty of text.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Moreover, you can &lt;strong&gt;search&lt;&#x2F;strong&gt; textual content easily. Even when you have
properly-set-up bookmarks and annotations, and transcripts, searching inside
a video is &lt;strong&gt;much&lt;&#x2F;strong&gt; harder.&lt;&#x2F;p&gt;
&lt;p&gt;And this one is for me: Creating textual content is way faster than creating
audiovisual content. I can create more valuable content faster this way.&lt;&#x2F;p&gt;
&lt;p&gt;That said, I also do believe there needs to be a &lt;strong&gt;hybrid&lt;&#x2F;strong&gt; approach: The
textual content needs to be &lt;strong&gt;augmented&lt;&#x2F;strong&gt; with clarifying videos to show
&lt;strong&gt;how&lt;&#x2F;strong&gt; things work when they work the way they work.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Furthermore, inside a text-oriented web app, you can embed live coding
&lt;strong&gt;playgrounds&lt;&#x2F;strong&gt;, other &lt;strong&gt;interactive tools&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can create an app for the users of the system to take their own notes
and annotate the content to their liking. Like you see a lot can be done,
and text is the starting point. It’s the &lt;strong&gt;origin&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I’m also jotting down some of those ideas in my backlog, which will end up as
useful &lt;strong&gt;widgets&lt;&#x2F;strong&gt; that add value to this new platform that you are reading
and using right now.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nothing-is-lost-everything-transforms&quot;&gt;Nothing is Lost: Everything Transforms&lt;&#x2F;h2&gt;
&lt;p&gt;Tangentially: Everything in life is based on three main forces:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rotation&lt;&#x2F;li&gt;
&lt;li&gt;Oscillation&lt;&#x2F;li&gt;
&lt;li&gt;And Transformation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; is no exception to that.&lt;&#x2F;p&gt;
&lt;p&gt;This post marks &lt;strong&gt;the beginning&lt;&#x2F;strong&gt; of a &lt;strong&gt;transformation&lt;&#x2F;strong&gt; phase.&lt;&#x2F;p&gt;
&lt;p&gt;The older content is &lt;strong&gt;not&lt;&#x2F;strong&gt; going anywhere. I have triple backups of everything.
They will find their place here in some way, shape or form.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;onwards-to-a-new-ride&quot;&gt;Onwards to a New Ride&lt;&#x2F;h2&gt;
&lt;p&gt;This has been a wonderful ride so far. I cannot thank enough to everyone who
have been with me. You mean &lt;strong&gt;a lot&lt;&#x2F;strong&gt; to me and words cannot express how
grateful I am to have y’all by my side.&lt;&#x2F;p&gt;
&lt;p&gt;This is a new beginning.&lt;&#x2F;p&gt;
&lt;p&gt;Stay tuned: More will come.&lt;&#x2F;p&gt;
&lt;p&gt;May the source be with you 🦄,&lt;&#x2F;p&gt;
&lt;p&gt;Volkan.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;explore-more&quot;&gt;Explore More&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Every Saga Has a Beginning&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan&#x2F;&quot;&gt;Volkan Özçelik&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan-uses&#x2F;&quot;&gt;Volkan Uses&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;contact&#x2F;&quot;&gt;Contact&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;privacy&#x2F;&quot;&gt;Privacy Policy&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Contact 🤙</title>
        <published>2024-05-18T00:00:00+00:00</published>
        <updated>2024-05-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/about/contact/"/>
        <id>https://zerotohero.dev/about/contact/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/about/contact/">&lt;p&gt;{{img(
src=“&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;0_0.webp)
alt=“Have your say.”
)}}&lt;&#x2F;p&gt;
&lt;p&gt;If you want to contact me, &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;contact&#x2F;&quot;&gt;this contact page&lt;&#x2F;a&gt;
lists social platforms I’m actively contributing to.
You can also email me at &lt;a href=&quot;mailto:me@volkan.io&quot;&gt;&lt;strong&gt;me@volkan.io&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;;
however, don’t expect an immediate reply (&lt;em&gt;or a reply at all&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Thanks for stopping by.&lt;&#x2F;p&gt;
&lt;p&gt;May the source be with you 🦄,&lt;&#x2F;p&gt;
&lt;p&gt;Volkan.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;explore-more&quot;&gt;Explore More&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;a-new-hope&#x2F;&quot;&gt;Every Saga Has a Beginning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan&#x2F;&quot;&gt;Volkan Özçelik&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan-uses&#x2F;&quot;&gt;Volkan Uses&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Contact&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;privacy&#x2F;&quot;&gt;Privacy Policy&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Privacy</title>
        <published>2024-05-18T00:00:00+00:00</published>
        <updated>2024-05-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/about/privacy/"/>
        <id>https://zerotohero.dev/about/privacy/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/about/privacy/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2024&amp;#x2F;privacy.png&quot; alt=&quot;Privacy Policy&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Privacy Policy&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;This is the shortest privacy policy you’ll possibly read.&lt;br &#x2F;&gt;
I hate writing boring copyright stuff, so please don’t make me write more.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;we-don-t-track-no-cookies&quot;&gt;We Don’t Track No Cookies&lt;&#x2F;h2&gt;
&lt;p&gt;Wondering how “&lt;strong&gt;&lt;em&gt;Zero to Hero&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” fares when it comes to &lt;strong&gt;privacy&lt;&#x2F;strong&gt; and
&lt;strong&gt;GDPR&lt;&#x2F;strong&gt; rules and regulations?—Good
news: &lt;strong&gt;I do not use any tracking cookies&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;your-personal-data-is-safe&quot;&gt;Your Personal Data is Safe&lt;&#x2F;h2&gt;
&lt;p&gt;We don’t know you; we don’t even know whether you visited this site.
There are no cookies, no tracking, no analytics, no nothing.&lt;&#x2F;p&gt;
&lt;p&gt;Since we don’t collect any personal data, we don’t have any data to share,
sell, or lose. You can rest assured that your privacy is safe with us.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;may-the-source-be-with-you&quot;&gt;May the Source be With You&lt;&#x2F;h2&gt;
&lt;p&gt;Have an ad-free, safe, and wonderful &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; learning experience 🎉.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;explore-more&quot;&gt;Explore More&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;a-new-hope&#x2F;&quot;&gt;Every Saga Has a Beginning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan&#x2F;&quot;&gt;Volkan Özçelik&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan-uses&#x2F;&quot;&gt;Volkan Uses&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;contact&#x2F;&quot;&gt;Contact&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Privacy Policy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Volkan Özçelik</title>
        <published>2024-05-18T00:00:00+00:00</published>
        <updated>2024-05-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/about/volkan/"/>
        <id>https://zerotohero.dev/about/volkan/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/about/volkan/">&lt;p&gt;{{img(
src=“&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;deerz.webp”
alt=“Don’t miss the deer, go kiss the deer 🦌💋.
)}}&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hey-there-wave&quot;&gt;Hey There 👋&lt;&#x2F;h2&gt;
&lt;p&gt;Hello, I’m &lt;strong&gt;Volkan&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I’m a &lt;strong&gt;developer&lt;&#x2F;strong&gt;, speaker, &lt;strong&gt;streamer&lt;&#x2F;strong&gt;, &lt;strong&gt;creator&lt;&#x2F;strong&gt;, connector,
and writer.&lt;&#x2F;p&gt;
&lt;p&gt;I like tinkering with systems, and I’m not afraid to &lt;strong&gt;break stuff&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;follow-me&quot;&gt;Follow Me&lt;&#x2F;h2&gt;
&lt;p&gt;
&lt;svg
    style=&quot;vertical-align: center;position:relative;top:10px;padding-right:5px;&quot;
    xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 32 32&quot; id=&quot;Protection-Shield-Bolt--Streamline-Ultimate&quot; height=&quot;32&quot; width=&quot;32&quot;&gt;&lt;desc&gt;Protection Shield Bolt Streamline Icon: https:&#x2F;&#x2F;streamlinehq.com&lt;&#x2F;desc&gt;&lt;g clip-path=&quot;url(#clip0_29_16957)&quot;&gt;&lt;path fill=&quot;#e3e3e3&quot; d=&quot;M2 5.03332V15.216000000000001c0.03917333333333333 3.3646666666666665 1.11144 6.636 3.0715733333333333 9.370933333333333 1.9601466666666667 2.734933333333333 4.713466666666666 4.801466666666666 7.8870933333333335 5.919733333333333l1.4946666666666666 0.5519999999999999c0.9985333333333333 0.3666666666666667 2.0947999999999998 0.3666666666666667 3.093333333333333 0l1.4946666666666666 -0.5519999999999999c3.1735999999999995 -1.1182666666666665 5.9269333333333325 -3.1847999999999996 7.887066666666667 -5.919733333333333 1.9601333333333333 -2.734933333333333 3.0324 -6.006266666666666 3.0716 -9.370933333333333V5.03332c-0.0013333333333333333 -0.40005333333333326 -0.12 -0.7909333333333333 -0.34146666666666664 -1.1241599999999998 -0.22133333333333333 -0.33324 -0.5356 -0.5941866666666666 -0.9038666666666666 -0.7505066666666667C24.715466666666664 1.4735333333333334 20.376399999999997 0.6257573333333333 16 0.6666546666666666 11.623626666666667 0.6257573333333333 7.284479999999999 1.4735333333333334 3.2453333333333334 3.1586533333333335c-0.3682533333333333 0.15632 -0.6825466666666666 0.4172666666666667 -0.90392 0.7505066666666667 -0.22136 0.33322666666666667 -0.34008 0.7241066666666667 -0.34141333333333335 1.1241599999999998Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#ffffff&quot; d=&quot;M16 0.6666613333333333C11.62356 0.62506 7.28428 1.4728666666666665 3.2453333333333334 3.158666666666667c-0.3682533333333333 0.15630666666666665 -0.6825466666666666 0.4172533333333333 -0.90392 0.7504933333333332 -0.22136 0.33324 -0.34008 0.7241066666666667 -0.34141333333333335 1.1241733333333332v10.182666666666666c0.03917333333333333 3.3646666666666665 1.11144 6.636 3.0715733333333333 9.370933333333333 1.9601466666666667 2.734933333333333 4.713466666666666 4.801466666666666 7.8870933333333335 5.919733333333333l1.4946666666666666 0.5519999999999999c0.4954666666666666 0.18173333333333333 1.0189333333333332 0.2746666666666666 1.5466666666666664 0.2746666666666666V0.6666613333333333Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#ffef5e&quot; stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M16.430666666666667 6.3373333333333335c0.05826666666666667 -0.10247999999999999 0.14253333333333332 -0.18769333333333332 0.24439999999999998 -0.24694666666666668 0.102 -0.05926666666666667 0.21773333333333333 -0.09045333333333333 0.33559999999999995 -0.09038666666666667h3.3426666666666667c0.11826666666666666 -0.00006666666666666667 0.2344 0.03130666666666666 0.33653333333333335 0.09090666666666666 0.10213333333333333 0.05961333333333333 0.18653333333333333 0.14530666666666664 0.24453333333333332 0.24830666666666668 0.05813333333333333 0.10298666666666667 0.08773333333333333 0.21957333333333331 0.08586666666666666 0.3378 -0.0017333333333333333 0.11822666666666666 -0.03506666666666666 0.23384 -0.09626666666666667 0.33498666666666665L17.503999999999998 12.666666666666666h3.5066666666666664c0.13 -0.00006666666666666667 0.2573333333333333 0.037906666666666665 0.366 0.10925333333333333 0.10880000000000001 0.07133333333333333 0.19426666666666664 0.17293333333333333 0.246 0.2922666666666667 0.05173333333333333 0.11932 0.06746666666666666 0.2511733333333333 0.0452 0.37927999999999995 -0.022266666666666664 0.12813333333333332 -0.08159999999999999 0.24693333333333334 -0.17053333333333334 0.34186666666666665l-8.338666666666665 8.894666666666666c-0.053040000000000004 0.056799999999999996 -0.12422666666666667 0.0932 -0.20126666666666665 0.10306666666666665 -0.07705333333333333 0.009866666666666666 -0.15511999999999998 -0.007466666666666667 -0.22073333333333334 -0.04906666666666666 -0.06561333333333333 -0.0416 -0.11463999999999999 -0.1048 -0.1386133333333333 -0.17866666666666667 -0.023986666666666663 -0.07386666666666666 -0.021413333333333333 -0.15386666666666665 0.007279999999999999 -0.226l2.7573333333333334 -7H12.477333333333334c-0.11666666666666665 0 -0.23130666666666666 -0.030533333333333332 -0.33246666666666663 -0.08866666666666667 -0.10116 -0.057999999999999996 -0.18529333333333334 -0.14173333333333332 -0.244 -0.24253333333333332 -0.058706666666666664 -0.1008 -0.08993333333333332 -0.21519999999999997 -0.09055999999999999 -0.33186666666666664 -0.0006133333333333334 -0.11666666666666665 0.029386666666666665 -0.23146666666666665 0.08702666666666665 -0.3329333333333333l4.533333333333333 -8Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M2 5.03332V15.216000000000001c0.03917333333333333 3.3646666666666665 1.11144 6.636 3.0715733333333333 9.370933333333333 1.9601466666666667 2.734933333333333 4.713466666666666 4.801466666666666 7.8870933333333335 5.919733333333333l1.4946666666666666 0.5519999999999999c0.9985333333333333 0.3666666666666667 2.0947999999999998 0.3666666666666667 3.093333333333333 0l1.4946666666666666 -0.5519999999999999c3.1735999999999995 -1.1182666666666665 5.9269333333333325 -3.1847999999999996 7.887066666666667 -5.919733333333333 1.9601333333333333 -2.734933333333333 3.0324 -6.006266666666666 3.0716 -9.370933333333333V5.03332c-0.0013333333333333333 -0.40005333333333326 -0.12 -0.7909333333333333 -0.34146666666666664 -1.1241599999999998 -0.22133333333333333 -0.33324 -0.5356 -0.5941866666666666 -0.9038666666666666 -0.7505066666666667C24.715466666666664 1.4735333333333334 20.376399999999997 0.6257573333333333 16 0.6666546666666666 11.623626666666667 0.6257573333333333 7.284479999999999 1.4735333333333334 3.2453333333333334 3.1586533333333335c-0.3682533333333333 0.15632 -0.6825466666666666 0.4172666666666667 -0.90392 0.7505066666666667 -0.22136 0.33322666666666667 -0.34008 0.7241066666666667 -0.34141333333333335 1.1241599999999998v0Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;g&gt;&lt;defs&gt;&lt;clipPath id=&quot;clip0_29_16957&quot;&gt;&lt;path fill=&quot;#ffffff&quot; d=&quot;M0 0h32v32H0z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;clipPath&gt;&lt;&#x2F;defs&gt;&lt;&#x2F;svg&gt; &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;&quot;&gt;I help people &lt;em&gt;level up&lt;&#x2F;em&gt; at &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;svg
    style=&quot;vertical-align: center;position:relative;top:10px;padding-right:5px;&quot;
    xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 32 32&quot; id=&quot;Video-Game-Logo-Twitch--Streamline-Ultimate&quot; height=&quot;32&quot; width=&quot;32&quot;&gt;&lt;desc&gt;Video Game Logo Twitch Streamline Icon: https:&#x2F;&#x2F;streamlinehq.com&lt;&#x2F;desc&gt;&lt;path fill=&quot;#eabfff&quot; d=&quot;M0.6666666666666666 7.7026666666666666a1.3333333333333333 1.3333333333333333 0 0 1 0.19066666666666665 -0.6866666666666666L4.4719999999999995 0.9906666666666666A0.6666666666666666 0.6666666666666666 0 0 1 5.044 0.6666666666666666H30.666666666666664a0.6666666666666666 0.6666666666666666 0 0 1 0.6666666666666666 0.6666666666666666v16.781333333333333a1.3333333333333333 1.3333333333333333 0 0 1 -0.3906666666666666 0.9426666666666665l-5.218666666666667 5.218666666666667a1.3333333333333333 1.3333333333333333 0 0 1 -0.9426666666666665 0.3906666666666666h-9.545333333333332a1.3346666666666664 1.3346666666666664 0 0 0 -0.9626666666666666 0.4106666666666666l-5.792 6.050666666666666A0.6666666666666666 0.6666666666666666 0 0 1 7.333333333333333 30.666666666666664v-5.333333333333333a0.6666666666666666 0.6666666666666666 0 0 0 -0.6666666666666666 -0.6666666666666666H1.3333333333333333a0.6666666666666666 0.6666666666666666 0 0 1 -0.6666666666666666 -0.6666666666666666V7.7026666666666666Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#d480ff&quot; d=&quot;M5.333333333333333 18.666666666666664a0.6666666666666666 0.6666666666666666 0 0 1 -0.6666666666666666 -0.6666666666666666V0.7839999999999999a0.6666666666666666 0.6666666666666666 0 0 0 -0.19466666666666665 0.20666666666666667L0.8573333333333333 7.017333333333333a1.3213333333333332 1.3213333333333332 0 0 0 -0.19066666666666665 0.6853333333333333V24a0.6666666666666666 0.6666666666666666 0 0 0 0.6666666666666666 0.6666666666666666h5.333333333333333a0.6666666666666666 0.6666666666666666 0 0 1 0.6666666666666666 0.6666666666666666v5.333333333333333a0.6666666666666666 0.6666666666666666 0 0 0 1.148 0.46133333333333326l5.792 -6.050666666666666a1.3306666666666667 1.3306666666666667 0 0 1 0.9626666666666666 -0.4106666666666666h9.545333333333332a1.3333333333333333 1.3333333333333333 0 0 0 0.9426666666666665 -0.3906666666666666l5.218666666666667 -5.218666666666667a1.3266666666666667 1.3266666666666667 0 0 0 0.26666666666666666 -0.3906666666666666H5.333333333333333Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M0.6666666666666666 7.7026666666666666a1.3333333333333333 1.3333333333333333 0 0 1 0.19066666666666665 -0.6866666666666666L4.4719999999999995 0.9906666666666666A0.6666666666666666 0.6666666666666666 0 0 1 5.044 0.6666666666666666H30.666666666666664a0.6666666666666666 0.6666666666666666 0 0 1 0.6666666666666666 0.6666666666666666v16.781333333333333a1.3333333333333333 1.3333333333333333 0 0 1 -0.3906666666666666 0.9426666666666665l-5.218666666666667 5.218666666666667a1.3333333333333333 1.3333333333333333 0 0 1 -0.9426666666666665 0.3906666666666666h-9.545333333333332a1.3346666666666664 1.3346666666666664 0 0 0 -0.9626666666666666 0.4106666666666666l-5.792 6.050666666666666A0.6666666666666666 0.6666666666666666 0 0 1 7.333333333333333 30.666666666666664v-5.333333333333333a0.6666666666666666 0.6666666666666666 0 0 0 -0.6666666666666666 -0.6666666666666666H1.3333333333333333a0.6666666666666666 0.6666666666666666 0 0 1 -0.6666666666666666 -0.6666666666666666V7.7026666666666666Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#ffffff&quot; d=&quot;M8 3.333333333333333a0.6666666666666666 0.6666666666666666 0 0 0 -0.6666666666666666 0.6666666666666666v16a0.6666666666666666 0.6666666666666666 0 0 0 0.6666666666666666 0.6666666666666666h2V24l3.333333333333333 -3.333333333333333h10.781333333333333a1.3333333333333333 1.3333333333333333 0 0 0 0.9426666666666665 -0.3906666666666666l3.2186666666666666 -3.2186666666666666a1.3333333333333333 1.3333333333333333 0 0 0 0.3906666666666666 -0.9426666666666665V4a0.6666666666666666 0.6666666666666666 0 0 0 -0.6666666666666666 -0.6666666666666666H8Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#e3e3e3&quot; d=&quot;M28 3.333333333333333H8a0.6666666666666666 0.6666666666666666 0 0 0 -0.6666666666666666 0.6666666666666666v3.333333333333333A0.6666666666666666 0.6666666666666666 0 0 1 8 6.666666666666666h20a0.6666666666666666 0.6666666666666666 0 0 1 0.6666666666666666 0.6666666666666666V4a0.6666666666666666 0.6666666666666666 0 0 0 -0.6666666666666666 -0.6666666666666666Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M8 3.333333333333333a0.6666666666666666 0.6666666666666666 0 0 0 -0.6666666666666666 0.6666666666666666v16a0.6666666666666666 0.6666666666666666 0 0 0 0.6666666666666666 0.6666666666666666h2V24l3.333333333333333 -3.333333333333333h10.781333333333333a1.3333333333333333 1.3333333333333333 0 0 0 0.9426666666666665 -0.3906666666666666l3.2186666666666666 -3.2186666666666666a1.3333333333333333 1.3333333333333333 0 0 0 0.3906666666666666 -0.9426666666666665V4a0.6666666666666666 0.6666666666666666 0 0 0 -0.6666666666666666 -0.6666666666666666H8Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M15.333333333333332 8.666666666666666v5.333333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M22 8.666666666666666v5.333333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt; &lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;I live-stream code on &lt;strong&gt;Twitch&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;svg
    style=&quot;vertical-align: center;position:relative;top:10px;padding-right:5px;&quot;
    xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 32 32&quot; id=&quot;Roe--Streamline-Ultimate&quot; height=&quot;32&quot; width=&quot;32&quot;&gt;&lt;desc&gt;Roe Streamline Icon: https:&#x2F;&#x2F;streamlinehq.com&lt;&#x2F;desc&gt;&lt;path fill=&quot;#ffbc44&quot; d=&quot;M22.613333333333333 9.186666666666666c2.1533333333333333 -0.42266666666666663 7.3053333333333335 -2.0279999999999996 7.706666666666667 -7.798666666666667a0.6666666666666666 0.6666666666666666 0 0 0 -0.6973333333333334 -0.712 9.966666666666665 9.966666666666665 0 0 0 -9.18 5.7333333333333325&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#ffbc44&quot; d=&quot;M11.410666666666666 9.186666666666666c-2.1546666666666665 -0.42266666666666663 -7.306666666666667 -2.0279999999999996 -7.707999999999999 -7.798666666666667A0.6666666666666666 0.6666666666666666 0 0 1 4.3999999999999995 0.6759999999999999a9.973333333333333 9.973333333333333 0 0 1 9.181333333333333 5.7333333333333325&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#ffdda1&quot; d=&quot;M29.622666666666664 3.752a0.6559999999999999 0.6559999999999999 0 0 1 0.18266666666666667 0.030666666666666665 8.469333333333333 8.469333333333333 0 0 0 0.5146666666666666 -2.4 0.6666666666666666 0.6666666666666666 0 0 0 -0.6973333333333334 -0.712 9.966666666666665 9.966666666666665 0 0 0 -9.18 5.7333333333333325l1.0346666666666666 1.3239999999999998a10.333333333333332 10.333333333333332 0 0 1 8.145333333333333 -3.976Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#ffdda1&quot; d=&quot;M4.3999999999999995 3.752A10.333333333333332 10.333333333333332 0 0 1 12.545333333333334 7.7333333333333325l1.036 -1.3239999999999998A9.972 9.972 0 0 0 4.3999999999999995 0.6759999999999999a0.6666666666666666 0.6666666666666666 0 0 0 -0.6973333333333334 0.712c0.05333333333333333 0.8213333333333332 0.22666666666666668 1.6293333333333333 0.5146666666666666 2.4a0.6559999999999999 0.6559999999999999 0 0 1 0.18266666666666667 -0.036Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M22.613333333333333 9.186666666666666c2.1533333333333333 -0.42266666666666663 7.3053333333333335 -2.0279999999999996 7.706666666666667 -7.798666666666667a0.6666666666666666 0.6666666666666666 0 0 0 -0.6973333333333334 -0.712 9.966666666666665 9.966666666666665 0 0 0 -9.18 5.7333333333333325&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M11.410666666666666 9.186666666666666c-2.1546666666666665 -0.42266666666666663 -7.306666666666667 -2.0279999999999996 -7.707999999999999 -7.798666666666667A0.6666666666666666 0.6666666666666666 0 0 1 4.3999999999999995 0.6759999999999999a9.973333333333333 9.973333333333333 0 0 1 9.181333333333333 5.7333333333333325&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#ffbc44&quot; d=&quot;M18.165333333333333 21.325333333333333h-0.023999999999999997a1.2893333333333332 1.2893333333333332 0 0 1 -2.2586666666666666 0h-0.023999999999999997l-3.377333333333333 -5.109333333333333c-0.09333333333333334 -0.1413333333333333 -0.16266666666666665 -0.296 -0.24666666666666665 -0.44h-0.026666666666666665l-0.5333333333333333 4.218666666666667c-0.748 2.989333333333333 -1.4373333333333334 7.333333333333333 -6.666666666666666 7.333333333333333h-3.333333333333333v2.6666666666666665a1.3333333333333333 1.3333333333333333 0 0 0 1.3333333333333333 1.3333333333333333h20l-1.8186666666666667 -14.58 -3.0239999999999996 4.577333333333333Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#ffbc44&quot; d=&quot;M17.012 5.325333333333333a6 6 0 0 0 -6 6 8.879999999999999 8.879999999999999 0 0 0 1.4666666666666668 4.890666666666666l3.377333333333333 5.109333333333333h0.023999999999999997a1.2893333333333332 1.2893333333333332 0 0 0 2.2586666666666666 0h0.023999999999999997l3.376 -5.109333333333333a8.873333333333333 8.873333333333333 0 0 0 1.4666666666666668 -4.890666666666666 6 6 0 0 0 -5.993333333333333 -6Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#ffdda1&quot; d=&quot;M17.012 9.185333333333332a5.98 5.98 0 0 1 5.717333333333333 4.2813333333333325c0.18133333333333335 -0.6973333333333334 0.27599999999999997 -1.4133333333333333 0.2826666666666666 -2.1333333333333333a6 6 0 1 0 -12 0c0.006666666666666666 0.72 0.10133333333333333 1.436 0.2813333333333333 2.1333333333333333a5.982666666666667 5.982666666666667 0 0 1 5.718666666666666 -4.2813333333333325Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M17.012 5.325333333333333a6 6 0 0 0 -6 6 8.879999999999999 8.879999999999999 0 0 0 1.4666666666666668 4.890666666666666l3.377333333333333 5.109333333333333h0.023999999999999997a1.2893333333333332 1.2893333333333332 0 0 0 2.2586666666666666 0h0.023999999999999997l3.376 -5.109333333333333a8.873333333333333 8.873333333333333 0 0 0 1.4666666666666668 -4.890666666666666 6 6 0 0 0 -5.993333333333333 -6v0Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M11.678666666666667 19.991999999999997c-0.748 2.989333333333333 -1.4373333333333334 7.333333333333333 -6.666666666666666 7.333333333333333h-3.333333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;m23.012 31.325333333333333 -1.3333333333333333 -10.666666666666666&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M13.678666666666667 10.991999999999999a0.3333333333333333 0.3333333333333333 0 0 1 0.3333333333333333 0.3333333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M13.345333333333333 11.325333333333333a0.3333333333333333 0.3333333333333333 0 0 1 0.3333333333333333 -0.3333333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M13.678666666666667 11.658666666666665a0.3333333333333333 0.3333333333333333 0 0 1 -0.3333333333333333 -0.3333333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M14.012 11.325333333333333a0.3333333333333333 0.3333333333333333 0 0 1 -0.3333333333333333 0.3333333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M20.345333333333333 10.991999999999999a0.3333333333333333 0.3333333333333333 0 0 0 -0.3333333333333333 0.3333333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M20.678666666666665 11.325333333333333a0.3333333333333333 0.3333333333333333 0 0 0 -0.3333333333333333 -0.3333333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M20.345333333333333 11.658666666666665a0.3333333333333333 0.3333333333333333 0 0 0 0.3333333333333333 -0.3333333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M20.012 11.325333333333333a0.3333333333333333 0.3333333333333333 0 0 0 0.3333333333333333 0.3333333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#808080&quot; stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M17.012 21.991999999999997a1.3333333333333333 1.3333333333333333 0 1 0 0 -2.6666666666666665 1.3333333333333333 1.3333333333333333 0 0 0 0 2.6666666666666665Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;
 &lt;a href=&quot;https:&#x2F;&#x2F;vadidekigeyik.com&#x2F;&quot;&gt;I podcast at &lt;strong&gt;the Deer in the Valley&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;svg
    style=&quot;vertical-align: center;position:relative;top:10px;padding-right:5px;&quot;
    xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 32 32&quot; id=&quot;Video-Game-Mario-Turtle--Streamline-Ultimate&quot; height=&quot;32&quot; width=&quot;32&quot;&gt;&lt;desc&gt;Video Game Mario Turtle Streamline Icon: https:&#x2F;&#x2F;streamlinehq.com&lt;&#x2F;desc&gt;&lt;path fill=&quot;#ffbc44&quot; d=&quot;M31.333333333333332 6.666666666666666c0 -1.23768 -0.49160000000000004 -2.4246666666666665 -1.3667999999999998 -3.2998266666666667C29.09133333333333 2.4916666666666663 27.9044 2 26.666666666666664 2c-1.2377333333333334 0 -2.4246666666666665 0.4916666666666667 -3.2998666666666665 1.36684C22.4916 4.242 22 5.428986666666667 22 6.666666666666666v18h3c0.9723999999999999 0 1.9050666666666667 -0.38626666666666665 2.5926666666666662 -1.0739999999999998 0.6877333333333333 -0.6876 1.0739999999999998 -1.6202666666666667 1.0739999999999998 -2.5926666666666662V10.884c0.798 -0.37854666666666664 1.4722666666666666 -0.9758 1.9442666666666666 -1.7223333333333333 0.47213333333333335 -0.7465466666666667 0.7225333333333334 -1.6117333333333335 0.7223999999999999 -2.495Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#ffdda1&quot; d=&quot;M26.666666666666664 6c0.8833333333333333 -0.00018666666666666663 1.7483999999999997 0.2503066666666667 2.494933333333333 0.7223599999999999 0.7466666666666667 0.4720533333333333 1.3438666666666665 1.1462666666666665 1.7224 1.9443066666666664 0.2996 -0.63236 0.4530666666666666 -1.3239999999999998 0.44919999999999993 -2.02372 -0.0037333333333333333 -0.6997333333333333 -0.16493333333333332 -1.3896266666666666 -0.4714666666666667 -2.01864 -0.3065333333333333 -0.6290133333333333 -0.7506666666666666 -1.1810533333333333 -1.2993333333333332 -1.61524 -0.5488 -0.4341866666666666 -1.1881333333333333 -0.7394133333333334 -1.8708 -0.8930933333333333 -0.6826666666666666 -0.15367999999999998 -1.3910666666666665 -0.15188 -2.0729333333333333 0.005266666666666667 -0.6818666666666666 0.15716 -1.3197333333333332 0.46562666666666663 -1.8662666666666665 0.9026000000000001 -0.5465333333333333 0.4369733333333333 -0.9877333333333334 0.9912533333333333 -1.2910666666666666 1.6218133333333333 -0.30333333333333334 0.6305733333333333 -0.4610666666666666 1.3212799999999998 -0.46133333333333326 2.0210133333333333v4c0 -1.23768 0.49160000000000004 -2.424653333333333 1.3667999999999998 -3.2998266666666667C24.241999999999997 6.491666666666667 25.428933333333333 6 26.666666666666664 6Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#78eb7b&quot; d=&quot;M19.333333333333332 12.666666666666666c-0.8614666666666666 -1.23468 -2.0084 -2.2430933333333334 -3.3432 -2.939493333333333C14.655333333333333 9.030773333333332 13.172199999999998 8.66696 11.666666666666666 8.666666666666666c-2.56376 0 -5.02252 1.0184533333333332 -6.83536 2.8313066666666664C3.0184533333333334 13.310813333333332 2 15.769599999999999 2 18.333333333333332v5h14.333333333333332c0.7956 -0.00039999999999999996 1.5584 -0.31653333333333333 2.1209333333333333 -0.8790666666666667 0.5625333333333333 -0.5625333333333333 0.8786666666666667 -1.3253333333333333 0.8790666666666667 -2.1209333333333333V12.666666666666666Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#c9f7ca&quot; d=&quot;M11.666666666666666 8.666666666666666c-2.56376 0 -5.02252 1.0184533333333332 -6.83536 2.8313066666666664C3.0184533333333334 13.310813333333332 2 15.769599999999999 2 18.333333333333332v4c0 -2.5637333333333334 1.0184533333333332 -5.0225333333333335 2.8313066666666664 -6.835333333333333C6.644146666666666 13.685066666666666 9.102906666666666 12.666666666666666 11.666666666666666 12.666666666666666c1.5055333333333334 0.0002933333333333333 2.988666666666666 0.36410666666666663 4.323466666666667 1.0605333333333333 1.3348 0.6963999999999999 2.481733333333333 1.7047999999999999 3.3432 2.9394666666666667v-4c-0.8614666666666666 -1.23468 -2.0084 -2.2430933333333334 -3.3432 -2.939493333333333C14.655333333333333 9.030773333333332 13.172199999999998 8.66696 11.666666666666666 8.666666666666666Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M19.333333333333332 12.666666666666666c-0.8614666666666666 -1.23468 -2.0084 -2.2430933333333334 -3.3432 -2.939493333333333C14.655333333333333 9.030773333333332 13.172199999999998 8.66696 11.666666666666666 8.666666666666666c-2.56376 0 -5.02252 1.0184533333333332 -6.83536 2.8313066666666664C3.0184533333333334 13.310813333333332 2 15.769599999999999 2 18.333333333333332v5h14.333333333333332c0.7956 -0.00039999999999999996 1.5584 -0.31653333333333333 2.1209333333333333 -0.8790666666666667 0.5625333333333333 -0.5625333333333333 0.8786666666666667 -1.3253333333333333 0.8790666666666667 -2.1209333333333333V12.666666666666666Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#78eb7b&quot; stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M19.333333333333332 12.666666666666666v7.666666666666666c-0.00039999999999999996 0.7956 -0.31653333333333333 1.5584 -0.8790666666666667 2.1209333333333333 -0.5625333333333333 0.5625333333333333 -1.3253333333333333 0.8786666666666667 -2.1209333333333333 0.8790666666666667H1.3333333333333333c-0.17681066666666667 0 -0.34637999999999997 0.07026666666666666 -0.471404 0.19519999999999998C0.736904 23.6536 0.6666666666666666 23.8232 0.6666666666666666 24c0 0.4377333333333333 0.08621866666666667 0.8712 0.25373466666666666 1.2755999999999998s0.413052 0.7718666666666666 0.722572 1.0814666666666666c0.3095333333333333 0.30946666666666667 0.677 0.5550666666666666 1.0814133333333333 0.7225333333333334 0.4044266666666666 0.16746666666666665 0.83788 0.2537333333333333 1.2756133333333333 0.2537333333333333h14.333333333333332c1.326 -0.00039999999999999996 2.5976 -0.5271999999999999 3.5352 -1.4647999999999999 0.9376 -0.9376 1.4644 -2.2092 1.4647999999999999 -3.5352V16.666666666666664c0 -1.0608 -0.42146666666666666 -2.0782666666666665 -1.1716 -2.8284000000000002C21.4116 13.088093333333333 20.394133333333333 12.666666666666666 19.333333333333332 12.666666666666666v0Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M28.666666666666664 10.883986666666667V21c0 0.9723999999999999 -0.38626666666666665 1.9050666666666667 -1.0739999999999998 2.5926666666666662 -0.6876 0.6877333333333333 -1.6202666666666667 1.0739999999999998 -2.5926666666666662 1.0739999999999998h-2.245333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M26.666666666666664 11.333333333333332c0.9229333333333334 0 1.8252 -0.27369333333333334 2.5926666666666662 -0.7864666666666666 0.7674666666666666 -0.5127866666666666 1.3656 -1.2416133333333332 1.7187999999999999 -2.0943466666666666 0.3532 -0.8527199999999999 0.4456 -1.7910266666666665 0.26546666666666663 -2.696266666666667 -0.18 -0.9052533333333332 -0.6244 -1.7367733333333333 -1.2770666666666666 -2.389413333333333 -0.6526666666666666 -0.6526533333333333 -1.4842666666666666 -1.0971066666666665 -2.3894666666666664 -1.2771733333333333 -0.9051999999999999 -0.18006666666666665 -1.8436 -0.08764 -2.696266666666667 0.26556 -0.8526666666666666 0.35321333333333327 -1.5816 0.9513466666666666 -2.0942666666666665 1.7187866666666667C22.273733333333332 4.8414399999999995 22 5.743693333333333 22 6.666666666666666v4&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M27.333333333333332 4.666666666666666v1.3333333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;m8.010666666666665 9.382653333333334 11.306666666666667 11.268013333333332&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M15.735999999999999 9.597333333333333 2 23.333333333333332&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M2.908 14.241333333333332 12 23.333333333333332&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M19.333333333333332 16 12 23.333333333333332&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#ffbc44&quot; stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M7.333333333333333 27.333333333333332v1.3333333333333333c0 0.35359999999999997 -0.14048 0.6927999999999999 -0.3905333333333333 0.9427999999999999 -0.25004 0.25 -0.5891866666666666 0.3905333333333333 -0.9427999999999999 0.3905333333333333H1.4413333333333331c-0.18351066666666666 -0.0010666666666666667 -0.360692 -0.0672 -0.49998666666666663 -0.18666666666666668 -0.13929333333333332 -0.11946666666666667 -0.23165466666666668 -0.2845333333333333 -0.26062799999999997 -0.46573333333333333s0.007321333333333333 -0.3668 0.10241866666666666 -0.5237333333333333c0.09509733333333333 -0.1569333333333333 0.24282266666666666 -0.2750666666666667 0.4168573333333333 -0.3332L4.666666666666666 27.333333333333332h2.6666666666666665Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#ffbc44&quot; stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M14 27.333333333333332v1.3333333333333333c0 0.35359999999999997 0.14053333333333332 0.6927999999999999 0.3905333333333333 0.9427999999999999s0.5892 0.3905333333333333 0.9427999999999999 0.3905333333333333h4.558666666666666c0.18386666666666665 -0.00013333333333333334 0.3616 -0.06559999999999999 0.5017333333333334 -0.18466666666666667 0.13999999999999999 -0.11919999999999999 0.23306666666666667 -0.28426666666666667 0.2625333333333333 -0.46573333333333333 0.02946666666666667 -0.18146666666666667 -0.006533333333333333 -0.36746666666666666 -0.1016 -0.5247999999999999 -0.09506666666666666 -0.15746666666666664 -0.24293333333333333 -0.27586666666666665 -0.41733333333333333 -0.3341333333333333L16.666666666666664 27.333333333333332h-2.6666666666666665Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt; &lt;a href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;kampus&quot;&gt;I mentor turtles at &lt;strong&gt;Kampus&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;svg
    style=&quot;vertical-align: center;position:relative;top:10px;padding-right:5px;&quot;
    xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 32 32&quot; id=&quot;Instrument-Piano--Streamline-Ultimate&quot; height=&quot;32&quot; width=&quot;32&quot;&gt;&lt;desc&gt;Instrument Piano Streamline Icon: https:&#x2F;&#x2F;streamlinehq.com&lt;&#x2F;desc&gt;&lt;path fill=&quot;#b2b2b2&quot; d=&quot;M29.333333333333332 13.750666666666667H2.6666666666666665v5.333333333333333h26.666666666666664v-5.333333333333333Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#808080&quot; d=&quot;M2.6666666666666665 13.7508 23.526666666666664 1.109408c0.3024 -0.18306 0.6650666666666667 -0.23856 1.0084 -0.15430266666666664 0.3432 0.08425866666666666 0.6390666666666667 0.3013786666666667 0.8222666666666667 0.6036413333333333l1.7333333333333334 2.8506666666666662c0.18306666666666666 0.3023733333333333 0.23853333333333332 0.6650666666666667 0.15426666666666666 1.0083466666666667s-0.30133333333333334 0.6390533333333333 -0.6035999999999999 0.8223199999999999c-0.2964 0.17981333333333333 -0.5117333333333333 0.46742666666666666 -0.6006666666666667 0.80252 -0.08906666666666666 0.33507999999999993 -0.04479999999999999 0.6916133333333333 0.12333333333333332 0.9948133333333333L29.333333333333332 13.7508&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M2.6666666666666665 13.7508 23.526666666666664 1.109408c0.3024 -0.18306 0.6650666666666667 -0.23856 1.0084 -0.15430266666666664 0.3432 0.08425866666666666 0.6390666666666667 0.3013786666666667 0.8222666666666667 0.6036413333333333l1.7333333333333334 2.8506666666666662c0.18306666666666666 0.3023733333333333 0.23853333333333332 0.6650666666666667 0.15426666666666666 1.0083466666666667s-0.30133333333333334 0.6390533333333333 -0.6035999999999999 0.8223199999999999c-0.2964 0.17981333333333333 -0.5117333333333333 0.46742666666666666 -0.6006666666666667 0.80252 -0.08906666666666666 0.33507999999999993 -0.04479999999999999 0.6916133333333333 0.12333333333333332 0.9948133333333333L29.333333333333332 13.7508&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M22.666666666666664 13.750666666666667h8&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M1.3333333333333333 13.750666666666667h7.333333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#e3e3e3&quot; d=&quot;M29.333333333333332 19.080133333333333v1.3333333333333333c0 0.17506666666666665 -0.03453333333333333 0.34839999999999993 -0.10146666666666666 0.5101333333333333 -0.06706666666666666 0.16186666666666666 -0.16519999999999999 0.30879999999999996 -0.28906666666666664 0.43266666666666664 -0.12386666666666665 0.12373333333333332 -0.2708 0.222 -0.4325333333333333 0.2889333333333333 -0.16173333333333334 0.06706666666666666 -0.3352 0.1016 -0.5102666666666666 0.1016H4c-0.35362666666666664 0 -0.6927599999999999 -0.14053333333333332 -0.9428133333333333 -0.3905333333333333C2.8071466666666667 21.106133333333332 2.6666666666666665 20.767066666666665 2.6666666666666665 20.413466666666665v-1.3333333333333333h26.666666666666664Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M29.333333333333332 19.080133333333333v-5.333333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M2.6666666666666665 19.080133333333333v-5.333333333333333&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M4 21.750666666666664v9.333333333333332&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M28 21.750666666666664v9.333333333333332&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#ff808c&quot; d=&quot;M19.333333333333332 25.750666666666664c0 0.35359999999999997 -0.14053333333333332 0.6927999999999999 -0.3905333333333333 0.9427999999999999s-0.5892 0.3905333333333333 -0.9427999999999999 0.3905333333333333h-4c-0.35359999999999997 0 -0.6927599999999999 -0.14053333333333332 -0.9428133333333333 -0.3905333333333333 -0.25004 -0.25 -0.39052 -0.5892 -0.39052 -0.9427999999999999 0 -0.35359999999999997 0.14048 -0.6927999999999999 0.39052 -0.9427999999999999 0.25005333333333335 -0.2501333333333333 0.5892133333333334 -0.3905333333333333 0.9428133333333333 -0.3905333333333333h4c0.35359999999999997 0 0.6927999999999999 0.1404 0.9427999999999999 0.3905333333333333 0.25 0.25 0.3905333333333333 0.5892 0.3905333333333333 0.9427999999999999Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M16 27.083999999999996v4&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M14.666666666666666 31.083999999999996h2.6666666666666665&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M21.532 5.750653333333333 26 13.750666666666667&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#ffffff&quot; d=&quot;M12.666666666666666 11.083986666666664h6.666666666666666c0.17679999999999998 0 0.34639999999999993 0.07024 0.4714666666666667 0.19526666666666664 0.12493333333333334 0.1250133333333333 0.19519999999999998 0.29458666666666666 0.19519999999999998 0.47139999999999993V19.084H12V11.750653333333332c0 -0.17681333333333332 0.07024 -0.3463866666666667 0.19526666666666664 -0.47139999999999993 0.1250133333333333 -0.12502666666666667 0.29458666666666666 -0.19526666666666664 0.47139999999999993 -0.19526666666666664Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M14.666666666666666 13.750666666666667h2.6666666666666665&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M14.666666666666666 16.417333333333332h2.6666666666666665&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M29.333333333333332 19.080133333333333v1.3333333333333333c0 0.17506666666666665 -0.03453333333333333 0.34839999999999993 -0.10146666666666666 0.5101333333333333 -0.06706666666666666 0.16186666666666666 -0.16519999999999999 0.30879999999999996 -0.28906666666666664 0.43266666666666664 -0.12386666666666665 0.12373333333333332 -0.2708 0.222 -0.4325333333333333 0.2889333333333333 -0.16173333333333334 0.06706666666666666 -0.3352 0.1016 -0.5102666666666666 0.1016H4c-0.35362666666666664 0 -0.6927599999999999 -0.14053333333333332 -0.9428133333333333 -0.3905333333333333C2.8071466666666667 21.106133333333332 2.6666666666666665 20.767066666666665 2.6666666666666665 20.413466666666665v-1.3333333333333333h26.666666666666664Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M19.333333333333332 25.750666666666664c0 0.35359999999999997 -0.14053333333333332 0.6927999999999999 -0.3905333333333333 0.9427999999999999s-0.5892 0.3905333333333333 -0.9427999999999999 0.3905333333333333h-4c-0.35359999999999997 0 -0.6927599999999999 -0.14053333333333332 -0.9428133333333333 -0.3905333333333333 -0.25004 -0.25 -0.39052 -0.5892 -0.39052 -0.9427999999999999 0 -0.35359999999999997 0.14048 -0.6927999999999999 0.39052 -0.9427999999999999 0.25005333333333335 -0.2501333333333333 0.5892133333333334 -0.3905333333333333 0.9428133333333333 -0.3905333333333333h4c0.35359999999999997 0 0.6927999999999999 0.1404 0.9427999999999999 0.3905333333333333 0.25 0.25 0.3905333333333333 0.5892 0.3905333333333333 0.9427999999999999Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M12.666666666666666 11.083986666666664h6.666666666666666c0.17679999999999998 0 0.34639999999999993 0.07024 0.4714666666666667 0.19526666666666664 0.12493333333333334 0.1250133333333333 0.19519999999999998 0.29458666666666666 0.19519999999999998 0.47139999999999993V19.084H12V11.750653333333332c0 -0.17681333333333332 0.07024 -0.3463866666666667 0.19526666666666664 -0.47139999999999993 0.1250133333333333 -0.12502666666666667 0.29458666666666666 -0.19526666666666664 0.47139999999999993 -0.19526666666666664Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;@SeeTheMusic&quot;&gt;I am an okayest &lt;strong&gt;pianist&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;svg
    style=&quot;vertical-align: center;position:relative;top:10px;padding-right:5px;&quot;
    xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 32 32&quot; id=&quot;Linkedin-Logo--Streamline-Ultimate&quot; height=&quot;32&quot; width=&quot;32&quot;&gt;&lt;desc&gt;Linkedin Logo Streamline Icon: https:&#x2F;&#x2F;streamlinehq.com&lt;&#x2F;desc&gt;&lt;path fill=&quot;#66e1ff&quot; d=&quot;M8.16 11.7236H1.0326666666666666V30.25453333333333H8.16V11.7236Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#66e1ff&quot; d=&quot;M20.989066666666666 17.425466666666665C19.41453333333333 17.425333333333334 18.138133333333332 18.701866666666668 18.138133333333332 20.2764V30.25453333333333H11.010933333333334V11.7236H18.138133333333332V13.840399999999999C19.729466666666667 12.491866666666667 21.740133333333333 11.7384 23.825733333333332 11.709333333333333C28.048000000000002 11.709333333333333 30.967333333333332 14.845333333333333 30.967333333333332 20.76813333333333V30.25453333333333H23.839999999999996V20.2764C23.839999999999996 18.701866666666668 22.563599999999997 17.425466666666665 20.989066666666666 17.425466666666665Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#66e1ff&quot; d=&quot;M4.596399999999999 8.872666666666666C7.339599999999999 8.878 9.059999999999999 5.9116 7.692933333333333 3.5332C7.055999999999999 2.4252 5.8744 1.7429333333333332 4.596399999999999 1.7454666666666665C1.8530666666666664 1.7508 0.14426666666666665 4.723733333333334 1.5205333333333333 7.096933333333333C2.1567999999999996 8.193999999999999 3.3281333333333336 8.870266666666666 4.596399999999999 8.872666666666666Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#c2f3ff&quot; d=&quot;M8.16 11.7236H1.0326666666666666V14.595866666666666H8.16V11.7236Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#c2f3ff&quot; d=&quot;M23.825733333333332 11.709333333333333C21.740266666666663 11.738266666666664 19.729733333333332 12.491066666666665 18.138133333333332 13.839066666666668V11.7236H11.010933333333334V14.595866666666666H16.02133333333333C17.190399999999997 14.595999999999998 18.138133333333332 15.543733333333332 18.138133333333332 16.712666666666664C19.729466666666667 15.364133333333331 21.740133333333333 14.610666666666667 23.825733333333332 14.581733333333332C28.048000000000002 14.581733333333332 30.967333333333332 17.71053333333333 30.967333333333332 23.6404V20.76813333333333C30.967333333333332 14.838266666666666 28.048000000000002 11.709333333333333 23.825733333333332 11.709333333333333Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#c2f3ff&quot; d=&quot;M4.596399999999999 4.617733333333333C6.0073333333333325 4.6193333333333335 7.284533333333333 5.453333333333333 7.853466666666667 6.744533333333333C8.966533333333333 4.2372 6.947866666666666 1.4651999999999998 4.219866666666666 1.7550666666666666C1.8157333333333332 2.0103999999999997 0.3582666666666666 4.5348 1.3392 6.744533333333333C1.9081333333333332 5.453333333333333 3.185333333333333 4.6193333333333335 4.596399999999999 4.617733333333333Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M8.16 30.25453333333333H1.0326666666666666V11.7236H8.16V30.25453333333333ZM20.989066666666666 17.425466666666665C19.41453333333333 17.425333333333334 18.138133333333332 18.701866666666668 18.138133333333332 20.2764V30.25453333333333H11.010933333333334V11.7236H18.138133333333332V13.840399999999999C19.729466666666667 12.491866666666667 21.740133333333333 11.7384 23.825733333333332 11.709333333333333C28.048000000000002 11.709333333333333 30.967333333333332 14.845333333333333 30.967333333333332 20.76813333333333V30.25453333333333H23.839999999999996V20.2764C23.839999999999996 18.701866666666668 22.563599999999997 17.425466666666665 20.989066666666666 17.425466666666665H20.989066666666666ZM8.16 5.309066666666666C8.165333333333333 8.052399999999999 5.198933333333333 9.772666666666666 2.8205333333333336 8.4056C1.7124 7.768666666666666 1.0302666666666667 6.5872 1.0326666666666666 5.309066666666666C1.0379999999999998 2.565733333333333 4.011066666666666 0.8569333333333333 6.384133333333333 2.2332C7.481199999999999 2.8694666666666664 8.157599999999999 4.0408 8.16 5.309066666666666Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt; &lt;a href=&quot;https:&#x2F;&#x2F;linkedin.com&#x2F;in&#x2F;volkanozcelik&quot;&gt;I am &lt;strong&gt;volkanozcelik&lt;&#x2F;strong&gt; on the
“&lt;strong&gt;pro birdsite&lt;&#x2F;strong&gt;”&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;svg
    style=&quot;vertical-align: center;position:relative;top:10px;padding-right:5px;&quot;
    xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 32 32&quot; id=&quot;Twitter-Logo--Streamline-Ultimate&quot; height=&quot;32&quot; width=&quot;32&quot;&gt;&lt;desc&gt;Twitter Logo Streamline Icon: https:&#x2F;&#x2F;streamlinehq.com&lt;&#x2F;desc&gt;&lt;path fill=&quot;#66e1ff&quot; d=&quot;M30.998266666666666 7.9093333333333335L28.27133333333333 7.2276L29.6348 4.500666666666667L26.275199999999998 5.455066666666667C22.8368 2.247333333333333 17.215466666666664 3.9646666666666666 16.156799999999997 8.546133333333334C16.049999999999997 9.008 15.997466666666668 9.480533333333334 16 9.954533333333334V11.318C11.174666666666667 12.313333333333333 6.954666666666666 9.681866666666666 3.0469333333333335 5.1823999999999995C2.3651999999999997 8.8188 3.0469333333333335 11.545733333333333 5.092133333333333 13.363199999999999L1.0017333333333331 12.681466666666667C1.5539999999999998 15.502533333333332 2.8587999999999996 17.726399999999998 6.4556000000000004 18.13533333333333L3.0469333333333335 19.498933333333333C4.410399999999999 22.225866666666665 6.5456 22.648533333333333 9.864266666666666 22.907600000000002C7.283066666666667 24.751733333333334 4.1732 25.708666666666666 1.0017333333333331 25.63453333333333C18.392933333333332 33.36413333333333 28.27133333333333 22.002266666666664 28.27133333333333 11.999733333333333V10.189066666666665L30.998266666666666 7.9093333333333335Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#c2f3ff&quot; d=&quot;M26.275199999999998 5.460533333333332C22.8368 2.252933333333333 17.215466666666664 3.970133333333333 16.156799999999997 8.551733333333333C16.050533333333334 9.011733333333332 15.997866666666667 9.482399999999998 16 9.954533333333334V11.318C11.174666666666667 12.313333333333333 6.954666666666666 9.681866666666666 3.0469333333333335 5.1823999999999995C2.3651999999999997 8.8188 3.0469333333333335 11.545733333333333 5.092133333333333 13.363199999999999L1.0017333333333331 12.681466666666667C1.5539999999999998 15.502533333333332 2.8587999999999996 17.726399999999998 6.4556000000000004 18.13533333333333L3.0469333333333335 19.498933333333333C4.361333333333333 22.126266666666666 6.4024 22.611733333333333 9.517999999999999 22.876266666666666L27.196933333333334 5.197333333333333L26.275199999999998 5.460533333333332Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M30.998266666666666 7.9093333333333335L28.27133333333333 7.2276L29.6348 4.500666666666667L26.275199999999998 5.455066666666667C22.8368 2.247333333333333 17.215466666666664 3.9646666666666666 16.156799999999997 8.546133333333334C16.049999999999997 9.008 15.997466666666668 9.480533333333334 16 9.954533333333334V11.318C11.174666666666667 12.313333333333333 6.954666666666666 9.681866666666666 3.0469333333333335 5.1823999999999995C2.3651999999999997 8.8188 3.0469333333333335 11.545733333333333 5.092133333333333 13.363199999999999L1.0017333333333331 12.681466666666667C1.5539999999999998 15.502533333333332 2.8587999999999996 17.726399999999998 6.4556000000000004 18.13533333333333L3.0469333333333335 19.498933333333333C4.410399999999999 22.225866666666665 6.5456 22.648533333333333 9.864266666666666 22.907600000000002C7.283066666666667 24.751733333333334 4.1732 25.708666666666666 1.0017333333333331 25.63453333333333C18.392933333333332 33.36413333333333 28.27133333333333 22.002266666666664 28.27133333333333 11.999733333333333V10.189066666666665L30.998266666666666 7.9093333333333335Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt; &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;vadidekivolkan&quot;&gt;I post technology rants on the &lt;strong&gt;birdiste&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;
&lt;svg
    style=&quot;vertical-align: center;position:relative;top:10px;padding-right:5px;&quot;
    xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 32 32&quot; id=&quot;Github-Logo--Streamline-Ultimate&quot; height=&quot;32&quot; width=&quot;32&quot;&gt;&lt;desc&gt;Github Logo Streamline Icon: https:&#x2F;&#x2F;streamlinehq.com&lt;&#x2F;desc&gt;&lt;path fill=&quot;#808080&quot; d=&quot;M29.028799999999997 12.533333333333333L29.072533333333332 12.564666666666668S32.6896 6.3148 28.252266666666664 2.671733333333333C25.518266666666666 2.671733333333333 21.337999999999997 7.182933333333333 21.337999999999997 7.182933333333333L21.368133333333333 7.2048C17.892533333333333 6.2026666666666666 14.205733333333331 6.1952 10.725999999999999 7.182933333333333C10.7028 7.1624 6.5389333333333335 2.671733333333333 3.811733333333333 2.671733333333333C-0.5257333333333333 6.226 2.8152 12.2572 2.9723999999999995 12.537333333333333C1.4586666666666668 14.8596 0.7857333333333334 17.630133333333333 1.0654666666666666 20.387999999999998C1.3949333333333334 24.66133333333333 4.957333333333333 29.328266666666668 9.242799999999999 29.328266666666668H22.7556C27.041199999999996 29.328266666666668 30.604933333333335 24.66133333333333 30.93293333333333 20.387999999999998C31.21666666666667 17.628933333333332 30.5444 14.856133333333332 29.028799999999997 12.533333333333333Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#b2b2b2&quot; d=&quot;M1.5042666666666666 15.7348C5.829733333333333 12.966933333333332 10.866266666666665 11.5156 16.00133333333333 11.557199999999998C21.1364 11.513866666666667 26.173466666666663 12.963733333333332 30.4996 15.730666666666666C30.1788 14.593466666666666 29.682533333333332 13.513333333333332 29.028799999999997 12.5292L29.072533333333332 12.560666666666666S32.6896 6.310666666666666 28.252266666666664 2.667733333333333C25.518266666666666 2.667733333333333 21.337999999999997 7.1788 21.337999999999997 7.1788L21.368133333333333 7.199333333333333C17.892 6.199733333333333 14.205333333333332 6.194133333333333 10.725999999999999 7.182933333333333C10.7028 7.1624 6.5389333333333335 2.671733333333333 3.811733333333333 2.671733333333333C-0.5257333333333333 6.226 2.8152 12.2572 2.9723999999999995 12.537333333333333C2.3202666666666665 13.521066666666666 1.8249333333333333 14.600266666666666 1.5042666666666666 15.736133333333331Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M29.028799999999997 12.533333333333333L29.072533333333332 12.564666666666668S32.6896 6.3148 28.252266666666664 2.671733333333333C25.518266666666666 2.671733333333333 21.337999999999997 7.182933333333333 21.337999999999997 7.182933333333333L21.368133333333333 7.2048C17.892533333333333 6.2026666666666666 14.205733333333331 6.1952 10.725999999999999 7.182933333333333C10.7028 7.1624 6.5389333333333335 2.671733333333333 3.811733333333333 2.671733333333333C-0.5257333333333333 6.226 2.8152 12.2572 2.9723999999999995 12.537333333333333C1.4586666666666668 14.8596 0.7857333333333334 17.630133333333333 1.0654666666666666 20.387999999999998C1.3949333333333334 24.66133333333333 4.957333333333333 29.328266666666668 9.242799999999999 29.328266666666668H22.7556C27.041199999999996 29.328266666666668 30.604933333333335 24.66133333333333 30.93293333333333 20.387999999999998C31.21666666666667 17.628933333333332 30.5444 14.856133333333332 29.028799999999997 12.533333333333333Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#ffdda1&quot; stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M26.253733333333333 21.80973333333333C26.253733333333333 13.650133333333333 20.613466666666667 16.981466666666666 16.00133333333333 16.981466666666666C11.389066666666666 16.981466666666666 5.7488 13.734933333333332 5.7488 21.80973333333333C5.7488 24.45213333333333 7.890933333333333 26.594266666666663 10.533333333333333 26.594266666666663H21.46933333333333C24.111733333333333 26.594266666666663 26.253733333333333 24.45213333333333 26.253733333333333 21.80973333333333H26.253733333333333Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#c77f67&quot; stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M20.814533333333333 23.860266666666664C21.569066666666664 23.860266666666664 22.181466666666665 22.941599999999998 22.181466666666665 21.80973333333333S21.569066666666664 19.7592 20.814533333333333 19.7592S19.447466666666664 20.677866666666667 19.447466666666664 21.80973333333333S20.059866666666665 23.860266666666664 20.814533333333333 23.860266666666664Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;path fill=&quot;#c77f67&quot; stroke=&quot;#191919&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; d=&quot;M11.245466666666667 23.860266666666664C12.000133333333332 23.860266666666664 12.612533333333333 22.941599999999998 12.612533333333333 21.80973333333333S12.000133333333332 19.7592 11.245466666666667 19.7592S9.878533333333333 20.677866666666667 9.878533333333333 21.80973333333333S10.490933333333333 23.860266666666664 11.245466666666667 23.860266666666664Z&quot; stroke-width=&quot;1&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt; [The source is strong at &lt;strong&gt;zerotohero-dev&lt;&#x2F;strong&gt;][github].&lt;&#x2F;p&gt;
&lt;p&gt;[github]; https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;broadcom&quot;&gt;Broadcom&lt;&#x2F;h2&gt;
&lt;p&gt;Currently, I’m a &lt;strong&gt;Senior Principal Engineer&lt;&#x2F;strong&gt; (&lt;em&gt;Master&lt;&#x2F;em&gt;) at
&lt;a href=&quot;https:&#x2F;&#x2F;www.broadcom.com&quot;&gt;&lt;strong&gt;Broadcom&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, reinventing Radio Access Networks as
you know it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zero-trust-spiffe-and-spire&quot;&gt;Zero Trust, SPIFFE, and SPIRE&lt;&#x2F;h2&gt;
&lt;p&gt;I am very active in the Zero-Trust security space. And, related to that,
I am a chair at the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spiffe&#x2F;blob&#x2F;main&#x2F;ssc&#x2F;CHARTER.md&quot;&gt;&lt;strong&gt;SPIFFE Steering Committee&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, where I help
drive the strategic direction and growth of all projects under
the &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; umbrella.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;o-ran-security-focus-group&quot;&gt;O-RAN Security Focus Group&lt;&#x2F;h2&gt;
&lt;p&gt;I also contribute to the discussions of &lt;a href=&quot;https:&#x2F;&#x2F;www.o-ran.org&#x2F;&quot;&gt;O-RAN&lt;&#x2F;a&gt;
&lt;strong&gt;Security Focus Group&lt;&#x2F;strong&gt; (&lt;em&gt;WG-11&lt;&#x2F;em&gt;) helping secure the future of mobile
communication one protocol at a time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;always-curious&quot;&gt;Always Curious&lt;&#x2F;h2&gt;
&lt;p&gt;As an engineer, I solve &lt;strong&gt;problems&lt;&#x2F;strong&gt;: The context, the origin, or the nature of
the problems are &lt;strong&gt;orthogonal&lt;&#x2F;strong&gt; to the approaches I take in solving them.&lt;&#x2F;p&gt;
&lt;p&gt;I’m a big believer in &lt;strong&gt;asking questions&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It’s the &lt;strong&gt;curiosity&lt;&#x2F;strong&gt; that matters.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ideas-matter&quot;&gt;Ideas Matter&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Since 2003&lt;&#x2F;strong&gt;, I have been all over the stack, as far as stack goes:
I’ve created &lt;strong&gt;mobile&lt;&#x2F;strong&gt;, &lt;strong&gt;web&lt;&#x2F;strong&gt;, and &lt;strong&gt;desktop&lt;&#x2F;strong&gt; apps, played with
&lt;strong&gt;SQL&#x2F;NoSQL&#x2F;GraphQL&lt;&#x2F;strong&gt; data stores, and more.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve &lt;strong&gt;automated&lt;&#x2F;strong&gt; the deployment of &lt;strong&gt;microservices&lt;&#x2F;strong&gt;, played with serverless,
&lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt;, and &lt;strong&gt;service meshes&lt;&#x2F;strong&gt;. I’ve used real-time databases,
&lt;strong&gt;streams&lt;&#x2F;strong&gt;, WebSockets, &lt;strong&gt;protocol buffers&lt;&#x2F;strong&gt;, lambda functions, and
&lt;strong&gt;message queues&lt;&#x2F;strong&gt;. I’ve crafted solutions to improve the &lt;strong&gt;scalability&lt;&#x2F;strong&gt; and
&lt;strong&gt;performance&lt;&#x2F;strong&gt; of distributed systems.&lt;&#x2F;p&gt;
&lt;p&gt;I’m pretty sure there’s much more to add to the list that I don’t remember
right now.&lt;&#x2F;p&gt;
&lt;p&gt;Yet, that’s me in a nutshell: I’m a pragmatist nerd who gets &lt;em&gt;$#!%&lt;&#x2F;em&gt; done.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;explore-more&quot;&gt;Explore More&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;a-new-hope&#x2F;&quot;&gt;Every Saga Has a Beginning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Volkan Özçelik&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan-uses&#x2F;&quot;&gt;Volkan Uses&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;contact&#x2F;&quot;&gt;Contact&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;privacy&#x2F;&quot;&gt;Privacy Policy&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>&#x27;Following Your Passion&#x27; Is Hardly Enough</title>
        <published>2024-05-10T00:00:00+00:00</published>
        <updated>2024-05-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0017/"/>
        <id>https://zerotohero.dev/highlights/issue-0017/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0017/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;pass.png&quot; alt=&quot;Follow your passion.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Follow your passion.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the 17th issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;It’s been a while since my last newsletter, but I’m excited to get back into a
regular cadence of sending updates. I know, I know… that’s what I said last
time, too yet starting with this one, I am planning to be more consistent.&lt;&#x2F;p&gt;
&lt;p&gt;I hope the new year has started amazingly for you. To be fair, the year started
really amazing for me. Here are some of the highlights:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-trip-to-hawaii-santa&quot;&gt;A Trip to Hawaii 🎅&lt;&#x2F;h2&gt;
&lt;p&gt;But the highlight of the year was our trip to Hawaii. It was a week with
near-zero technology and full of nature. It was utterly recharging.&lt;&#x2F;p&gt;
&lt;p&gt;The beautiful landscapes and friendly locals made for a truly remarkable
experience.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;keep-your-secrets-secret-with-aegis&quot;&gt;Keep Your Secrets Secret With Aegis&lt;&#x2F;h2&gt;
&lt;p&gt;I am excited to have released &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;Aegis&lt;&#x2F;a&gt; this weekend.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;01&amp;#x2F;aegis-banner.png&quot; alt=&quot;Aegis: keep your secrets&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Aegis: keep your secrets&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;&lt;strong&gt;Aegis&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is an open source &lt;strong&gt;Secrets Store&lt;&#x2F;strong&gt; that
provides secrets to workloads securely at runtime without requiring a pod
restart.&lt;&#x2F;p&gt;
&lt;p&gt;Essential features that make &lt;strong&gt;Aegis&lt;&#x2F;strong&gt; unique are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes-first design&lt;&#x2F;li&gt;
&lt;li&gt;Minimal footprint&lt;&#x2F;li&gt;
&lt;li&gt;Hassle-free deployment&lt;&#x2F;li&gt;
&lt;li&gt;And overall, a &lt;strong&gt;delightful&lt;&#x2F;strong&gt; user experience.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With &lt;strong&gt;Aegis&lt;&#x2F;strong&gt;, you can rest assured that your sensitive data is always **secure
** and &lt;strong&gt;protected&lt;&#x2F;strong&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vmware-tanzu&#x2F;secrets-manager&quot;&gt;Check out &lt;strong&gt;Aegis&lt;&#x2F;strong&gt; on GitHub&lt;&#x2F;a&gt; for details.&lt;&#x2F;p&gt;
&lt;p&gt;With a caveat that &lt;strong&gt;Aegis&lt;&#x2F;strong&gt; is still a work in progress. I am improving its
feature set; however, it is still technically an alpha product. Therefore, any
part of it can change at any time. &lt;strong&gt;Use it at your own risk&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But while there, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vmware-tanzu&#x2F;secrets-manager&quot;&gt;if you share your stars on GitHub&lt;&#x2F;a&gt;,
I’d be delighted ❤️.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mastodon-anyone&quot;&gt;Mastodon Anyone?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;mastodon-101&#x2F;&quot;&gt;I also put together a guide&lt;&#x2F;a&gt; for those looking to create and manage
their Mastodon instances.&lt;&#x2F;p&gt;
&lt;p&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;hachyderm.io&#x2F;@volkan&quot;&gt;have been a part of Hachyderm Mastodon instance&lt;&#x2F;a&gt;
for a couple of months so far, and I can confidently say that it’s a breeze of
fresh air after all the birdsite madness. I am &lt;strong&gt;never&lt;&#x2F;strong&gt; going back to Twitter!&lt;&#x2F;p&gt;
&lt;p&gt;I also have created my own single-user Mastodon instance z2h
(&lt;em&gt;edit 2024-05-21: z2h is not operational as of May 2024&lt;&#x2F;em&gt;), where I share many
helpful for those interested. So if you like these newslettes, I’m sure you’ll
appreciate &lt;em&gt;the z2h.dev Mastodon instance&lt;&#x2F;em&gt; too.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;I have wondered why the adage “&lt;em&gt;follow your passion&lt;&#x2F;em&gt;” does not always work
and why it has this uncanny, misleading nature.&lt;&#x2F;p&gt;
&lt;p&gt;We’ve all heard the saying “&lt;em&gt;follow your passion&lt;&#x2F;em&gt;” when finding a career that
we’ll love. But the truth is, it can be challenging.&lt;&#x2F;p&gt;
&lt;p&gt;If I focused on what came naturally to us and what we enjoyed doing, I’m pretty
sure I would be playing the Elders Scrolls of Morrowind forever.&lt;&#x2F;p&gt;
&lt;p&gt;It is more productive to consider doing the activities that challenge us: The
activities that are even mildly annoying. If you know that when you endure the
struggle, there is a positive reward, that’s the kind of activity that’s worth
pursuing.&lt;&#x2F;p&gt;
&lt;p&gt;You might be better at these things. But you’ll always be energized by tackling
them head-on and putting in the hard work.&lt;&#x2F;p&gt;
&lt;p&gt;So, aside from having fun, it is also essential to have **the right kind of fun
** for a good purpose.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;scholar.archive.org&#x2F;search?q=AI+ML&quot;&gt;A little known fact about the &lt;strong&gt;Internet Archive&lt;&#x2F;strong&gt; is, you can totally
search it for scholarly articles&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Delta456&#x2F;box-cli-maker&quot;&gt;&lt;strong&gt;Box CLI Maker&lt;&#x2F;strong&gt; creates boxes for your CLI apps&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;retool.com&#x2F;&quot;&gt;So you want a tool to build internal tools really fast. Say no more fam,
and meet &lt;strong&gt;ReTool&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Consume Less</title>
        <published>2024-03-10T00:00:00+00:00</published>
        <updated>2024-03-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/consume-less/"/>
        <id>https://zerotohero.dev/top-of-mind/consume-less/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/consume-less/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;consume.png&quot; alt=&quot;Consume Less&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Create more.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Consume Less&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Catch 22</title>
        <published>2024-03-08T00:00:00+00:00</published>
        <updated>2024-03-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/catch-22/"/>
        <id>https://zerotohero.dev/top-of-mind/catch-22/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/catch-22/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;catch22.png&quot; alt=&quot;Catch 22&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;there-is-no-way-out&quot;&gt;There Is No Way Out&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Catch-22&quot;&gt;Joseph Heller wrote the novel Catch 22&lt;&#x2F;a&gt;,
first published in 1961. The term “&lt;strong&gt;&lt;em&gt;Catch 22&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” is derived from a concept
within the book that symbolizes a situation where there is no way to win or
resolve due to conflicting rules or conditions.&lt;&#x2F;p&gt;
&lt;p&gt;In the story “Catch 22,” a military rule traps soldiers in circumstances. It
states that if a bomber crew member wishes to be deemed insane to avoid flying
missions, they can’t be considered insane.&lt;&#x2F;p&gt;
&lt;p&gt;This paradox arises because if they express a desire not to fly missions, it
indicates rational thinking—which contradicts insanity. Thus, they find
themselves stuck in a quandary.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-the-number-22-then&quot;&gt;Why The Number “22” Then?&lt;&#x2F;h2&gt;
&lt;p&gt;While “&lt;strong&gt;22&lt;&#x2F;strong&gt;” doesn’t hold any meaning, Heller likely chose it for its humorous
sound. Initially named “&lt;em&gt;Catch 18&lt;&#x2F;em&gt;”, Heller altered it to “&lt;strong&gt;Catch 22&lt;&#x2F;strong&gt;” after
discovering another book
titled “&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mila_18&quot;&gt;Mila 18&lt;&#x2F;a&gt;” had been published
concurrently to avoid confusion.&lt;&#x2F;p&gt;
&lt;p&gt;Since the book was released, the phrase “Catch 22” has become part of English,
describing a situation in which one is stuck and can’t find a way out due to
conflicting rules or circumstances.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Catch 22&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Embracing Simplicity: Why I&#x27;ve Given Up on Smart Quotes and Other Typographic Niceties</title>
        <published>2024-03-08T00:00:00+00:00</published>
        <updated>2024-03-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/dumb-quotes/"/>
        <id>https://zerotohero.dev/top-of-mind/dumb-quotes/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/dumb-quotes/">&lt;p&gt;&lt;img src=&quot;&#x2F;content&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;typography-1.png&quot; alt=&quot;Embracing Simplicity: Why I’ve Given Up on Smart Quotes–and Other Typographic Niceties&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Before you begin, for the
interested, &lt;a href=&quot;https:&#x2F;&#x2F;smartquotesforsmartpeople.com&#x2F;&quot;&gt;here’s a reference that explains what smart and dumb quotes are&lt;&#x2F;a&gt;:&lt;br &#x2F;&gt;
““Smart quotes” are the ideal form of quotation marks and apostrophes, and are
commonly curly or sloped. “Dumb quotes,” or straight quotes, are a vestigial
constraint from typewriters when using one key for two different marks helped
save space on a keyboard.“&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As someone deeply involved in communication, I have deliberately opted for
simplicity by using dumb quotes and dumb typography and avoiding the intricate
details of these typographic enhancements. Here’s why:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-typographic-toolbox&quot;&gt;The Typographic Toolbox&lt;&#x2F;h2&gt;
&lt;p&gt;Smart typography provides tools that aim to improve readability and visual
appeal:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Em dashes (—) can create pauses.&lt;&#x2F;li&gt;
&lt;li&gt;Indicating ranges with style en dashes (–) subtly differentiate values,&lt;&#x2F;li&gt;
&lt;li&gt;and ellipses (…) effectively show omission or lingering thoughts.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While these elements undoubtedly enhance the sophistication of writing, they
also introduce complications in settings that often rely on basic typographic
conventions.&lt;&#x2F;p&gt;
&lt;p&gt;For instance, CI&#x2F;CD environments, CLIs, Diff&#x2F;Merge tools, Version Control
Systems, and other developer tools may not be compatible with typography–A
terminal will be much happier with &lt;code&gt;&quot;a quoted text like this...&quot;&lt;&#x2F;code&gt;,
than &lt;code&gt;&quot;a smart quoted text like that...&quot;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-challenge-of-going-digital&quot;&gt;The Challenge of Going Digital&lt;&#x2F;h2&gt;
&lt;p&gt;With an array of platforms and software tools, such as IDEs and content
management systems like &lt;strong&gt;&lt;em&gt;Ghost&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; and &lt;strong&gt;&lt;em&gt;Jekyll&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;, simplicity and consistency
are often valued more than precision.&lt;&#x2F;p&gt;
&lt;p&gt;These platforms often automatically convert dumb typography to smart typography.&lt;&#x2F;p&gt;
&lt;p&gt;So, if I type &lt;code&gt;&quot;I enjoy typography...&quot;&lt;&#x2F;code&gt; the published HTML on my blog will
display as &lt;code&gt;&quot;I enjoy typography...&quot;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So, all this time, I’ve been fighting over nothing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;My editing tools can transform dumb typography into smart typography.&lt;&#x2F;li&gt;
&lt;li&gt;And my development tooling would instead prefer dumb typography all the time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In short, &lt;strong&gt;using dumb typography everywhere is (&lt;em&gt;ironically&lt;&#x2F;em&gt;) a smart way&lt;&#x2F;strong&gt; for
me to move forward.&lt;&#x2F;p&gt;
&lt;p&gt;Furthermore, all the other AI-powered spell-checking tools (&lt;em&gt;yes,&lt;&#x2F;em&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.grammarly.com&#x2F;&quot;&gt;
&lt;em&gt;Grammarly&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;em&gt;, I’m looking at you!&lt;&#x2F;em&gt;) default to dumb
quotes no matter how hard I try to convince them otherwise: Each time I make a
change in my text, rewriting with an AI-suggested clarification, I have to
switch back to smart quotation marks manually.&lt;&#x2F;p&gt;
&lt;p&gt;Besides, in programming and code comments, straight quotes are the &lt;strong&gt;norm&lt;&#x2F;strong&gt;,
mostly because they are what’s being used in the context of programming
languages. Mixing typographic quotes in code could lead to syntax errors or
unintended behavior. Therefore, using straight quotes in code and possibly
documentation facilitates smoother collaboration and reduces the overhead of
handling formatting discrepancies.&lt;&#x2F;p&gt;
&lt;p&gt;I’m so &lt;strong&gt;frustrated&lt;&#x2F;strong&gt; with battling against these tools. I just want to focus on
creating content instead of constantly grappling with software over apostrophes
and quotation marks. – I surrender. I. Give. Up!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;focusing-on-what-matters&quot;&gt;Focusing on What Matters&lt;&#x2F;h2&gt;
&lt;p&gt;When I think about what makes my technical blog valuable, it’s not about using
fonts or styles. Instead, it is about effectively communicating complex ideas
clearly and accurately to my audience.&lt;&#x2F;p&gt;
&lt;p&gt;The people who read my blog seek insights and solutions to problems, so the
content’s substance matters more to them than any fancy formatting. This
understanding has led me to simplify my typography approach, focusing on
functionality and making sure things, like quotes, simple dashes, and basic
ellipses, are easy to read.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;simplifying-for-clarity-and-ease&quot;&gt;Simplifying for Clarity and Ease&lt;&#x2F;h2&gt;
&lt;p&gt;Choosing simplicity isn’t about working within the limitations of tools; it’s a
conscious decision to prioritize clear communication and compatibility. Above
all else, I want my writing process to be &lt;strong&gt;smoother&lt;&#x2F;strong&gt; to produce content *
&lt;em&gt;efficiently&lt;&#x2F;em&gt;*.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-broader-perspective-valuing-practicality&quot;&gt;A Broader Perspective: Valuing Practicality&lt;&#x2F;h2&gt;
&lt;p&gt;Opting for a style reflects a more significant principle I believe in:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Prioritizing practicality over perfection&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I don’t look at things from the ivory tower–I am not a purist. If anything, I
consider myself a pragmatist.&lt;&#x2F;p&gt;
&lt;p&gt;In writing, what truly matters is not how fancy your presentation looks. It is
how well your message is understood accurately and clearly. By prioritizing the
essentials, I allow myself to delve deeper into things that matter.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The shift from typography towards a simplified approach signifies a broader
understanding of the critical elements that drive effective communication. While
my appeal of typography remains, my sanity comes first 😄. Embracing simplicity
enables me to focus on creating content that informs, captivates, and enlightens
without being bogged down by formatting intricacies.&lt;&#x2F;p&gt;
&lt;p&gt;Yes, I may have gone on a bit about something some might not consider
significant… However, I needed to get that off my chest.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time (dot dot dot)… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;p&gt;{{ top_of_mind_nav(selected=3) }&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Transform Feedback into Professional Mastery</title>
        <published>2024-03-08T00:00:00+00:00</published>
        <updated>2024-03-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/perception-pivot/"/>
        <id>https://zerotohero.dev/top-of-mind/perception-pivot/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/perception-pivot/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;perception.png&quot; alt=&quot;Transform Feedback into Professional Mastery&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;it-s-all-about-perception&quot;&gt;It’s All About Perception&lt;&#x2F;h2&gt;
&lt;p&gt;Finding out how others perceive you or your work differs from your viewpoint can
be unsettling. You might think you are “&lt;em&gt;rocking it&lt;&#x2F;em&gt;,” while others might not
quickly believe the same.&lt;&#x2F;p&gt;
&lt;p&gt;While it may be challenging to accept, understanding others’ perspectives can
present growth and professional development opportunities.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some steps you can take to address a perception of your work:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sleep-on-it&quot;&gt;Sleep on It&lt;&#x2F;h2&gt;
&lt;p&gt;Take time to&lt;strong&gt;reflect&lt;&#x2F;strong&gt;on the feedback you receive. Initially acknowledge your
response and then try to step back and evaluate the input&lt;strong&gt;objectively&lt;&#x2F;strong&gt;as if it
pertained to someone else.&lt;&#x2F;p&gt;
&lt;p&gt;Consider what actions you would take if even a tiny portion of the feedback was
valid and how much effort you are willing to invest in making changes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;listen&quot;&gt;Listen&lt;&#x2F;h2&gt;
&lt;p&gt;Engage in listening by seeking input from trusted colleagues. Communicate your
commitment to improvement and&lt;strong&gt;request feedback&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Keep it straightforward with questions like these:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What do I excel at?&lt;&#x2F;li&gt;
&lt;li&gt;What should I continue doing?&lt;&#x2F;li&gt;
&lt;li&gt;Where can I enhance my performance?&lt;&#x2F;li&gt;
&lt;li&gt;What behaviors should I avoid?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The objective is to&lt;strong&gt;listen&lt;&#x2F;strong&gt;without judgment and take notes without reacting or
offering comments.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;be-honest&quot;&gt;Be Honest&lt;&#x2F;h2&gt;
&lt;p&gt;Address any misunderstandings or inappropriate behavior openly and honestly.&lt;&#x2F;p&gt;
&lt;p&gt;Expressing regret for any miscommunications or mistakes you may have made can
greatly influence how others see you, as long as you commit to not making the
errors again in the future.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;help-is-given-to-those-who-ask-for-it&quot;&gt;Help Is Given to Those Who Ask for It&lt;&#x2F;h2&gt;
&lt;p&gt;Reach out for assistance. Talk to your colleagues, manager, and people who have
known or been around longer than you. Utilize your company’s resources for
guidance on enhancing the skills you aim to work on and monitor your
advancements with your supervisor as time passes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Navigating the complexities of perception in the workplace requires a
multifaceted approach. It involves a &lt;strong&gt;willingness&lt;&#x2F;strong&gt; to &lt;strong&gt;&lt;em&gt;confront&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;
and &lt;strong&gt;&lt;em&gt;digest&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; feedback, a commitment to &lt;strong&gt;active listening&lt;&#x2F;strong&gt;, and an
&lt;strong&gt;&lt;em&gt;openness&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; to &lt;strong&gt;seeking help&lt;&#x2F;strong&gt; and engaging in self-improvement.&lt;&#x2F;p&gt;
&lt;p&gt;By taking these steps, you can transform challenges into opportunities for
growth, enhance professional relationships, and ultimately align your
self-perception with how others view them.&lt;&#x2F;p&gt;
&lt;p&gt;The journey towards understanding and managing perceptions is about adjusting
your actions and fostering an environment of mutual respect and continuous
development. Embrace this, and you’ll pave the way for a more fulfilling and
impactful career.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Transform Feedback into Professional Mastery&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Trust Cultivates a Cohesive Team</title>
        <published>2024-03-07T00:00:00+00:00</published>
        <updated>2024-03-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/trust/"/>
        <id>https://zerotohero.dev/top-of-mind/trust/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/trust/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;trust-team.png&quot; alt=&quot;Trust Cultivates a Cohesive Team&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trust-is-important&quot;&gt;Trust Is Important&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Trust&lt;&#x2F;strong&gt; is crucial for team success, so it’s not surprising that it is often a
focal point in discussions about team performance. While trust among team
members is commonly emphasized everywhere, establishing trust among teammates
can take &lt;strong&gt;intentional effort&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this article, I’ll introduce ways to foster trust within your team.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;don-t-leave-collaboration-to-chance&quot;&gt;Don’t Leave Collaboration to Chance&lt;&#x2F;h2&gt;
&lt;p&gt;One of your duties as a leader is to &lt;strong&gt;avoid ambiguity&lt;&#x2F;strong&gt;. To avoid leaving
collaboration to chance, initiate discussions at the start of each project on
how the team will collaborate.&lt;&#x2F;p&gt;
&lt;p&gt;This upfront communication can help prevent misunderstandings and promote
teamwork. Everyone can also help this by taking turns sharing their strengths,
preferred communication styles, and past collaboration experiences.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;overcommunicate-then-overcommunicate-some-more&quot;&gt;Overcommunicate, Then Overcommunicate Some More&lt;&#x2F;h2&gt;
&lt;p&gt;Create a culture that prioritizes keeping everyone informed. Encourage everyone
to share information &lt;strong&gt;inclusively&lt;&#x2F;strong&gt;. There is no “us versus them,” and there
shall never be one.&lt;&#x2F;p&gt;
&lt;p&gt;Transparency enhances trust and boosts creativity, performance, and overall
productivity.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recognize&quot;&gt;Recognize&lt;&#x2F;h2&gt;
&lt;p&gt;Recognize the contributions of others by &lt;strong&gt;sharing credit&lt;&#x2F;strong&gt;. Cultivate an
environment where teammates &lt;strong&gt;acknowledge&lt;&#x2F;strong&gt; and appreciate those who have helped
them succeed. This practice fosters a culture of respect and gratitude, which is
essential for building trust.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;disagreements-are-fine&quot;&gt;Disagreements are Fine&lt;&#x2F;h2&gt;
&lt;p&gt;Embrace disagreements as&lt;strong&gt;opportunities&lt;&#x2F;strong&gt;for growth and improvement. Encourage
your team to address conflicts, reminding them that diverse viewpoints often
lead to outcomes as long as discussions remain respectful and collaborative.&lt;&#x2F;p&gt;
&lt;p&gt;When conflicts arise, addressing them and working towards resolution is
essential.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Establishing trust within a team is a &lt;strong&gt;journey&lt;&#x2F;strong&gt; that necessitates plans and
ongoing commitment from everyone. Setting up collaboration strategies that
encourage dialogue, acknowledge individual and group efforts, and view
disagreements as opportunities for growth are fundamental steps in creating an
environment rich in trust.&lt;&#x2F;p&gt;
&lt;p&gt;These actions boost team trust and enhance &lt;strong&gt;innovation&lt;&#x2F;strong&gt;, &lt;strong&gt;performance&lt;&#x2F;strong&gt;,
and &lt;strong&gt;efficiency&lt;&#x2F;strong&gt;, leading to a more
&lt;strong&gt;unified&lt;&#x2F;strong&gt;, &lt;strong&gt;effective&lt;&#x2F;strong&gt;, and &lt;strong&gt;resilient&lt;&#x2F;strong&gt; team.&lt;&#x2F;p&gt;
&lt;p&gt;As you navigate the intricacies of working intentionally, fostering trust
ensures that each member feels &lt;strong&gt;valued&lt;&#x2F;strong&gt;, &lt;strong&gt;heard&lt;&#x2F;strong&gt;, and &lt;strong&gt;essential&lt;&#x2F;strong&gt; to the
team’s accomplishments. Through these endeavors, teams can achieve outcomes
rooted in mutual regard and confidence.&lt;&#x2F;p&gt;
&lt;p&gt;Henceforth, every team member must prioritize these approaches to cultivate an
atmosphere where trust flourishes naturally, and collaboration thrives
effortlessly. This will help everyone feel &lt;strong&gt;empowered&lt;&#x2F;strong&gt; to contribute.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Trust Cultivates a Cohesive Team&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Master Your Mind: Unleash the Power of Learning</title>
        <published>2024-03-06T00:00:00+00:00</published>
        <updated>2024-03-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/the-art-of-learning/"/>
        <id>https://zerotohero.dev/roadmap/the-art-of-learning/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/the-art-of-learning/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;rivers.png&quot; alt=&quot;Master Your Mind: Unleash the Power of Learning&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;rivers.png&quot; alt=&quot;The art of learning.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The art of learning.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Read Me First&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is a follow-up to the article
on &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;how you can learn fast and remember things&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I strongly suggest
you &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;read that article first&lt;&#x2F;a&gt;
if you haven’t already.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here are six effective learning strategies that can enhance your learning
experience.&lt;&#x2F;p&gt;
&lt;p&gt;I hate acronyms, but if you are into acronyms, the acronym “&lt;strong&gt;RIVERS”&lt;&#x2F;strong&gt; can
guide you to remember.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;retrieval&quot;&gt;Retrieval&lt;&#x2F;h2&gt;
&lt;p&gt;Engaging in repeated retrieval of concepts from memory can solidify your
understanding.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of re-reading the same material, put your books aside and try the
following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Express the concepts in your own words and &lt;strong&gt;practice recalling&lt;&#x2F;strong&gt; them without
looking at your reference material.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Summarize&lt;&#x2F;strong&gt; points as questions. &lt;strong&gt;Answer&lt;&#x2F;strong&gt; them.&lt;&#x2F;li&gt;
&lt;li&gt;Connect the material to visual references that may aid in retention.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Repeated retrieval helps ingrain knowledge, making it second nature.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;interleaving&quot;&gt;Interleaving&lt;&#x2F;h2&gt;
&lt;p&gt;Alternating between related learning tasks during a study session can boost
learning effectiveness.&lt;&#x2F;p&gt;
&lt;p&gt;While massed practice might seem efficient initially, interleaving topics
enhances &lt;strong&gt;long-term&lt;&#x2F;strong&gt; retention and understanding. This approach also hones
your ability to apply principles based on your experiences.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;varied-practice&quot;&gt;Varied Practice&lt;&#x2F;h2&gt;
&lt;p&gt;Engaging in the activity across scenarios and difficulty levels can improve
learning outcomes.&lt;&#x2F;p&gt;
&lt;p&gt;You might believe that practicing extensively can seem effective. Although it
may aid in short-term retention, mixing subjects significantly boosts lasting
solid learning. This approach can also enhance your ability to analyze problems
and discern which principles to draw upon from your experiences.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;elaboration&quot;&gt;Elaboration&lt;&#x2F;h2&gt;
&lt;p&gt;Try elaborating on concepts by providing explanations and multiple illustrations
to understand a subject. Breaking down concepts you are studying into
&lt;strong&gt;analogies&lt;&#x2F;strong&gt;, &lt;strong&gt;components&lt;&#x2F;strong&gt;, or fundamental &lt;strong&gt;principles&lt;&#x2F;strong&gt; can facilitate
comprehension.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reflection&quot;&gt;Reflection&lt;&#x2F;h2&gt;
&lt;p&gt;Reflecting on information and questioning your understanding is essential for
building knowledge. Regularly ask yourself:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What insights have you gained?&lt;&#x2F;li&gt;
&lt;li&gt;Have you formed any opinions based on your learnings?&lt;&#x2F;li&gt;
&lt;li&gt;How confident are you in explaining the topic to others?&lt;&#x2F;li&gt;
&lt;li&gt;In what ways are you applying or considering applying this knowledge?&lt;&#x2F;li&gt;
&lt;li&gt;Are there any areas where further study may be needed?&lt;&#x2F;li&gt;
&lt;li&gt;Can this knowledge be applied to aspects of your life?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;spaced-repetition&quot;&gt;Spaced Repetition&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Spaced_repetition&quot;&gt;Spaced Repetition&lt;&#x2F;a&gt; is so
important in learning and retaining knowledge that when you master it well, it
fundamentally changes the way you approach the process of learning itself.&lt;&#x2F;p&gt;
&lt;p&gt;By leveraging the cognitive science principles underlying spaced repetition, you
can enhance memory retention, decrease the time needed to learn new information
and improve your ability to recall that information over more extended periods.&lt;&#x2F;p&gt;
&lt;p&gt;If that’s the only thing you master, you may not need anything else.&lt;&#x2F;p&gt;
&lt;p&gt;This method works best when you space out your review sessions and mix them with
learning about topics.&lt;&#x2F;p&gt;
&lt;p&gt;Research shows that revisiting information over spaced intervals helps reinforce
memory retention through active recall. Recalling information repeatedly aids in
solidifying memory formation in the brain and enhances the knowledge retention
pathways.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Each tactic discussed here tackles a facet of the processes involved in learning
and memory, ranging from boosting retention through active recall to honing
problem-solving abilities by applying knowledge in diverse scenarios.&lt;&#x2F;p&gt;
&lt;p&gt;By combining these tactics, you can significantly enhance your learning
efficiency, making it easier to absorb information and embed it deeply.&lt;&#x2F;p&gt;
&lt;p&gt;The key point is evident: using diverse learning methods and actively
interacting with material results in knowledge. But as always, the devil is in
the details.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that mastering these tactics is just as &lt;strong&gt;crucial&lt;&#x2F;strong&gt; as reaching your
goals.&lt;&#x2F;p&gt;
&lt;p&gt;Embracing these strategies will transform how you learn and approach learning
itself, laying the groundwork for continuous progress and growth across all
aspects of life.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Master Your Mind: Unleash the Power of Learning&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Psst... You Don&#x27;t Have to Use Medium: Discover the Freedom of Owning Your Content</title>
        <published>2024-03-06T00:00:00+00:00</published>
        <updated>2024-03-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/psst-you-dont-have-to-use-medium/"/>
        <id>https://zerotohero.dev/top-of-mind/psst-you-dont-have-to-use-medium/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/psst-you-dont-have-to-use-medium/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;freedom.png&quot; alt=&quot;Psst… You Don’t Have to Use Medium: Discover the Freedom of Owning Your Content&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wait-but-why&quot;&gt;Wait… But Why?&lt;&#x2F;h2&gt;
&lt;p&gt;Medium has risen in popularity among writers, bloggers, and readers due to its
user interface and community-centered features that have attracted a large
following.&lt;&#x2F;p&gt;
&lt;p&gt;Despite Medium’s appeal and ubiquity, the paywall approach and the authority it
wields over content is worrisome at best. I cannot emphasize this enough: &lt;strong&gt;You
must own your content as a creator&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dear-medium-for-once-have-a-spine-will-you&quot;&gt;Dear Medium, for once, have a spine—will you?&lt;&#x2F;h2&gt;
&lt;p&gt;Medium’s practice of blocking nonsubscribers from accessing content is
dishonest: While it puts a paywall around the content, it fully enables search
engines to index it.&lt;&#x2F;p&gt;
&lt;p&gt;Let me make it clear: Had Medium made its entire content subscriber-only without
intentionally leaking it to the search engines, I would have been one of the
first to subscribe and support it.&lt;&#x2F;p&gt;
&lt;p&gt;While it aims to monetize content and support writers financially, it also
&lt;strong&gt;creates obstacles to information accessibility&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This paywall can discourage readers and restrict the audience to emerging or
specialized bloggers. Additionally, Medium’s method of displaying paywalled
material on search engines but preventing access without a subscription is
&lt;strong&gt;deceptive&lt;&#x2F;strong&gt;, leading to nothing but frustration among readers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-predicament-of-platform-authority&quot;&gt;The Predicament of Platform Authority&lt;&#x2F;h2&gt;
&lt;p&gt;A major issue with Medium revolves around its control over users’ content.&lt;&#x2F;p&gt;
&lt;p&gt;You are a &lt;strong&gt;content creator&lt;&#x2F;strong&gt;. You should not give a flying care about “the
algorithm.”—Your writing shall not be influenced by the platform’s evolving
rules and algorithms.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Your content is yours&lt;&#x2F;strong&gt;; own it.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You are not and shall not be a puppet to make your content more engaging. Your
voice should not be a slave to the algorithm. Don’t lose yourself.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There’s also the concern that Medium could change its business&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-significance-of-ownership-and-control&quot;&gt;The Significance of Ownership and Control&lt;&#x2F;h2&gt;
&lt;p&gt;Values like &lt;strong&gt;ownership&lt;&#x2F;strong&gt;, &lt;strong&gt;transparency&lt;&#x2F;strong&gt;, and &lt;strong&gt;control&lt;&#x2F;strong&gt; are important not
only in your work but also in how you share knowledge and ideas (&lt;em&gt;including
through blogging&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Ownership of your content allows you to &lt;strong&gt;choose&lt;&#x2F;strong&gt; how it is displayed and
shared: If you want to monetize your content, it’s on your own terms; if you
don’t, no external party can enforce it.&lt;&#x2F;p&gt;
&lt;p&gt;That’s why I’m sharing my thoughts on this blog,
using &lt;a href=&quot;https:&#x2F;&#x2F;ghost.org&#x2F;&quot;&gt;&lt;strong&gt;Ghost&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; as a platform. If you don’t prefer to
use Ghost, there are many choices you can pick from. But please, pretty please,
if you value your content, don’t post it to a place you don’t own.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update: 2025-05-21&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I started using &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt; for this blog instead
of Ghost, but the main premise of owning your content remains the same.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;why-i-use-ghost&quot;&gt;Why I Use Ghost?&lt;&#x2F;h2&gt;
&lt;p&gt;As I mentioned, the kind of platform you choose is of little importance. Still,
this is a good point to segue into why I like &lt;strong&gt;Ghost&lt;&#x2F;strong&gt; as a blogging platform.&lt;&#x2F;p&gt;
&lt;p&gt;Ghost is a notable &lt;strong&gt;open-source&lt;&#x2F;strong&gt; blogging platform. I like its &lt;strong&gt;speed&lt;&#x2F;strong&gt; and
&lt;strong&gt;simplicity&lt;&#x2F;strong&gt;. Although I don’t care too much about SEO, it’s good to know that
Ghost also offers robust SEO capabilities built-in.&lt;&#x2F;p&gt;
&lt;p&gt;As a Ghost user, I have full ownership of my content and the freedom to
personalize the site’s appearance and functionality. I can use an existing
theme, purchase a theme, and tweak it, or, if I so want, build my own Ghost
theme with its unique functionality. Literally, the Sky is the limit there!&lt;&#x2F;p&gt;
&lt;p&gt;If I want, Ghost offers features like memberships and subscriptions built into
the platform, allowing me to monetize my content directly without anyone in the
middle.&lt;&#x2F;p&gt;
&lt;p&gt;In today’s world, the ability to innovate, customize, and communicate freely is
not a choice but a &lt;strong&gt;fundamental principle&lt;&#x2F;strong&gt; that should be honored.&lt;&#x2F;p&gt;
&lt;p&gt;And, I don’t even have to host Ghost. Because I value my time, I
use &lt;a href=&quot;https:&#x2F;&#x2F;ghost.org&#x2F;pricing&#x2F;&quot;&gt;Ghost’s managed solution&lt;&#x2F;a&gt;. This eases the
responsibilities of server maintenance, updates, and security management. It’s a
perfect option because I want to prioritize content creation to infrastructure
management.&lt;&#x2F;p&gt;
&lt;p&gt;Yet, despite the managed nature, I have full ownership. I can even streamline my
backups through Ghost API. I can back up my entire blog periodically to a
storage solution of my preference, which will give me further peace of mind.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this new world of AI-generated copycats, high-quality content reigns supreme,
and having the ability to manage and possess your own voice is more important
than ever.&lt;&#x2F;p&gt;
&lt;p&gt;While platforms such as Medium have made it easier for writers to reach
audiences they also come with restrictions that can hinder creativity and
restrict engagement with readers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Taking ownership of your content goes beyond independence&lt;&#x2F;strong&gt;—it’s about
safeguarding your heritage and ensuring that your voice remains genuine and
unfiltered.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Self-publishing&lt;&#x2F;strong&gt; is about crafting a space that truly mirrors your vision and
evolves alongside your audience free from the changing rules and priorities of
platforms.&lt;&#x2F;p&gt;
&lt;p&gt;Self-publishing is an investment in &lt;strong&gt;building your brand&lt;&#x2F;strong&gt; and &lt;strong&gt;advancing
professionally&lt;&#x2F;strong&gt;. It gives you the freedom to &lt;strong&gt;experiment&lt;&#x2F;strong&gt;, &lt;strong&gt;innovate&lt;&#x2F;strong&gt;, and
&lt;strong&gt;customize&lt;&#x2F;strong&gt; your content strategy to suit the needs and preferences of your
audience—a &lt;strong&gt;priceless&lt;&#x2F;strong&gt; experience.&lt;&#x2F;p&gt;
&lt;p&gt;With tools and platforms tailored for creators, the barriers to getting started
have never been lower. You don’t have to use Ghost; use
something, &lt;a href=&quot;https:&#x2F;&#x2F;jekyllrb.com&#x2F;&quot;&gt;Jekyll&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;wordpress.org&#x2F;&quot;&gt;WordPress&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.drupal.org&#x2F;&quot;&gt;Drupal&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;www.gatsbyjs.com&#x2F;&quot;&gt;Gatsby&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;nextjs.org&#x2F;&quot;&gt;Next&lt;&#x2F;a&gt;…
Your options are countless. I’m sure you can find one that fits your unique
needs.&lt;&#x2F;p&gt;
&lt;p&gt;Owning your platform allows you to focus on what counts;
creating &lt;strong&gt;valuable&lt;&#x2F;strong&gt; and &lt;strong&gt;meaningful&lt;&#x2F;strong&gt; content.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Own your content&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Psst… You Don’t Have to Use Medium&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zero to Prod in Half an Hour: Part 7: A Mild Introduction to Middlewares</title>
        <published>2024-03-05T00:00:00+00:00</published>
        <updated>2024-03-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/a-mild-introduction-to-middlewares/"/>
        <id>https://zerotohero.dev/zero-to-prod/a-mild-introduction-to-middlewares/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/a-mild-introduction-to-middlewares/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;bob.png&quot; alt=&quot;Let us put a happy little middleware here.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Let us put a happy little middleware here.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This section will introduce a middleware layer to our project and we’ll write a
sample middleware to see it in action.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;-HbmAEjav4o?si=ESiOocPf5j9NiAwt&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Zero to Prod in Half an Hour: Part 7: 
    A Mild Introduction to Middlewares&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Zero to Prod in Half an Hour: Part 7: 
    A Mild Introduction to Middlewares&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Part 7: A Mild Introduction to Middlewares&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along
with related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Glossary&#x2F;Middleware&quot;&gt;What is a Middleware&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;curl.se&#x2F;&quot;&gt;cURL&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read The Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;zero-to-prod-in-30&#x2F;zero-to-prod-in-30.zip&quot;&gt;Download the source code (&lt;em&gt;114kb zip archive&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Until the next lecture… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Volkan Uses</title>
        <published>2024-03-04T00:00:00+00:00</published>
        <updated>2024-03-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/about/volkan-uses/"/>
        <id>https://zerotohero.dev/about/volkan-uses/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/about/volkan-uses/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;trinkets.png&quot; alt=&quot;Tools and trinkets.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Tools and trinkets.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This is a list of tools, gadgets, software, and hardware I currently use, have
liked, and find worth mentioning.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I am not affiliated with any of the products or services mentioned here.
I just share them because I like them.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;personal&quot;&gt;Personal&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vadidekigeyik.com&#x2F;&quot;&gt;Vadideki Geyik&lt;&#x2F;a&gt;: Hands down, the best Turkish
tech podcast.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;&quot;&gt;zerotohero.dev&lt;&#x2F;a&gt;: My blog (&lt;em&gt;that you are reading right now&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;vadidekivolkan&quot;&gt;My Twitter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;v0lkan&quot;&gt;My GitHub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;My Twitch&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;gadgets-and-gizmos&quot;&gt;Gadgets and Gizmos&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.lttstore.com&#x2F;products&#x2F;screwdriver&quot;&gt;LTT Screwdriver&lt;&#x2F;a&gt;: A very
high-quality ratcheting screwdriver.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B000WGD13U&quot;&gt;Fisher Space Pen - The Original Astronaut
Pen&lt;&#x2F;a&gt;: The one that NASA spent
“&lt;em&gt;millions&lt;&#x2F;em&gt;” to design.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B07Q2GQW9D&quot;&gt;KEPEAK Military Tactical Pen&lt;&#x2F;a&gt;:
You can write on paper and break thick glasses simultaneously.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.raspberrypi.org&#x2F;&quot;&gt;Raspberry Pi&lt;&#x2F;a&gt;: I use this to create small
projects.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tessel.io&#x2F;&quot;&gt;Tessel&lt;&#x2F;a&gt;: Another IoT board that I used to use.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B0050R67U0&quot;&gt;MagicFiber Microfiber Cleaning Cloths,
13 PACK&lt;&#x2F;a&gt;: I have glasses; they
need cleaning. MagicFiber is the best.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B00JJG0YMG&quot;&gt;MagicFiber Extra Large Microfiber Cleaning
Cloth&lt;&#x2F;a&gt;: They said:
“&lt;em&gt;bigger is better&lt;&#x2F;em&gt;.”&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;ZEISS-Lens-Cleaning-Spray-2x120ml&#x2F;dp&#x2F;B07339STBJ&quot;&gt;Zeiss Lens Cleaning
Spray&lt;&#x2F;a&gt;:
I use the best when my vision is at stake.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.elgato.com&#x2F;us&#x2F;en&#x2F;p&#x2F;stream-deck-mk2-black&quot;&gt;Elgato StreamDeck&lt;&#x2F;a&gt;:
One of the best investments I’ve made. If you stream regularly, you
&lt;strong&gt;must&lt;&#x2F;strong&gt; have this.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gancube.com&#x2F;&quot;&gt;GAN Cube&lt;&#x2F;a&gt;: It’s the best Rubik’s Cube out there.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;computer-and-peripherals&quot;&gt;Computer and Peripherals&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Commodore_64&quot;&gt;Commodore 64&lt;&#x2F;a&gt;: My first computer.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.apple.com&#x2F;mac-studio&#x2F;&quot;&gt;Mac Studio&lt;&#x2F;a&gt;: I have a beefy Mac to do
my work, content creation, gaming, and streaming.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.apple.com&#x2F;mac-mini&#x2F;&quot;&gt;Mac Mini Intel 2018&lt;&#x2F;a&gt;: I use this as a local
build and test environment, and experimental server.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.intel.com&#x2F;content&#x2F;www&#x2F;us&#x2F;en&#x2F;products&#x2F;boards-kits&#x2F;nuc.html&quot;&gt;Intel Nuc&lt;&#x2F;a&gt;:
I use this for other random experimentation. It has &lt;strong&gt;Ubuntu&lt;&#x2F;strong&gt; installed.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.logitech.com&#x2F;en-us&#x2F;products&#x2F;mice&#x2F;mx-master-3s.910-006557.html&quot;&gt;Logitech MX Master
3S&lt;&#x2F;a&gt;:
The fastest scroll ever; you’ll never realize how important scrolling is before
you use this mouse. It’s very ergonomic too.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.logitech.com&#x2F;en-us&#x2F;products&#x2F;keyboards&#x2F;mx-mechanical.html&quot;&gt;Logitech MX
Keys&lt;&#x2F;a&gt;:
I use this keyboard mostly. It is silent, with a small form factor, and like
&lt;strong&gt;MX Master 3&lt;&#x2F;strong&gt;, it can connect to up to 3 devices at the same time, which
is very useful.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.daskeyboard.com&#x2F;&quot;&gt;Das Keyboard 4 Professional&lt;&#x2F;a&gt;: My &lt;strong&gt;default&lt;&#x2F;strong&gt;
keyboard choice. I use this keyboard when I need to type a lot. It has Chery
MX Blue keys, making it very clicky and loud, but it’s very satisfying.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.caldigit.com&#x2F;thunderbolt-station-4&#x2F;&quot;&gt;CalDigit Thunderbolt Station&lt;&#x2F;a&gt;:
Adds 18 more ports to your machine for extreme connectivity.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B08L5VQJ2G&quot;&gt;InnoView Portable Monitor,
15.6 Inch&lt;&#x2F;a&gt;: I use this as a
secondary monitor for streams as a dedicated 1080p source.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.apple.com&#x2F;ipad-pro&#x2F;&quot;&gt;Apple iPad Pro 4th Gen (&lt;em&gt;11 inch&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;: I use
it for many things, including monitoring the alternate destinations when
I stream to multiple platforms.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B00BIFNTMC&quot;&gt;Anker 2.4G Wireless Vertical Ergonomic Optical
Mouse&lt;&#x2F;a&gt;: It’s very ergonomic;
it’s a fraction of the price of &lt;strong&gt;MX Master 3&lt;&#x2F;strong&gt;, and it’s amazingly precise
and comfortable. If you need an no-fluff ergonomic mouse, this is the one.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;home-office-office&quot;&gt;&lt;strong&gt;Home Office &#x2F; Office&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mobilepixels.us&#x2F;products&#x2F;trio&quot;&gt;MP Trio Max&lt;&#x2F;a&gt;: This gives two
additional monitors to my laptop. It’s a great tool when you need more screen
real estate. And it’s very portable too, which makes it a great fit for office
and travel.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;dp&#x2F;B09SHLNX1J&quot;&gt;Crank Adjustable Height Rolling Standing
Desk&lt;&#x2F;a&gt;: I use this as my desk. It’s very
sturdy, and it’s easy to adjust the height.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B09CZFK33K&quot;&gt;CyberPower Intelligent LCD UPS
System&lt;&#x2F;a&gt;: I use this to protect
my computer and other devices from power outages.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B08Y5ZQZ7J&quot;&gt;Power Strip Tower and Surge
Protector&lt;&#x2F;a&gt;: I use this to power
my devices.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B08L5VQJ2G&quot;&gt;TBMax Cat 6 Ethernet Cable 50 ft - High-Speed Flat Cat6 Computer
LAN Wire&lt;&#x2F;a&gt;: I use this to connect
my computer to the router. I don’t believe in Wi-Fi.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B0000VYJRY&quot;&gt;Keyspan by Tripp Lite PR-PRO3 Presentation Remote Pro Wireless w
Laser&lt;&#x2F;a&gt;: I have a cat.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B000OOYECC&quot;&gt;Rain Design 10032 mStand Laptop Stand,
Silver&lt;&#x2F;a&gt;: I use this to raise my
laptop to eye level. You’ll never know when you need it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B08L5VQJ2G&quot;&gt;Kogonee Wooden Digital Alarm
Clock&lt;&#x2F;a&gt;: You’ll never know you
need this before you use it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;storage&quot;&gt;Storage&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B00LW3OYK8&quot;&gt;Transcend 256GB Thunderbolt Solid State Drive StoreJet 500 for
Mac&lt;&#x2F;a&gt;: I use this when I need a
temporary high-speed SSD drive.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B07X41PWTY&quot;&gt;WD 12TB Elements Desktop External Hard
Drive&lt;&#x2F;a&gt;: I use this to store
raw production and post production assets; you cannot imagine how much space
you need to create quality audiovisual content.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;disk-management&quot;&gt;Disk Management&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;daisydiskapp.com&#x2F;&quot;&gt;Daisy Disk&lt;&#x2F;a&gt;: I use this to find out what’s taking
up space on my disk.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cleverfiles.com&#x2F;&quot;&gt;Disk Drill&lt;&#x2F;a&gt;: I use this to recover deleted
files. I use &lt;strong&gt;Backblaze&lt;&#x2F;strong&gt;, but in rare cases, I might not have backed up the
file, where Disk Drill comes to the rescue.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;window-management&quot;&gt;Window Management&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;magnet.crowdcafe.com&#x2F;&quot;&gt;Magnet&lt;&#x2F;a&gt;: I use this to manage my windows.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lightpillar.com&#x2F;windowtidy&#x2F;&quot;&gt;Window Tidy&lt;&#x2F;a&gt;: I use this along with
Magnet.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;office-applications&quot;&gt;Office Applications&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;microsoft-365&quot;&gt;Microsoft Office 365&lt;&#x2F;a&gt;: I use
this to create documents, spreadsheets, and presentations.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;workspace.google.com&#x2F;&quot;&gt;Google Workspace&lt;&#x2F;a&gt;: I mainly use this to host
emails for my various domains.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.grammarly.com&#x2F;&quot;&gt;Grammarly&lt;&#x2F;a&gt;: I use this to check my grammar and
spelling. It’s a lifesaver!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;miro.com&#x2F;&quot;&gt;Miro&lt;&#x2F;a&gt;: I use this to create diagrams and mind maps.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;apps.apple.com&#x2F;us&#x2F;app&#x2F;world-clock-pro&#x2F;id980670056&quot;&gt;World Clock Pro&lt;&#x2F;a&gt;:
I use this to keep track of time zones. It’s simple, super useful, and does
one thing well. I love it!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.edrawsoft.com&#x2F;&quot;&gt;Wondershare Edraw Max&lt;&#x2F;a&gt;: I use this to create
diagrams, mind maps, and technical drawings.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.omnigroup.com&#x2F;omnigraffle&quot;&gt;Omnigraffle&lt;&#x2F;a&gt;: I use this as an
alternative to &lt;strong&gt;Edraw Max&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.thunderbird.net&#x2F;&quot;&gt;Mozilla Thunderbird&lt;&#x2F;a&gt;: I use this to manage my
emails when I am fed up with Microsoft Outlook.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;browsers&quot;&gt;Browsers&lt;&#x2F;h2&gt;
&lt;p&gt;I use several browsers; my main browser is &lt;strong&gt;Safari&lt;&#x2F;strong&gt;. It’s memory and
battery-efficient, the default browser on macOS. People complain about its
extension support, but I don’t use extensions much, so it’s not a problem.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a list of browsers that I use occasionally:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.apple.com&#x2F;safari&quot;&gt;Safari&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vivaldi.com&#x2F;&quot;&gt;Vivaldi&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.opera.com&#x2F;&quot;&gt;Opera&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.google.com&#x2F;chrome&quot;&gt;Chrome&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mozilla.org&#x2F;en-US&#x2F;firefox&#x2F;new&quot;&gt;Firefox&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;edge&quot;&gt;Edge&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;brave.com&#x2F;&quot;&gt;Brave&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lynx.browser.org&#x2F;&quot;&gt;Lynx&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.cortland.edu&#x2F;flteach&#x2F;methods&#x2F;obj1&#x2F;gopher.html&quot;&gt;Gopher&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;programming-languages&quot;&gt;Programming Languages&lt;&#x2F;h2&gt;
&lt;p&gt;Here are some of the languages I use, have used, and liked, in no particular
order:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&quot;&gt;JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nodejs.org&#x2F;&quot;&gt;Node.js&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.typescriptlang.org&#x2F;&quot;&gt;TypeScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;C_(programming_language)&quot;&gt;C&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;C%2B%2B&quot;&gt;C++&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.erlang.org&#x2F;&quot;&gt;Erlang&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;&quot;&gt;Haskell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;&quot;&gt;Go&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;CSS&quot;&gt;CSS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sass-lang.com&#x2F;&quot;&gt;Sass&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.java.com&#x2F;&quot;&gt;Java&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;projects&#x2F;spring-boot&quot;&gt;Java Spring&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dotnet.microsoft.com&#x2F;&quot;&gt;DotNet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;csharp&#x2F;&quot;&gt;C#&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;visual-basic&#x2F;&quot;&gt;Visual Basic&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;BASIC&quot;&gt;Basic&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Active_Server_Pages&quot;&gt;ASP&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;asp.net&quot;&gt;ASP.Net&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;yaml.org&#x2F;&quot;&gt;YAML&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;XML&quot;&gt;XML&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.json.org&#x2F;&quot;&gt;JSON&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;YANG&quot;&gt;YANG&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;NETCONF&quot;&gt;NETCONF&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;SQL&quot;&gt;SQL&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;handlebarsjs.com&#x2F;&quot;&gt;Handlebars&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;&quot;&gt;Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.ruby-lang.org&#x2F;en&#x2F;&quot;&gt;Ruby&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;code-editors-and-ides&quot;&gt;Code Editors and IDEs&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sublimetext.com&#x2F;&quot;&gt;Sublime Text&lt;&#x2F;a&gt;: I use this when I need a
lightweight code editor.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.vim.org&#x2F;&quot;&gt;Vim&lt;&#x2F;a&gt;: This is the editor that I use in the terminal.
I use &lt;strong&gt;Vim emulation&lt;&#x2F;strong&gt; in any editor that supports it, too.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;&quot;&gt;Visual Studio Code&lt;&#x2F;a&gt;: I use this as an
alternative code editor.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;idea&quot;&gt;IntelliJ IDEA&lt;&#x2F;a&gt;: I use this as my main IDE,
along with other &lt;strong&gt;JetBrains&lt;&#x2F;strong&gt; IDEs.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;webstorm&quot;&gt;WebStorm&lt;&#x2F;a&gt;: The best IDE to do web-related
development.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;go&quot;&gt;GoLand&lt;&#x2F;a&gt;: The best IDE to do Go development.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;pycharm&quot;&gt;PyCharm&lt;&#x2F;a&gt;: The best IDE to do Python
development.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;ruby&quot;&gt;RubyMine&lt;&#x2F;a&gt;: The best IDE to do Ruby development.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;clion&quot;&gt;CLion&lt;&#x2F;a&gt;: The best IDE to do C&#x2F;C++ development.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;rust&quot;&gt;RustRover&lt;&#x2F;a&gt;: The best IDE to do Rust development.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zedapp.org&#x2F;&quot;&gt;Zed&lt;&#x2F;a&gt;: Honestly, I still prefer &lt;strong&gt;Sublime&lt;&#x2F;strong&gt;; it is a neat
app, but &lt;strong&gt;Sublime&lt;&#x2F;strong&gt; is still the app that I launch by reflex when I want to
quickly note something down.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;embedded-code-editors&quot;&gt;Embedded Code Editors&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;codemirror.net&#x2F;&quot;&gt;CodeMirror&lt;&#x2F;a&gt;: I use this when I need a code editor in
my web apps.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;microsoft.github.io&#x2F;monaco-editor&quot;&gt;Monaco&lt;&#x2F;a&gt;: It’s another code editor
that I use in my web apps.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;codepen.io&#x2F;&quot;&gt;Codepen&lt;&#x2F;a&gt;: I use this when I need to share a code
snippet with someone.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;repl.it&quot;&gt;Repl.it&lt;&#x2F;a&gt;: I use this when I need to share a code snippet
along with a running environment with someone.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;&quot;&gt;GitHub Gists&lt;&#x2F;a&gt;: I use this when I need to share a
code snippet with someone, but I don’t want to create a repository for it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;observablehq.com&#x2F;&quot;&gt;ObservableHQ&lt;&#x2F;a&gt;: I use this when I need to share a
code snippet with someone, but I want to add some explanation to it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;terminal-emulators&quot;&gt;Terminal Emulators&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Swordfish90&#x2F;cool-retro-term&quot;&gt;Cool Retro Terminal&lt;&#x2F;a&gt;: It’s
just to have fun. I typically use &lt;strong&gt;iTerm&lt;&#x2F;strong&gt; for everything terminal-related.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iterm2.com&#x2F;&quot;&gt;iTerm2&lt;&#x2F;a&gt;: I use this as my terminal emulator.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hyper.is&#x2F;&quot;&gt;Hyper&lt;&#x2F;a&gt;: A configurable, JavaScript-based terminal emulator.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alacritty&#x2F;alacritty&quot;&gt;Alacritty&lt;&#x2F;a&gt;: A cross-platform,
GPU-accelerated terminal emulator. &lt;strong&gt;Very&lt;&#x2F;strong&gt; minimalistic. It’s so minimalistic
that you’ll have to know &lt;a href=&quot;https:&#x2F;&#x2F;tmux.z2h.dev&#x2F;&quot;&gt;tmux&lt;&#x2F;a&gt; to be productive with it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tunneling&quot;&gt;Tunneling&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ngrok.com&#x2F;&quot;&gt;Ngrok&lt;&#x2F;a&gt;: I use this to expose my local services to the Internet.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;desktop-virtualization&quot;&gt;Desktop Virtualization&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.parallels.com&#x2F;&quot;&gt;Parallels Desktop&lt;&#x2F;a&gt;: I use this to run Windows and
Linux virtual machines on my Mac. It’s the best desktop virtualization tool
that you can run on a Mac.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;payment-gateways&quot;&gt;Payment Gateways&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stripe.com&#x2F;&quot;&gt;Stripe&lt;&#x2F;a&gt;: I use this to process payments. It’s
developer-friendly, with great API documentation and support.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.paypal.com&#x2F;&quot;&gt;Paypal&lt;&#x2F;a&gt;: I use this as an alternative to
&lt;strong&gt;Stripe&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gumroad.com&#x2F;&quot;&gt;Gumroad&lt;&#x2F;a&gt;: I use this to sell digital products.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;large-language-models&quot;&gt;Large Language Models&lt;&#x2F;h2&gt;
&lt;p&gt;I have “&lt;em&gt;pro&lt;&#x2F;em&gt;” subscriptions to all of these tools. I use them for all kinds
of research and content creation.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chat.openai.com&#x2F;&quot;&gt;ChatGPT&lt;&#x2F;a&gt;: It generates text, images, and answers
questions.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;perplexity.ai&quot;&gt;Perplexity&lt;&#x2F;a&gt;: When you have Perplexity, you don’t need
Google.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;claude.ai&#x2F;&quot;&gt;Claude&lt;&#x2F;a&gt;: I use Claude in a similar way to ChatGPT.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;generative-art&quot;&gt;Generative Art&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;midjourney.com&#x2F;&quot;&gt;Midjourney&lt;&#x2F;a&gt;: I use this to create generative art.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nero.ai&#x2F;&quot;&gt;Nero AI&lt;&#x2F;a&gt;: I use this to upscale and modify my images.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;design-tools&quot;&gt;Design Tools&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;xscopeapp.com&#x2F;&quot;&gt;xScope&lt;&#x2F;a&gt;: I use this to measure things on my screen.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;imageoptim.com&#x2F;mac&quot;&gt;ImageOptim&lt;&#x2F;a&gt;: I use this to optimize images for
the web.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;paletton.com&#x2F;&quot;&gt;Paletton&lt;&#x2F;a&gt;: I use this to find color palettes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sketch.com&#x2F;&quot;&gt;Sketch&lt;&#x2F;a&gt;: I use this to create designs, I am
stubbornly &lt;strong&gt;not&lt;&#x2F;strong&gt; using Figma as my main design tool.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.figma.com&#x2F;&quot;&gt;Figma&lt;&#x2F;a&gt;: This is an alternative design tool that I
play with.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;get.adobe.com&#x2F;reader&#x2F;&quot;&gt;Adobe Acrobat Reader&lt;&#x2F;a&gt;: I use this to read PDFs.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fonts.adobe.com&#x2F;&quot;&gt;Adobe Fonts&lt;&#x2F;a&gt;: I use this to find fonts and use
them in my web apps.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;fonts-and-themes&quot;&gt;Fonts and Themes&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.monolisa.dev&#x2F;&quot;&gt;Mono Lisa&lt;&#x2F;a&gt;: I use this as my main font.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fsd.it&#x2F;shop&#x2F;fonts&#x2F;pragmatapro&#x2F;&quot;&gt;PragmataPro Mono&lt;&#x2F;a&gt;: I use this
when I need to compare many things at once and I need a font with a huge
x-height that works even at the smallest sizes. It is an acquired taste, and
it requires some getting-used-to.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.typography.com&#x2F;fonts&#x2F;operator&#x2F;styles&#x2F;&quot;&gt;Operator Mono&lt;&#x2F;a&gt;: Another
decent (&lt;em&gt;and overpriced&lt;&#x2F;em&gt;) monotype font that I like.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.monokai.pro&#x2F;&quot;&gt;Monokai Pro&lt;&#x2F;a&gt;: I use this as my main theme.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;draculatheme.com&#x2F;pro&quot;&gt;Dracula Pro&lt;&#x2F;a&gt;: I use this as an alternative theme.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;morhetz&#x2F;gruvbox&quot;&gt;Gruvbox&lt;&#x2F;a&gt;: I use this when I need a change
but don’t want to be so drastic. It works really well when I do written content
such as editing a lot of markdown files.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;plugins.jetbrains.com&#x2F;plugin&#x2F;12102-cyan-light-theme&quot;&gt;Cyan Light&lt;&#x2F;a&gt;:
I don’t always work in a dark cave. &lt;strong&gt;Cyan Light&lt;&#x2F;strong&gt; is my preferred theme when
there is a lot of ambient light that make a dark color scheme impractical.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;plugins.jetbrains.com&#x2F;plugin&#x2F;12103-gray-theme&quot;&gt;Gray&lt;&#x2F;a&gt;: This is my
alternate light theme choice.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;music&quot;&gt;Music&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;music.youtube.com&#x2F;&quot;&gt;YouTube Music&lt;&#x2F;a&gt;: This is my main music app.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.spotify.com&#x2F;&quot;&gt;Spotify&lt;&#x2F;a&gt;: I use this to listen to music, and
podcasts too.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.avid.com&#x2F;sibelius&quot;&gt;Avid Sibelius&lt;&#x2F;a&gt;: The best music notation
software in existence.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arturia.com&#x2F;products&#x2F;analog-classics&#x2F;piano-v&#x2F;overview&quot;&gt;Arturia Piano
V3&lt;&#x2F;a&gt;: I use
this to use different piano flavors when I practice.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;video-storage&quot;&gt;Video Storage&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;&quot;&gt;YouTube&lt;&#x2F;a&gt;: I use this to save screencasts that
I’ve created.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;&quot;&gt;Vimeo&lt;&#x2F;a&gt;: I use this to save and share videos too.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&quot;&gt;Twitch&lt;&#x2F;a&gt;: Pro tip: If you highlight your entire stream,
you can save it indefinitely on Twitch. Otherwise the stream recording is
deleted after 60 days.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;video-processing&quot;&gt;Video Processing&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.telestream.net&#x2F;screenflow&#x2F;&quot;&gt;ScreenFlow&lt;&#x2F;a&gt;: I use this to record
my screen.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ffmpeg.org&#x2F;&quot;&gt;ffmpeg&lt;&#x2F;a&gt;: A complete, cross-platform solution to record,
convert, and stream audio and video.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;audio-processing&quot;&gt;Audio Processing&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.adobe.com&#x2F;products&#x2F;audition.html&quot;&gt;Adobe Audition&lt;&#x2F;a&gt;: I use this
to edit audio files.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;airfoil&#x2F;mac&#x2F;&quot;&gt;Airfoil&lt;&#x2F;a&gt;: I use this to stream audio
from my Mac to other devices.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.audacityteam.org&#x2F;&quot;&gt;Audacity&lt;&#x2F;a&gt;: I typically use this connected to
my digital piano to record my music. It can also edit audio files.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.izotope.com&#x2F;en&#x2F;products&#x2F;rx.html&quot;&gt;Izotope RX 10&lt;&#x2F;a&gt;: I use this to
clean up my audio files. It is one of the best post-production tools out there.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.izotope.com&#x2F;en&#x2F;products&#x2F;murf.html&quot;&gt;Murf&lt;&#x2F;a&gt;: I use this to create
AI-generated Audio transcripts for the tutorials that I create. It’s a great
time-saver.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;audio-gear&quot;&gt;Audio Gear&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B00NV9LSGW&quot;&gt;Harman Kardon SoundSticks Wireless Bluetooth Speaker
System&lt;&#x2F;a&gt;: I use this to listen
to music. It’s a great speaker system, and it looks amazing too.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B09CZFK33K&#x2F;&quot;&gt;Mackie CR StealthBar Desktop PC
Soundbar&lt;&#x2F;a&gt;: Much reasonably-priced
compared to competitors with great audio quality.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B0B6GHW1SX&quot;&gt;Sennheiser Consumer Audio Momentum 4 Wireless
Headphones&lt;&#x2F;a&gt;: I use this to listen
to music when I am not at my desk, I also use it during live streams because
Airpods have their own mind and pair with random devices when you least expect
it, which is not good when you are streaming. In addition it’s perfect for
&lt;strong&gt;Office&lt;&#x2F;strong&gt; and &lt;strong&gt;Home Office&lt;&#x2F;strong&gt; when you want to get into the zone.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B07ZPC9QD4&quot;&gt;Apple AirPods Pro&lt;&#x2F;a&gt;: I use this
during meetings and conferences. Because of its small form factor, it does not
look as goofy as other over-the-ear headphones.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;streaming-gear&quot;&gt;Streaming Gear&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B00HVLUSGM&quot;&gt;Audio-Technica ATH-M50xBL Professional Studio Monitor
Headphones&lt;&#x2F;a&gt;: Great audio quality,
flat frequency response. Very comfy on the ears.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.shure.com&#x2F;en-US&#x2F;products&#x2F;microphones&#x2F;sm7b&quot;&gt;Shure SM7B&lt;&#x2F;a&gt;: I use
this to record my voice. It’s a great microphone, but it requires a lot of
gain, so you need a good preamp to use it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B004MQSV04&quot;&gt;Cloudlifter CL-1 Mic Activator
Preamp&lt;&#x2F;a&gt;: I use this to boost
the gain of my Shure SM7B microphone.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B0746MG3VR&quot;&gt;Elgato Game Capture HD 60 X&lt;&#x2F;a&gt;: I
use this to capture my stream sessions.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B07QR6Z1JB&#x2F;&quot;&gt;Elgato Camlink 4K&lt;&#x2F;a&gt;: I use this
to connect my camera to my Mac.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.panasonic.com&#x2F;mea&#x2F;en&#x2F;consumer&#x2F;cameras-camcorders&#x2F;camcorders&#x2F;hc-v180.html&quot;&gt;Panasonic HC v180 Camcorder&lt;&#x2F;a&gt;:
I use this as my camera when I stream.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B075ZYG89F&quot;&gt;Neewer 2 Packs Dimmable 5600K USB LED Video
Light&lt;&#x2F;a&gt;: Way cost-effective than
the alternatives, such as Elgato. It does the same job. I use this to light up
my face when I stream.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B07ZQXJQ4J&quot;&gt;Instahibit Retractable 6x6.8ft Pull Down Green
Screen&lt;&#x2F;a&gt;: I use this to hide my
messy room when I stream.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B07QR6Z1JB&#x2F;&quot;&gt;Focusrite Scarlett Solo 3rd Gen USB Audio
Interface&lt;&#x2F;a&gt;: I use this to
connect my microphone to my Mac.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B07KQ1R5ZQ&quot;&gt;DTech HDMI Dummy Plug 4K Display
Emulator&lt;&#x2F;a&gt;: I use this to trick
my Mac to think that I have a 4K monitor connected to it. It’s useful when you
want to stream at 4K, but you don’t have a 4K monitor.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B07KQ1R5ZQ&quot;&gt;Acoustic Design Works - Mondrian Kit of Acoustic
Panels – 73“ X 49“ X 1&lt;&#x2F;a&gt;: I use
this to reduce the echo in my room when I stream.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;streaming&quot;&gt;Streaming&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;waydabber&#x2F;BetterDisplay#readme&quot;&gt;BetterDisplay&lt;&#x2F;a&gt;: BetterDisplay
is a truly wonderful tool! It lets you convert your displays to fully scalable
screens, manage display configuration overrides. It allows brightness and color
control, provides XDR&#x2F;HDR brightness upscaling. I use it as a mirror monitor to
my 1080p monitor during streaming.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;presentifyapp.com&quot;&gt;Presentify&lt;&#x2F;a&gt;: I use this to highlight my mouse
cursor and keystrokes during my streams. This is another app that you don’t
know you need until you use it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;B00HZDLNWO&quot;&gt;Flip Clock&lt;&#x2F;a&gt;: I use this as a
clock overlay on my stream. It’s especially useful when you need a countdown
timer.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sorrynotsorry.resn.co.nz&#x2F;&quot;&gt;Sorry No Sorry&lt;&#x2F;a&gt;: I use this to drop quick
notifications like “&lt;em&gt;5min break; BRB&lt;&#x2F;em&gt;” on my stream.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.telestream.net&#x2F;wirecast&#x2F;&quot;&gt;Wirecast&lt;&#x2F;a&gt;: I use this to stream to
multiple platforms at the same time.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;farrago&#x2F;&quot;&gt;Farrago&lt;&#x2F;a&gt;: I use this to play sound effects
on my stream.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;handmirror.app&#x2F;&quot;&gt;Handmirror&lt;&#x2F;a&gt;: It’s useful to quickly check how you
look in the camera before starting a stream. It’s also useful to display a
secondary camera source from a capture card if needed.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;audiohijack&#x2F;&quot;&gt;Audio Hijack&lt;&#x2F;a&gt;: I use this to capture
audio from different sources and mix them together. It plays really well with
&lt;strong&gt;Loopback&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;soundsource&#x2F;&quot;&gt;SoundSource&lt;&#x2F;a&gt;: I use this to control
the volume of different audio sources.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;piezo&#x2F;&quot;&gt;Piezo&lt;&#x2F;a&gt;: I use this to record audio from
different sources.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;loopback&#x2F;&quot;&gt;Loopback&lt;&#x2F;a&gt;: I use this to create virtual
audio devices.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rogueamoeba.com&#x2F;airfoil&#x2F;mac&#x2F;&quot;&gt;Airfoil&lt;&#x2F;a&gt;: I use this to stream audio
from my Mac to other devices.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vox.rocks&#x2F;&quot;&gt;Vox&lt;&#x2F;a&gt;: I use this to play music on my stream.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.synesthesia.live&#x2F;&quot;&gt;Synesthesia&lt;&#x2F;a&gt;: I use this to create visual
effects on my stream.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chatterino.com&#x2F;&quot;&gt;Chatterino&lt;&#x2F;a&gt;: I use this to manage my Twitch chat.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;stream-automation&quot;&gt;Stream Automation&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;streamelements.com&#x2F;&quot;&gt;Stream Elements&lt;&#x2F;a&gt;: I use this to manage my
stream, add bots, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;stream-music&quot;&gt;Stream Music&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.epidemicsound.com&#x2F;&quot;&gt;Epidemic Sound&lt;&#x2F;a&gt;: I hand-pick almost all my
music from&lt;strong&gt;Epidemic Sound&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;mailers&quot;&gt;Mailers&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mailgun.com&#x2F;&quot;&gt;Mailgun&lt;&#x2F;a&gt;: I use this to send emails, especially
when I want a reliable and programmatic interface.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mailchimp.com&#x2F;&quot;&gt;Mailchimp&lt;&#x2F;a&gt;: I use this to send emails when I
don’t want to deal with code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;desktop-app-development&quot;&gt;Desktop App Development&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.electronjs.org&#x2F;&quot;&gt;Electron&lt;&#x2F;a&gt;: I use this to build desktop apps.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;phonegap.com&#x2F;&quot;&gt;Phonegap&lt;&#x2F;a&gt;: I used use use &lt;strong&gt;PhoneGap&lt;&#x2F;strong&gt; for Desktop
app development too.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nwjs.io&#x2F;&quot;&gt;nw.js&lt;&#x2F;a&gt;: I use this as an alternative to &lt;strong&gt;Electron&lt;&#x2F;strong&gt;.
It is lighter.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;password-managers-and-authentication&quot;&gt;Password Managers and Authentication&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;1password.com&#x2F;&quot;&gt;1Password&lt;&#x2F;a&gt;: I use this to store anything secret.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;authy.com&#x2F;&quot;&gt;Authy&lt;&#x2F;a&gt;: I use this to manage my 2FA tokens. The best
feature is that it syncs across devices, so if I lose my phone, I can still
access my tokens.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;task-management&quot;&gt;Task Management&lt;&#x2F;h2&gt;
&lt;p&gt;I use &lt;a href=&quot;https:&#x2F;&#x2F;heptabase.com&#x2F;&quot;&gt;&lt;strong&gt;Heptabase&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; as my main task management tool
at the moment.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;16bugs.com&#x2F;&quot;&gt;16bugs&lt;&#x2F;a&gt;: This site has been available since the dawn of
time. When I need a simple task management tool, just for myself, I use it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;agenda.com&#x2F;&quot;&gt;Agenda&lt;&#x2F;a&gt;: I use this to keep track of my notes action items.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.bugzilla.org&#x2F;&quot;&gt;Bugzilla&lt;&#x2F;a&gt;: I use this to manage my bugs.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;trello.com&#x2F;&quot;&gt;Trello&lt;&#x2F;a&gt;: I use this for projects that are more complex
than a simple task list, but requires less structure than a full-blown
enterprise software project.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.atlassian.com&#x2F;software&#x2F;confluence&quot;&gt;Confluence&lt;&#x2F;a&gt;: Some say it’s a
wiki; I think it’s a “&lt;em&gt;write-only&lt;&#x2F;em&gt;” database.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.atlassian.com&#x2F;software&#x2F;jira&quot;&gt;Jira&lt;&#x2F;a&gt;: I wish it doesn’t exist.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;culturedcode.com&#x2F;things&#x2F;&quot;&gt;Things&lt;&#x2F;a&gt;: I used to use it; it’s still a
great tool. I can go as far as to say, it is the best Mac to-do app out there.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;workflow-management&quot;&gt;Workflow Management&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ifttt.com&#x2F;&quot;&gt;IFTTT&lt;&#x2F;a&gt;: I use this to automate my workflows.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zapier.com&#x2F;&quot;&gt;Zapier&lt;&#x2F;a&gt;: This is an alternate tool that I sometimes use.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan-uses&#x2F;n8n.io&quot;&gt;n8n.io&lt;&#x2F;a&gt;: I use this when I need a bit more programmatic access to my
workflows.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;camunda.com&#x2F;&quot;&gt;Camunda&lt;&#x2F;a&gt;: I use this when I need a full-blown workflow
engine.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jupyter.org&#x2F;&quot;&gt;Jupyter Notebooks&lt;&#x2F;a&gt;: I use this when I need to create
interactive notebooks.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;knowledge-management&quot;&gt;Knowledge Management&lt;&#x2F;h2&gt;
&lt;p&gt;Nowadays, &lt;a href=&quot;https:&#x2F;&#x2F;heptabase.com&#x2F;&quot;&gt;&lt;strong&gt;Heptabase&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is my main tool for keeping
track of my notes, but I use other tools to complement it too.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;heptabase.com&#x2F;&quot;&gt;Heptabase&lt;&#x2F;a&gt;: I use this as my central knowledge base.
It is excellent in organizing, searching, prioritizing, and making sense of
vast amount of information.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;obsidian.md&#x2F;&quot;&gt;Obsidian&lt;&#x2F;a&gt;: I use this to keep track of my notes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tiddlywiki.com&#x2F;&quot;&gt;TiddlyWiki&lt;&#x2F;a&gt;: A lesser-known tool; really useful.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.literatureandlatte.com&#x2F;scrivener&#x2F;overview&quot;&gt;Scriviner&lt;&#x2F;a&gt;: I use this
to write long-form, structured content, like articles, books, etc.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;remarkable.com&#x2F;&quot;&gt;reMarkable&lt;&#x2F;a&gt;: I use this to take notes and to read
books. Its tactile feel is almost—but not exactly—like writing on paper.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.devontechnologies.com&#x2F;apps&#x2F;devonthink&quot;&gt;DEVONThink&lt;&#x2F;a&gt;: I use this
to store my documents, notes, and other files. It has an amazing full-text
search feature, that helps me find what I want, when I want.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;communication&quot;&gt;Communication&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;discord.com&#x2F;&quot;&gt;Discord&lt;&#x2F;a&gt;: I am a member of a lot of tech discord servers.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;slack.com&#x2F;&quot;&gt;Slack&lt;&#x2F;a&gt;: I use this to communicate with my colleagues.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zoom.us&#x2F;&quot;&gt;Zoom&lt;&#x2F;a&gt;: I use this to communicate with… well… everyone.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;icq.com&#x2F;&quot;&gt;ICQ&lt;&#x2F;a&gt;: I used to use this.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mirc.com&#x2F;&quot;&gt;Mirc&lt;&#x2F;a&gt;: I used to use this.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.whatsapp.com&#x2F;&quot;&gt;WhatsApp&lt;&#x2F;a&gt;: I use this to communicate with my
family and friends.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;developer-tools&quot;&gt;Developer Tools&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;brew.sh&#x2F;&quot;&gt;Homebrew&lt;&#x2F;a&gt;: I use this to install software on my Mac. It’s
typically the first thing I install on a new Mac.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kaleidoscopeapp.com&#x2F;&quot;&gt;Kaleidoscope&lt;&#x2F;a&gt;: I use this to compare files
and folders.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kapeli.com&#x2F;dash&quot;&gt;Dash&lt;&#x2F;a&gt;: I use this to find documentation for
programming languages, frameworks, and libraries. It is also an excellent
text autocompleter.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.git-tower.com&#x2F;&quot;&gt;Tower&lt;&#x2F;a&gt;: I use this to manage my git repositories.
It’s the best git client out there.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sublimemerge.com&#x2F;&quot;&gt;Sublime Merge&lt;&#x2F;a&gt;: I use this as an alternative
git client.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;k8slens.dev&#x2F;&quot;&gt;Lens&lt;&#x2F;a&gt;: I use this to manage my Kubernetes clusters.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;state-management&quot;&gt;State Management&lt;&#x2F;h2&gt;
&lt;p&gt;Again, all of these do more-or-less the same thing. I use
&lt;strong&gt;Redux&lt;&#x2F;strong&gt; when I have a choice, but I don’t have a preference.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zustand-demo.pmnd.rs&quot;&gt;Zustand&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;redux.js.org&#x2F;&quot;&gt;Redux&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;xstate.js.org&#x2F;&quot;&gt;XState&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mobx.js.org&#x2F;&quot;&gt;MobX&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan-uses&#x2F;Stately.AI&quot;&gt;Stately.AI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;javascript-frameworks&quot;&gt;JavaScript Frameworks&lt;&#x2F;h2&gt;
&lt;p&gt;All of them are similar and serve a purpose. I use &lt;strong&gt;React&lt;&#x2F;strong&gt; when I have a
choice, but I don’t have a preference.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;emberjs.com&#x2F;&quot;&gt;Ember.js&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;angular.io&#x2F;&quot;&gt;Angular&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;&quot;&gt;React&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vuejs.org&#x2F;&quot;&gt;Vue.js&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;svelte.dev&#x2F;&quot;&gt;Svelte&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;infernojs.org&#x2F;&quot;&gt;Inferno&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;preactjs.com&#x2F;&quot;&gt;Preact&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mithril.js.org&#x2F;&quot;&gt;Mithril&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jquery.com&#x2F;&quot;&gt;jQuery&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mootools.net&#x2F;&quot;&gt;MooTools&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;visualization-libraries&quot;&gt;Visualization Libraries&lt;&#x2F;h2&gt;
&lt;p&gt;Again, my choice is &lt;strong&gt;D3&lt;&#x2F;strong&gt; when I have a choice, but all of these libraries get
the job done. &lt;strong&gt;Rappid&lt;&#x2F;strong&gt; or &lt;strong&gt;JointJS&lt;&#x2F;strong&gt; is especially useful when creating
interactive diagrams that you can manipulate and connect nodes with lines and
arrows.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;d3js.org&#x2F;&quot;&gt;D3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.chartjs.org&#x2F;&quot;&gt;Chart.js&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.highcharts.com&#x2F;&quot;&gt;Highcharts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;plotly.com&#x2F;&quot;&gt;Plotly&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jointjs.com&#x2F;rappid&quot;&gt;Rappid&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jointjs.com&#x2F;&quot;&gt;JointJS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;functional-javascript&quot;&gt;Functional JavaScript&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ramdajs.com&#x2F;&quot;&gt;Ramda&lt;&#x2F;a&gt;: If you like Haskell, you’ll like Ramda.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rxjs.dev&#x2F;&quot;&gt;RxJS&lt;&#x2F;a&gt;: I use this when I need to do reactive programming.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;static-sites&quot;&gt;Static Sites&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt;: The best I’ve seen so far. It has become
my “go-to” website generation tool.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docusaurus.io&#x2F;&quot;&gt;Docusaurus&lt;&#x2F;a&gt;: Good for building documentation sites.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mkdocs.org&#x2F;&quot;&gt;MkDocs&lt;&#x2F;a&gt;: Again, useful for documentation sites.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gatsbyjs.com&#x2F;&quot;&gt;Gatsby&lt;&#x2F;a&gt;: General-purpose static site generator.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jekyllrb.com&#x2F;&quot;&gt;Jekyll&lt;&#x2F;a&gt;: Reliable, just works, no fluff.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nextjs.org&#x2F;&quot;&gt;Next.js&lt;&#x2F;a&gt;: If you like React, you like Next.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;local-servers&quot;&gt;Local Servers&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;http-server&quot;&gt;&lt;code&gt;http-server&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: I use this to serve
static files locally. Fast, easy to run. Gets the job done.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;httpd.apache.org&#x2F;&quot;&gt;Apache HTTP Server&lt;&#x2F;a&gt;: I use this as a static file
server, too.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nginx.org&#x2F;&quot;&gt;NGINX&lt;&#x2F;a&gt;: I use this as a reverse proxy, and as a static
file server.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.haproxy.org&#x2F;&quot;&gt;HAProxy&lt;&#x2F;a&gt;: I use this as an alternative to NGINX.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;message-queues-and-stream-processing&quot;&gt;Message Queues and Stream Processing&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;&quot;&gt;Apache Kafka&lt;&#x2F;a&gt;: I use this to process messages.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.rabbitmq.com&#x2F;&quot;&gt;RabbitMQ&lt;&#x2F;a&gt;: My go-to message queue.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zeromq.org&#x2F;&quot;&gt;ZeroMQ&lt;&#x2F;a&gt;: I use this when I feel extra nerdy.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pubnub.com&#x2F;&quot;&gt;PubNub&lt;&#x2F;a&gt;: I use this when I need a managed message
queue.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;search-and-indexing&quot;&gt;Search and Indexing&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lucene.apache.org&#x2F;&quot;&gt;Apache Lucene&lt;&#x2F;a&gt;: I use this to index and search
documents.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.elastic.co&#x2F;elasticsearch&#x2F;&quot;&gt;ElasticSearch&lt;&#x2F;a&gt;: I use this to index
and search documents.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.elastic.co&#x2F;what-is&#x2F;elk-stack&quot;&gt;ELK Stack&lt;&#x2F;a&gt;: This is the typical
production stack for ElasticSearch.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;opensearch.org&#x2F;&quot;&gt;OpenSearch&lt;&#x2F;a&gt;: I use this as an alternative to
ElasticSearch, especially when licensing is a concern.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;log-aggregation&quot;&gt;Log Aggregation&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fluentd.org&#x2F;&quot;&gt;Fluentd&lt;&#x2F;a&gt;: I use this to collect logs.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.papertrail.com&#x2F;&quot;&gt;Papertrail&lt;&#x2F;a&gt;: A log aggregation service that I
use frequently.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.honeybadger.io&#x2F;&quot;&gt;Honeybadger&lt;&#x2F;a&gt;: I use this to collect logs and errors.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.hotjar.com&#x2F;&quot;&gt;Hotjar&lt;&#x2F;a&gt;: I use this to collect user behavior.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;monitoring&quot;&gt;Monitoring&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;prometheus.io&#x2F;&quot;&gt;Prometheus&lt;&#x2F;a&gt;: I use this to monitor my applications.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;grafana.com&#x2F;&quot;&gt;Grafana&lt;&#x2F;a&gt;: I use this to visualize my metrics.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.elastic.co&#x2F;kibana&quot;&gt;Kibana&lt;&#x2F;a&gt;: I use this to visualize my logs.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kiali.io&#x2F;&quot;&gt;Kiali&lt;&#x2F;a&gt;: I use this to visualize my service mesh.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;graphql-and-friends&quot;&gt;GraphQL and Friends&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.apollographql.com&#x2F;docs&quot;&gt;Apollo&lt;&#x2F;a&gt;: I use this to build GraphQL servers.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.prisma.io&#x2F;&quot;&gt;Prisma&lt;&#x2F;a&gt;: I use this along with Apollo.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;api-methodologies&quot;&gt;API Methodologies&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;restfulapi.net&#x2F;&quot;&gt;REST&lt;&#x2F;a&gt;: I use this when I need to build a RESTful API.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;grpc.io&#x2F;&quot;&gt;gRPC&lt;&#x2F;a&gt;: I use this to build microservices.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mqtt.org&#x2F;&quot;&gt;MQTT&lt;&#x2F;a&gt;: I use this when I need to build a lightweight
messaging protocol.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;WebSockets_API&quot;&gt;Websockets&lt;&#x2F;a&gt;:
I use this when I need to build a real-time API.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;databases&quot;&gt;Databases&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mongodb.com&#x2F;&quot;&gt;MongoDB&lt;&#x2F;a&gt;: Unless there is a specific constraint,
I use this as my default database.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.arangodb.com&#x2F;&quot;&gt;ArangoDB&lt;&#x2F;a&gt;: I use this when I need a graph database.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cockroachlabs.com&#x2F;product&#x2F;&quot;&gt;CockroachDB&lt;&#x2F;a&gt;: I use this when I need
a distributed database.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;couchdb.apache.org&#x2F;&quot;&gt;CouchDB&lt;&#x2F;a&gt;: I use this when I need a light document database.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pouchdb.com&#x2F;&quot;&gt;PouchDB&lt;&#x2F;a&gt;: I use this when I need a portable document database.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;&quot;&gt;PostgreSQL&lt;&#x2F;a&gt;: I use this when I need a relational database.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mysql.com&#x2F;&quot;&gt;MySQL&lt;&#x2F;a&gt;: This is my second pick for a relational database.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;redis.io&#x2F;&quot;&gt;Redis&lt;&#x2F;a&gt;: I use this when I need a key-value store.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;neo4j.com&#x2F;&quot;&gt;Neo4J&lt;&#x2F;a&gt;: It’s another graph database that I use.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;source-control&quot;&gt;Source Control&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;&quot;&gt;Git&lt;&#x2F;a&gt;: I use this to manage my source code.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;&quot;&gt;Gitlab&lt;&#x2F;a&gt;: I will never get used to it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;&quot;&gt;GitHub&lt;&#x2F;a&gt;: Like Twitter, but for source code.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;artifacthub.io&#x2F;&quot;&gt;Artifact Hub&lt;&#x2F;a&gt;: I use this to find and store Helm
charts.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;goharbor.io&#x2F;&quot;&gt;Harbor&lt;&#x2F;a&gt;: I use this to store container images too.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;css-frameworks&quot;&gt;CSS Frameworks&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bulma.io&#x2F;&quot;&gt;Bulma&lt;&#x2F;a&gt;: I use this when I need a simple CSS framework.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tailwindcss.com&#x2F;&quot;&gt;Tailwind&lt;&#x2F;a&gt;: I use this when I need a more complex
CSS framework.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tailwindui.com&#x2F;&quot;&gt;Tailwind UI&lt;&#x2F;a&gt;: I use this when I need a UI kit for
&lt;strong&gt;Tailwind&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;getbootstrap.com&#x2F;&quot;&gt;Bootstrap&lt;&#x2F;a&gt;: It’s a reliable CSS framework, too.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;get.foundation&#x2F;&quot;&gt;Foundation&lt;&#x2F;a&gt;: I use this when I need a CSS framework
that’s not Bootstrap.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;getbem.com&#x2F;&quot;&gt;BEM&lt;&#x2F;a&gt;: I use this methodology when I need to write CSS
from scratch.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;smacss.com&#x2F;&quot;&gt;SMACSS&lt;&#x2F;a&gt;: I use this methodology when I have a larger CSS
codebase that needs to be maintained.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;styled-components.com&#x2F;&quot;&gt;Styled Components&lt;&#x2F;a&gt;: I use this when I need
to write CSS in JavaScript.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;icons&quot;&gt;Icons&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;streamlineicons.com&#x2F;&quot;&gt;Streamline Icons&lt;&#x2F;a&gt;: When I need an icon, I
almost always use &lt;strong&gt;Streamline Icons&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;file-managers&quot;&gt;File Managers&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;binarynights.com&#x2F;&quot;&gt;Forklift&lt;&#x2F;a&gt;: I use this to manage my files.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;panic.com&#x2F;transmit&#x2F;&quot;&gt;Transmit&lt;&#x2F;a&gt;: I use this to transfer files around.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mac.eltima.com&#x2F;file-manager.html&quot;&gt;Commander One Pro&lt;&#x2F;a&gt;: I use this as
an alternative to &lt;strong&gt;Forklift&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;theunarchiver.com&#x2F;&quot;&gt;The Unarchiver&lt;&#x2F;a&gt;: I use this to extract compressed
files.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cocoatech.com&#x2F;&quot;&gt;Path Finder&lt;&#x2F;a&gt;: It’s a good file manager, too, but I
find it a bit bloated.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;system-diagnostics&quot;&gt;System Diagnostics&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bjango.com&#x2F;mac&#x2F;istatmenus&#x2F;&quot;&gt;iStat Menus&lt;&#x2F;a&gt;: I use this to monitor my
system.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;binaryfruit.com&#x2F;drivedx&quot;&gt;DriveDX&lt;&#x2F;a&gt;: I use this to monitor my hard
drives. You will never know when your hard drive will fail.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;books&quot;&gt;Books&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.audible.com&#x2F;&quot;&gt;Audible&lt;&#x2F;a&gt;: I use this to listen to books.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;read.amazon.com&#x2F;kindle-library&quot;&gt;Kindle&lt;&#x2F;a&gt;: I use this to read books.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-cloud&quot;&gt;“&lt;em&gt;the Cloud&lt;&#x2F;em&gt;”&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;&quot;&gt;AWS&lt;&#x2F;a&gt;: Yes, it’s expensive compared to the&lt;&#x2F;li&gt;
&lt;li&gt;competition. Yes, it’s complicated. Yet, it’s a cloud that I can count on.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;azure.microsoft.com&#x2F;&quot;&gt;Azure&lt;&#x2F;a&gt;: I use this when I need to use a remote
Windows virtual machine.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.linode.com&#x2F;&quot;&gt;Linode&lt;&#x2F;a&gt;: I use this when I need a simple Linux
virtual machine. It’s cheap and reliable with fanatical support.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.digitalocean.com&#x2F;&quot;&gt;Digital Ocean&lt;&#x2F;a&gt;: Honestly, I use Digital Ocean
mostly for its documentation. They have excellent technical articles. Also,
it does not make a hole in your wallet, and it’s reliable; so you can use it
for any kind of production setup.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.hetzner.com&#x2F;&quot;&gt;Hetzner&lt;&#x2F;a&gt;: I use this when I need a cheap, reliable,
and dedicated server. It’s a German company, so you know it’s reliable.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;video&quot;&gt;Video&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;support.apple.com&#x2F;quicktime&quot;&gt;Quicktime&lt;&#x2F;a&gt;: I use this to play videos.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.videolan.org&#x2F;vlc&#x2F;&quot;&gt;VLC Media Player&lt;&#x2F;a&gt;: I use this for stuff that
Quicktime can’t play.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;cloud-native-tools&quot;&gt;Cloud-Native Tools&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;Kubernetes&lt;&#x2F;a&gt;: I use Kubernetes to run my applications
in clusters in a cloud-native and declarative way.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;metallb.universe.tf&#x2F;&quot;&gt;MetalLB&lt;&#x2F;a&gt;: I use this to expose my services in
Kubernetes, especially for bare-metal clusters.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;helm.sh&#x2F;&quot;&gt;Helm&lt;&#x2F;a&gt;: I use this to package my applications in Kubernetes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cert-manager.io&#x2F;&quot;&gt;CertManager&lt;&#x2F;a&gt;: I use this to manage my certificates
in Kubernetes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;istio.io&#x2F;&quot;&gt;Istio&lt;&#x2F;a&gt;: I use this to manage my service mesh in Kubernetes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;SPIRE&lt;&#x2F;a&gt;: I use this to manage my service identity in Kubernetes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;SPIFFE&lt;&#x2F;a&gt;: SPIFFE is the protocol that SPIRE uses.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;VMware Secrets Manager&lt;&#x2F;a&gt;: I use this to manage my secrets
in Kubernetes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;coredns.io&#x2F;&quot;&gt;CoreDNS&lt;&#x2F;a&gt;: I use this as my DNS server in Kubernetes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.docker.com&#x2F;&quot;&gt;Docker&lt;&#x2F;a&gt;: I use this to build my containers.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;&quot;&gt;DockerHub&lt;&#x2F;a&gt;: I use this to store my containers.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes-sigs&#x2F;external-dns&quot;&gt;ExternalDNS&lt;&#x2F;a&gt;: I use this to
manage my DNS records in Kubernetes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.nginx.com&#x2F;&quot;&gt;NGINX&lt;&#x2F;a&gt;: I use this as my ingress controller in Kubernetes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;traefik.io&#x2F;&quot;&gt;Traefik&lt;&#x2F;a&gt;: I use this as an alternate ingress controller.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.envoyproxy.io&#x2F;&quot;&gt;Envoy&lt;&#x2F;a&gt;: I use this as lower-level proxy.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cluster-api.sigs.k8s.io&#x2F;&quot;&gt;Cluster API&lt;&#x2F;a&gt;: I use this to manage my
Kubernetes clusters.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.keycloak.org&#x2F;&quot;&gt;Keycloak&lt;&#x2F;a&gt;: I use this to manage my identities
in Kubernetes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan-uses&#x2F;Min.io&quot;&gt;Min.io&lt;&#x2F;a&gt;: I use this to manage my object storage in Kubernetes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;k8snetworkplumbingwg&#x2F;multus-cni&quot;&gt;Multus CNI&lt;&#x2F;a&gt;: This is
especially useful when you need to manage multiple network interfaces in a Pod.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;opentelemetry.io&#x2F;&quot;&gt;Open Telemetry&lt;&#x2F;a&gt;: I use this to manage my telemetry
in Kubernetes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.openpolicyagent.org&#x2F;&quot;&gt;Open Policy Agent&lt;&#x2F;a&gt;: I use this to manage
my policies in Kubernetes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;linux-distributions&quot;&gt;Linux Distributions&lt;&#x2F;h2&gt;
&lt;p&gt;My “&lt;em&gt;go-to&lt;&#x2F;em&gt;” distro is &lt;strong&gt;Ubuntu&lt;&#x2F;strong&gt;: Stable, reliable, and easy to use. I switch
between distros from time to time, to see what’s new, and to learn new things though.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ubuntu.com&#x2F;&quot;&gt;Ubuntu&lt;&#x2F;a&gt;: My “&lt;em&gt;go-to&lt;&#x2F;em&gt;” distro.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;getfedora.org&#x2F;&quot;&gt;Fedora&lt;&#x2F;a&gt;: I use this when I need to use a
RedHat-based distro.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;archlinux.org&#x2F;&quot;&gt;Arch Linux&lt;&#x2F;a&gt;: I use this when I need to torture myself.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.kali.org&#x2F;&quot;&gt;Kali Linux&lt;&#x2F;a&gt;: I use this when I need to do some
penetration testing.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gentoo.org&#x2F;&quot;&gt;Gentoo&lt;&#x2F;a&gt;: Is another alternative I use.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;linuxmint.com&#x2F;&quot;&gt;Linux Mint&lt;&#x2F;a&gt;: I use this when I need to use a
Debian-based distro.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;manjaro.org&#x2F;&quot;&gt;Manjaro&lt;&#x2F;a&gt;: I use this when I need to use an
Arch-based distro.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;elementary.io&#x2F;&quot;&gt;Elementary OS&lt;&#x2F;a&gt;: Is a different flavor of Ubuntu
that I use from time to time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;backup-and-recovery&quot;&gt;Backup and Recovery&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.backblaze.com&#x2F;&quot;&gt;Backblaze&lt;&#x2F;a&gt;: Great backup solution that you
forget it exists. In a world of complexity and lock-in, Backblaze is easy yet
high-performance, 1&#x2F;5 the cost with no gotchas, S3-compatible, and open to a
lot of use cases—my &lt;strong&gt;go-to&lt;&#x2F;strong&gt; solution.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;transpilers&quot;&gt;Transpilers&lt;&#x2F;h2&gt;
&lt;p&gt;I have no definitive choice when it comes to transpilers. I use whatever is
available and works for the project at hand.&lt;&#x2F;p&gt;
&lt;p&gt;I prefer &lt;strong&gt;Parcel&lt;&#x2F;strong&gt; if I need a zero-config transpiler, and use &lt;strong&gt;Webpack&lt;&#x2F;strong&gt;
if I need more control.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;babeljs.io&#x2F;&quot;&gt;Babel&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;webpack.js.org&#x2F;&quot;&gt;Webpack&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;parceljs.org&#x2F;&quot;&gt;Parcel&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rollupjs.org&#x2F;&quot;&gt;Rollup&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gulpjs.com&#x2F;&quot;&gt;Gulp&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vitejs.dev&#x2F;&quot;&gt;Vite&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;unit-testing&quot;&gt;Unit Testing&lt;&#x2F;h2&gt;
&lt;p&gt;These tools are dime a dozen, too, and they mostly do similar things.
I pick whichever is available and works for the project at hand.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cucumber.io&#x2F;&quot;&gt;Cucumber&lt;&#x2F;a&gt;: I use this to write BDD tests.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cucumber.io&#x2F;docs&#x2F;gherkin&#x2F;&quot;&gt;Gherkin&lt;&#x2F;a&gt;: I use this to write BDD tests.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mochajs.org&#x2F;&quot;&gt;Mocha&lt;&#x2F;a&gt;: I use this to write unit tests.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jasmine.github.io&#x2F;&quot;&gt;Jasmine&lt;&#x2F;a&gt;: Similar to &lt;strong&gt;Mocha&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jestjs.io&#x2F;&quot;&gt;Jest&lt;&#x2F;a&gt;: Similar to &lt;strong&gt;Mocha&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;load-testing&quot;&gt;Load Testing&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.blazemeter.com&#x2F;&quot;&gt;BlazeMeter&lt;&#x2F;a&gt;: I use this to run load tests.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan-uses&#x2F;Flood.io&quot;&gt;Flood.io&lt;&#x2F;a&gt;: I use this to run load tests, too.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jmeter.apache.org&#x2F;&quot;&gt;JMeter&lt;&#x2F;a&gt;: I use this to run load tests, as well.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;browser-emulation&quot;&gt;Browser Emulation&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pptr.dev&#x2F;&quot;&gt;Puppeteer&lt;&#x2F;a&gt;: I use this to emulate browsers and test UI
components.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.selenium.dev&#x2F;&quot;&gt;Selenium&lt;&#x2F;a&gt;: Selenium is a bit date, but it is a
great tool still.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cypress.io&#x2F;&quot;&gt;Cypress&lt;&#x2F;a&gt;: A similar tool that I use.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;webdriver.io&#x2F;&quot;&gt;WebdriverIO&lt;&#x2F;a&gt;: Another similar tool with a growing
user base.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;karma-runner.github.io&#x2F;&quot;&gt;Karma&lt;&#x2F;a&gt;: I used to use Karma for the same
purpose too.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;zombie&quot;&gt;zombie.js&lt;&#x2F;a&gt;: Insanely fast headless
browser testing.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;saucelabs.com&#x2F;&quot;&gt;Sauce Labs&lt;&#x2F;a&gt;: I use this to run my tests in the cloud.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ci-cd&quot;&gt;CI&#x2F;CD&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jenkins.io&#x2F;&quot;&gt;Jenkins&lt;&#x2F;a&gt;: I use this to run my CI&#x2F;CD pipelines.
It’s old, it’s ugly, but it works like a charm.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;travis-ci.com&#x2F;&quot;&gt;Travis&lt;&#x2F;a&gt;: Another CI solution that I use sometimes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;circleci.com&#x2F;&quot;&gt;Circle CI&lt;&#x2F;a&gt;: I use this when I need to run my CI&#x2F;CD
pipelines in the cloud.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;chat-widgets&quot;&gt;Chat Widgets&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crisp.chat&#x2F;&quot;&gt;Crisp&lt;&#x2F;a&gt;: I use this to chat with my visitors. Even it’s
free version is more than enough. And the paid version is very affordable,
unlike alternatives like &lt;strong&gt;Intercom&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;blogging-platforms&quot;&gt;Blogging Platforms&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ghost.org&#x2F;&quot;&gt;Ghost&lt;&#x2F;a&gt;: I use this to run my blog.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wordpress.com&#x2F;&quot;&gt;WordPress&lt;&#x2F;a&gt;: This is my second choice when it comes
to blogging.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;markdown&quot;&gt;Markdown&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;marked2app.com&#x2F;&quot;&gt;Marked 2&lt;&#x2F;a&gt;: I use this to preview my markdown files.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;learning&quot;&gt;Learning&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pluralsight.com&#x2F;&quot;&gt;PluralSight&lt;&#x2F;a&gt;: I use this to improve myself
technically.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.oreilly.com&#x2F;&quot;&gt;O’Reilly&lt;&#x2F;a&gt;: Another learning platform that I visit
frequently.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.udemy.com&#x2F;&quot;&gt;Udemy&lt;&#x2F;a&gt;: When I cannot find anything in the above two,
I try Udemy.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hbr.org&#x2F;&quot;&gt;HBR&lt;&#x2F;a&gt;: I use this to improve myself professionally. It’s a
great source of information on how to be a better leader.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;long-long-ago&quot;&gt;Long, Long Ago&lt;&#x2F;h2&gt;
&lt;p&gt;Websites that I visited eons ago, and they are not popular anymore, some of them
are even extinct (&lt;em&gt;and I provided web archive links for them instead&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;quirksmode.org&#x2F;&quot;&gt;QuirksMode&lt;&#x2F;a&gt;: I used to visit this site to learn
about browser quirks.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20230319084116&#x2F;https:&#x2F;&#x2F;evolt.org&#x2F;&quot;&gt;Evolt&lt;&#x2F;a&gt;: I used
to discuss accessibility, usability, front end development, and the new web.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20230319084116&#x2F;https:&#x2F;&#x2F;www.webmonkey.com&#x2F;&quot;&gt;WebMonkey&lt;&#x2F;a&gt;:
I used to visit this site to learn about web development.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20230307132114&#x2F;http:&#x2F;&#x2F;lists.evolt.org&#x2F;&quot;&gt;The List&lt;&#x2F;a&gt;:
It is the first mailing list that I was actively contributing. I learned a lot
there. Some of my mentors were active contributors there too.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.csszengarden.com&#x2F;&quot;&gt;CSS Zen Garden&lt;&#x2F;a&gt;: Table-based design was becoming
out of fashion, and CSS Zen Garden was the place to realize how a single HTML
document can be styled in many different ways.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;alistapart.com&#x2F;&quot;&gt;A List Apart&lt;&#x2F;a&gt;: I used to visit this site to learn
about web development.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bonsaiden.github.io&#x2F;JavaScript-Garden&#x2F;&quot;&gt;JavaScript Garden&lt;&#x2F;a&gt;: I used
to visit this site to learn about JavaScript. It was a great resource when you
want to have a quick reference.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.codeproject.com&#x2F;&quot;&gt;CodeProject&lt;&#x2F;a&gt;: I used to visit this site especially
when I wanted to learn about Windows development. I had quite a few articles
published there too.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20230319084116&#x2F;https:&#x2F;&#x2F;www.4guysfromrolla.com&#x2F;&quot;&gt;Four Guys from Rolla&lt;&#x2F;a&gt;:
I used to visit this site to learn about &lt;a href=&quot;https:&#x2F;&#x2F;asp.net&quot;&gt;ASP.NET&lt;&#x2F;a&gt; development.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;coderanch.com&#x2F;&quot;&gt;Java Ranch Big Moose Saloon&lt;&#x2F;a&gt;: I used to visit this
site to learn about Java development.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan-uses&#x2F;java.sun.com&quot;&gt;java.sun.com&lt;&#x2F;a&gt;: Once upon a time, Java was free, as in
“&lt;em&gt;free beer&lt;&#x2F;em&gt;”.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan-uses&#x2F;astalavista.box.sk&quot;&gt;astalavista.box.sk&lt;&#x2F;a&gt;: I used to visit this site to learn
about security.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;explore-more&quot;&gt;Explore More&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;a-new-hope&#x2F;&quot;&gt;Every Saga Has a Beginning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan&#x2F;&quot;&gt;Volkan Özçelik&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Volkan Uses&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;contact&#x2F;&quot;&gt;Contact&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;privacy&#x2F;&quot;&gt;Privacy Policy&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The New &quot;Zero to Hero&quot; Design</title>
        <published>2024-03-04T00:00:00+00:00</published>
        <updated>2024-03-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/new-z2h-design/"/>
        <id>https://zerotohero.dev/top-of-mind/new-z2h-design/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/new-z2h-design/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;bob-ross.png&quot; alt=&quot;The New “Zero to Hero” Design&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update: 2024-05-21&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After publishing this article, I did yet another brand-new overhaul of
design based on &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This also resulted in moving the blog from a managed &lt;a href=&quot;https:&#x2F;&#x2F;ghost.org&#x2F;&quot;&gt;Ghost&lt;&#x2F;a&gt;
instance to a self-hosted static site, which brought &lt;strong&gt;a lot&lt;&#x2F;strong&gt; of changes.&lt;&#x2F;p&gt;
&lt;p&gt;I am going to write a more detailed blog post about it soon. Stay tuned!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I’ve changed the design of this blog, emphasizing its current impromptu nature.&lt;&#x2F;p&gt;
&lt;p&gt;Until recently, my plan for &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; was to let it evolve into a
learning management system. However, that resulted in me limiting the kinds of
posts and articles I could put here and pushing me to create more long-form
content.&lt;&#x2F;p&gt;
&lt;p&gt;While creating long-form content is beneficial, it’s also time-consuming; that’s
why I felt friction opening up my content editor and just writing stuff down.&lt;&#x2F;p&gt;
&lt;p&gt;Now, I feel &lt;strong&gt;free&lt;&#x2F;strong&gt;. I can write anything and everything, and I can do it
without needing a theme, a curriculum, or a target.&lt;&#x2F;p&gt;
&lt;p&gt;Per contra, the current design focuses more on the “&lt;strong&gt;&lt;em&gt;blog&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” nature of “*
&lt;em&gt;Zero to Hero&lt;&#x2F;em&gt;*.” From this point on, “&lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt;” is, and will be, a
blog, &lt;strong&gt;not&lt;&#x2F;strong&gt; a course, &lt;strong&gt;not&lt;&#x2F;strong&gt; an LMS. It’s a blog that I can write however my
mind pleases. Yes, it will be technical, but that doesn’t mean I won’t write
ad-hoc, impromptu stuff.&lt;&#x2F;p&gt;
&lt;p&gt;Also, my posts will be of varying sizes, some short, some long, some longer, and
some might be a book rather than a single post.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a snapshot of the current design for reference:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2024&#x2F;03&#x2F;Screenshot-2024-03-04-at-1.23.20-AM.png&quot; alt=&quot;The new Zero to Hero&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I’ll need to create new feature images for this new design for all the existing
posts, but that’s okay. After all, I like what it looks like. And I’ll create
more content faster, thanks to this new mindset, and that’s all that matters.&lt;&#x2F;p&gt;
&lt;p&gt;Until the next one… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ The New Zero to Hero Design&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Base64 Decoding a String in Go</title>
        <published>2024-03-01T00:00:00+00:00</published>
        <updated>2024-03-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/tips/base64-decoding-a-string-in-go/"/>
        <id>https://zerotohero.dev/tips/base64-decoding-a-string-in-go/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/tips/base64-decoding-a-string-in-go/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;strings.png&quot; alt=&quot;Strings.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Strings.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;To base64-decode a string in Go, you can use the
&lt;code&gt;decoding.DecodeString&lt;&#x2F;code&gt; function from the &lt;code&gt;encoding&#x2F;base64&lt;&#x2F;code&gt; package.&lt;&#x2F;p&gt;
&lt;p&gt;This function takes a base64-encoded string as input and returns the decoded
data as a byte slice.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;encoding&#x2F;base64&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; The string to be decoded:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encoded &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;SGVsbG8gV29ybGQh&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Decode the string:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decoded&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StdEncoding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DecodeString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;encoded&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error while decoding the string&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Print the decoded data:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decoded&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Output: Hello World!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Encode it back:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;enc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StdEncoding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EncodeToString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;decoded&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Output: SGVsbG8gV29ybGQh
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;encoded&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;enc&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That was your nugget 😄.&lt;&#x2F;p&gt;
&lt;p&gt;Until the next one… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Base64 Decoding a String in Go&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;destructure&#x2F;&quot;&gt;Use Destructuring to Remove Attributes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;getting-the-body-of-an-http-request-with-go&#x2F;&quot;&gt;Getting the Body of an HTTP Request With Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;lets-create-a-syslog-logger&#x2F;&quot;&gt;Let’s Create a Syslog Logger&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;make-your-code-leaner&#x2F;&quot;&gt;Make Your Code Leaner By Extracting Method&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;mastodon-101&#x2F;&quot;&gt;Who Else Wants to Have Their Own Mastodon Server?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;microservice-env-vars&#x2F;&quot;&gt;How to Ensure Environment Variables Are Set&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;scaling-your-node-api-like-a-boss&#x2F;&quot;&gt;Scaling Your Node.js API Like a Boss&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;talkspiffe-stream-setup&#x2F;&quot;&gt;The Live Stream Dream&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;zshell-startup-files&#x2F;&quot;&gt;.zprofile, .zshrc, .zenv, OMG! What Do I Put Where?!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;redirect-index-page&#x2F;&quot;&gt;Redirecting a Static Web Page&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Unlock Your Brain&#x27;s Power: Learn Fast, Remember More</title>
        <published>2024-01-14T00:00:00+00:00</published>
        <updated>2024-01-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/learn-fast-remember-more/"/>
        <id>https://zerotohero.dev/roadmap/learn-fast-remember-more/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/learn-fast-remember-more/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;retention.png&quot; alt=&quot;Be limitless.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Be limitless.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;strong&gt;Memory retention&lt;&#x2F;strong&gt;is a critical aspect of your&lt;strong&gt;learning&lt;&#x2F;strong&gt;
process. &lt;a href=&quot;https:&#x2F;&#x2F;uwaterloo.ca&#x2F;campus-wellness&#x2F;curve-forgetting&quot;&gt;Research after research shows&lt;&#x2F;a&gt;
that, without active engagement,&lt;strong&gt;about 50% of new information can be lost
within an hour&lt;&#x2F;strong&gt;, escalating to 70% after a day and up to 90% after a week.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2024&amp;#x2F;01&amp;#x2F;curve_0-500x231.gif&quot; alt=&quot;The curve of forgetting.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The curve of forgetting.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;To combat this, here are scientifically-backed strategies to enhance memory
retention:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;use-visual-aids&quot;&gt;Use Visual Aids&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.psychologytoday.com&#x2F;us&#x2F;blog&#x2F;get-psyched&#x2F;201207&#x2F;learning-through-visuals&quot;&gt;Our brains naturally process visual and textual information combined more
efficiently than just text alone&lt;&#x2F;a&gt;.
Including&lt;strong&gt;diagrams&lt;&#x2F;strong&gt;,&lt;strong&gt;charts&lt;&#x2F;strong&gt;, and&lt;strong&gt;images&lt;&#x2F;strong&gt;as visual aids can assist in
encoding learning experiences into long-term memory.&lt;&#x2F;p&gt;
&lt;p&gt;This approach capitalizes on the brain’s inclination to process data, making it
easier to recall the information.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;embrace-pen-and-paper&quot;&gt;Embrace Pen and Paper&lt;&#x2F;h2&gt;
&lt;p&gt;Even in this era where everything is digitized, there are distinct advantages to
writing by hand. &lt;a href=&quot;https:&#x2F;&#x2F;www.sciencedaily.com&#x2F;releases&#x2F;2021&#x2F;03&#x2F;210319080820.htm&quot;&gt;Engaging areas of the brain compared to typing and writing
by hand can contribute to forming memory traces&lt;&#x2F;a&gt;.
The tactile experience of putting pen to paper can lead to retention of
information.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;seek-demonstrations-and-engage-in-group-discussions&quot;&gt;Seek Demonstrations and Engage in Group Discussions&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.ncbi.nlm.nih.gov&#x2F;pmc&#x2F;articles&#x2F;PMC4552057&#x2F;&quot;&gt;Participation in learning through demonstrations and group discussions can
significantly enhance understanding and memory retention&lt;&#x2F;a&gt;.
These activities promote engagement with the subject matter, making it more
memorable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;share-what-you-know&quot;&gt;Share What You Know&lt;&#x2F;h2&gt;
&lt;p&gt;Explaining concepts to others reinforces your understanding and helps identify
gaps in your knowledge. &lt;a href=&quot;https:&#x2F;&#x2F;link.springer.com&#x2F;article&#x2F;10.3758&#x2F;s13421-014-0416-z&quot;&gt;Teaching is a method of processing information at a
level that improves memory retention&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Learning by teaching&lt;&#x2F;strong&gt; is my favorite; &lt;strong&gt;for me, it works %100 of the time&lt;&#x2F;strong&gt;.
When I explain something, I learn from the process of explanation and the often
unexpected questions the audience asks. It challenges the gaps in my knowledge.&lt;&#x2F;p&gt;
&lt;p&gt;To enhance the understanding of the concept that explaining concepts to others
can reinforce one’s understanding and help identify knowledge gaps, it is
beneficial to link this idea to the Feynman Technique. &lt;a href=&quot;https:&#x2F;&#x2F;e-student.org&#x2F;feynman-technique&#x2F;&quot;&gt;**The Feynman Technique
**&lt;&#x2F;a&gt;, named after the renowned
physicist &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Richard_Feynman&quot;&gt;Richard Feynman&lt;&#x2F;a&gt;, is a
method of learning that emphasizes teaching a concept in simple terms to improve
understanding and memory retention. This technique involves four key steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Choose a Concept:&lt;&#x2F;strong&gt; First, select a concept or topic you want to understand
better, just as you would when preparing to explain something to others.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Teach it to a Child:&lt;&#x2F;strong&gt; Then, explain this concept as if you were teaching
it to someone with no background in the area, such as a child. This forces
you to simplify the language and break down the concept into its most
fundamental elements, similar to when you articulate ideas to others to
enhance your grasp of the subject.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Identify Gaps and Go Back to the Source Material:&lt;&#x2F;strong&gt; As you attempt to
explain, you’ll likely encounter areas where your understanding is lacking.
This step mirrors the process of identifying gaps in your knowledge when you
explain concepts to others. You then return to your source materials to fill
in these gaps.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Review and Simplify:&lt;&#x2F;strong&gt; Review your explanation and refine it, making it as
simple as possible. This step ensures that you’ve not only understood the
concept yourself but that you’re also able to convey it effectively to
others, thereby reinforcing your learning.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;connect-new-material-with-existing-knowledge&quot;&gt;Connect New Material with Existing Knowledge&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.frontiersin.org&#x2F;articles&#x2F;10.3389&#x2F;fnbeh.2013.00139&#x2F;full#B12&quot;&gt;Establishing connections between information and what you know creates a
knowledge network that facilitates retrieval&lt;&#x2F;a&gt;.
The more “&lt;strong&gt;&lt;em&gt;unusual&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” these connections are, the better it will stick.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;actively-retrieve-information-from-memory&quot;&gt;Actively Retrieve Information from Memory&lt;&#x2F;h2&gt;
&lt;p&gt;Instead of passively reading information, try to recall it from
memory. &lt;a href=&quot;http:&#x2F;&#x2F;www.educationalneuroscience.org.uk&#x2F;2020&#x2F;05&#x2F;13&#x2F;using-retrieval-practice-to-promote-long-term-retention&#x2F;&quot;&gt;This active retrieval strengthens your memory&lt;&#x2F;a&gt;.
Improves long-term retention. It makes the information more durable and easier
to access.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;read-aloud&quot;&gt;Read Aloud&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sciencedaily.com&#x2F;releases&#x2F;2017&#x2F;12&#x2F;171201090940.htm&quot;&gt;Reading aloud engages both your auditory senses, enhancing memory retention&lt;&#x2F;a&gt;.
This multi-sensory approach stimulates various brain areas, making learning more
effective.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;embrace-your-mistakes&quot;&gt;Embrace Your Mistakes&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sciencedaily.com&#x2F;releases&#x2F;2014&#x2F;10&#x2F;141027085426.htm&quot;&gt;Learning from mistakes that are close to the correct answer can be highly beneficial&lt;&#x2F;a&gt;.
These “&lt;strong&gt;&lt;em&gt;educated errors&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” offer an opportunity to refine and deepen your
understanding, solidifying the information in your memory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Incorporating these strategies into your learning process can significantly
enhance your ability to retain and recall information. Each method utilizes
functions resulting in more effective and long-lasting memory retention.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references-and-further-reading&quot;&gt;References and Further Reading&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Richard_Feynman&quot;&gt;Richard Feynman&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Testing_effect&quot;&gt;The Testing Effect&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;uwaterloo.ca&#x2F;campus-wellness&#x2F;curve-forgetting&quot;&gt;Curve of Forgetting&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.educationalneuroscience.org.uk&#x2F;2020&#x2F;05&#x2F;13&#x2F;using-retrieval-practice-to-promote-long-term-retention&#x2F;&quot;&gt;Using Retrieval Practice to Promote Long-Term Retention&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;e-student.org&#x2F;feynman-technique&#x2F;&quot;&gt;Feynman Technique: A Complete Beginner’s Guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.psychologytoday.com&#x2F;intl&#x2F;blog&#x2F;the-science-of-willpower&#x2F;201112&#x2F;how-mistakes-can-make-you-smarter&quot;&gt;How Mistakes Can Make You Smarter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sciencedaily.com&#x2F;releases&#x2F;2014&#x2F;10&#x2F;141027085426.htm&quot;&gt;It’s Better to Make Mistakes While Learning&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.frontiersin.org&#x2F;articles&#x2F;10.3389&#x2F;fnbeh.2013.00139&#x2F;full#B12&quot;&gt;The influence of prior knowledge on memory: a developmental cognitive neuroscience perspective&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;link.springer.com&#x2F;article&#x2F;10.3758&#x2F;s13421-014-0416-z&quot;&gt;Expecting to teach enhances learning and organization of knowledge in free recall of text passages&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.ncbi.nlm.nih.gov&#x2F;pmc&#x2F;articles&#x2F;PMC4552057&#x2F;&quot;&gt;Small group discussion: Students perspectives&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sciencedaily.com&#x2F;releases&#x2F;2021&#x2F;03&#x2F;210319080820.htm&quot;&gt;Study shows stronger brain activity after writing on paper than on tablet or smartphone&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;neurosciencenews.com&#x2F;memory-reading-aloud-8084&#x2F;&quot;&gt;Reading Information Aloud to Yourself Improves Memory&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.sciencedaily.com&#x2F;releases&#x2F;2017&#x2F;12&#x2F;171201090940.htm&quot;&gt;Reading information aloud to yourself improves memory of materials&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Build Strong Connections to Land Your Dream Job</title>
        <published>2023-08-18T00:00:00+00:00</published>
        <updated>2023-08-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/the-dream-job/"/>
        <id>https://zerotohero.dev/top-of-mind/the-dream-job/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/the-dream-job/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;dream-job.png&quot; alt=&quot;Build Strong Connections to Land Your Dream Job&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;Imagine this scenario: You receive an email or LinkedIn message from someone you
may not know or haven’t even met in person. They send you their résumé and ask
for a referral at your company. What would you do?&lt;&#x2F;p&gt;
&lt;p&gt;Not much? To be honest, you’ll highly-likely ignore their request and ghost
them.&lt;&#x2F;p&gt;
&lt;p&gt;But why? Because while asking for your help they’ve overlooked a few steps, such
as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Checking whether you are available and willing to assist,&lt;&#x2F;li&gt;
&lt;li&gt;Making sure they are approaching the right person,&lt;&#x2F;li&gt;
&lt;li&gt;Or, inquiring about your suitability for their request.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And even more important than those, they are &lt;strong&gt;selfish&lt;&#x2F;strong&gt;; they haven’t built a
relationship, and accrued enough goodwill to be able to ask help.&lt;&#x2F;p&gt;
&lt;p&gt;Would you want a selfish colleague in your team? Probably not.&lt;&#x2F;p&gt;
&lt;p&gt;Would you want someone who does not know how to approach people, and who does
not value others’ time in your team? Again; probably not.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-don-t-kiss-on-a-first-date&quot;&gt;You Don’t Kiss on a First Date&lt;&#x2F;h2&gt;
&lt;p&gt;Essentially, they’re attempting to rush things and make a “&lt;em&gt;first date kiss&lt;&#x2F;em&gt;.”&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, that’s not how networking works. This approach is likely to fail.&lt;&#x2F;p&gt;
&lt;p&gt;You may believe that reaching out to people indiscriminately increases the
chances of success—it’s “&lt;em&gt;a numbers game&lt;&#x2F;em&gt;” after all. However, in reality,
this strategy has flaws because it’s dishonest.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see how we can improve our approach.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;admit-and-recognize-that-people-are-busy&quot;&gt;Admit and Recognize that People are Busy&lt;&#x2F;h2&gt;
&lt;p&gt;When it comes to networking, &lt;strong&gt;there is no free lunch&lt;&#x2F;strong&gt;. The more you give in to
your relationships, the more you’ll get value in return.&lt;&#x2F;p&gt;
&lt;p&gt;Everyone has their responsibilities, agendas, and priorities. So, don’t send
cold emails and cold LinkedIn messages to people and expect them to respond
back.&lt;&#x2F;p&gt;
&lt;p&gt;Know them; nurture a professional relationship with them.&lt;&#x2F;p&gt;
&lt;p&gt;If you don’t act professionally and put in the effort needed, don’t get
surprised when your messages are ignored or even result in being blocked or
reported 99% of the time.&lt;&#x2F;p&gt;
&lt;p&gt;Also if you don’t act professionally, why would you assume that they will find
you suitable for a professional work environment? That’s contradictory in
itself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;consider-the-risks-for-the-person-referring-you&quot;&gt;Consider the Risks for the Person Referring You&lt;&#x2F;h2&gt;
&lt;p&gt;Referring someone for an open position can seriously affect their reputation
within the company if the person gets the job but is not a good fit. Often, this
risk outweighs any benefit (&lt;em&gt;including referral bonuses&lt;&#x2F;em&gt;) they may receive if
you get an offer.&lt;&#x2F;p&gt;
&lt;p&gt;That’s why you must show that you are more than capable of the role. And that,
again, boils down to &lt;strong&gt;nurturing a professional relationship&lt;&#x2F;strong&gt; with the person
&lt;strong&gt;months before&lt;&#x2F;strong&gt;, NOT at the last minute when you see that fancy job
advertisement.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Build relationships before you need them&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understand-the-significance-of-your-request&quot;&gt;Understand the Significance of Your Request&lt;&#x2F;h2&gt;
&lt;p&gt;You’re asking a stranger to invest their time evaluating your skills, abilities,
and credentials. You might even expect feedback, and maybe ask them to pass
along your resume to parties. &lt;strong&gt;That’s a nontrivial demand&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Again, nobody will spend any time doing that if you haven’t already established
a well-founded professional relationship.&lt;&#x2F;p&gt;
&lt;p&gt;And, it’s not about being rude; it is out of necessity: People have so little
time and so many things to do; so why should they help you if they don’t have
confidence and trust in you.&lt;&#x2F;p&gt;
&lt;p&gt;And to nurture the confidence and trust, you need to &lt;strong&gt;build a professional
relationship&lt;&#x2F;strong&gt;. And that takes time, so you’ll need to start building your
relationships way before you initiate your job search.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;embrace-networking&quot;&gt;Embrace Networking&lt;&#x2F;h2&gt;
&lt;p&gt;That’s the third time I’m mentioning &lt;strong&gt;networking&lt;&#x2F;strong&gt;. I think it highlights its
importance.&lt;&#x2F;p&gt;
&lt;p&gt;Effective networking requires &lt;strong&gt;dedication&lt;&#x2F;strong&gt;, &lt;strong&gt;effort&lt;&#x2F;strong&gt;, and &lt;strong&gt;time&lt;&#x2F;strong&gt;. It
requires mutual respect and understanding. Simply sending a “&lt;em&gt;please refer me&lt;&#x2F;em&gt;”
message as if you were a door-to-door salesperson won’t cut it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In today’s interconnected world, &lt;strong&gt;networking&lt;&#x2F;strong&gt; holds importance. Especially
when stakes are so high, the bar is raised to the moon, and everyone is hiring
(&lt;em&gt;or wanting to hire&lt;&#x2F;em&gt;) A players.&lt;&#x2F;p&gt;
&lt;p&gt;Treat the process with care and thoughtfulness, and you’ll find that your
connections are more fruitful and more likely to lead you toward the
opportunities you seek.&lt;&#x2F;p&gt;
&lt;p&gt;Avoid being someone who alienates allies by making attempts at connection
without building the necessary foundations first.&lt;&#x2F;p&gt;
&lt;p&gt;Invest in building connections, grasp the subtleties of engagement, and approach
your networking endeavors with genuine empathy and respect. The rewards will be
significant. Your career will flourish as a result.&lt;&#x2F;p&gt;
&lt;p&gt;Now, go get that job! And, may the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Build Strong Connections to Land Your Dream Job&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Keep Your Secrets... Secret: Introducing VMware Secrets Manager</title>
        <published>2023-08-16T00:00:00+00:00</published>
        <updated>2023-08-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/keep-your-secrets/"/>
        <id>https://zerotohero.dev/top-of-mind/keep-your-secrets/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/keep-your-secrets/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;VSecM-1.png&quot; alt=&quot;Keep Your Secrets… Secret: Introducing VMware Secrets Manager&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the ever-evolving landscape of cloud-native applications, secrets management
is critical to ensuring sensitive information’s security and integrity. While
several solutions are available, the recent shift in HashiCorp’s licensing
towards a Business Source License (BSL) has raised concerns and sparked
discussions within the community.&lt;&#x2F;p&gt;
&lt;p&gt;As the lead architect of &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;&lt;strong&gt;VMware Secrets Manager&lt;&#x2F;strong&gt; (&lt;strong&gt;&lt;em&gt;VSecM&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;)&lt;&#x2F;a&gt;,
I’d like to take this opportunity to introduce our solution, which offers a robust,
flexible, and &lt;strong&gt;permissive&lt;&#x2F;strong&gt; alternative to HashiCorp’s Vault.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;⭐️ Star Us on GitHub ⭐️&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you find value in our approach and want to help others discover this
outstanding technology, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vmware-tanzu&#x2F;secrets-manager&quot;&gt;&lt;strong&gt;star our GitHub
repository&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. Your support helps
increase visibility and encourages more collaboration and innovation within the
community.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;a-new-licensing-landscape&quot;&gt;A New Licensing Landscape&lt;&#x2F;h2&gt;
&lt;p&gt;HashiCorp’s decision to adopt a Business Source License has been viewed by some
as a restrictive move. The BSL, unlike open-source licenses, imposes certain
limitations and conditions that may not align with the needs and values of all
organizations and developers.&lt;&#x2F;p&gt;
&lt;p&gt;In contrast, &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;&lt;strong&gt;VMware Secrets Manager&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is licensed under
the BSD 2-Clause License, a permissive open-source license that encourages
collaboration, innovation, and freedom of use.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vmware-secrets-manager-a-closer-look&quot;&gt;VMware Secrets Manager: A Closer Look&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;VSecM&lt;&#x2F;strong&gt; is designed with modern developers and DevOps professionals in mind.
Here’s why it stands out:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ease of Use&lt;&#x2F;strong&gt;: With a &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;quickstart&#x2F;&quot;&gt;&lt;strong&gt;Quickstart Guide&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
intuitive &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;cli&#x2F;&quot;&gt;&lt;strong&gt;CLI&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, and developer-friendly
&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;sdk&#x2F;&quot;&gt;&lt;strong&gt;SDK&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, &lt;strong&gt;VSecM&lt;&#x2F;strong&gt; simplifies secrets management
without compromising security.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes Is a First-Class Citizen&lt;&#x2F;strong&gt;: &lt;strong&gt;VSecM&lt;&#x2F;strong&gt; seamlessly integrates with
Kubernetes, leveraging &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
for authentication and offering flexible secret storage and transformation
options.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Community Engagement&lt;&#x2F;strong&gt;: We believe in open collaboration and
community-driven development. Our &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;contributing&#x2F;&quot;&gt;&lt;strong&gt;Contributing Guide&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
invites developers to get involved, ask questions, and contribute to the project.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Secure by Default&lt;&#x2F;strong&gt;: &lt;strong&gt;VSecM&lt;&#x2F;strong&gt; offers advanced security features, including
encryption, manual master secret setting, and integration with various backing
stores.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;join-the-future-of-secrets-management&quot;&gt;Join the Future of Secrets Management&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;VMware Secrets Manager&lt;&#x2F;strong&gt; is more than just a tool; it’s a community-driven
project that aims to redefine secrets management in a cloud-native world. We
invite you to explore &lt;strong&gt;VSecM&lt;&#x2F;strong&gt;, contribute to its growth, and join us in
shaping the future of secure and resilient applications.&lt;&#x2F;p&gt;
&lt;p&gt;Whether you’re a developer looking to contribute or an organization seeking a
flexible and secure solution for secrets management, &lt;strong&gt;VSecM&lt;&#x2F;strong&gt; offers a
welcoming and innovative platform.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;this-is-just-the-beginning-a-vision-for-the-future&quot;&gt;This is Just the Beginning: A Vision for the Future&lt;&#x2F;h3&gt;
&lt;p&gt;At &lt;strong&gt;VMware Secrets Manager&lt;&#x2F;strong&gt;, we believe in continuous innovation and growth.
Our &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;roadmap&quot;&gt;&lt;strong&gt;roadmap&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is a testament to our
commitment to delivering cutting-edge solutions that meet the evolving needs of
the cloud-native community.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a glimpse of what’s on the horizon:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stability and Usability Enhancements&lt;&#x2F;strong&gt;: Upcoming releases focus on improving
stability, documentation, build automation, and overall user experience.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Innovative Features&lt;&#x2F;strong&gt;: From Secretless VSecM to machine-readable logs,
performance improvements, and large-scale secret ingestion, we’re pushing the
boundaries of what’s possible in secrets management.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Integration and Compatibility&lt;&#x2F;strong&gt;: Future iterations include integration with
AWS KMS, Azure Key Vault, Google Cloud KMS, and even HashiCorp Vault,
expanding the reach and compatibility of VSecM.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Community Development and Collaboration&lt;&#x2F;strong&gt;: We’re investing in community
development efforts, multi-cluster secret federation, and creating
abstractions to make cloud integrations easier.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Our roadmap is not just a plan; it’s a promise to our users and contributors
that we have a lot planned for the future of VMware Secrets Manager. We’re
excited about the journey ahead and invite you to be a part of it.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;⭐️ Star Us on GitHub ⭐️&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you find value in our approach and want to help others discover this
outstanding technology, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vmware-tanzu&#x2F;secrets-manager&quot;&gt;&lt;strong&gt;star our GitHub repository&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
Your support helps increase visibility and encourages more collaboration and
innovation within the community.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;help-us-shape-the-future&quot;&gt;Help Us Shape the Future&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;&lt;strong&gt;Start your journey with VMware Secrets Manager today&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
and unlock the potential of cloud-native secrets management.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Keep Your Secrets… Secret&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Long Live Aegis!</title>
        <published>2023-08-03T00:00:00+00:00</published>
        <updated>2023-08-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/vmware-secrets-manager/"/>
        <id>https://zerotohero.dev/top-of-mind/vmware-secrets-manager/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/vmware-secrets-manager/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;aegis.png&quot; alt=&quot;Long Live Aegis!&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Dear community,&lt;&#x2F;p&gt;
&lt;p&gt;I am thrilled to share an update with all of you. &lt;strong&gt;Aegis&lt;&#x2F;strong&gt; has transformed and
landed into its new home! It is now entering a phase as **VMware Secrets Manager
** for Cloud-Native workloads!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vmware-tanzu&#x2F;secrets-manager&quot;&gt;Please learn more about our project in the repository
following this link&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Also, &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;stay updated with us on our website at &lt;strong&gt;vsecm.com&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;coming-up-next&quot;&gt;Coming Up Next&lt;&#x2F;h2&gt;
&lt;p&gt;This change represents more than just a new name. It symbolizes our unwavering
dedication to pushing boundaries, fostering innovation, and delivering reliable
solutions for your cloud-native workloads.&lt;&#x2F;p&gt;
&lt;p&gt;As things settle down, we’re already busy planning our steps. You can keep track
of our progress.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;roadmap&#x2F;&quot;&gt;Follow our plans in our roadmap page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We aim to provide how the project will proceed as transparently as possible. Of
course, our contribution cadence and frequency depend on the availability and
commitment of our core contributors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;stronger-together&quot;&gt;Stronger Together&lt;&#x2F;h2&gt;
&lt;p&gt;While Aegis has served us well, &lt;strong&gt;VMware Secrets Manager&lt;&#x2F;strong&gt; under VMware Tanzu
GitHub organization opens up possibilities. It brings us closer to fulfilling
our promise of offering you an efficient, secure, and cutting-edge cloud-native
Secrets Management solution.&lt;&#x2F;p&gt;
&lt;p&gt;We are thrilled about this chapter and eagerly anticipate serving you, our
community, as we move forward. Your contributions and feedback mean the world to
us.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;who-else-wants-to-contribute&quot;&gt;Who Else Wants to Contribute?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;community&#x2F;&quot;&gt;Feel free to reach out if you’re interested in contributing to &lt;strong&gt;VMware Secrets
Manager&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Stay tuned for updates and developments as we continue on this journey.&lt;&#x2F;p&gt;
&lt;p&gt;Thank you very much for your support!&lt;&#x2F;p&gt;
&lt;p&gt;Turtle power 🐢⚡️.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Long Live Aegis!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Write to Forget</title>
        <published>2023-07-25T00:00:00+00:00</published>
        <updated>2023-07-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/write-to-forget/"/>
        <id>https://zerotohero.dev/top-of-mind/write-to-forget/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/write-to-forget/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;write-to-forget.png&quot; alt=&quot;Write to Forget&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Writing helps us remember things to hold onto thoughts, ideas, and information.
However, there’s a perspective to consider; perhaps we write not to remember but
actually to &lt;strong&gt;forget&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;give-yourself-permission-to-forget&quot;&gt;Give Yourself Permission to Forget&lt;&#x2F;h2&gt;
&lt;p&gt;Please take a moment to think about it; when we jot down a reminder, capture an
insight, or make a to-do list, it brings a sense of relief and &lt;strong&gt;peace of
mind&lt;&#x2F;strong&gt;. By externalizing and writing our thoughts, we can &lt;strong&gt;declutter&lt;&#x2F;strong&gt; our space
and “forget” what we just wrote. It’s like giving ourselves &lt;strong&gt;permission to let
go&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Think of your written words as a storage device providing room for thoughts,
ideas, or reminders that would otherwise occupy our minds. It’s like a canvas
where we can pour out ideas swirling inside us and lighten our load.&lt;&#x2F;p&gt;
&lt;p&gt;By freeing up space, we create the opportunity for fresh ideas. Our brains are
no longer burdened with holding onto information; they can now generate thoughts
and delve into deeper cognitive processes more freely.&lt;&#x2F;p&gt;
&lt;p&gt;This leads us to an open-minded state of thinking that is not restricted by the
need to retain information.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;good-ideas-will-come-back&quot;&gt;Good Ideas Will Come Back&lt;&#x2F;h2&gt;
&lt;p&gt;This viewpoint also reassures the understanding that if an idea is fundamental,
it will resurface. The subconscious mind can recall ideas when they’re most
necessary, demonstrating its &lt;strong&gt;power&lt;&#x2F;strong&gt; and &lt;strong&gt;resourcefulness&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If an idea doesn’t resurface, perhaps it wasn’t as significant as initially
thought. It’s a reminder not to cling tightly to every thought, acknowledging
the fleeting nature of ideas and the continuous flow of our minds.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;grab-a-pen-and-let-your-mind-wander&quot;&gt;Grab a Pen and Let Your Mind Wander&lt;&#x2F;h2&gt;
&lt;p&gt;In summary, writing to forget does not indicate a lack of importance.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It serves as a strategy for the mental organization, promoting &lt;strong&gt;cognitive
flexibility&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;It involves a &lt;strong&gt;shift in perspective&lt;&#x2F;strong&gt;, gently encouraging us to release the
anxiety of remembering every detail, thought, and idea.&lt;&#x2F;li&gt;
&lt;li&gt;Doing so creates an environment for &lt;strong&gt;creativity&lt;&#x2F;strong&gt;, &lt;strong&gt;innovation&lt;&#x2F;strong&gt;, and
&lt;strong&gt;broad thinking&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So grab a pen, express your thoughts freely, and let go. Through forgetting, we
allow our minds to focus on what matters.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Write to Forget&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Craft Captivating Documentation</title>
        <published>2023-07-21T00:00:00+00:00</published>
        <updated>2023-07-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/craft-captivating-documentation/"/>
        <id>https://zerotohero.dev/top-of-mind/craft-captivating-documentation/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/craft-captivating-documentation/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;docs.png&quot; alt=&quot;Craft Captivating Documentation&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For many, writing documentation can feel like a task that clashes with the
innovative world of technology. However, crafted documentation can determine
whether a project gains recognition or fades into obscurity.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s delve into some tips to assist you in producing concise and comprehensive
documentation that stands out.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;craft-engaging-and-clear-documentation&quot;&gt;Craft Engaging and Clear Documentation&lt;&#x2F;h2&gt;
&lt;p&gt;When developing your documentation, it’s essential to cultivate an inviting
atmosphere. Aim to make readers feel welcome and comfortable. Strike an
approachable tone while maintaining conciseness and precision. This approach
encourages readers to explore your project in depth.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;strive-for-comprehensive-coverage&quot;&gt;Strive for Comprehensive Coverage&lt;&#x2F;h2&gt;
&lt;p&gt;Ensure that your documentation encompasses all aspects of your project
regardless of how minor they may appear. You can prevent confusion and enhance
the likelihood of effective utilization by providing an overview.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;design-for-easy-navigation&quot;&gt;Design for Easy Navigation&lt;&#x2F;h2&gt;
&lt;p&gt;Despite your efforts to be thorough, only some users have the luxury of time to
scrutinize every detail. Structure your documentation in a way that allows for
effortless navigation.&lt;&#x2F;p&gt;
&lt;p&gt;Utilize headers, subheaders, bullet points, tables, and diagrams to break up the
text and highlight issues for reference.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;provide-practical-examples&quot;&gt;Provide Practical Examples&lt;&#x2F;h2&gt;
&lt;p&gt;Include real-life examples whenever possible to help readers understand concepts
better. These practical examples and use cases not only clarify how a feature or
process works but also demonstrate its value.&lt;&#x2F;p&gt;
&lt;p&gt;It can be beneficial to repeat concepts strategically, as this will ensure that
readers fully grasp the information. However, avoid repetition to maintain
engagement and prevent monotony.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;don-t-let-your-pages-collect-dust&quot;&gt;Don’t Let Your Pages Collect Dust&lt;&#x2F;h2&gt;
&lt;p&gt;In the fast-paced world of technology, keeping your documentation up-to-date is
crucial. Regularly update it to reflect the changes or improvements in your
project.&lt;&#x2F;p&gt;
&lt;p&gt;Outdated documentation can lead to frustration and confusion, negatively
impacting the user experience.&lt;&#x2F;p&gt;
&lt;p&gt;Up-to-date documentation is how to foster community involvement or have an
open-source project make your documentation accessible for contributions. Clear
guidelines on how users can submit corrections or additions can encourage
collaboration. Enhance the quality of the documentation itself.&lt;&#x2F;p&gt;
&lt;p&gt;In addition, ensure that your crafted documentation is easily discoverable. Make
it accessible and user-friendly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In summary, although creating documentation is a task, it plays a role in the
success of your project. By applying these recommendations, you can develop
concise documentation that informs, captivates, and assists users, ultimately
positioning your project for more outstanding achievements.&lt;&#x2F;p&gt;
&lt;p&gt;Go ahead, put your docs 🦆🦆🦆 in a row.&lt;&#x2F;p&gt;
&lt;p&gt;And until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Craft Captivating Documentation&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Reshape Your Workspace, Reshape Your Future</title>
        <published>2023-07-12T00:00:00+00:00</published>
        <updated>2023-07-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/reshape-your-workspace/"/>
        <id>https://zerotohero.dev/top-of-mind/reshape-your-workspace/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/reshape-your-workspace/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;worspace.png&quot; alt=&quot;Reshape Your Workspace, Reshape Your Future&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Your workspace is not just an area where you do your work; it’s part of your
professional persona and an extension of your career aspirations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;your-workspace-reflects-you&quot;&gt;Your Workspace Reflects You&lt;&#x2F;h2&gt;
&lt;p&gt;Give a serious look at how your desktop looks, both physically and on your
computer. Ponder over the emotions it evokes as soon as you step into it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;does-it-spark-joy&quot;&gt;Does it Spark Joy?&lt;&#x2F;h2&gt;
&lt;p&gt;Does it promote productivity and nurture your workplace connections? Is it a
mirror to your professional evolution, a reminder of your accomplishments, or
does it reflect your professional aspirations?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;transform-it&quot;&gt;Transform It&lt;&#x2F;h2&gt;
&lt;p&gt;Minor adjustments can yield significant transformations. Consider modifying your
work environment for &lt;strong&gt;productivity&lt;&#x2F;strong&gt; and &lt;strong&gt;ambiance&lt;&#x2F;strong&gt;. The more refreshing your
workspace is, the better you can focus on your tasks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;break-the-monotony&quot;&gt;Break the Monotony&lt;&#x2F;h2&gt;
&lt;p&gt;In recent years our work lives have shifted from being centered around a
location, often an office space, to working from our homes. And that’s awesome.
Work is something you do; it is not somewhere you go.&lt;&#x2F;p&gt;
&lt;p&gt;That said, you might want to explore going to the office now and then, or even
if not, the company working from a bustling café or even a coworking space.&lt;&#x2F;p&gt;
&lt;p&gt;This change will change your routine, help you think more creatively, and even
provide a new environment full of energy and networking opportunities.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Change is good&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;set-your-boundaries&quot;&gt;Set Your Boundaries&lt;&#x2F;h2&gt;
&lt;p&gt;Finally, it’s &lt;strong&gt;vital&lt;&#x2F;strong&gt; to delineate a clear boundary between your personal and
professional spaces.&lt;&#x2F;p&gt;
&lt;p&gt;This physical distinction is essential for communicating to others and, more
importantly, to yourself when your workday ends and what comes next.&lt;&#x2F;p&gt;
&lt;p&gt;This separation aids in achieving a healthier work-life balance, helping you
disconnect and relax after a busy day.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;your-workspace-is-pivotal&quot;&gt;Your Workspace Is Pivotal&lt;&#x2F;h2&gt;
&lt;p&gt;You might have yet to realize that your workspace is essential to your
professional growth. Cultivating an environment that reflects your identity and
caters to your work needs is an investment in your professional future.&lt;&#x2F;p&gt;
&lt;p&gt;And that was your “&lt;em&gt;top of mind&lt;&#x2F;em&gt;.”&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Reshape Your Workspace, Reshape Your Future&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Secrets</title>
        <published>2023-07-11T00:00:00+00:00</published>
        <updated>2023-07-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/secrets/"/>
        <id>https://zerotohero.dev/top-of-mind/secrets/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/secrets/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;v0lkan_Secrets_must_be_exposed_when_found._Detours_must_be_take_0aa4d20b-246e-4ac2-892e-4dca002ec2c8.png&quot; alt=&quot;Secrets&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is one of the best quotes about being &lt;strong&gt;proactive&lt;&#x2F;strong&gt;, embracing
responsibility, &lt;strong&gt;adaptability&lt;&#x2F;strong&gt;, and &lt;strong&gt;transparency&lt;&#x2F;strong&gt; in our actions:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Secrets&lt;&#x2F;strong&gt; must be exposed when found. Detours must be taken when
encountered. And if you are the one who stands at the crossroads or the place of
concealment, you must never leave it to another to act in your place.“ (&lt;em&gt;from
Star Wars Episode 1&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To break it down:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If you discover a hidden truth or secret, it’s your responsibility to &lt;strong&gt;bring
it to light&lt;&#x2F;strong&gt;. Concealment often leads to misunderstanding or deceit, and
exposing it can lead to clarity and justice. Be transperent, have trust.&lt;&#x2F;li&gt;
&lt;li&gt;When faced with obstacles or challenges, sometimes the best way forward isn’t
a straight path, but rather to go around, adapt, and &lt;strong&gt;explore other routes&lt;&#x2F;strong&gt;.
This can also mean embracing unexpected changes and turning them into
opportunities.&lt;&#x2F;li&gt;
&lt;li&gt;If you are in a position where you can make a decision, it’s crucial to take
that responsibility seriously and not leave it to others. Be &lt;strong&gt;proactive&lt;&#x2F;strong&gt;, *
&lt;em&gt;accountable&lt;&#x2F;em&gt;*, and &lt;strong&gt;do not shy away from&lt;&#x2F;strong&gt; making decisions or &lt;strong&gt;taking
actions&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Secrets&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Who Are You?</title>
        <published>2023-07-03T00:00:00+00:00</published>
        <updated>2023-07-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0008/"/>
        <id>https://zerotohero.dev/highlights/issue-0008/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0008/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;reflective.png&quot; alt=&quot;Who Are You?&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Who Are You?&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the eighth issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;I’m still focusing on creating an &lt;strong&gt;MVP&lt;&#x2F;strong&gt; for the &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;
microservice and thus there’s a lot of code, yet not as many articles.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-new-on-zero-to-hero-woman-fried-egg&quot;&gt;What’s New on &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; 👩‍🍳&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve been working on several microservices, including the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mailer&lt;&#x2F;strong&gt;: To send system messages&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Store&lt;&#x2F;strong&gt;: To integrate with Stripe&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;IDM&lt;&#x2F;strong&gt;: To manage users, authentication, authorization&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Questions&lt;&#x2F;strong&gt;: The service to serve… well… questions, answers, and related
notes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;…and maybe a bunch of other services. The services are &lt;strong&gt;Go&lt;&#x2F;strong&gt;-based, and it’s
amusing to develop. I’ll share the code with you once the code is in a “&lt;em&gt;shareable&lt;&#x2F;em&gt;”
state 😃.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-m-live-streaming-the-development-process&quot;&gt;I’m Live Streaming the Development Process&lt;&#x2F;h2&gt;
&lt;p&gt;On the flip
side, &lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;I’m streaming while coding the entire app&lt;&#x2F;a&gt;.
Follow the channel, and you’ll be notified as soon as I’m online.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;radio-zero-to-hero&quot;&gt;Radio Zero to Hero&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2024-05-21&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;Radio Z2H didn’t work as expected. I’ve archived the project for now.
I may do similar experiments in the future. I am a crazymaker, after all 😜.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is something experimental that I’m trying. I’m not even sure it’s against
Twitch’s rules and guidelines, but as far as my research is concerned, it’s
totally fair game:&lt;&#x2F;p&gt;
&lt;p&gt;While I’m not live screencasting my development environment, I’m streaming *
&lt;em&gt;awesome beats&lt;&#x2F;em&gt;* on the channel.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;07&amp;#x2F;Screen-Shot-2021-07-02-at-5.22.59-PM.png&quot; alt=&quot;Unearthly Beats --- The music is on forever!&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Unearthly Beats --- The music is on forever!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;If you want to &lt;strong&gt;get in the zone&lt;&#x2F;strong&gt; while coding, designing, developing,
hacking… &lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;Tune in to Radio Zero to Hero on Twitch&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;As I said, it’s &lt;strong&gt;experimental&lt;&#x2F;strong&gt;, so I don’t know if I’ll continue it. Yet, as
the time of this writing, I’ve been streaming music non-stop for the last 15
hours 🙂.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;If you are on social media, you have probably seen taglines like “&lt;em&gt;ex-(insert
company name here)&lt;&#x2F;em&gt;”. While there’s nothing wrong with associating with one’s
old company, does that define the person?&lt;&#x2F;p&gt;
&lt;p&gt;Does labeling yourself “&lt;em&gt;Ex-Infinidashian&lt;&#x2F;em&gt;” just to hold onto the sense of
worth, or just to associate with being “accepted” defines your true self?—Same
goes for the top-tier college that you’ve graduated from.&lt;&#x2F;p&gt;
&lt;p&gt;So what’s my advice, you may ask?&lt;&#x2F;p&gt;
&lt;p&gt;My advice is nothing that you haven’t heard of before:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Build your own brand&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of attaching your identity to something that’s not you, build a brand
around you. Define your true self.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Be &lt;strong&gt;authentic&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Communicate&lt;&#x2F;strong&gt; your own beliefs and truths.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Add value&lt;&#x2F;strong&gt; to the community towards your actions and deeds.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Don’t rely on the reputation of something external to define who you are. Be
self-aware: &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;You are more than that&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Think about what you uniquely, &lt;strong&gt;unequivocally&lt;&#x2F;strong&gt;, contribute to the world.&lt;&#x2F;p&gt;
&lt;p&gt;Tangential to that is the &lt;em&gt;stigma&lt;&#x2F;em&gt; that comes with rejection: Being rejected
by (pick your top company or college of your choice) can suck. Yet, neither
rejection nor acceptance defines you: &lt;strong&gt;You&lt;&#x2F;strong&gt; define you—If they don’t get
you, it’s their loss, not yours.&lt;&#x2F;p&gt;
&lt;p&gt;Trust me, by investing in yourself through personal and professional
development, you can achieve so much than any big fat brand can “&lt;em&gt;ever&lt;&#x2F;em&gt;” offer
you.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Trust&lt;&#x2F;strong&gt; in yourself. &lt;strong&gt;Define&lt;&#x2F;strong&gt; yourself.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Who&lt;&#x2F;strong&gt; are you?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=27695975&quot;&gt;&lt;strong&gt;AWS Infinidash&lt;&#x2F;strong&gt;: Finally an AWS product that You’ll completely understand&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=3OsP9TiEGZE&quot;&gt;So meta, very turtle: A Deep Dive on Kubernetes Cluster API&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mergeboard.com&#x2F;blog&#x2F;2-qemu-microvm-docker&quot;&gt;Execute Docker containers as QEMU micro VMs&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 8: Who Are You?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Winning at Work: Thriving With Difficult Colleagues</title>
        <published>2023-05-27T00:00:00+00:00</published>
        <updated>2023-05-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0026/"/>
        <id>https://zerotohero.dev/highlights/issue-0026/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0026/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;heart.png&quot; alt=&quot;Communication is key.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Communication is key.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the 26th issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;Yes, you got me! This newsletter hasn’t been up to its “&lt;em&gt;weekly&lt;&#x2F;em&gt;” moniker. But
hey, one can always hope, right 🙂? 🌼&lt;&#x2F;p&gt;
&lt;p&gt;Let me dive into the latest happenings since the last issue without further ado.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hello-to-the-spiffe-steering-committee-wave&quot;&gt;Hello to the SPIFFE Steering Committee 👋&lt;&#x2F;h2&gt;
&lt;p&gt;I am thrilled to share that I’ve recently been chosen as a member of the
[&lt;strong&gt;SPIFFE Steering Committee&lt;&#x2F;strong&gt; (SSC)][ssc.&lt;&#x2F;p&gt;
&lt;p&gt;What is the &lt;strong&gt;SSC&lt;&#x2F;strong&gt;, you ask? A team of dedicated volunteers drives the
strategic direction and growth of all projects under the
&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; umbrella. This committed group is the &lt;strong&gt;only&lt;&#x2F;strong&gt; authority
on everything &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;-related. If you’d like to learn more about the role
and mission of the SSC, please check
out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spiffe&#x2F;blob&#x2F;main&#x2F;ssc&#x2F;CHARTER.md&quot;&gt;the SSC Charter&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I won’t sugarcoat it: It is a significant workload and responsibility. Yet, I’m
humbled and buzzing to participate in this remarkable initiative.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-practical-guide-to-kubernetes-rocket&quot;&gt;&lt;strong&gt;A Practical Guide to Kubernetes&lt;&#x2F;strong&gt; 🚀&lt;&#x2F;h2&gt;
&lt;p&gt;Rest assured, I’ll be adding a veritable amount of information to this series,
creating fresh content as time goes on. So, watch this index page for upcoming
articles.&lt;&#x2F;p&gt;
&lt;p&gt;In [&lt;strong&gt;A Practical Guide to Kubernetes&lt;&#x2F;strong&gt;][kubernetes-guide],
I aspire to provide a balanced approach to your learning journey, merging just
enough theory with practical examples and use cases to solidify your
understanding.&lt;&#x2F;p&gt;
&lt;p&gt;My life is a beautifully orchestrated chaos, a ballet of different tasks and
projects swirling around me 🙂—So, I don’t have an exact timeline for
completing this guide. Instead, it will progress at its own pace, and I trust
you’ll enjoy every step of this adventure with me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;talk-spiffe-to-me-speech-balloon&quot;&gt;Talk SPIFFE to Me 💬&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2024-05-27&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We paused &lt;strong&gt;TalkSPIFFE&lt;&#x2F;strong&gt; for a while. We might resume it in the future.
SPIFFE already has its official community snyc-ups, and duplicating the
effort didn’t make sense. We might revisit the idea in the future, but for now,
it’s on hold.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;05&amp;#x2F;Screenshot-2023-05-23-at-4.36.47-PM.png&quot; alt=&quot;TalkSPIFFE: coming to a live stream near you&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;TalkSPIFFE: coming to a live stream near you&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Another exciting news on the horizon: &lt;a href=&quot;https:&#x2F;&#x2F;www.linkedin.com&#x2F;in&#x2F;elinesterov&#x2F;&quot;&gt;&lt;strong&gt;Eli Nesterov&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and I are in the
planning stages of a weekly half-hour (&lt;em&gt;or longer, as things unfold&lt;&#x2F;em&gt;) chat
about &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll be addressing questions and comments from the community and generally
nerding out over all things SPIFFE.&lt;&#x2F;p&gt;
&lt;p&gt;We haven’t finalized the timing just yet, but stay tuned for a live stream
coming your way soon!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;keep-your-secrets-secret-with-aegis&quot;&gt;Keep Your Secrets “Secret” with &lt;strong&gt;Aegis&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Over the past few months, I’ve been pouring my heart and soul into an
extraordinary cloud-native project called &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;&lt;strong&gt;Aegis&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, and
let me tell you—it’s nothing short of a game-changer. It has received *
&lt;em&gt;tremendous&lt;&#x2F;em&gt;* community support so far; [check out the testimonials on
&lt;strong&gt;Aegis&lt;&#x2F;strong&gt;’ home page][aegis-endorsements] if you don’t believe me.&lt;&#x2F;p&gt;
&lt;p&gt;But what’s the buzz about &lt;strong&gt;Aegis&lt;&#x2F;strong&gt;, you ask? Aegis is a cloud-native,
Kubernetes-first secrets manager. It seamlessly dispatches securely stored
secrets to workloads whenever they are in need.&lt;&#x2F;p&gt;

&lt;a href=&quot;https:&amp;#x2F;&amp;#x2F;vsecm.com&amp;#x2F;&quot; title=&quot;Aegis: Keep your secrets... secret.&quot;&gt;
&lt;div class=&quot;z2h-image&quot;&gt;
  &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2023&amp;#x2F;05&amp;#x2F;Screenshot-2023-05-24-at-9.23.33-PM.png&quot; alt=&quot;Aegis: Keep your secrets... secret.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
  &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
    margin-top: -1.125em; font-size: 1em;&quot;&gt;Aegis: Keep your secrets... secret.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;a&gt;
&lt;p&gt;But wait, there’s more! &lt;strong&gt;Aegis&lt;&#x2F;strong&gt; not only embraces Kubernetes security
primitives but also wields the power of &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, along
with robust, top-tier encryption. With these powerful allies at its side, it is
a &lt;strong&gt;ground up re-imagination&lt;&#x2F;strong&gt; , solving the problem in a way that is congruent
with the future of cloud computing.&lt;&#x2F;p&gt;
&lt;p&gt;And that’s not me who says that; it’s &lt;strong&gt;Evan&lt;&#x2F;strong&gt;—the-Zero-Trust—&lt;strong&gt;Gilman&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;em&gt;Secrets management is a relatively mature technology, however its role in
the cloud native landscape has been dramatically evolving. Aegis is a
ground-up re-imagination, solving the problem in a way that is congruent
with the future of cloud computing.&lt;&#x2F;em&gt;”
—&lt;strong&gt;Evan Gilman, Author of Zero Trust Networks (O’Reilly), SPIRE core
maintainer&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So, what are you waiting for? &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;&lt;strong&gt;Dive headfirst into Aegis&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. The water
is chill, but you get used to it 🙂.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;screen-time-is-back-movie-camera&quot;&gt;Screen Time Is Back! 🎥&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s another delight for you:&lt;&#x2F;p&gt;
&lt;p&gt;I’ve decided to breathe new life into my screencasts on &lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;&lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt;
Twitch channel&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As with everything else in my wonderfully chaotic existence, the timing will
vary. However, I promise to jump into it whenever I find a slice of time and an
energy boost during Pacific afternoons and evenings.&lt;&#x2F;p&gt;
&lt;p&gt;Be there; I’d love to have your support and chatter.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;Everyone has “&lt;em&gt;that&lt;&#x2F;em&gt;” teammate whose sole purpose of existence (&lt;em&gt;you believe&lt;&#x2F;em&gt;)
is to test your patience.&lt;&#x2F;p&gt;
&lt;p&gt;You tried to motivate them to modify their behavior, but they are as obstinate
as a goat. They never give in, never give up, and continue to annoy you.&lt;&#x2F;p&gt;
&lt;p&gt;Can you master embracing their imperfections without letting resentment seep
into your heart?&lt;&#x2F;p&gt;
&lt;p&gt;Here are a few tips about how to make your life less of a living hell.&lt;&#x2F;p&gt;
&lt;p&gt;Ponder upon your ethos around forgiveness. &lt;strong&gt;Rediscover your values&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Are there situations that merit it, and what might they be? Do you place
boundaries on how frequently you bestow forgiveness? Have you declared some
actions as beyond redemption?&lt;&#x2F;p&gt;
&lt;p&gt;First, &lt;strong&gt;disentangle your feelings from your actions&lt;&#x2F;strong&gt;. Capture all the
sentiments your co-worker stirs within you—disappointment, hostility,
apprehension, and so forth. Then, mull over how these feelings have guided your
actions.&lt;&#x2F;p&gt;
&lt;p&gt;Then, &lt;strong&gt;try to see the complete narrative&lt;&#x2F;strong&gt;. Withdraw from the fray and
reconsider: Have you overlooked any factors? Could you be inadvertently adding
fuel to the fire? Are you being unduly harsh?&lt;&#x2F;p&gt;
&lt;p&gt;Finally, try a new, fresh perspective about the situation and your colleague.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, &lt;strong&gt;offer forgiveness and realign your approach&lt;&#x2F;strong&gt;. Make a deliberate
decision to release your negative emotions towards your colleague.&lt;&#x2F;p&gt;
&lt;p&gt;Equally significant, set yourself free from any role you’ve assumed so far.
People, for all sorts of reasons, can be, or can become different than their
true selves.&lt;&#x2F;p&gt;
&lt;p&gt;In that case, embodying more grace, openness, and kindness will help a lot. Both
to you, and to the other person.&lt;&#x2F;p&gt;
&lt;p&gt;We are just human after all.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;railway.app&#x2F;&quot;&gt;&lt;strong&gt;Railway&lt;&#x2F;strong&gt; deploys your projects into the cloud; like a DevOps…ish
Heroku&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;foxrot-search.com&#x2F;&quot;&gt;If you are seeking for something more powerful than Mac OS’ spotlight
index then &lt;strong&gt;Foxtrot Search&lt;&#x2F;strong&gt; maybe what you are looking for&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?app=desktop&amp;amp;v=VGdNrewDw3M&quot;&gt;&lt;strong&gt;The Art of Personal Failure&lt;&#x2F;strong&gt; from by no one but the most snarkiest
person who yells into the cloud&lt;&#x2F;a&gt;]&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Who Else Wants to Have Their Own Mastodon Server?</title>
        <published>2023-05-27T00:00:00+00:00</published>
        <updated>2023-05-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/tips/mastodon-101/"/>
        <id>https://zerotohero.dev/tips/mastodon-101/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/tips/mastodon-101/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;eli.png&quot; alt=&quot;Uliphant.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Uliphant.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;&#x2F;strong&gt; (2024-03-05)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;vadidekivolkan&quot;&gt;I am back on Twitter&lt;&#x2F;a&gt; . I still think
Elon is a terrible human being and he does not know jack shit about what he’s
doing; however, Twitter is still the best way to represent the communities I
represent, and spread the word around when needed. I have other reasons to be
back, which I’ll try to expand in this sidenote a bit.&lt;&#x2F;p&gt;
&lt;p&gt;For starters, when you see everyone who despises Elon, still continue
tweeting, it does not make sense to shield you away. I tried that for at
least six months. For &lt;strong&gt;six freaking months&lt;&#x2F;strong&gt;, I was only at Mastodon, not even
glancing at Twitter. But when I checked back, I realized every single person who
was against Elon was still on the platform.&lt;&#x2F;p&gt;
&lt;p&gt;If we don’t move as a community, my individual resistance is just futile,
and even counterproductive. So, I’m still on the platform. Yes, Twitter
is a racist, sexist, misogynistic, hatred-fulled dumspster fire; however, no
alternative platform has been strong enough to force it to extinction. For
whatever reason, it’s still around.&lt;&#x2F;p&gt;
&lt;p&gt;The current Twitter is like a democracy ran by a tyrant. People are
(&lt;em&gt;still&lt;&#x2F;em&gt;) there, because no matter how much it sucks, it is the only platform
that helps them connect to the world at scale. When you run away, you isolate
yourself.&lt;&#x2F;p&gt;
&lt;p&gt;Social isolation is the opposite of social media: Nobody wants that.&lt;&#x2F;p&gt;
&lt;p&gt;So, as long as there is no significant competitor to take its place, this hell
hole of a birdsite will continue to exist. And I will be there being myself, not
giving a flying clue to others.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After &lt;a href=&quot;https:&#x2F;&#x2F;www.washingtonpost.com&#x2F;business&#x2F;2022&#x2F;11&#x2F;09&#x2F;elon-musk-how-not-to-fire-employees&#x2F;&quot;&gt;all&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.wired.com&#x2F;story&#x2F;twitter-users-mastodon-meltdown&#x2F;&quot;&gt;the&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;variety.com&#x2F;2022&#x2F;digital&#x2F;news&#x2F;mark-cuban-slams-elon-musk-twitter-verification-plan-nightmare-1235429190&#x2F;&quot;&gt;madness&lt;&#x2F;a&gt;
that has been happening in the birdsite,
I flipped the switch and &lt;a href=&quot;http:&#x2F;&#x2F;hachyderm.io&#x2F;@volkan&quot;&gt;joined Mastodon (on Hachyderm,
where all the misfits hang out)&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With that, I have also wanted to create my own Mastodon instance for a while.&lt;&#x2F;p&gt;
&lt;p&gt;This article summarizes my experiences with the process and provides tips and
tricks to those who wish to follow the same path.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;This Article Applies to&lt;&#x2F;strong&gt; &lt;strong&gt;Mastodon v3.5.3&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The article here discusses my deployment experience for v3.5.3 of Mastodon. If
you are deploying a different
version, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mastodon&#x2F;mastodon&quot;&gt;make sure to follow the official installation guides&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve recently upgraded to a much newer version, and the installation&#x2F;upgrade
experience was &lt;strong&gt;very&lt;&#x2F;strong&gt; smooth.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;what-is-a-mastodon-instance&quot;&gt;What Is a Mastodon Instance?&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Interested? Check Out Fedi.Tips&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For those new to the concept and want to learn more about &lt;strong&gt;Mastodon&lt;&#x2F;strong&gt; and the
&lt;strong&gt;Fediverse&lt;&#x2F;strong&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;fedi.tips&#x2F;&quot;&gt;fedi.tips&lt;&#x2F;a&gt; is a great reference.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To sum it up at a very high level, &lt;strong&gt;Fediverse&lt;&#x2F;strong&gt; is a collection of
independently-run servers. You can create an account in any one of them and
follow, like, comment, and otherwise interact with anyone else with thousands of
other servers.&lt;&#x2F;p&gt;
&lt;p&gt;It’s like you have a passport tied to a single country. And with that passport,
you can visit any country you like and interact with the people and culture.
So that’s where the “&lt;em&gt;Fed&lt;&#x2F;em&gt;” of the &lt;strong&gt;Fediverse&lt;&#x2F;strong&gt; comes from: It is
“&lt;em&gt;federated&lt;&#x2F;em&gt;.”&lt;&#x2F;p&gt;
&lt;p&gt;Though, if you are at a point to deploy your own Mastodon instance, you probably
already know that 😀.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-would-you-want-your-own-instance&quot;&gt;Why Would You Want Your Own Instance?&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2024-05-27&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I stopped using my personal mastodon instance on &lt;code&gt;z2h.dev&lt;&#x2F;code&gt;;
I have other plans for the domain. I’m still on Hachyderm, though.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So, why would anyone want to create their own &lt;strong&gt;Mastodon&lt;&#x2F;strong&gt; instance?&lt;&#x2F;p&gt;
&lt;p&gt;The first thing is, with your instance, you have total control over the content
and the community. If you are a &lt;strong&gt;content creator&lt;&#x2F;strong&gt; or someone with relatively
high visibility, it makes perfect sense to have your own Mastodon instance and
interact with people who want the hear what you have to say there.&lt;&#x2F;p&gt;
&lt;p&gt;With this approach, you manage your identity instead of letting your identity
become an advertising opportunity for a billion-dollar corporation.&lt;&#x2F;p&gt;
&lt;p&gt;Secondly, use it as a &lt;strong&gt;microblog&lt;&#x2F;strong&gt;, where you gather your thoughts and share
one-off ideas. If they are not that interesting to others, who cares 🤷‍♂️? It’s
your instance, server, ideas, and rules. I use my instance
to write down random &lt;em&gt;to-do&lt;&#x2F;em&gt; notes, share bookmarks to things I might not easily
find later, and so on.&lt;&#x2F;p&gt;
&lt;p&gt;Or you can do it out of &lt;strong&gt;curiosity&lt;&#x2F;strong&gt;: To have fun exploring new technology,
because you can 🙂. No matter your intention, if you want to create your
instance, here is my recent experience.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;z2h.dev is my Little Kingdom&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As of now, I’m running a single-person instance. Like, it’s only me on the
server, sharing my random stuff. Yet, it’s public; so people still come and go
and occasionally like and boost the content too.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Having a single-person instance, my compute requirements are minimal. Keep in
mind that as the number of users in your instance increase, so will your compute
requirements.&lt;&#x2F;p&gt;
&lt;p&gt;Mastodon can be a beast to scale up, especially if your community is active,
vibrant, and highly engaged. Which also is an excellent segue to the next
section.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-infra&quot;&gt;The Infra&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s my current setup:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A single dedicated &lt;a href=&quot;https:&#x2F;&#x2F;www.linode.com&#x2F;&quot;&gt;&lt;strong&gt;Linode&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; server with 2 CPU
cores and 4 GB of Memory.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;pm&#x2F;serv-s3&#x2F;&quot;&gt;&lt;strong&gt;Amazon S3&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is the backing data store
for static assets.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;cloudfront&#x2F;&quot;&gt;&lt;strong&gt;Amazon CloudFront&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; as a CDN layer in
front of &lt;strong&gt;S3&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;certificate-manager&#x2F;&quot;&gt;&lt;strong&gt;AWS Certificate Manager&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to
manage TLS certificates for the static assets (files.z2h.dev).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;certbot.eff.org&#x2F;&quot;&gt;&lt;strong&gt;Certbot&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to do the same for the content at
z2h.dev.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Linode DNS&lt;&#x2F;strong&gt;, to manage the DNS records on the Linode end.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Linode Cloud Firewall&lt;&#x2F;strong&gt; because I want my box to be safe.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Linode Backups&lt;&#x2F;strong&gt; because I don’t want to worry about losing data.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mailgun.com&#x2F;&quot;&gt;&lt;strong&gt;Mailgun&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; as the SMTP server because using a
local SMTP can be problematic, especially when&#x2F;if I want to extend the server
to a larger audience. You should
follow &lt;a href=&quot;https:&#x2F;&#x2F;documentation.mailgun.com&#x2F;&quot;&gt;Mailgun’s official documentation&lt;&#x2F;a&gt;
for SMTP configuration.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here’s what my current server utilization looks like:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;11&amp;#x2F;Screenshot-2022-11-12-at-7.48.38-AM.png&quot; alt=&quot;Linode server utilization.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Linode server utilization.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;It’s not much because there is not much going on. Yet, it also shows that the
above specs are more than adequate to run your own Mastodon instance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;server-version&quot;&gt;Server Version&lt;&#x2F;h2&gt;
&lt;p&gt;I’m running an Ubuntu server (&lt;em&gt;which&lt;&#x2F;em&gt; &lt;a href=&quot;https:&#x2F;&#x2F;docs.joinmastodon.org&#x2F;admin&#x2F;install&#x2F;&quot;&gt;&lt;em&gt;Mastodon official
docs&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; &lt;em&gt;recommend, too&lt;&#x2F;em&gt;) with the
following version:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;Distributor ID:	Ubuntu
&lt;&#x2F;span&gt;&lt;span&gt;Description:    Ubuntu 22.10
&lt;&#x2F;span&gt;&lt;span&gt;Release:        22.10
&lt;&#x2F;span&gt;&lt;span&gt;Codename:       kinetic
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;compute-and-memory-requirements&quot;&gt;Compute and Memory Requirements&lt;&#x2F;h2&gt;
&lt;p&gt;Regarding resource utilization, I’m coasting at &lt;strong&gt;1GB&lt;&#x2F;strong&gt; of ram and almost zero
CPU (because only one person, me, is posting). So if you want to run a
single-person instance, a VPS that gives you 2gigs of RAM and some minimal CPU
would work for your needs.&lt;&#x2F;p&gt;
&lt;p&gt;Though, your compute, and memory requirements be &lt;strong&gt;much&lt;&#x2F;strong&gt; higher depending on
the traffic and activity on your instance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;securing-the-machine&quot;&gt;Securing The Machine&lt;&#x2F;h2&gt;
&lt;p&gt;Since this is a &lt;a href=&quot;https:&#x2F;&#x2F;www.linode.com&#x2F;&quot;&gt;&lt;strong&gt;Linode&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; box, I’ve followed Linode’
s security recommendations. I won’t detail them here because the way you secure
your system will also depend on what you plan to use; however, you can follow
the excellent documentation that Linode has on those topics:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.linode.com&#x2F;docs&#x2F;guides&#x2F;set-up-and-secure&#x2F;&quot;&gt;Setting Up and Securing a Compute Instance&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.linode.com&#x2F;docs&#x2F;guides&#x2F;using-fail2ban-to-secure-your-server-a-tutorial&#x2F;&quot;&gt;Using Fail2ban to Secure Your Server&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.linode.com&#x2F;docs&#x2F;guides&#x2F;set-up-web-server-host-website&#x2F;&quot;&gt;Set Up a Web Server and Host a Website&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;firewall-rules&quot;&gt;Firewall Rules&lt;&#x2F;h2&gt;
&lt;p&gt;I don’t have that complicated of a firewall setup. Here is what it looks like:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;11&amp;#x2F;Screenshot-2022-11-12-at-8.00.11-AM.png&quot; alt=&quot;Linode firewall rules.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Linode firewall rules.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inbound&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;Allow inbound ssh to a single IP&lt;&#x2F;li&gt;
&lt;li&gt;Accept all inbound HTTP&lt;&#x2F;li&gt;
&lt;li&gt;Accept all inbound HTTPS&lt;&#x2F;li&gt;
&lt;li&gt;Deny everything else&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Outbound&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;Allow everything&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Which is good enough for the purpose of this application.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dns-settings&quot;&gt;DNS Settings&lt;&#x2F;h2&gt;
&lt;p&gt;For the sake of completeness, I’ll share the DNS settings too. Here’s what it
looks like:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;11&amp;#x2F;Screenshot-2022-11-12-at-8.03.45-AM.png&quot; alt=&quot;SOA, NS, MX, A, AAAA&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;SOA, NS, MX, A, AAAA&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;11&amp;#x2F;Screenshot-2022-11-12-at-8.03.57-AM.png&quot; alt=&quot;CNAME, TXT, SRV, CAA&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;CNAME, TXT, SRV, CAA&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The &lt;strong&gt;CNAME&lt;&#x2F;strong&gt; records are there for &lt;a href=&quot;https:&#x2F;&#x2F;www.mailgun.com&#x2F;&quot;&gt;&lt;strong&gt;Mailgun&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to
be able to validate the domain; you can check its documentation for instructions
about how to set it up.&lt;&#x2F;p&gt;
&lt;p&gt;Also, note that a &lt;strong&gt;CNAME&lt;&#x2F;strong&gt; record for files.z2h.dev points to an
&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AmazonCloudFront&quot;&gt;&lt;strong&gt;Amazon CloudFront&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; CDN;
we’ll come to that soon.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;TXT&lt;&#x2F;strong&gt; records are for &lt;a href=&quot;https:&#x2F;&#x2F;www.mailgun.com&#x2F;blog&#x2F;deliverability&#x2F;spf-records-basics&#x2F;&quot;&gt;**Mailgun SPF Validation
**&lt;&#x2F;a&gt; and for
&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;certificate-manager&#x2F;&quot;&gt;&lt;strong&gt;AWS Certificate Manager&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to
issue and verify certificates to the static assets served at files.z2h.dev on an
AWS S3 bucket.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cloudfront-setup&quot;&gt;CloudFront Setup&lt;&#x2F;h2&gt;
&lt;p&gt;The thing about &lt;strong&gt;Mastodon&lt;&#x2F;strong&gt; is it will store files. Lots of files. Images,
memes, animated gifs, videos… they need to go somewhere. And the local disk of
your machine is not the best place to put them.&lt;&#x2F;p&gt;
&lt;p&gt;In my current setup, I’m using an &lt;strong&gt;S3&lt;&#x2F;strong&gt; bucket backed up by &lt;strong&gt;CloudFront&lt;&#x2F;strong&gt; to
sort that out.&lt;&#x2F;p&gt;
&lt;p&gt;Here are the &lt;strong&gt;CloudFront&lt;&#x2F;strong&gt; distribution settings for files.z2h.dev for
reference:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;11&amp;#x2F;Screenshot-2022-11-12-at-8.19.45-AM.png&quot; alt=&quot;CloudFront: Main Settings&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;CloudFront: Main Settings&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;11&amp;#x2F;Screenshot-2022-11-12-at-8.20.10-AM.png&quot; alt=&quot;CloudFront: Origin Settings&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;CloudFront: Origin Settings&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;11&amp;#x2F;Screenshot-2022-11-12-at-8.20.20-AM.png&quot; alt=&quot;CloudFront: Behaviors&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;CloudFront: Behaviors&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;s3-bucket-settings&quot;&gt;S3 Bucket Settings&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;strong&gt;CloudFront&lt;&#x2F;strong&gt; uses an &lt;strong&gt;S3 Bucket&lt;&#x2F;strong&gt; as its origin. Here are the details of
the bucket.&lt;&#x2F;p&gt;
&lt;p&gt;I have set up a &lt;strong&gt;bucket policy&lt;&#x2F;strong&gt; to publicly allow GET operations on the
bucket.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Version&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2012-10-17&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Statement&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Sid&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Allow Public Access to All Objects&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Effect&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Allow&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Principal&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;*&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Action&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;s3:GetObject&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Resource&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;arn:aws:s3:::files.z2h.dev&#x2F;*&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I also had to &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AmazonS3&#x2F;latest&#x2F;userguide&#x2F;acl-overview.html&quot;&gt;&lt;strong&gt;enable access control lists&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; on
the bucket for my &lt;strong&gt;Mastodon&lt;&#x2F;strong&gt; instance to push stuff to it without raising
errors. So here’s how that part looks on the console:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;11&amp;#x2F;Screenshot-2022-11-12-at-8.44.55-AM.png&quot; alt=&quot;Bucket ACL Rules&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Bucket ACL Rules&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Without these ACL rules, Mastodon could not upload files to the bucket.&lt;&#x2F;p&gt;
&lt;p&gt;Other than that, everything on the bucket is in its default settings.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-mastodon-the-hard-way&quot;&gt;Setting Up Mastodon The Hard Way&lt;&#x2F;h2&gt;
&lt;p&gt;Now, we come to the fun part. You can install &lt;strong&gt;Mastodon&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;As a set of &lt;strong&gt;Docker&lt;&#x2F;strong&gt; containers (using docker-compose).&lt;&#x2F;li&gt;
&lt;li&gt;As a &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; deployment.&lt;&#x2F;li&gt;
&lt;li&gt;Or as a bare-metal installation directly on your server.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I tried the &lt;strong&gt;Docker&lt;&#x2F;strong&gt; installation route but could not make it work. It might
be because I was using an RC version instead of a stable one, or maybe because I
missed a step during the installation; however, I had better luck with the
bare-metal installation, so I’ll explain that in this article.&lt;&#x2F;p&gt;
&lt;p&gt;Besides, a bare-metal install will give you the best performance benefit
compared to the alternatives.&lt;&#x2F;p&gt;
&lt;p&gt;So there are no helm templates, no Docker compose files… We’re gonna do this
&lt;strong&gt;the hard way&lt;&#x2F;strong&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kelseyhightower&#x2F;kubernetes-the-hard-way&quot;&gt;&lt;em&gt;Kelsey&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;, anyone?)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-ll-need-an-older-version-of-yarn&quot;&gt;You’ll Need An Older Version of &lt;code&gt;yarn&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;One of the most significant issues you are likely going to
face &lt;a href=&quot;https:&#x2F;&#x2F;docs.joinmastodon.org&#x2F;admin&#x2F;install&#x2F;&quot;&gt;is if you follow the official docs&lt;&#x2F;a&gt;.
As of the time of this writing (&lt;em&gt;late 2022&lt;&#x2F;em&gt;), the docs’ instruction on
installing &lt;code&gt;node&lt;&#x2F;code&gt; and &lt;code&gt;yarn&lt;&#x2F;code&gt; is inadequate and incomplete, and if you follow
them step-by-step, you’ll likely fail while bundling the static assets.&lt;&#x2F;p&gt;
&lt;p&gt;The gist is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You need an &lt;strong&gt;older&lt;&#x2F;strong&gt; version of &lt;code&gt;yarn&lt;&#x2F;code&gt; (&lt;strong&gt;&lt;em&gt;v1.x&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;) to bundle static assets.&lt;&#x2F;li&gt;
&lt;li&gt;However, you need &lt;strong&gt;the most recent&lt;&#x2F;strong&gt; &lt;code&gt;node&lt;&#x2F;code&gt; version for security and
stability.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I was able to do that by…&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Installing the recent versions of &lt;code&gt;node&lt;&#x2F;code&gt; and yarn on the system,&lt;&#x2F;li&gt;
&lt;li&gt;And then patching the &lt;code&gt;yarn&lt;&#x2F;code&gt;
binaries &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yarnpkg&#x2F;yarn&#x2F;releases&#x2F;tag&#x2F;v1.22.19&quot;&gt;with the most recent v1.x release that I could find&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The following sections outline how I managed to do that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;install-node-and-npm&quot;&gt;Install &lt;code&gt;node&lt;&#x2F;code&gt; and &lt;code&gt;npm&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;First, install the recent version of &lt;code&gt;node&lt;&#x2F;code&gt; and &lt;code&gt;npm&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo apt install curl wget gnupg apt-transport-https \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;lsb-release ca-certificates
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Install node.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# You can also try a newer version of Node.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# I&amp;#39;m using v18.x as of now.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;curl -sL https:&#x2F;&#x2F;deb.nodesource.com&#x2F;setup_18.x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bash -
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Check node and npm versions.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;node -v
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# v18.7.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;npm -v
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# 6.14.17
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;You Might Want to Use &lt;code&gt;nvm&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note that you might want to use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nvm-sh&#x2F;nvm&quot;&gt;&lt;code&gt;nvm&lt;&#x2F;code&gt; (&lt;em&gt;Node Version Manager&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
to switch between different versions of &lt;code&gt;node&lt;&#x2F;code&gt;.
That might be helpful if your Mastodon instance does not function&lt;br &#x2F;&gt;
properly using a particular version of &lt;code&gt;node&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;create-an-unprivileged-mastodon-user&quot;&gt;Create an Unprivileged &lt;code&gt;mastodon&lt;&#x2F;code&gt; User&lt;&#x2F;h2&gt;
&lt;p&gt;The next thing is to create a dedicated user to run &lt;strong&gt;Mastodon&lt;&#x2F;strong&gt;. This is
&lt;strong&gt;recommended&lt;&#x2F;strong&gt; because Mastodon is a &lt;a href=&quot;https:&#x2F;&#x2F;www.ruby-lang.org&#x2F;en&#x2F;&quot;&gt;ruby&lt;&#x2F;a&gt;
monolith, and switching to different user accounts is a hassle-free way to
experiment with different Ruby versions.&lt;&#x2F;p&gt;
&lt;p&gt;Besides, having a dedicated, unprivileged user is a good security practice.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Add a `mastodon` user, if you haven&amp;#39;t already done so
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;adduser --disabled-login mastodon
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Set a password for the user:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo passwd mastodon
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Switch to that user:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo su - mastodon
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Validate that we are on the correct user account:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;whoami
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# mastodon
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;configure-npm-to-work-without-root-privileges&quot;&gt;Configure &lt;code&gt;npm&lt;&#x2F;code&gt; to Work Without Root Privileges&lt;&#x2F;h2&gt;
&lt;p&gt;Next, we’ll configure &lt;code&gt;npm&lt;&#x2F;code&gt; to work rootless because we are not allowed to
do &lt;code&gt;sudo&lt;&#x2F;code&gt; for the &lt;code&gt;mastodon&lt;&#x2F;code&gt; user.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo su - mastodon
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mkdir ~&#x2F;.npm-global
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;npm config set prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;~&#x2F;.npm-global&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Update ~&#x2F;.profile with this:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# export PATH=~&#x2F;.npm-global&#x2F;bin:$PATH
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Then source it to use the new $PATH:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;~&#x2F;.profile
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;patch-yarn&quot;&gt;Patch &lt;code&gt;yarn&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;This is the critical part&lt;&#x2F;strong&gt;. You’ll need to use the &lt;code&gt;**v1.x**&lt;&#x2F;code&gt; version
of &lt;code&gt;yarn&lt;&#x2F;code&gt; (&lt;em&gt;at least when this article is written, that’s the case&lt;&#x2F;em&gt;). If you
install &lt;code&gt;yarn&lt;&#x2F;code&gt; following the documentation, you’ll get a much higher version,
which will cause errors when bundling static asses for the web application.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo su - mastodon
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;wget https:&#x2F;&#x2F;github.com&#x2F;yarnpkg&#x2F;yarn&#x2F;releases&#x2F;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;download&#x2F;v1.22.19&#x2F;yarn-v1.22.19.tar.gz
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tar -xzvf yarn-v1.22.19.tar.gz 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; yarn-v1.22.19&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; bin&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cp yarn &#x2F;home&#x2F;mastodon&#x2F;.npm-global&#x2F;bin&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cp yarnpkg &#x2F;home&#x2F;mastodon&#x2F;.npm-global&#x2F;bin&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; ..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cp bin&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; &#x2F;home&#x2F;mastodon&#x2F;.npm-global&#x2F;bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That will hopefully take care of your possible &lt;code&gt;yarn&lt;&#x2F;code&gt; problems. If not, you can
find yourself experimenting with things a bit. Honestly, this version
incompatibility was the most challenging part. That took &lt;strong&gt;hours&lt;&#x2F;strong&gt; for me to
fix. I’m sharing it here so that others don’t suffer the same pains I’ve had.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;install-postgres&quot;&gt;Install Postgres&lt;&#x2F;h2&gt;
&lt;p&gt;Mastodon uses Postgres (&lt;em&gt;or any Postgres-compatible DB&lt;&#x2F;em&gt;) as its backend
database. So, we’ll install that to our instance too.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo su
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;wget -O &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;postgresql.asc \&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#932b1e;color:#fdf4c1;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;https:&#x2F;&#x2F;www.postgresql.org&#x2F;media&#x2F;keys&#x2F;ACCC4CF8.asc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;deb [signed-by=&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;postgresql.asc] \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;http:&#x2F;&#x2F;apt.postgresql.org&#x2F;pub&#x2F;repos&#x2F;apt \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;lsb_release -cs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;)-pgdg main&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;postgresql.list
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;apt update
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;apt install -y \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  imagemagick ffmpeg libpq-dev libxml2-dev libxslt1-dev \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  file git-core g++ libprotobuf-dev protobuf-compiler \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  pkg-config nodejs gcc autoconf \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  bison build-essential libssl-dev libyaml-dev libreadline6-dev \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  zlib1g-dev libncurses5-dev libffi-dev libgdbm-dev \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  nginx redis-server redis-tools postgresql postgresql-contrib \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  certbot python3-certbot-nginx libidn11-dev libicu-dev \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;  libjemalloc-dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;install-ruby&quot;&gt;Install Ruby&lt;&#x2F;h2&gt;
&lt;p&gt;Mastodon is a &lt;a href=&quot;https:&#x2F;&#x2F;ruby-lang.org&#x2F;&quot;&gt;Ruby&lt;&#x2F;a&gt; server, so we’ll, for sure,
need &lt;code&gt;ruby&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;su - mastodon
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;rbenv&#x2F;rbenv.git ~&#x2F;.rbenv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;~&#x2F;.rbenv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;src&#x2F;configure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;make -C src
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;export PATH=&amp;quot;$HOME&#x2F;.rbenv&#x2F;bin:$PATH&amp;quot;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;~&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;eval &amp;quot;$(rbenv init -)&amp;quot;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;~&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;rbenv&#x2F;ruby-build.git \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;~&#x2F;.rbenv&#x2F;plugins&#x2F;ruby-build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once that’s done, install the &lt;code&gt;ruby&lt;&#x2F;code&gt; version that we need:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RUBY_CONFIGURE_OPTS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;--with-jemalloc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rbenv install 3.0.3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rbenv global 3.0.3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’ll also need &lt;code&gt;bundler&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gem install bundler --no-document
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;configure-postgres&quot;&gt;Configure Postgres&lt;&#x2F;h2&gt;
&lt;p&gt;Next up, we’ll configure our database:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo -u postgres psql
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CREATE USER mastodon CREATEDB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\q
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And, that’s it 🙌.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;set-up-mastodon&quot;&gt;Set Up Mastodon&lt;&#x2F;h2&gt;
&lt;p&gt;Now it’s time to set up the elephant in the room.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll build &lt;strong&gt;Mastodon&lt;&#x2F;strong&gt; straight from the source code.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;tootsuite&#x2F;mastodon.git \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;live &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; live
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git checkout \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$(git tag -l &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;grep -v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;rc[0-9]*$&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sort -V &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;tail -n 1)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bundle config deployment &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;true&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bundle config without &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;development test&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bundle install -j$(getconf _NPROCESSORS_ONLN)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;yarn install --pure-lockfile
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After all these set, we’ll run the interactive setup wizard:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RAILS_ENV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;production &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bundle exec rake mastodon:setup
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The wizard will ask you certain questions. I’ve added my answers to some of
those, redacting sensitive parts.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LOCAL_DOMAIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;z2h.dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SINGLE_USER_MODE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DB_HOST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&#x2F;var&#x2F;run&#x2F;postgresql
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DB_PORT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;5432
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DB_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;mastodon_production
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DB_USER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;mastodon
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DB_PASS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;REDIS_HOST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;localhost
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;REDIS_PORT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;6379
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;REDIS_PASSWORD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;S3_ENABLED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;S3_PROTOCOL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;https
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;S3_BUCKET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;files.z2h.dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;S3_REGION&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;us-west-2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;S3_HOSTNAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;s3.us-west-2.amazonaws.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;AWS_ACCESS_KEY_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;AKIA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;REDACTED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;Yj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;REDACTED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;S3_ALIAS_HOST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;files.z2h.dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SMTP_SERVER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;smtp.mailgun.org
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SMTP_PORT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;587
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SMTP_LOGIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;postmaster@z2h.dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SMTP_PASSWORD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;REDACTED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SMTP_AUTH_METHOD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;plain
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SMTP_OPENSSL_VERIFY_MODE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;none
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SMTP_FROM_ADDRESS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;Mastodon &amp;lt;notifications@z2h.dev&amp;gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once the installer finishes successfully, you’ll get a prompt similar to this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;All done! You can now power on the Mastodon server 🐘
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Do you want to create an admin user straight away? Yes
&lt;&#x2F;span&gt;&lt;span&gt;Username: $usernameYouChoseDuringSetup
&lt;&#x2F;span&gt;&lt;span&gt;E-mail: $emailYouChoseDuringSetup
&lt;&#x2F;span&gt;&lt;span&gt;You can login with the password: $someRandomPassword
&lt;&#x2F;span&gt;&lt;span&gt;You can change your password once you login.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The Installer Gave Me an &lt;code&gt;emoji-mart&lt;&#x2F;code&gt;-Related Error&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Before triggering the setup, I also had to manually&lt;br &#x2F;&gt;
&lt;code&gt;npm install --save emoji-mart&lt;&#x2F;code&gt; in the &lt;code&gt;live&lt;&#x2F;code&gt; folder&lt;br &#x2F;&gt;
because the installer complained otherwise.&lt;&#x2F;p&gt;
&lt;p&gt;I don’t know if it will be fixed by the time you use the latest and&lt;br &#x2F;&gt;
greatest Mastodon. Yet, I wanted to share it here in case you&lt;br &#x2F;&gt;
bump into a similar issue.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;getting-tls-certificates&quot;&gt;Getting TLS Certificates&lt;&#x2F;h2&gt;
&lt;p&gt;Once you have your compute instance, DNS, and ingress firewall set up, you can
fetch a TLS certificate from &lt;a href=&quot;https:&#x2F;&#x2F;letsencrypt.org&#x2F;&quot;&gt;Let’s Encrypt&lt;&#x2F;a&gt;
using &lt;a href=&quot;https:&#x2F;&#x2F;certbot.eff.org&#x2F;&quot;&gt;&lt;code&gt;certbot&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo certbot certonly --standalone -d z2h.dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The command above will temporarily spin up a web server, do the necessary
negotiations and fetch a TLS certificate for the domain &lt;code&gt;z2h.dev&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Also, ensure that certbot timer is enabled via &lt;code&gt;systemctl status certbot.timer&lt;&#x2F;code&gt;.
If the timer is not enabled, make sure to enable it
using &lt;code&gt;systemctl enable certbot.timer&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;volkan@z2h-dev:~$ systemctl status certbot.timer
&lt;&#x2F;span&gt;&lt;span&gt;● certbot.timer - Run certbot twice daily
&lt;&#x2F;span&gt;&lt;span&gt;     Loaded: loaded (&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;certbot.timer; 
&lt;&#x2F;span&gt;&lt;span&gt;enabled; preset: enabled)
&lt;&#x2F;span&gt;&lt;span&gt;     Active: active (waiting) 
&lt;&#x2F;span&gt;&lt;span&gt;since Fri 2022-11-11 03:02:18 PST; 1 day 9h ago
&lt;&#x2F;span&gt;&lt;span&gt;      Until: Fri 2022-11-11 03:02:18 PST; 1 day 9h ago
&lt;&#x2F;span&gt;&lt;span&gt;    Trigger: Sat 2022-11-12 22:37:01 PST; 10h left
&lt;&#x2F;span&gt;&lt;span&gt;   Triggers: ● certbot.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Also, make sure that your certificates are where they need to be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo ls -al &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;z2h.dev
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# The output should look something like this:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# drwxr-xr-x 2 root root 4096 Nov 11 02:41 .
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# drwx------ 3 root root 4096 Nov 11 02:41 ..
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# lrwxrwxrwx 1 root root   31 Nov 11 02:41 cert.pem 
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# -&amp;gt; ..&#x2F;..&#x2F;archive&#x2F;z2h.dev&#x2F;cert1.pem
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# lrwxrwxrwx 1 root root   32 Nov 11 02:41 chain.pem 
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# -&amp;gt; ..&#x2F;..&#x2F;archive&#x2F;z2h.dev&#x2F;chain1.pem
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# lrwxrwxrwx 1 root root   36 Nov 11 02:41 
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# fullchain.pem -&amp;gt; ..&#x2F;..&#x2F;archive&#x2F;z2h.dev&#x2F;fullchain1.pem
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# lrwxrwxrwx 1 root root   34 Nov 11 02:41 privkey.pem 
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# -&amp;gt; ..&#x2F;..&#x2F;archive&#x2F;z2h.dev&#x2F;privkey1.pem
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# -rw-r--r-- 1 root root  692 Nov 11 02:41 README
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;configure-nginx&quot;&gt;Configure NGINX&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we have our certificates in place, we can configure &lt;strong&gt;NGINX&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s my &lt;code&gt;&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;z2h.dev.conf&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;map $http_upgrade $connection_upgrade {
&lt;&#x2F;span&gt;&lt;span&gt;  default upgrade;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;&amp;#39;      close;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;upstream backend {
&lt;&#x2F;span&gt;&lt;span&gt;    server 127.0.0.1:3000 fail_timeout=0;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;upstream streaming {
&lt;&#x2F;span&gt;&lt;span&gt;    server 127.0.0.1:4000 fail_timeout=0;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;proxy_cache_path &#x2F;var&#x2F;cache&#x2F;nginx levels=1:2 
&lt;&#x2F;span&gt;&lt;span&gt;  keys_zone=CACHE:10m inactive=7d max_size=1g;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;  listen 80;
&lt;&#x2F;span&gt;&lt;span&gt;  listen [::]:80;
&lt;&#x2F;span&gt;&lt;span&gt;  server_name z2h.dev;
&lt;&#x2F;span&gt;&lt;span&gt;  root &#x2F;home&#x2F;mastodon&#x2F;live&#x2F;public;
&lt;&#x2F;span&gt;&lt;span&gt;  location &#x2F;.well-known&#x2F;acme-challenge&#x2F; { allow all; }
&lt;&#x2F;span&gt;&lt;span&gt;  location &#x2F; { return 301 https:&#x2F;&#x2F;$host$request_uri; }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;  listen 443 ssl http2;
&lt;&#x2F;span&gt;&lt;span&gt;  listen [::]:443 ssl http2;
&lt;&#x2F;span&gt;&lt;span&gt;  server_name z2h.dev;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ssl_protocols TLSv1.2 TLSv1.3;
&lt;&#x2F;span&gt;&lt;span&gt;  ssl_ciphers HIGH:!MEDIUM:!LOW:!aNULL:!NULL:!SHA;
&lt;&#x2F;span&gt;&lt;span&gt;  ssl_prefer_server_ciphers on;
&lt;&#x2F;span&gt;&lt;span&gt;  ssl_session_cache shared:SSL:10m;
&lt;&#x2F;span&gt;&lt;span&gt;  ssl_session_tickets off;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  # Uncomment these lines once you acquire a certificate:
&lt;&#x2F;span&gt;&lt;span&gt;  ssl_certificate     &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;z2h.dev&#x2F;fullchain.pem;
&lt;&#x2F;span&gt;&lt;span&gt;  ssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;z2h.dev&#x2F;privkey.pem;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  keepalive_timeout    70;
&lt;&#x2F;span&gt;&lt;span&gt;  sendfile             on;
&lt;&#x2F;span&gt;&lt;span&gt;  client_max_body_size 80m;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  root &#x2F;home&#x2F;mastodon&#x2F;live&#x2F;public;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  gzip on;
&lt;&#x2F;span&gt;&lt;span&gt;  gzip_disable &amp;quot;msie6&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  gzip_vary on;
&lt;&#x2F;span&gt;&lt;span&gt;  gzip_proxied any;
&lt;&#x2F;span&gt;&lt;span&gt;  gzip_comp_level 6;
&lt;&#x2F;span&gt;&lt;span&gt;  gzip_buffers 16 8k;
&lt;&#x2F;span&gt;&lt;span&gt;  gzip_http_version 1.1;
&lt;&#x2F;span&gt;&lt;span&gt;  gzip_types text&#x2F;plain text&#x2F;css application&#x2F;json 
&lt;&#x2F;span&gt;&lt;span&gt;    application&#x2F;javascript text&#x2F;xml application&#x2F;xml 
&lt;&#x2F;span&gt;&lt;span&gt;    application&#x2F;xml+rss text&#x2F;javascript 
&lt;&#x2F;span&gt;&lt;span&gt;    image&#x2F;svg+xml image&#x2F;x-icon;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    try_files $uri @proxy;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  location = &#x2F;sw.js {
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Cache-Control 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;public, max-age=604800, must-revalidate&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Strict-Transport-Security 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;max-age=63072000; includeSubDomains&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    try_files $uri =404;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  location ~ ^&#x2F;assets&#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Cache-Control 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;public, max-age=2419200, must-revalidate&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Strict-Transport-Security 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;max-age=63072000; includeSubDomains&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    try_files $uri =404;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  location ~ ^&#x2F;avatars&#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Cache-Control 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;public, max-age=2419200, must-revalidate&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Strict-Transport-Security 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;max-age=63072000; includeSubDomains&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    try_files $uri =404;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  location ~ ^&#x2F;emoji&#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Cache-Control 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;public, max-age=2419200, must-revalidate&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Strict-Transport-Security 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;max-age=63072000; includeSubDomains&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    try_files $uri =404;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  location ~ ^&#x2F;headers&#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Cache-Control 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;public, max-age=2419200, must-revalidate&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Strict-Transport-Security 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;max-age=63072000; includeSubDomains&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    try_files $uri =404;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  location ~ ^&#x2F;packs&#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Cache-Control 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;public, max-age=2419200, must-revalidate&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Strict-Transport-Security 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;max-age=63072000; includeSubDomains&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    try_files $uri =404;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  location ~ ^&#x2F;shortcuts&#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Cache-Control 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;public, max-age=2419200, must-revalidate&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Strict-Transport-Security 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;max-age=63072000; includeSubDomains&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    try_files $uri =404;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  location ~ ^&#x2F;sounds&#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Cache-Control 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;public, max-age=2419200, must-revalidate&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Strict-Transport-Security 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;max-age=63072000; includeSubDomains&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    try_files $uri =404;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  location ~ ^&#x2F;system&#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Cache-Control 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;public, max-age=2419200, immutable&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Strict-Transport-Security 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;max-age=63072000; includeSubDomains&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    try_files $uri =404;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  location ^~ &#x2F;api&#x2F;v1&#x2F;streaming {
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_set_header Host $host;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_set_header X-Real-IP $remote_addr;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_set_header X-Forwarded-Proto $scheme;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_set_header Proxy &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_pass http:&#x2F;&#x2F;streaming;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_buffering off;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_redirect off;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_http_version 1.1;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_set_header Upgrade $http_upgrade;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_set_header Connection $connection_upgrade;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    add_header Strict-Transport-Security 
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;max-age=63072000; includeSubDomains&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    tcp_nodelay on;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  location @proxy {
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_set_header Host $host;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_set_header X-Real-IP $remote_addr;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_set_header X-Forwarded-Proto $scheme;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_set_header Proxy &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_pass_header Server;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_pass http:&#x2F;&#x2F;backend;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_buffering on;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_redirect off;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_http_version 1.1;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_set_header Upgrade $http_upgrade;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_set_header Connection $connection_upgrade;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_cache CACHE;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_cache_valid 200 7d;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_cache_valid 410 24h;
&lt;&#x2F;span&gt;&lt;span&gt;    proxy_cache_use_stale error timeout 
&lt;&#x2F;span&gt;&lt;span&gt;      updating http_500 http_502 http_503 http_504;
&lt;&#x2F;span&gt;&lt;span&gt;    add_header X-Cached $upstream_cache_status;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    tcp_nodelay on;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  error_page 404 500 501 502 503 504 &#x2F;500.html;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I’ve copied the
file &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mastodon&#x2F;mastodon&#x2F;blob&#x2F;main&#x2F;dist&#x2F;nginx.conf&quot;&gt;from Mastodon’s source code repo&lt;&#x2F;a&gt;
and changed &lt;code&gt;example.com&lt;&#x2F;code&gt; to &lt;code&gt;z2h.dev&lt;&#x2F;code&gt; in the file.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;set-up-nginx-to-use-mastodon-user&quot;&gt;Set Up NGINX to Use &lt;code&gt;mastodon&lt;&#x2F;code&gt; User&lt;&#x2F;h2&gt;
&lt;p&gt;One more thing, &lt;code&gt;nginx&lt;&#x2F;code&gt;, by default, uses &lt;code&gt;www-data&lt;&#x2F;code&gt; as a user, and that—in my
case—caused issues when I started Mastodon’s microservices.
Editing &lt;code&gt;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf&lt;&#x2F;code&gt; and replacing &lt;code&gt;www-data&lt;&#x2F;code&gt; with &lt;code&gt;mastodon&lt;&#x2F;code&gt; fixed
that for me.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s the entire file for reference:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;user mastodon;
&lt;&#x2F;span&gt;&lt;span&gt;#user www-data;
&lt;&#x2F;span&gt;&lt;span&gt;worker_processes auto;
&lt;&#x2F;span&gt;&lt;span&gt;pid &#x2F;run&#x2F;nginx.pid;
&lt;&#x2F;span&gt;&lt;span&gt;include &#x2F;etc&#x2F;nginx&#x2F;modules-enabled&#x2F;*.conf;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;events {
&lt;&#x2F;span&gt;&lt;span&gt;    worker_connections 768;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;http {
&lt;&#x2F;span&gt;&lt;span&gt;    sendfile on;
&lt;&#x2F;span&gt;&lt;span&gt;    tcp_nopush on;
&lt;&#x2F;span&gt;&lt;span&gt;    types_hash_max_size 2048;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    include &#x2F;etc&#x2F;nginx&#x2F;mime.types;
&lt;&#x2F;span&gt;&lt;span&gt;    default_type application&#x2F;octet-stream;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
&lt;&#x2F;span&gt;&lt;span&gt;    ssl_prefer_server_ciphers on;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log;
&lt;&#x2F;span&gt;&lt;span&gt;    error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    gzip on;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;
&lt;&#x2F;span&gt;&lt;span&gt;    include &#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;*;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;link-the-site&quot;&gt;Link the Site&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; &#x2F;etc&#x2F;nginx&#x2F;sites-enabled
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo ln -s ..&#x2F;sites-available&#x2F;z2h.dev.conf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will make &lt;strong&gt;NGINX&lt;&#x2F;strong&gt; import and use the rules that we’ve defined in the
former section.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;start-nginx&quot;&gt;Start NGINX&lt;&#x2F;h2&gt;
&lt;p&gt;Then we can start &lt;code&gt;nginx&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo systemctl restart nginx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then check the status of the &lt;code&gt;nginx&lt;&#x2F;code&gt; service:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;volkan@z2h-dev:~$ sudo systemctl status nginx
&lt;&#x2F;span&gt;&lt;span&gt;● nginx.service - 
&lt;&#x2F;span&gt;&lt;span&gt;A high performance web server and a reverse proxy server
&lt;&#x2F;span&gt;&lt;span&gt;     Loaded: loaded 
&lt;&#x2F;span&gt;&lt;span&gt;(&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service; enabled; preset: enabled)
&lt;&#x2F;span&gt;&lt;span&gt;     Active: active (running)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So far, all looking good 👌.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-systemd-services&quot;&gt;Setting Up &lt;code&gt;systemd&lt;&#x2F;code&gt; Services&lt;&#x2F;h2&gt;
&lt;p&gt;Make sure you have these files under &lt;code&gt;&#x2F;etc&#x2F;systemd&#x2F;system&lt;&#x2F;code&gt;. Again, I’ve copied
them &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mastodon&#x2F;mastodon&#x2F;tree&#x2F;main&#x2F;dist&quot;&gt;from the official Mastodon repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;etc-systemd-system-mastodon-sideqik-service&quot;&gt;&lt;code&gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;mastodon-sideqik.service&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;[Unit]
&lt;&#x2F;span&gt;&lt;span&gt;Description=mastodon-sidekiq
&lt;&#x2F;span&gt;&lt;span&gt;After=network.target
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Service]
&lt;&#x2F;span&gt;&lt;span&gt;Type=simple
&lt;&#x2F;span&gt;&lt;span&gt;User=mastodon
&lt;&#x2F;span&gt;&lt;span&gt;WorkingDirectory=&#x2F;home&#x2F;mastodon&#x2F;live
&lt;&#x2F;span&gt;&lt;span&gt;Environment=&amp;quot;RAILS_ENV=production&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Environment=&amp;quot;DB_POOL=25&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Environment=&amp;quot;MALLOC_ARENA_MAX=2&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Environment=&amp;quot;LD_PRELOAD=libjemalloc.so&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;ExecStart=&#x2F;home&#x2F;mastodon&#x2F;.rbenv&#x2F;shims&#x2F;bundle exec sidekiq -c 25
&lt;&#x2F;span&gt;&lt;span&gt;TimeoutSec=15
&lt;&#x2F;span&gt;&lt;span&gt;Restart=always
&lt;&#x2F;span&gt;&lt;span&gt;# Proc filesystem
&lt;&#x2F;span&gt;&lt;span&gt;ProcSubset=pid
&lt;&#x2F;span&gt;&lt;span&gt;ProtectProc=invisible
&lt;&#x2F;span&gt;&lt;span&gt;# Capabilities
&lt;&#x2F;span&gt;&lt;span&gt;CapabilityBoundingSet=
&lt;&#x2F;span&gt;&lt;span&gt;# Security
&lt;&#x2F;span&gt;&lt;span&gt;NoNewPrivileges=true
&lt;&#x2F;span&gt;&lt;span&gt;# Sandboxing
&lt;&#x2F;span&gt;&lt;span&gt;ProtectSystem=strict
&lt;&#x2F;span&gt;&lt;span&gt;PrivateTmp=true
&lt;&#x2F;span&gt;&lt;span&gt;PrivateDevices=true
&lt;&#x2F;span&gt;&lt;span&gt;PrivateUsers=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectHostname=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectKernelLogs=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectKernelModules=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectKernelTunables=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectControlGroups=true
&lt;&#x2F;span&gt;&lt;span&gt;RestrictAddressFamilies=AF_INET
&lt;&#x2F;span&gt;&lt;span&gt;RestrictAddressFamilies=AF_INET6
&lt;&#x2F;span&gt;&lt;span&gt;RestrictAddressFamilies=AF_NETLINK
&lt;&#x2F;span&gt;&lt;span&gt;RestrictAddressFamilies=AF_UNIX
&lt;&#x2F;span&gt;&lt;span&gt;RestrictNamespaces=true
&lt;&#x2F;span&gt;&lt;span&gt;LockPersonality=true
&lt;&#x2F;span&gt;&lt;span&gt;RestrictRealtime=true
&lt;&#x2F;span&gt;&lt;span&gt;RestrictSUIDSGID=true
&lt;&#x2F;span&gt;&lt;span&gt;RemoveIPC=true
&lt;&#x2F;span&gt;&lt;span&gt;PrivateMounts=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectClock=true
&lt;&#x2F;span&gt;&lt;span&gt;# System Call Filtering
&lt;&#x2F;span&gt;&lt;span&gt;SystemCallArchitectures=native
&lt;&#x2F;span&gt;&lt;span&gt;SystemCallFilter=~@cpu-emulation @debug 
&lt;&#x2F;span&gt;&lt;span&gt;  @keyring @ipc @mount @obsolete @privileged @setuid
&lt;&#x2F;span&gt;&lt;span&gt;SystemCallFilter=@chown
&lt;&#x2F;span&gt;&lt;span&gt;SystemCallFilter=pipe
&lt;&#x2F;span&gt;&lt;span&gt;SystemCallFilter=pipe2
&lt;&#x2F;span&gt;&lt;span&gt;ReadWritePaths=&#x2F;home&#x2F;mastodon&#x2F;live
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Install]
&lt;&#x2F;span&gt;&lt;span&gt;WantedBy=multi-user.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;etc-systemd-system-mastodon-streaming-service&quot;&gt;&lt;code&gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;mastodon-streaming.service&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;[Unit]
&lt;&#x2F;span&gt;&lt;span&gt;Description=mastodon-streaming
&lt;&#x2F;span&gt;&lt;span&gt;After=network.target
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Service]
&lt;&#x2F;span&gt;&lt;span&gt;Type=simple
&lt;&#x2F;span&gt;&lt;span&gt;User=mastodon
&lt;&#x2F;span&gt;&lt;span&gt;WorkingDirectory=&#x2F;home&#x2F;mastodon&#x2F;live
&lt;&#x2F;span&gt;&lt;span&gt;Environment=&amp;quot;NODE_ENV=production&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Environment=&amp;quot;PORT=4000&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Environment=&amp;quot;STREAMING_CLUSTER_NUM=1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;ExecStart=&#x2F;usr&#x2F;bin&#x2F;node .&#x2F;streaming
&lt;&#x2F;span&gt;&lt;span&gt;TimeoutSec=15
&lt;&#x2F;span&gt;&lt;span&gt;Restart=always
&lt;&#x2F;span&gt;&lt;span&gt;# Proc filesystem
&lt;&#x2F;span&gt;&lt;span&gt;ProcSubset=pid
&lt;&#x2F;span&gt;&lt;span&gt;ProtectProc=invisible
&lt;&#x2F;span&gt;&lt;span&gt;# Capabilities
&lt;&#x2F;span&gt;&lt;span&gt;CapabilityBoundingSet=
&lt;&#x2F;span&gt;&lt;span&gt;# Security
&lt;&#x2F;span&gt;&lt;span&gt;NoNewPrivileges=true
&lt;&#x2F;span&gt;&lt;span&gt;# Sandboxing
&lt;&#x2F;span&gt;&lt;span&gt;ProtectSystem=strict
&lt;&#x2F;span&gt;&lt;span&gt;PrivateTmp=true
&lt;&#x2F;span&gt;&lt;span&gt;PrivateDevices=true
&lt;&#x2F;span&gt;&lt;span&gt;PrivateUsers=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectHostname=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectKernelLogs=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectKernelModules=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectKernelTunables=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectControlGroups=true
&lt;&#x2F;span&gt;&lt;span&gt;RestrictAddressFamilies=AF_INET
&lt;&#x2F;span&gt;&lt;span&gt;RestrictAddressFamilies=AF_INET6
&lt;&#x2F;span&gt;&lt;span&gt;RestrictAddressFamilies=AF_NETLINK
&lt;&#x2F;span&gt;&lt;span&gt;RestrictAddressFamilies=AF_UNIX
&lt;&#x2F;span&gt;&lt;span&gt;RestrictNamespaces=true
&lt;&#x2F;span&gt;&lt;span&gt;LockPersonality=true
&lt;&#x2F;span&gt;&lt;span&gt;RestrictRealtime=true
&lt;&#x2F;span&gt;&lt;span&gt;RestrictSUIDSGID=true
&lt;&#x2F;span&gt;&lt;span&gt;RemoveIPC=true
&lt;&#x2F;span&gt;&lt;span&gt;PrivateMounts=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectClock=true
&lt;&#x2F;span&gt;&lt;span&gt;# System Call Filtering
&lt;&#x2F;span&gt;&lt;span&gt;SystemCallArchitectures=native
&lt;&#x2F;span&gt;&lt;span&gt;SystemCallFilter=~@cpu-emulation @debug 
&lt;&#x2F;span&gt;&lt;span&gt;  @keyring @ipc @memlock @mount @obsolete 
&lt;&#x2F;span&gt;&lt;span&gt;  @privileged @resources @setuid
&lt;&#x2F;span&gt;&lt;span&gt;SystemCallFilter=pipe
&lt;&#x2F;span&gt;&lt;span&gt;SystemCallFilter=pipe2
&lt;&#x2F;span&gt;&lt;span&gt;ReadWritePaths=&#x2F;home&#x2F;mastodon&#x2F;live
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Install]
&lt;&#x2F;span&gt;&lt;span&gt;WantedBy=multi-user.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;etc-systemd-system-mastodon-web-service&quot;&gt;&lt;code&gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;mastodon-web.service&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;[Unit]
&lt;&#x2F;span&gt;&lt;span&gt;Description=mastodon-web
&lt;&#x2F;span&gt;&lt;span&gt;After=network.target
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Service]
&lt;&#x2F;span&gt;&lt;span&gt;Type=simple
&lt;&#x2F;span&gt;&lt;span&gt;User=mastodon
&lt;&#x2F;span&gt;&lt;span&gt;WorkingDirectory=&#x2F;home&#x2F;mastodon&#x2F;live
&lt;&#x2F;span&gt;&lt;span&gt;Environment=&amp;quot;RAILS_ENV=production&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Environment=&amp;quot;PORT=3000&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Environment=&amp;quot;LD_PRELOAD=libjemalloc.so&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;ExecStart=&#x2F;home&#x2F;mastodon&#x2F;.rbenv&#x2F;shims&#x2F;bundle exec \
&lt;&#x2F;span&gt;&lt;span&gt;puma -C config&#x2F;puma.rb
&lt;&#x2F;span&gt;&lt;span&gt;ExecReload=&#x2F;bin&#x2F;kill -SIGUSR1 $MAINPID
&lt;&#x2F;span&gt;&lt;span&gt;TimeoutSec=15
&lt;&#x2F;span&gt;&lt;span&gt;Restart=always
&lt;&#x2F;span&gt;&lt;span&gt;# Proc filesystem
&lt;&#x2F;span&gt;&lt;span&gt;ProcSubset=pid
&lt;&#x2F;span&gt;&lt;span&gt;ProtectProc=invisible
&lt;&#x2F;span&gt;&lt;span&gt;# Capabilities
&lt;&#x2F;span&gt;&lt;span&gt;CapabilityBoundingSet=
&lt;&#x2F;span&gt;&lt;span&gt;# Security
&lt;&#x2F;span&gt;&lt;span&gt;NoNewPrivileges=true
&lt;&#x2F;span&gt;&lt;span&gt;# Sandboxing
&lt;&#x2F;span&gt;&lt;span&gt;ProtectSystem=strict
&lt;&#x2F;span&gt;&lt;span&gt;PrivateTmp=true
&lt;&#x2F;span&gt;&lt;span&gt;PrivateDevices=true
&lt;&#x2F;span&gt;&lt;span&gt;PrivateUsers=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectHostname=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectKernelLogs=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectKernelModules=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectKernelTunables=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectControlGroups=true
&lt;&#x2F;span&gt;&lt;span&gt;RestrictAddressFamilies=AF_INET
&lt;&#x2F;span&gt;&lt;span&gt;RestrictAddressFamilies=AF_INET6
&lt;&#x2F;span&gt;&lt;span&gt;RestrictAddressFamilies=AF_NETLINK
&lt;&#x2F;span&gt;&lt;span&gt;RestrictAddressFamilies=AF_UNIX
&lt;&#x2F;span&gt;&lt;span&gt;RestrictNamespaces=true
&lt;&#x2F;span&gt;&lt;span&gt;LockPersonality=true
&lt;&#x2F;span&gt;&lt;span&gt;RestrictRealtime=true
&lt;&#x2F;span&gt;&lt;span&gt;RestrictSUIDSGID=true
&lt;&#x2F;span&gt;&lt;span&gt;RemoveIPC=true
&lt;&#x2F;span&gt;&lt;span&gt;PrivateMounts=true
&lt;&#x2F;span&gt;&lt;span&gt;ProtectClock=true
&lt;&#x2F;span&gt;&lt;span&gt;# System Call Filtering
&lt;&#x2F;span&gt;&lt;span&gt;SystemCallArchitectures=native
&lt;&#x2F;span&gt;&lt;span&gt;SystemCallFilter=~@cpu-emulation @debug 
&lt;&#x2F;span&gt;&lt;span&gt;  @keyring @ipc @mount @obsolete @privileged @setuid
&lt;&#x2F;span&gt;&lt;span&gt;SystemCallFilter=@chown
&lt;&#x2F;span&gt;&lt;span&gt;SystemCallFilter=pipe
&lt;&#x2F;span&gt;&lt;span&gt;SystemCallFilter=pipe2
&lt;&#x2F;span&gt;&lt;span&gt;ReadWritePaths=&#x2F;home&#x2F;mastodon&#x2F;live
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Install]
&lt;&#x2F;span&gt;&lt;span&gt;WantedBy=multi-user.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That handles the &lt;code&gt;systemd&lt;&#x2F;code&gt; part of things.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;checking-the-services&quot;&gt;Checking The Services&lt;&#x2F;h2&gt;
&lt;p&gt;Make sure you have all the services are up&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo systemctl status mastodon-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If any of the services are down or disabled, you can enable them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo systemctl enable mastodon-web
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo systemctl enable mastodon-sideqik
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo systemctl enable mastodon-streaming
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo systemctl start mastodon-web
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo systemctl start mastodon-sideqik
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sudo systemctl start mastodon-streaming
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you didn’t have any issues so far, you should have a running &lt;strong&gt;Mastodon&lt;&#x2F;strong&gt;
instance that you can browse to the domain you set up (in my case
it’s &lt;code&gt;z2h.dev&lt;&#x2F;code&gt;. Then, you can log in as an Administrator with
a random password that the installer has provided you during the guided
installation section you’ve followed above.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;securing-mastodon&quot;&gt;Securing Mastodon&lt;&#x2F;h2&gt;
&lt;p&gt;Since we have &lt;strong&gt;Mastodon&lt;&#x2F;strong&gt; itself up and running, it’s time to secure the
instance.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll start with the users.&lt;&#x2F;p&gt;
&lt;p&gt;Ah, as soon as I created the instance, I made a second unprivileged user.&lt;&#x2F;p&gt;
&lt;p&gt;I use the root user only to administer the Mastodon server, and I use the
unprivileged user &lt;a href=&quot;http:&#x2F;&#x2F;z2h.dev&#x2F;@volkan&quot;&gt;z2h.dev&#x2F;@volkan&lt;&#x2F;a&gt; to post things on
the site.&lt;&#x2F;p&gt;
&lt;p&gt;The next thing you &lt;strong&gt;MUST&lt;&#x2F;strong&gt; do is
to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;McKael&#x2F;mastodon-documentation&#x2F;blob&#x2F;master&#x2F;Using-Mastodon&#x2F;2FA.md&quot;&gt;enable 2FA for all users you control&lt;&#x2F;a&gt;.
&lt;strong&gt;DO NOT&lt;&#x2F;strong&gt; defer this. &lt;strong&gt;Mastodon&lt;&#x2F;strong&gt; is getting quite popular, which also means
it’s attracting many people with bad intentions. Due to a zero-day
vulnerability, you would not want your server to become a spammers’ barbeque
backyard. &lt;strong&gt;2FA&lt;&#x2F;strong&gt; is an added layer of security that makes it extra hard for
attackers to impersonate you.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;scaling-up-mastodon&quot;&gt;Scaling Up Mastodon&lt;&#x2F;h2&gt;
&lt;p&gt;All the services &lt;strong&gt;Mastodon&lt;&#x2F;strong&gt; relies upon (&lt;em&gt;i.e., Redis, Postgres, etc&lt;&#x2F;em&gt;.) can
scale independently. Mastodon is, in itself, stateless. That means you can put
several Mastodon servers behind a load balancer and point them to the same
Postgres and Redis, which will take care of scalability for a long time.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a high-level outline of how that might look like:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;11&amp;#x2F;mastodon-lb.png&quot; alt=&quot;Scaling Up Mastodon&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Scaling Up Mastodon&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;If things get even crazier, you’ll have to come up with solutions to the
bottleneck you are facing. Like tuning Redis, adding read replicas; doing the
same to Postgres; tuning &lt;strong&gt;NGINX&lt;&#x2F;strong&gt;, maybe backing &lt;strong&gt;NGINX&lt;&#x2F;strong&gt; with another cloud
load balancer; sharding the data, geographically sharding the users… the list
can go on.&lt;&#x2F;p&gt;
&lt;p&gt;However, if you have reached that scale, the thing has become your full-time
job, and you probably have a team of intelligent engineers to sort out these
problems with you 🙂. If not, then you don’t have to worry about future issues.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;monitoring-and-operating-mastodon&quot;&gt;Monitoring and Operating Mastodon&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sidekiq.org&#x2F;&quot;&gt;SideKiq&lt;&#x2F;a&gt; is the Ruby-based job queue that Mastodon uses.
If you log into the admin panel, you can find a link to monitor its state.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;11&amp;#x2F;Screenshot-2022-11-12-at-1.33.19-PM.png&quot; alt=&quot;Sidekiq Dashboard&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Sidekiq Dashboard&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The &lt;strong&gt;Sidekiq&lt;&#x2F;strong&gt; dashboard is the first place you want to look when you feel
things are slowing down.&lt;&#x2F;p&gt;
&lt;p&gt;In addition, you can find on the admin console &lt;strong&gt;PgHero&lt;&#x2F;strong&gt; that can show you
important stats about your database.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;11&amp;#x2F;Screenshot-2022-11-12-at-9.58.08-PM.png&quot; alt=&quot;PgHero&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;PgHero&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Also there is &lt;a href=&quot;https:&#x2F;&#x2F;pgtune.leopard.in.ua&#x2F;&quot;&gt;&lt;strong&gt;PgTune&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, which can help you
tune optimize your database when you fill in some values in a web form.&lt;&#x2F;p&gt;
&lt;p&gt;Mastodon official documentation recommends you check out &lt;strong&gt;PgTune&lt;&#x2F;strong&gt; if you want
to fine-tune your database further. That could be a low-hanging scalability
fruit to use from day zero.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;11&amp;#x2F;Screenshot-2022-11-12-at-10.02.02-PM.png&quot; alt=&quot;PgTune UI&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;PgTune UI&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;How you monitor &lt;strong&gt;Mastodon&lt;&#x2F;strong&gt; will vastly depend on where you run it. You might
use your cloud provider’s altering mechanism, install
an &lt;a href=&quot;https:&#x2F;&#x2F;www.elastic.co&#x2F;elastic-stack&quot;&gt;ELK Stack&lt;&#x2F;a&gt; to take things under your
control, or do a mixture of both and some more. I’ll keep that part out of the
scope of this article.&lt;&#x2F;p&gt;
&lt;p&gt;Also, &lt;a href=&quot;https:&#x2F;&#x2F;docs.joinmastodon.org&#x2F;&quot;&gt;the official documentation&lt;&#x2F;a&gt; is the right
place to begin your search for anything related to fixing, operating, and
configuring Mastodon.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;That’s so far my experience and notes while installing Mastodon.&lt;&#x2F;p&gt;
&lt;p&gt;It took work, and I found myself debugging, looking into error messages, and
checking out &lt;code&gt;journalctl&lt;&#x2F;code&gt; errors and &lt;strong&gt;NGINX&lt;&#x2F;strong&gt; access and error log more than I
used to do in other guided installations.&lt;&#x2F;p&gt;
&lt;p&gt;However, it was &lt;strong&gt;not&lt;&#x2F;strong&gt; the most challenging thing either.
The &lt;a href=&quot;https:&#x2F;&#x2F;docs.joinmastodon.org&#x2F;&quot;&gt;the official documentation&lt;&#x2F;a&gt; is in good
shape, and when things don’t work, the error messages make sense and help you
figure out the next steps.&lt;&#x2F;p&gt;
&lt;p&gt;So, if you end up having a similar experience to mine, you’ll just need some
patience and to tap into your analytical debugging skills a bit more than usual.
Which also has been a fun learning experience that led to this article.&lt;&#x2F;p&gt;
&lt;p&gt;Hope you find it informative… And may the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;base64-decoding-a-string-in-go&#x2F;&quot;&gt;Base64 Decoding a String in Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;destructure&#x2F;&quot;&gt;Use Destructuring to Remove Attributes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;getting-the-body-of-an-http-request-with-go&#x2F;&quot;&gt;Getting the Body of an HTTP Request With Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;lets-create-a-syslog-logger&#x2F;&quot;&gt;Let’s Create a Syslog Logger&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;make-your-code-leaner&#x2F;&quot;&gt;Make Your Code Leaner By Extracting Method&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Who Else Wants to Have Their Own Mastodon Server?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;microservice-env-vars&#x2F;&quot;&gt;How to Ensure Environment Variables Are Set&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;scaling-your-node-api-like-a-boss&#x2F;&quot;&gt;Scaling Your Node.js API Like a Boss&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;talkspiffe-stream-setup&#x2F;&quot;&gt;The Live Stream Dream&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;zshell-startup-files&#x2F;&quot;&gt;.zprofile, .zshrc, .zenv, OMG! What Do I Put Where?!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;redirect-index-page&#x2F;&quot;&gt;Redirecting a Static Web Page&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Use Destructuring to Remove Attributes </title>
        <published>2023-03-07T00:00:00+00:00</published>
        <updated>2023-03-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/tips/destructure/"/>
        <id>https://zerotohero.dev/tips/destructure/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/tips/destructure/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;destructure.png&quot; alt=&quot;Destructure.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Destructure.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Here’s a neat little trick:&lt;&#x2F;p&gt;
&lt;p&gt;In JavaScript, you can destructure unwanted&#x2F;sensitive attributes from an object.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  firstName: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Matara&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  lastName: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Masuko&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  ssn: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;123-45-6789&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  location: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;USA&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ssn&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cleanUser &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cleanUser&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; logs: { firstName: &amp;#39;Matara&amp;#39;, 
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;   lastName: &amp;#39;Masuko&amp;#39;, location: &amp;#39;USA&amp;#39; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It’s much cleaner than looping through all attributes, eh?&lt;&#x2F;p&gt;
&lt;p&gt;That was your little nugget.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;base64-decoding-a-string-in-go&#x2F;&quot;&gt;Base64 Decoding a String in Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Use Destructuring to Remove Attributes&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;getting-the-body-of-an-http-request-with-go&#x2F;&quot;&gt;Getting the Body of an HTTP Request With Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;lets-create-a-syslog-logger&#x2F;&quot;&gt;Let’s Create a Syslog Logger&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;make-your-code-leaner&#x2F;&quot;&gt;Make Your Code Leaner By Extracting Method&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;mastodon-101&#x2F;&quot;&gt;Who Else Wants to Have Their Own Mastodon Server?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;microservice-env-vars&#x2F;&quot;&gt;How to Ensure Environment Variables Are Set&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;scaling-your-node-api-like-a-boss&#x2F;&quot;&gt;Scaling Your Node.js API Like a Boss&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;talkspiffe-stream-setup&#x2F;&quot;&gt;The Live Stream Dream&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;zshell-startup-files&#x2F;&quot;&gt;.zprofile, .zshrc, .zenv, OMG! What Do I Put Where?!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;redirect-index-page&#x2F;&quot;&gt;Redirecting a Static Web Page&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Getting the Body of an HTTP Request With Go</title>
        <published>2023-03-01T00:00:00+00:00</published>
        <updated>2023-03-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/tips/getting-the-body-of-an-http-request-with-go/"/>
        <id>https://zerotohero.dev/tips/getting-the-body-of-an-http-request-with-go/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/tips/getting-the-body-of-an-http-request-with-go/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;http.png&quot; alt=&quot;Request and responses.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Request and responses.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;You can use the io to get the request body from an &lt;strong&gt;HTTP&lt;&#x2F;strong&gt;request
in &lt;code&gt;io.ReadAll()&lt;&#x2F;code&gt; function to read the&lt;code&gt;r.Body&lt;&#x2F;code&gt; object representing the incoming
request body. Here is an example of how you can do this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;errors&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;io&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;net&#x2F;http&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Read the request body
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ReadAll&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Handle the error by sending an HTTP status code 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; and message back to the client.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error reading request body&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusBadRequest&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Ensure that request body is closed.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;defer func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Body io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ReadCloser&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error while closing the body&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Use the request body here
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; For example, echoing the request body back to the client
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error while writing the body&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Note: In a real application, check the error from Write
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Register the handler function for the root path
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;HandleFunc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Start the HTTP server on port 8080
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ListenAndServe always returns a non-nil error.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; After Shutdown or Close, the returned error is 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ErrServerClosed.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ListenAndServe&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;:8080&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Is&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ErrServerClosed&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Server closed.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Unexpected error. Log and exit.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That was your nugget 😄.&lt;&#x2F;p&gt;
&lt;p&gt;Until the next one… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;base64-decoding-a-string-in-go&#x2F;&quot;&gt;Base64 Decoding a String in Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;destructure&#x2F;&quot;&gt;Use Destructuring to Remove Attributes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Getting the Body of an HTTP Request With Go&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;lets-create-a-syslog-logger&#x2F;&quot;&gt;Let’s Create a Syslog Logger&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;make-your-code-leaner&#x2F;&quot;&gt;Make Your Code Leaner By Extracting Method&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;mastodon-101&#x2F;&quot;&gt;Who Else Wants to Have Their Own Mastodon Server?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;microservice-env-vars&#x2F;&quot;&gt;How to Ensure Environment Variables Are Set&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;scaling-your-node-api-like-a-boss&#x2F;&quot;&gt;Scaling Your Node.js API Like a Boss&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;talkspiffe-stream-setup&#x2F;&quot;&gt;The Live Stream Dream&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;zshell-startup-files&#x2F;&quot;&gt;.zprofile, .zshrc, .zenv, OMG! What Do I Put Where?!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;redirect-index-page&#x2F;&quot;&gt;Redirecting a Static Web Page&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Unlock Your True Potential: Make Your Hard Work Visible</title>
        <published>2023-01-16T00:00:00+00:00</published>
        <updated>2023-01-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0025/"/>
        <id>https://zerotohero.dev/highlights/issue-0025/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0025/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;stand.png&quot; alt=&quot;Show yourself.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Show yourself.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2024-05-21&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Aegis&lt;&#x2F;strong&gt; is now maintained by &lt;strong&gt;VMware Tanzu&lt;&#x2F;strong&gt; GitHub Organization
with a new name: &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;VMware Secrets Manager&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It is ready for production use, and as the time of this writing we
are already using it in production clusters.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Welcome to the 25th issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;Several things have been going on, yet I think this week’s highlight was
&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;&lt;strong&gt;Aegis&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. It has been very well received by people who
are well-known in the Cloud Native security community, and I have a feeling it
is growing to become a bit more than a side project, but we’ll see.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;aegis-keep-your-secrets-secret&quot;&gt;Aegis: Keep Your Secrets… Secret&lt;&#x2F;h2&gt;
&lt;p&gt;As I said, last week was mainly about &lt;strong&gt;Aegis&lt;&#x2F;strong&gt;, but what is &lt;strong&gt;Aegis&lt;&#x2F;strong&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vmware-tanzu&#x2F;secrets-manager&quot;&gt;&lt;strong&gt;Aegis&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is a Kubernetes-native, lightweight secrets management
solution that keeps your secrets secret. And last week, I made significant
progress with it.&lt;&#x2F;p&gt;
&lt;p&gt;Some key highlights of the current version are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Upgraded &lt;strong&gt;Aegis&lt;&#x2F;strong&gt; to the latest and greatest &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
version as the identity control plane. That gave a bunch of stability
improvements and reduced memory usage significantly.&lt;&#x2F;li&gt;
&lt;li&gt;A lot of documentation updates to make &lt;strong&gt;Aegis&lt;&#x2F;strong&gt; easier to use and deploy.&lt;&#x2F;li&gt;
&lt;li&gt;Making everything configurable via environment variables.&lt;&#x2F;li&gt;
&lt;li&gt;Added &lt;strong&gt;liveness&lt;&#x2F;strong&gt; and &lt;strong&gt;readiness&lt;&#x2F;strong&gt; probes to critical components for
Kubernetes-native lifecycle management.&lt;&#x2F;li&gt;
&lt;li&gt;Started using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GoogleContainerTools&#x2F;distroless&quot;&gt;&lt;strong&gt;distroless images&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
for an additional layer of security.&lt;&#x2F;li&gt;
&lt;li&gt;Using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spiffe-csi&quot;&gt;&lt;strong&gt;SPIFFE CSI driver&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; instead of
volume mounts (&lt;em&gt;for security again&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Although &lt;strong&gt;Aegis&lt;&#x2F;strong&gt; is still an alpha product and has yet to be battle-tested,
I am confident it can be used in a production cluster.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;In today’s fast-paced and competitive business environment, it is essential to
stand out and make your hard work and achievements visible to your management.
Unfortunately, you can fall into the trap of being overlooked as a hidden gem
among your peers, despite your consistent efforts and contributions to the team.&lt;&#x2F;p&gt;
&lt;p&gt;This can be detrimental to career growth and advancement opportunities. So what
are the ways to sort this out, unlock your true potential, and ace your career?&lt;&#x2F;p&gt;
&lt;p&gt;One word: &lt;strong&gt;Take initiative&lt;&#x2F;strong&gt;… Okay, that was two words, but still 🙂.&lt;&#x2F;p&gt;
&lt;p&gt;By sharing your daily progress, goals, and accomplishments with your manager,
you can ensure that your hard work does not go unnoticed.&lt;&#x2F;p&gt;
&lt;p&gt;One effective way to make your work visible is by providing &lt;strong&gt;regular updates&lt;&#x2F;strong&gt;
and participating in huddles with your manager. This allows you to share your
progress on current projects, any challenges you may be facing, and any new
ideas or solutions you have come up with.&lt;&#x2F;p&gt;
&lt;p&gt;By providing this information regularly, you can create a transparent view of
your work for your manager and demonstrate your willingness to actively
collaborate and contribute to the team.&lt;&#x2F;p&gt;
&lt;p&gt;Another critical aspect of making your work visible is sharing real-time metrics
and key performance indicators (&lt;strong&gt;&lt;em&gt;KPIs&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;) with your manager. These metrics
provide valuable insights into the impact and results of your work and
demonstrate your ability to measure and track your progress. This can help your
manager better understand the value you bring to the team and your role in
achieving business goals.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to regular updates and sharing metrics, it is also essential to
&lt;strong&gt;proactively&lt;&#x2F;strong&gt; offer &lt;strong&gt;creative solutions&lt;&#x2F;strong&gt;, volunteer extra time and effort,
and showcase your skill set to help your manager tackle challenges. This
demonstrates your willingness to go above and beyond and showcases your ability
to think outside the box and bring fresh perspectives to the team.&lt;&#x2F;p&gt;
&lt;p&gt;All these can put you on your manager’s radar as a valuable asset to the team
and help you get the promotion you deserve.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sampler.dev&#x2F;&quot;&gt;Sampler is a tool for shell commands execution, visualization and
alerting&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.airplane.dev&#x2F;&quot;&gt;Airplane is a developer infrastructure for internal tooling&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;0xax.gitbooks.io&#x2F;linux-insides&#x2F;content&#x2F;SysCall&#x2F;linux-syscall-4.htm&quot;&gt;In case you wonder how a unix kernel runs a program, here is a nice
article about it&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>&#x27;Later&#x27; Does Not Exist</title>
        <published>2022-11-17T00:00:00+00:00</published>
        <updated>2022-11-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/later-does-not-exist/"/>
        <id>https://zerotohero.dev/top-of-mind/later-does-not-exist/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/later-does-not-exist/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;fire3.png&quot; alt=&quot;“Later” Does Not Exist&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;All of a sudden, an idea hits you. For example, writing an article about why the
concept of “&lt;em&gt;I’ll do it later&lt;&#x2F;em&gt;” does not exist in the contemporary world. Then
you decide to do that “later.” Then, you realize “later” is a synonym for “*
&lt;em&gt;never&lt;&#x2F;em&gt;*” and start typing on your mechanical keyboard just 20 minutes before
midnight.&lt;&#x2F;p&gt;
&lt;p&gt;Why? I’ll get to that later &lt;strong&gt;real soon&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But before that, let’s think about what “&lt;em&gt;later&lt;&#x2F;em&gt;” is.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-does-later-mean&quot;&gt;What Does “&lt;em&gt;Later&lt;&#x2F;em&gt;” Mean?&lt;&#x2F;h2&gt;
&lt;p&gt;What &lt;strong&gt;is&lt;&#x2F;strong&gt; “&lt;em&gt;later&lt;&#x2F;em&gt;”?&lt;&#x2F;p&gt;
&lt;p&gt;Maybe it’s adding a “&lt;em&gt;temporary hack&lt;&#x2F;em&gt;” to be removed later. Perhaps it’s
removing a bug, introducing a lower-priority bug, and deciding to deal with it
“&lt;strong&gt;&lt;em&gt;later&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;.” Maybe it’s temporarily breaking some test cases to deliver an
urgent hotfix. Or maybe it’s stashing away your current work, to hack together a
last-minute customer proof-of-concept, knowing that you’ll have &lt;strong&gt;&lt;em&gt;time&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; to
get back to your work “&lt;strong&gt;&lt;em&gt;later&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;”.&lt;&#x2F;p&gt;
&lt;p&gt;Consider the actual consequences of your decisions: Are you honest with
yourself? Are you going to get back to that “&lt;em&gt;later&lt;&#x2F;em&gt;”? What if other emergencies
arise and you don’t? What kind of risk are you introducing?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;later-has-many-forms&quot;&gt;“&lt;em&gt;Later&lt;&#x2F;em&gt;” Has Many Forms&lt;&#x2F;h2&gt;
&lt;p&gt;There are other forms of “&lt;em&gt;later&lt;&#x2F;em&gt;,” too:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The most popular one: “I’ll &lt;em&gt;fix it later&lt;&#x2F;em&gt;.” &lt;strong&gt;Srsly?!&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Or, “&lt;em&gt;just add a quality gate exception; I’ll add the unit tests later&lt;&#x2F;em&gt;.”&lt;&#x2F;li&gt;
&lt;li&gt;Or “I’ll &lt;em&gt;discuss this feature with a greater audience later&lt;&#x2F;em&gt;.”&lt;&#x2F;li&gt;
&lt;li&gt;Or “&lt;em&gt;We can worry about security&#x2F;performance&#x2F;reliability later&lt;&#x2F;em&gt;.”&lt;&#x2F;li&gt;
&lt;li&gt;Or “&lt;em&gt;The code is working as is; we can make it more readable later&lt;&#x2F;em&gt;.”&lt;&#x2F;li&gt;
&lt;li&gt;The list can go on and on…&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Yet, more often than not, what you mean by “&lt;em&gt;later&lt;&#x2F;em&gt;” is “&lt;strong&gt;never&lt;&#x2F;strong&gt;.”&lt;&#x2F;p&gt;
&lt;p&gt;Because when you cut corners and create an illusion of making things &lt;strong&gt;faster&lt;&#x2F;strong&gt;,
you are giving the upper management, project managers, product owners, and your
customers a &lt;strong&gt;false&lt;&#x2F;strong&gt; sense of how quickly you deliver.&lt;&#x2F;p&gt;
&lt;p&gt;Rest assured, knowing how awesome you are at things, they will be expecting *
&lt;em&gt;more&lt;&#x2F;em&gt;* of it—that is a self-feeding cycle: There is remaining work, and you
need to talk about it. Yet you do not. Hence comes more work!&lt;&#x2F;p&gt;
&lt;p&gt;In essence, you are effectively &lt;strong&gt;lying&lt;&#x2F;strong&gt; to your stakeholders ad infinitum:
Next time, you’ll be overloaded with more work; you’ll cut more corners. You’ll
deliver much faster and be overloaded with even more work.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Later will NEVER come&lt;&#x2F;strong&gt;: You will start accruing a &lt;strong&gt;&lt;em&gt;$#!%&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; ton of technical
debt.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;set-realistic-expectations&quot;&gt;Set Realistic Expectations&lt;&#x2F;h2&gt;
&lt;p&gt;The best way to reduce technical debt (&lt;em&gt;and, by extension, increase technical
wealth&lt;&#x2F;em&gt;) is, to &lt;strong&gt;be honest&lt;&#x2F;strong&gt;, and set &lt;strong&gt;realistic expectations&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You are not finished with a feature until it meets the “&lt;em&gt;definition of done&lt;&#x2F;em&gt;.” A
&lt;strong&gt;definition of done&lt;&#x2F;strong&gt; can include things like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Is the feature tested?&lt;&#x2F;li&gt;
&lt;li&gt;Do key stakeholders verify it?&lt;&#x2F;li&gt;
&lt;li&gt;Is there documentation?&lt;&#x2F;li&gt;
&lt;li&gt;Did we do a usability test?&lt;&#x2F;li&gt;
&lt;li&gt;Does it pass the performance benchmarks?&lt;&#x2F;li&gt;
&lt;li&gt;Is it peer-reviewed?&lt;&#x2F;li&gt;
&lt;li&gt;Is the code readable, duplication-free, and bug-free?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;time-is-candy&quot;&gt;Time is Candy&lt;&#x2F;h2&gt;
&lt;p&gt;You know what, that doesn’t only happen at work. It happens in your daily life,
too: When was the last time you added an article to your “read it later” list,
and you actually read it?&lt;&#x2F;p&gt;
&lt;p&gt;It all boils down to &lt;strong&gt;time&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Time is your most precious asset because you cannot recreate it: Once you spend
it, it’s gone. So the only way to do enough things in the amount of time you
have is to &lt;strong&gt;be selective&lt;&#x2F;strong&gt; and &lt;strong&gt;do less&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Have priorities&lt;&#x2F;strong&gt;. Review &lt;strong&gt;often&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;☝️ That’s the only way to stay afloat.&lt;&#x2F;p&gt;
&lt;p&gt;Later 👋.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ ‘Later’ Does Not Exist&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE</title>
        <published>2022-10-19T00:00:00+00:00</published>
        <updated>2022-10-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/register/"/>
        <id>https://zerotohero.dev/spire/mtls/register/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/register/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;mutual-1.png&quot; alt=&quot;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;For SPIRE to be able to attest workloads and distribute &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s to them, we’ll
have to register the nodes and the workloads to &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;. That’s what this
section is all about.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;MsfArABWs9E?si=JHzL1tHkBc9e-XHe&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Concepts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spire&#x2F;blob&#x2F;main&#x2F;support&#x2F;k8s&#x2F;k8s-workload-registrar&#x2F;README.md&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Kubernetes Workload Registrar&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spire-controller-manager&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Controller Manager&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 6: Rolling out SPIRE to the Cluster</title>
        <published>2022-10-19T00:00:00+00:00</published>
        <updated>2022-10-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/rollout/"/>
        <id>https://zerotohero.dev/spire/mtls/rollout/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/rollout/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;secure.png&quot; alt=&quot;mTLS With SPIRE: Part 6: Rolling out SPIRE to the Clusters&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 6: Rolling out SPIRE to the Clusters&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;To establish an identity control plane, we’ll need &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;. This section will
deploy &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; to the clusters.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;e4ZW022OBOE?si=B5cL8hs9e1WDAvl6&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 6: Rolling out SPIRE to the Clusters&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 6: Rolling out SPIRE to the Clusters&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Concepts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;try&#x2F;getting-started-k8s&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Kubernetes Quickstart&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;deploying&#x2F;spire_server&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Server Configuration Reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zero to Prod in Half an Hour: Part 1 --- An Overview of FizzBuzz Pro</title>
        <published>2022-10-15T00:00:00+00:00</published>
        <updated>2022-10-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/an-overview-of-fizzbuzz-pro/"/>
        <id>https://zerotohero.dev/zero-to-prod/an-overview-of-fizzbuzz-pro/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/an-overview-of-fizzbuzz-pro/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;app.png&quot; alt=&quot;Zero to Prod in Half an Hour: Part 1 --- An Overview of FizzBuzz Pro&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Zero to Prod in Half an Hour: Part 1 --- An Overview of FizzBuzz Pro&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This series will show how you can deploy a full-blown production-ready web
application in half an hour. Let’s look into what kind of an application we’ll
build and what technologies we’ll use.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;u_I5azPqgg4?si=7S-wLlMvXCCMlN0l&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Zero to Prod in Half an Hour: Part 1 --- An Overview of FizzBuzz Pro&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Zero to Prod in Half an Hour: Part 1 --- An Overview of FizzBuzz Pro&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pygments.org&#x2F;&quot;&gt;Python Pygments&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pygments.org&#x2F;docs&#x2F;cmdline&#x2F;&quot;&gt;Python Pygments CLI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.docker.com&#x2F;&quot;&gt;Docker&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;builder&#x2F;&quot;&gt;Dockerfile&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;production-environment&#x2F;container-runtimes&#x2F;&quot;&gt;Container Runtimes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mongodb.com&#x2F;&quot;&gt;MongoDB&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mongodb.com&#x2F;cloud&#x2F;atlas&quot;&gt;MongoDB Atlas&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.papertrail.com&#x2F;&quot;&gt;Papertrail&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gumroad.com&#x2F;&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;app.gumroad.com&#x2F;api&quot;&gt;Gumroad API&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;&quot;&gt;Go Programming Language&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gin-gonic.com&#x2F;&quot;&gt;Gin Web Framework&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;eks&#x2F;&quot;&gt;Amazon EKS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;ecr&#x2F;&quot;&gt;Amazon ECR&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;s3&#x2F;&quot;&gt;Amazon S3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;route53&#x2F;&quot;&gt;Amazon Route53&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;elasticloadbalancing&#x2F;&quot;&gt;Elastic Load Balancing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;cloudfront&#x2F;&quot;&gt;Amazon Cloudfront&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read The Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;zero-to-prod-in-30&#x2F;zero-to-prod-in-30.zip&quot;&gt;Download the source code (&lt;em&gt;114kb zip
archive&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Until the next lecture… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 5: Containerizing the Client App</title>
        <published>2022-08-19T00:00:00+00:00</published>
        <updated>2022-08-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/bundle-client/"/>
        <id>https://zerotohero.dev/spire/mtls/bundle-client/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/bundle-client/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;severcloud.png&quot; alt=&quot;mTLS With SPIRE: Part 5: Containerizing the Client App&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We’ll continue creating creating container images and deploying the client app
to the cluster too, then observe how the client and server communicate with each
other within the pods.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;tpxRI7XuctE?si=_ao-WI6Hd3wAKdLm&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 5: Containerizing the Client&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 4: Containerizing the Server Appp</title>
        <published>2022-08-19T00:00:00+00:00</published>
        <updated>2022-08-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/bundle-server/"/>
        <id>https://zerotohero.dev/spire/mtls/bundle-server/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/bundle-server/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;containers.png&quot; alt=&quot;mTLS With SPIRE: Part 4: Containerizing the Server App&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This section will bundle the server application, create and image out of it,
create deployment manifests, and deploy it into the cluster.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;VuT5zaZwq2Y?si=9nVhMhb_QdzHWYyj&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 4: Containerizing the Server App&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.docker.com&#x2F;&quot;&gt;&lt;strong&gt;Docker&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;opencontainers.org&#x2F;&quot;&gt;Open Container Initiative (&lt;strong&gt;&lt;em&gt;OCI&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;build&#x2F;building&#x2F;multi-stage&#x2F;&quot;&gt;Multistage Builds&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;builder&#x2F;&quot;&gt;Dockerfile Reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GoogleContainerTools&#x2F;distroless&quot;&gt;Distroless Container Images&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;registry&#x2F;&quot;&gt;Docker Registry&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;deployment&#x2F;&quot;&gt;Deployments&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;services-networking&#x2F;service&#x2F;&quot;&gt;Services&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;metallb.universe.tf&#x2F;&quot;&gt;&lt;strong&gt;MetalLB&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;this is the LoadBalancer we used
in this video series&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 3: Creating the Client Appp</title>
        <published>2022-08-19T00:00:00+00:00</published>
        <updated>2022-08-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/client-app/"/>
        <id>https://zerotohero.dev/spire/mtls/client-app/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/client-app/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;client-server.png&quot; alt=&quot;mTLS With SPIRE: Part 3: Creating the Client App&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This section will create the client app and establish connectivity between the
client and the server. The connectivity is insecure: There is no &lt;strong&gt;mTLS&lt;&#x2F;strong&gt;
security yet—we’ll come to that later.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;zp1JiA2Kni8?si=XhDNihlicw7pJGFb&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 3: Creating the Client App&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS</title>
        <published>2022-08-19T00:00:00+00:00</published>
        <updated>2022-08-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/end-to-end/"/>
        <id>https://zerotohero.dev/spire/mtls/end-to-end/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/end-to-end/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;connectivity.png&quot; alt=&quot;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In this final video of this series, we’ll exchance trust bundles between two *
&lt;em&gt;SPIRE&lt;&#x2F;em&gt;* servers to enable cross-cluster &lt;strong&gt;mTLS&lt;&#x2F;strong&gt; connectivity between workloads
that reside in different clusters.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;YaRI-U8czBI?si=om4iKvw2rGHB6gCu&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;architecture&#x2F;federation&#x2F;readme&#x2F;&quot;&gt;Deploying a Federated &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Architecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;persistent-volumes&#x2F;&quot;&gt;Kubernetes Persistent Volumes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;microk8s.io&#x2F;&quot;&gt;Microk8s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Overcome the Awkward Feeling of Networking</title>
        <published>2022-07-17T00:00:00+00:00</published>
        <updated>2022-07-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0022/"/>
        <id>https://zerotohero.dev/highlights/issue-0022/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0022/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;networking.png&quot; alt=&quot;Navigate the awkwardness of networking.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Navigate the awkwardness of networking.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the 22nd issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;For the last month, I have been vacationing with limited connectivity. Before
that, I was deeply immersed in &lt;a href=&quot;https:&#x2F;&#x2F;www.o-ran.org&quot; title=&quot;O-RAN&quot;&gt;&lt;strong&gt;learning a new domain of expertise&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
So I hadn’t had the time to create new content here.&lt;&#x2F;p&gt;
&lt;p&gt;Well, I’m still learning many things and ramping up at work; yet I’m not that
overwhelmed anymore. So I’ll gradually get back on track here.&lt;&#x2F;p&gt;
&lt;p&gt;The benefit of my ramping-up period is I’ve learned a lot of cool stuff, and I’d
love to share them with y’all. So expect some content around &lt;strong&gt;network
virtualization&lt;&#x2F;strong&gt;, &lt;strong&gt;disaggregation&lt;&#x2F;strong&gt;, and &lt;strong&gt;Open Radio Access Networks&lt;&#x2F;strong&gt;. Stay
tuned.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;it-was-a-hell-of-a-vacation&quot;&gt;It Was a Hell of a Vacation&lt;&#x2F;h2&gt;
&lt;p&gt;For one month, I was mostly away from technology. Instead, I spent time with
family and friends, visited places, and had a lot of fun. And honestly, I needed
to recharge my batteries. And now I’m back on track.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s the last scene I looked at before I headed back to the
U.S.—Unfortunately, the picture does not give the viewer what it deserves: It
was mesmerizing to be there to witness the sunset by the seashore with a
crescent moon hanging above.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2022&amp;#x2F;07&amp;#x2F;sunset.jpeg&quot; alt=&quot;Sunset in Dikili.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Sunset in Dikili.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;what-s-cooking-in-the-kitchen-woman-fried-egg&quot;&gt;What’s Cooking in the Kitchen 👩‍🍳&lt;&#x2F;h2&gt;
&lt;p&gt;I just recorded a video about “&lt;strong&gt;&lt;em&gt;Ghost theme development&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;.” I’m not sure if
it will be premium content or if I will publish it accessible for all, yet it’ll
be there soon.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;07&amp;#x2F;GhostRecording.png&quot; alt=&quot;Ghost theme development -- Audiio recording.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Ghost theme development -- Audiio recording.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In addition, I’ve started drafting a few things about &lt;strong&gt;Open Radio Access
Network&lt;&#x2F;strong&gt; (&lt;em&gt;or, O-RAN&lt;&#x2F;em&gt;). &lt;strong&gt;O-RAN&lt;&#x2F;strong&gt; is a very technically involved topic with
lots of subtopics. I’ll try my best to make it easy to understand, and I’m sure
it’ll be so much fun to create the content. After all, I’m still learning it;
I’m a big believer in learning by sharing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;You are not alone if networking feels transactional—even awkward—to you.&lt;&#x2F;p&gt;
&lt;p&gt;While networking, one of the things that you want to do is to make a good
impression on people. And maybe your mind goes blank when you try to do that. Or
perhaps you need to overcompensate your nervousness by talking a lot or showing
unrealistic enthusiasm.&lt;&#x2F;p&gt;
&lt;p&gt;That puts you in a situation where you know and acknowledge that you should be
networking. Yet, you have an equally strong desire to avoid the discomfort of it
all.&lt;&#x2F;p&gt;
&lt;p&gt;How can you reconcile these two opposing feelings? Here are a few tips:&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, start by reframing your thoughts. This is a genuine opportunity to make
real, meaningful connections. It’s not a phony, opportunistic interaction.&lt;&#x2F;p&gt;
&lt;p&gt;Secondly, consider what you can offer in that situation. It’s not just what you
want to take. Networking is &lt;strong&gt;mutual&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Also, before meeting someone new, read more about them. This way, you can find
something interesting that you mutually share to break the ice. That will be *
&lt;em&gt;much&lt;&#x2F;em&gt;* better than memorizing the “&lt;em&gt;right&lt;&#x2F;em&gt;” questions to ask to make a good
impression.&lt;&#x2F;p&gt;
&lt;p&gt;Yes, all of these can be done; it’s a subtle mindset shift. Yet, it can make a
world of difference.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;One final piece of advice:&lt;&#x2F;strong&gt; Don’t try to hide who you are. Be honest—even
if that means openly expressing what makes you uncomfortable with this whole
networking thing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;EsperoTech&#x2F;yaade&quot;&gt;In case you want your on premises Postman, &lt;strong&gt;YAADE&lt;&#x2F;strong&gt; is a self-hosted, open
source, collaborative API development environment&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zyedidia&#x2F;generic&quot;&gt;Here’s a collection of generic data structures written in &lt;strong&gt;Go&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;barthr&#x2F;redo&quot;&gt;With &lt;code&gt;redo&lt;&#x2F;code&gt; you can create reusable functions from your shell history in an
interactive way&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Change Is the Only Constant</title>
        <published>2022-04-03T00:00:00+00:00</published>
        <updated>2022-04-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0021/"/>
        <id>https://zerotohero.dev/highlights/issue-0021/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0021/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot; alt=&quot;Change Is the Only Constant&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;fire2.png&quot; alt=&quot;Change makes the fire burn.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Change makes the fire burn.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the 21st issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fire burns continuously and without interruption. It is always consuming fuel
and always liberating smoke. Everything is either mounting upwards to serve as
fuel, or sinking downwards after having nourished the flame. It follows that
the whole of reality is like an ever-flowing stream, and that nothing is ever
at rest for a moment.
— &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Heraclitus&quot;&gt;&lt;strong&gt;Heraclitus&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Yes, everything flows; everything changes and nothing is stationary.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;personal-news&quot;&gt;Personal… News?&lt;&#x2F;h2&gt;
&lt;p&gt;Well, it’s about time to spill those beans (&lt;em&gt;at least to the devoted readers of
this newsletter 🙂&lt;&#x2F;em&gt;). Everyone will learn in a few weeks anyway.&lt;&#x2F;p&gt;
&lt;p&gt;Because of some of the surrounding changes, I paused content creation for a
while. And now I’m back again 💪.&lt;&#x2F;p&gt;
&lt;p&gt;So what happened? Well, if you don’t know Silly Cone Valley technical
interviews, it will be harder to help you visualize how brutal they are.
Preparing for them is equivalent to preparing for a Bar Examination, SAT,
or something. I’m not kidding. It’s flocking hard!&lt;&#x2F;p&gt;
&lt;p&gt;I have been interviewing for the last few months, and my main focus and energy
were on the interview preparation. Since that process has ended, now I can
share my “&lt;strong&gt;&lt;em&gt;personal news&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” with you.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;farewell-cisco-dolphin-hello-vmware-wave&quot;&gt;Farewell Cisco 🐬; Hello VMware 👋&lt;&#x2F;h2&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;04&amp;#x2F;vmware-logo.png&quot; alt=&quot;VMware.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;VMware.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Hello world. Hello stars. Hello universe.&lt;&#x2F;p&gt;
&lt;p&gt;As of mid-April (&lt;em&gt;2022&lt;&#x2F;em&gt;), I’ll have my last day at &lt;strong&gt;Cisco&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve been at Cisco for the last seven years: That’s a long time to learn a lot.
I enjoyed every single moment of it.&lt;&#x2F;p&gt;
&lt;p&gt;That being said, I also believe it’s time for the next steps in my career
journey.&lt;&#x2F;p&gt;
&lt;p&gt;I’m moving to &lt;strong&gt;VMware&lt;&#x2F;strong&gt; as a &lt;strong&gt;Staff Engineer&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In my new job, among many things, I’ll initially be responsible for
&lt;a href=&quot;https:&#x2F;&#x2F;telco.vmware.com&#x2F;products&#x2F;telco-cloud-platform-ran.html&quot;&gt;&lt;strong&gt;5G Edge Non-Realtime Radio Access Network APIs, Cloud Architecture,
and Orchestration&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. I know, it’s a bit mouthful, yet it’s
exciting. There are so many new things to learn.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;So, in case you are curious about whether your 5G cellular reception enhances
after you get those vaccines, I’ll soon figure it out 😀.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Ah, I’ll be Kuberneting as usual too; nothing has changed in that part 😀.&lt;&#x2F;p&gt;
&lt;p&gt;This new opportunity will be technologically, conceptually, and architecturally
“&lt;strong&gt;&lt;em&gt;on the edge&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;”. I just cannot wait to get started.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-will-this-change-impact-well-everything&quot;&gt;How Will This Change Impact… Well… Everything&lt;&#x2F;h2&gt;
&lt;p&gt;Honestly, I don’t know. This new job is &lt;strong&gt;very&lt;&#x2F;strong&gt; demanding, and I’ll have to
learn a lot, at least initially. Radio Access Edge Networks will be my main
focus. This also means I’ll move my focus away from some of the things I have
been doing, at least until I get comfortable with my new environment.&lt;&#x2F;p&gt;
&lt;p&gt;To accommodate for the time that need for this transition, here are the things
that I’m phasing out or changing my cadence:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;: It was fun to create an application around data structures
and algorithms and teach how to think algorithmically. However, it takes a
considerable effort, which I cannot find time for right now. So I shut down
the service. Of course, I have all the source code, and I may repurpose it
for other things later.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Twitch Stream&lt;&#x2F;strong&gt;: I will do screencasts every now and then, but I won’t tie
them to a schedule. It will be more like whenever I feel like it.
&lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;vadidekivolkan.&quot;&gt;You can follow me on Twitch to get notified whenever I’m online&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt;: I have to manage my time well, and my current job will be
my primary focus. I will continue to create content. Yet the content will be
more byte-size and practical rather than involved and instructional. So expect
to see more tips and fewer lectures here.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;OpsBeacon&lt;&#x2F;strong&gt;: I’ll continue to add value to &lt;strong&gt;OpsBeacon&lt;&#x2F;strong&gt;, and I’ll share my
progress here and on my screencasts. I don’t foresee any changes in that alley.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That’s more or less how I see things will pan out. As I said, in time, if I can
allocate more time, I sure will provide more content. But, at the end of the
day, content creation is something that I do have fun with. I love explaining
concepts, and I’ll continue doing that as long as I have time available.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;Every success story that I’ve been a part of involved some luck factor.&lt;&#x2F;p&gt;
&lt;p&gt;Some people say that “&lt;em&gt;serendipity is not in your control&lt;&#x2F;em&gt;,” but that’s not
entirely true. You don’t &lt;strong&gt;get&lt;&#x2F;strong&gt; lucky; you &lt;strong&gt;build&lt;&#x2F;strong&gt; your luck.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a way to build luck into your career:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;serendipitous-networking&quot;&gt;Serendipitous Networking&lt;&#x2F;h3&gt;
&lt;p&gt;I don’t know if there is a different name for it. What I mean by
“&lt;em&gt;serendipitous networking&lt;&#x2F;em&gt;” is to connect with people just for the sake of
connecting. You’ll be amazed how useful &lt;a href=&quot;https:&#x2F;&#x2F;techcrunch.com&#x2F;2016&#x2F;04&#x2F;26&#x2F;weak-ties-matter&#x2F;&quot;&gt;some of those weak ties you
created&lt;&#x2F;a&gt; will be to lift you up.&lt;&#x2F;p&gt;
&lt;p&gt;Connect with people to get to know them, with no intention to leverage them as
a career slingshot. Instead, merely connect with them to find common ground.
Learn their perspectives; learn their stories; know them.&lt;&#x2F;p&gt;
&lt;p&gt;Ask them questions about how they discovered their passion and what they like or
dislike about their role or industry.&lt;&#x2F;p&gt;
&lt;p&gt;First, what you learn can motivate you to lead yourself to your next career move.
And more importantly, you’ll have someone to discuss related things once you want
to make a life-changing decision.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;don-t-fear-change&quot;&gt;Don’t Fear Change&lt;&#x2F;h3&gt;
&lt;p&gt;Yes, change is risky. Yes, change is unknown. Yes, change is uncomfortable.&lt;&#x2F;p&gt;
&lt;p&gt;Changes that feel out of your control can feel scary. Yet, try to see them as
opportunities. What can you learn from that change? What aspects of it are under
your control? And what part of it should you better let go with the flow?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Change is good&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Remember, there is always an opportunity to capitalize when there is a disruption.&lt;&#x2F;p&gt;
&lt;p&gt;Observe the change, and trust that new opportunities will arise within time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stars.chromeexperiments.com&#x2F;&quot;&gt;Welcome to your &lt;strong&gt;stellar neighborhood&lt;&#x2F;strong&gt; (&lt;em&gt;best viewed with a Chromium
Browser&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pipedream.com&#x2F;&quot;&gt;&lt;strong&gt;Pipedream&lt;&#x2F;strong&gt; helps you write less boilerplate code while connecting
APIs together&lt;&#x2F;a&gt;j.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;regex.help&#x2F;&quot;&gt;You have text examples, but you don’t know what &lt;strong&gt;RegExp&lt;&#x2F;strong&gt; to write
that matches them all? Say no more fam—Leave the job
to &lt;strong&gt;&lt;code&gt;grex&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 21: Change Is the Only Constant&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Words Matter</title>
        <published>2022-02-26T00:00:00+00:00</published>
        <updated>2022-02-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0020/"/>
        <id>https://zerotohero.dev/highlights/issue-0020/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0020/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;framing.png&quot; alt=&quot;Words make a difference.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Words make a difference.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the 20th issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;It has been a while since the last update; and &lt;em&gt;as always&lt;&#x2F;em&gt;, I have been busy
with a lot of things. Here are some highlights.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;opsbeacon-is-back-on-track-metal&quot;&gt;&lt;strong&gt;OpsBeacon&lt;&#x2F;strong&gt; is Back on Track 🤘&lt;&#x2F;h2&gt;
&lt;p&gt;If you’ve been following &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; since the beginning, then case, you’ll
remember that &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;with a group of fellow engineers, we’d started &lt;strong&gt;OpsBeacon&lt;&#x2F;strong&gt; to
help operations and level-1 responders &lt;strong&gt;#sleepmore&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That was around &lt;strong&gt;September 2021&lt;&#x2F;strong&gt;. Then life got in the way, and we had to
pause the development of &lt;strong&gt;OpsBeacon&lt;&#x2F;strong&gt; for a while.&lt;&#x2F;p&gt;
&lt;p&gt;Guess what? We are back on track, baby! There is a horde of things on our
roadmap, and it will be a hell of a ride 🤘.&lt;&#x2F;p&gt;
&lt;p&gt;That means you’ll hear me talking more about &lt;a href=&quot;https:&#x2F;&#x2F;ob2.ai&quot;&gt;&lt;strong&gt;OpsBeacon&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, and
mentioning more &lt;strong&gt;OpsBeacon&lt;&#x2F;strong&gt; use cases &lt;a href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;VadidekiVolkan&quot;&gt;in the &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; live
streams&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;life-is-better-at-the-slopes&quot;&gt;Life is Better at the Slopes&lt;&#x2F;h2&gt;
&lt;p&gt;Last week, we were at &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lake_Tahoe&quot;&gt;&lt;strong&gt;South Lake Tahoe&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. The plan was to stay there
for a few days; yet, we found ourselves in the middle of a snowstorm and had to
extend our stay for a few more days.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;02&amp;#x2F;IMG_2807.jpeg&quot; alt=&quot;View of the lake from the summit of the mountain.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;View of the lake from the summit of the mountain.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;View of the lake from the summit of the mountain.&lt;&#x2F;p&gt;
&lt;p&gt;We’ve had a lot of fun, and suffice it to say, the kiddos had enough snow for a
year 🙂.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;02&amp;#x2F;IMG_2824.jpeg&quot; alt=&quot;Snow everywhere. Freezing cold.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Snow everywhere. Freezing cold.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Snow everywhere. Freezing cold.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;would-you-like-some-water-in-your-ice&quot;&gt;Would You Like Some Water In Your Ice?&lt;&#x2F;h2&gt;
&lt;p&gt;It was snow everywhere. Ice-cold weather. And since this is America, they still
serve iced water ❄️ when the temperature is -20 degrees Celcius outside. Or, in
this case, it is “&lt;strong&gt;&lt;em&gt;watered ice&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” instead 🙂.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;02&amp;#x2F;IMG_2853.jpeg&quot; alt=&quot;&amp;#x27;America&amp;#x27;.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;&amp;#x27;America&amp;#x27;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;bye-bye-eks-wave&quot;&gt;Bye Bye EKS 👋&lt;&#x2F;h2&gt;
&lt;p&gt;I terminated the EKS cluster that I was experimenting with on other news.
&lt;a href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;videos&#x2F;1408100867&quot;&gt;You can watch the VOD about the entire process here on &lt;strong&gt;Twitch&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But, why so? Because I only have a handful of microservices, and paying Amazon
around $90 every month just for a Kubernetes control plane is not worth it.&lt;&#x2F;p&gt;
&lt;p&gt;From this point on, I’ll go old school and use an &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;elasticloadbalancing&#x2F;&quot;&gt;&lt;strong&gt;Application Load
Balancer&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and some good old &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;ec2&#x2F;&quot;&gt;&lt;strong&gt;EC2&lt;&#x2F;strong&gt; instances&lt;&#x2F;a&gt; fronted by
&lt;a href=&quot;https:&#x2F;&#x2F;www.nginx.com&#x2F;&quot;&gt;&lt;strong&gt;NGINX&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; reverse proxies and tie everything together with scripts.
It will be a “&lt;em&gt;poor man’s orchestration solution&lt;&#x2F;em&gt;” that won’t tear a hole in
your pocket if you will. And I’ll, of course, write and
&lt;a href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;VadidekiVolkan&quot;&gt;live stream about it&lt;&#x2F;a&gt; on the go.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-live-streams-are-coming-up&quot;&gt;More Live Streams Are Coming Up&lt;&#x2F;h2&gt;
&lt;p&gt;I upgraded my streaming setup, and I plan to do regular streams, mostly at night
Pacific time. &lt;a href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;VadidekiVolkan&quot;&gt;Follow me on Twitch and get notified whenever
I’m online&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zero-to-hero-changes&quot;&gt;Zero to Hero Changes&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve updated the navigation a little on the Zero to Hero front, highlighting
essential parts that could have been harder to search otherwise.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;02&amp;#x2F;Screen-Shot-2022-02-26-at-8.31.09-AM.png&quot; alt=&quot;The new navigation.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The new navigation.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Here are the links for the interested:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;&quot;&gt;&lt;strong&gt;The Roadmap&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is where you can find resources to become a better
version of yourself.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;&quot;&gt;&lt;strong&gt;Z2H Highlights&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is an ordered list of these weekly updates
that you are reading right now.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;VadidekiVolkan&quot;&gt;&lt;strong&gt;Live Streams&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; take you directly to &lt;strong&gt;Twitch&lt;&#x2F;strong&gt;, where I’ll be more
active, mostly around nighttime pacific time. Join me, and let’s &lt;strong&gt;break
production&lt;&#x2F;strong&gt; together.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Also, if you remember, I was keeping a list of live streams as a separate page.
I decided to archive that page, as maintaining it was consuming a
disproportionate amount of my time. I’d instead create content than do
bookkeeping to utilize the opportunity cost of the limited time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zero-to-prod-in-half-an-hour&quot;&gt;Zero to Prod in Half an Hour&lt;&#x2F;h2&gt;
&lt;p&gt;I have been working on this for the last few weeks, and finally, it is ready for
your viewing pleasure.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;&quot;&gt;&lt;strong&gt;Zero to Prod in Half an Hour&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is 14-part video
series that I have been creating for a while. The lectures show how to create a
full-blown app with &lt;strong&gt;identity&lt;&#x2F;strong&gt; &lt;strong&gt;management&lt;&#x2F;strong&gt;, &lt;strong&gt;payment gateway&lt;&#x2F;strong&gt;
integration, business logic, and all and deploy it to a production **Kubernetes
**
(&lt;em&gt;EKS&lt;&#x2F;em&gt;) cluster. The total recording time is around &lt;strong&gt;half an hour&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The videos are free. If you are a premium member, you can also get &lt;strong&gt;learning
resources&lt;&#x2F;strong&gt;, links, and additional &lt;strong&gt;study material&lt;&#x2F;strong&gt; to dig in, along with the
&lt;strong&gt;source code&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;At any rate, &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;&quot;&gt;have fun, and enjoy the content&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;How you frame a problem directly impacts whether you can solve it. That means
words are more important than one might think they are. When you pick your
words carefully when describing your issue, you’ll have a much better chance of
solving it.&lt;&#x2F;p&gt;
&lt;p&gt;If you struggle to generate effective solutions to complicated problems, you
might want to change the way you define the problem statement.&lt;&#x2F;p&gt;
&lt;p&gt;Specifically, ask yourself these two questions:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-s-the-subject&quot;&gt;What’s the Subject?&lt;&#x2F;h3&gt;
&lt;p&gt;Let’s say that you want to change a feature on an application. If the app is
targeted towards an expert audience, then you’ll generate a different solution
than an app targeted towards beginners.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-can-you-measure-the-problem&quot;&gt;How can you measure the problem?&lt;&#x2F;h3&gt;
&lt;p&gt;Without metrics and measurement, solving a problem can turn into a futile
effort. After all, how can you know you have achieved something if you cannot
quantify your achievement.&lt;&#x2F;p&gt;
&lt;p&gt;In your metrics, define what &lt;strong&gt;success&lt;&#x2F;strong&gt; and &lt;strong&gt;failure&lt;&#x2F;strong&gt; look like.&lt;&#x2F;p&gt;
&lt;p&gt;For example, “&lt;em&gt;we strive to create as much services as the customer as we can&lt;&#x2F;em&gt;”
will lead you to a different solution than “&lt;em&gt;only 20% of our feature set is
widely used, and out of that 20%, only 5% generate revenue&lt;&#x2F;em&gt;.”&lt;&#x2F;p&gt;
&lt;p&gt;So next time you are struggling to find a solution, &lt;strong&gt;try rewriting the problem
statement&lt;&#x2F;strong&gt;. You’ll possibly find that a minor change in your wording can lead
to a significant shift in your perspective.&lt;&#x2F;p&gt;
&lt;p&gt;Words &lt;strong&gt;do&lt;&#x2F;strong&gt; matter.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;charmbracelet&#x2F;soft-serve&quot;&gt;&lt;strong&gt;&lt;code&gt;soft-serve&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; is a tiny self-hostable Git server&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;superhighfives.com&#x2F;pika&quot;&gt;&lt;strong&gt;Pika&lt;&#x2F;strong&gt; is an open source color picker app for Mac OS&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;trunk.io&#x2F;products&#x2F;check&quot;&gt;&lt;strong&gt;&lt;code&gt;trunk&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; is a static analyzer to make your code better, faster,
stronger&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 20: Words Matter&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zero to Prod in Half an Hour: Part 10 --- Authentication and Subscription Middlewares</title>
        <published>2022-02-10T00:00:00+00:00</published>
        <updated>2022-02-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/authentication-and-subscription-middlewares/"/>
        <id>https://zerotohero.dev/zero-to-prod/authentication-and-subscription-middlewares/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/authentication-and-subscription-middlewares/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;through.png&quot; alt=&quot;Zero to Prod in Half an Hour: Part 10 --- Authentication and Subscription Middlewares&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Zero to Prod in Half an Hour: Part 10 --- Authentication and Subscription Middlewares&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This section will implement middlewares that we need for authentication,
authorization, and service subscription.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;VfIn8F31_kM?si=tu5pp4W2tPR5qgtc&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Zero to Prod in Half an Hour: Part 10 --- Authentication and Subscription Middlewares&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Zero to Prod in Half an Hour: Part 10 --- Authentication and Subscription Middlewares&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Part 10: Authentication and Subscription Middlewares&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gumroad.com&#x2F;&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;app.gumroad.com&#x2F;api&quot;&gt;Gumroad API&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;books&#x2F;refactoring.html&quot;&gt;Refactoring: Improving the Design of Existing Codc&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;refactoring.com&#x2F;catalog&#x2F;extractFunction.html&quot;&gt;Extract Function&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read The Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;zero-to-prod-in-30&#x2F;zero-to-prod-in-30.zip&quot;&gt;Download the source code (&lt;em&gt;114kb zip
archive&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Until the next lecture… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zero to Prod in Half an Hour: Part 13 --- Containerizing Our Application</title>
        <published>2022-02-10T00:00:00+00:00</published>
        <updated>2022-02-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/containerizing-our-application/"/>
        <id>https://zerotohero.dev/zero-to-prod/containerizing-our-application/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/containerizing-our-application/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;containerize.png&quot; alt=&quot;Zero to Prod in Half an Hour: Part 13 --- Containerizing Our Application&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Zero to Prod in Half an Hour: Part 13 --- Containerizing Our Application&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We have an app that works locally. Now it’s time to put it into a container and
yeet it out to a cluster. And that’s what we’ll do.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;FcHwCiVa04Q?si=0SDkDbxglful19yj&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Zero to Prod in Half an Hour: Part 13 --- Containerizing Our Application&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Zero to Prod in Half an Hour: Part 13 --- Containerizing Our Application&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Part 13: Containerizing Our Application&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;builder&#x2F;&quot;&gt;Dockerfile Reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;develop&#x2F;develop-images&#x2F;multistage-build&#x2F;&quot;&gt;Use Multi Stage Builds&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;48816583-container-security&quot;&gt;Container Security&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;ecr&#x2F;&quot;&gt;Amozon ECR&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;eks&#x2F;&quot;&gt;Amazon EKS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read The Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;zero-to-prod-in-30&#x2F;zero-to-prod-in-30.zip&quot;&gt;Download the source code (&lt;em&gt;114kb zip
archive&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Until the next lecture… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zero to Prod in Half an Hour: Part 11 --- Implementing Authentication Handlers</title>
        <published>2022-02-10T00:00:00+00:00</published>
        <updated>2022-02-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/implementing-authentication-handlers/"/>
        <id>https://zerotohero.dev/zero-to-prod/implementing-authentication-handlers/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/implementing-authentication-handlers/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;authz.png&quot; alt=&quot;Zero to Prod in Half an Hour: Part 11 --- Implementing Authentication Handlers&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Zero to Prod in Half an Hour: Part 11 --- Implementing Authentication Handlers&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Having implemented our middlewares, now it’s time to implement the missing
OAuth0 callback, login, and logout handlers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;cvYx4AQa6TE?si=175ocra9Vv_9UPFe&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Zero to Prod in Half an Hour: Part 11 --- Implementing Authentication Handlers&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Zero to Prod in Half an Hour: Part 11 --- Implementing Authentication Handlers&lt;&#x2F;p&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Part 11: Implementing Authentication Handlers&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;gin-gonic&#x2F;gin#HandlerFunc&quot;&gt;Gin.HandlerFunc&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;auth0.com&#x2F;&quot;&gt;Auth0&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;auth0.com&#x2F;docs&#x2F;get-started&#x2F;authentication-and-authorization-flow&#x2F;which-oauth-2-0-flow-should-i-use&quot;&gt;Which OAuth 2.0 Flow Should I Use?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Higher-order_function&quot;&gt;Higher-Order Function&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jwt.io&#x2F;introduction&quot;&gt;JSON Web Token Introduction&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc7519&quot;&gt;RFC 7519 — JSON Web Token (JWT)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read The Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;zero-to-prod-in-30&#x2F;zero-to-prod-in-30.zip&quot;&gt;Download the source code (&lt;em&gt;114kb zip
archive&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Until the next lecture… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zero to Prod in Half an Hour: Part 8 --- Authenticate All the Things</title>
        <published>2022-02-09T00:00:00+00:00</published>
        <updated>2022-02-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/authenticate-all-the-things/"/>
        <id>https://zerotohero.dev/zero-to-prod/authenticate-all-the-things/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/authenticate-all-the-things/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;locket.png&quot; alt=&quot;Zero to Prod in Half an Hour: Part 8 --- Authenticate All the Things&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Zero to Prod in Half an Hour: Part 8 --- Authenticate All the Things&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We’ll define placeholders for the routes we want to implement later. And then
we’ll implement a MongoDB-backed session store to be used in our Auth0 identity
control plane.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;8mbVPEl9iio?si=HtvukSA5xuQrNLvP&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Zero to Prod in Half an Hour: Part 8 --- Authenticate All the Things&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Zero to Prod in Half an Hour: Part 8 --- Authenticate All the Things&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Part 8: Authenticate All the Things&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;auth0.com&#x2F;&quot;&gt;Auth0&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;oauth.net&#x2F;2&#x2F;&quot;&gt;OAuth 2.0&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gumroad.com&#x2F;&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;app.gumroad.com&#x2F;api&quot;&gt;Gumroad API&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;encoding&#x2F;gob&quot;&gt;gob Package&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jwt.io&#x2F;&quot;&gt;JSON Web Tokens&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;auth0.com&#x2F;docs&#x2F;secure&#x2F;tokens&#x2F;json-web-tokens&#x2F;json-web-token-claims&quot;&gt;Json Web Token Claims&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mongodb.com&#x2F;&quot;&gt;MongoDB&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mongodb.com&#x2F;cloud&#x2F;atlas&quot;&gt;MongoDB Atlas&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mongodb.com&#x2F;try&#x2F;download&#x2F;community&quot;&gt;MongoDB Community Server&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;globalsign&#x2F;mgo&quot;&gt;mgo Package&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gin-contrib&#x2F;sessions&quot;&gt;Gin Middleware for Session Management&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read The Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;zero-to-prod-in-30&#x2F;zero-to-prod-in-30.zip&quot;&gt;Download the source code (&lt;em&gt;114kb zip
archive&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Until the next lecture… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zero to Prod in Half an Hour: Part 14: Onwards to Kubernetes</title>
        <published>2022-02-09T00:00:00+00:00</published>
        <updated>2022-02-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/onwards-to-kubernetes/"/>
        <id>https://zerotohero.dev/zero-to-prod/onwards-to-kubernetes/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/onwards-to-kubernetes/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;eks.png&quot; alt=&quot;Onwards to Kubernetes.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Onwards to Kubernetes.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;As a final step, we’ll deploy our application to an AWS EKS Kubernetes cluster
and make sure that it’s healthy, up, and running.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Ovj-iOIU8WQ?si=vggmDfdZaZPt0gH1&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Zero to Prod in Half an Hour: Part 14 --- Onwards to Kubernetes&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Zero to Prod in Half an Hour: Part 14 --- Onwards to Kubernetes&lt;&#x2F;p&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Part 14: Onwards to Kubernetes&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;eks&quot;&gt;Amazon EKS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;ecr&#x2F;&quot;&gt;Amazon ECR&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;elasticloadbalancing&#x2F;latest&#x2F;application&#x2F;introduction.html&quot;&gt;What is an Application Load Balancer?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;eks&#x2F;latest&#x2F;userguide&#x2F;alb-ingress.html&quot;&gt;Application Load Balancing on Amazon EKS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;tools&#x2F;&quot;&gt;Kubernetes Tools&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;deployment&#x2F;&quot;&gt;Deployments&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;services-networking&#x2F;service&#x2F;&quot;&gt;Service&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;configmap&#x2F;&quot;&gt;ConfigMaps&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;secret&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;manage-resources-containers&#x2F;&quot;&gt;Resource Management for Pods and Containers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;services-networking&#x2F;ingress&#x2F;&quot;&gt;Ingress&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;configure-pod-container&#x2F;configure-liveness-readiness-startup-probes&#x2F;&quot;&gt;Configure Liveness, Readiness, and Startup Probes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;high-level-deployment-diagram&quot;&gt;High-Level Deployment Diagram&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a high-level diagram for the entire Kubernetes deployment.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2022&amp;#x2F;02&amp;#x2F;fizz-cluster-high-level-diagram.png&quot; alt=&quot;Fizz Cluster High-Level Deployment Diagram&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Fizz Cluster High-Level Deployment Diagram&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read The Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;zero-to-prod-in-30&#x2F;zero-to-prod-in-30.zip&quot;&gt;Download the source code (&lt;em&gt;114kb zip
archive&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Until the next lecture… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zero to Prod in Half an Hour: Part 12 --- The Final Touches</title>
        <published>2022-02-09T00:00:00+00:00</published>
        <updated>2022-02-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/the-final-touches/"/>
        <id>https://zerotohero.dev/zero-to-prod/the-final-touches/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/the-final-touches/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;artwork.png&quot; alt=&quot;Zero to Prod in Half an Hour: Part 12 --- The Final Touches&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Zero to Prod in Half an Hour: Part 12 --- The Final Touches&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We are done with the authentication part. We are almost near the end of our
application’s initial implementation. We just need a questions handlers, which,
in essence, is a glorified file server with some path traversal protection for
an added level of security.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;17OZdX1WOOw?si=g4rIEKOhDQ2txaOj&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Zero to Prod in Half an Hour: Part 12 --- The Final Touches&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Zero to Prod in Half an Hour: Part 12 --- The Final Touches&lt;&#x2F;p&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Part 12: The Final Touches&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;gin-gonic&#x2F;gin#HandlerFunc&quot;&gt;Gin HandlerFunc&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gobyexample.com&#x2F;regular-expressions&quot;&gt;Regular Expressions: Go By Example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;strings&quot;&gt;string Package&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;owasp.org&#x2F;www-community&#x2F;attacks&#x2F;Path_Traversal&quot;&gt;Path Traversal Attack&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read The Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;zero-to-prod-in-30&#x2F;zero-to-prod-in-30.zip&quot;&gt;Download the source code (&lt;em&gt;114kb zip
archive&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Until the next lecture… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zero to Prod in Half an Hour: Part 9 --- Thinking in Middlewares</title>
        <published>2022-02-09T00:00:00+00:00</published>
        <updated>2022-02-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/thinking-in-middlewares/"/>
        <id>https://zerotohero.dev/zero-to-prod/thinking-in-middlewares/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/thinking-in-middlewares/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;mw.png&quot; alt=&quot;Zero to Prod in Half an Hour: Part 9 --- Thinking in Middlewares&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Zero to Prod in Half an Hour: Part 9 --- Thinking in Middlewares&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This section will discuss various middlewares that we need in our application.
We’ll register the middlewares in our routes as if they have already been
implemented; and we’ll implement the missing pieces in the upcoming lectures.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;5Onh7nR6xcs?si=XEtDHJm4RhEw08G3&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Zero to Prod in Half an Hour: Part 9 --- Thinking in Middlewares&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Zero to Prod in Half an Hour: Part 9 --- Thinking in Middlewares&lt;&#x2F;p&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Part 9: Thinking in Middlewares&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;app.gumroad.com&#x2F;api&quot;&gt;Gumroad API&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sosedoff.com&#x2F;2014&#x2F;12&#x2F;21&#x2F;gin-middleware.html&quot;&gt;Gin Middleware Examples&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;auth0.com&#x2F;&quot;&gt;Auth0&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read The Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;zero-to-prod-in-30&#x2F;zero-to-prod-in-30.zip&quot;&gt;Download the source code (&lt;em&gt;114kb zip
archive&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Until the next lecture… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zero to Prod in Half an Hour: Part 6 --- Serving Web Pages</title>
        <published>2022-01-15T00:00:00+00:00</published>
        <updated>2022-01-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/serving-web-pages/"/>
        <id>https://zerotohero.dev/zero-to-prod/serving-web-pages/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/serving-web-pages/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;recurse.png&quot; alt=&quot;Zero to Prod in Half an Hour: Part 6 --- Serving Web Pages&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Zero to Prod in Half an Hour: Part 6 --- Serving Web Pages&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This section will add a bunch of static web page templates into our application
and serve them in several routes. We will also use a Gumroad embed form and a
very minimal dynamic templating in our subscription form.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;bfNJjviT47M?si=T-ha1j-GV8xKTc9R&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Zero to Prod in Half an Hour: Part 6 --- Serving Web Pages&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Zero to Prod in Half an Hour: Part 6 --- Serving Web Pages&lt;&#x2F;p&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Part 6: Serving Web Pages&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gin-gonic.com&#x2F;&quot;&gt;Gin Web Framework&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;gin-gonic&#x2F;gin#HandlerFunc&quot;&gt;gin.HandlerFunc&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;gin-gonic&#x2F;gin#Context&quot;&gt;gin.Context&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;gin-gonic&#x2F;gin#Engine.LoadHTMLGlob&quot;&gt;gin.Engine.LoadHTMLGlob()&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Higher-order_function&quot;&gt;Higher-Order Function&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mongodb.com&#x2F;&quot;&gt;MongoDB&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;github.com&#x2F;globalsign&#x2F;mgo&quot;&gt;mgo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gumroad.com&#x2F;&quot;&gt;Gumroad&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;app.gumroad.com&#x2F;api&quot;&gt;Gumroad API&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.papertrail.com&#x2F;&quot;&gt;Papertrail&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Syslog&quot;&gt;Syslog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;eks&#x2F;latest&#x2F;userguide&#x2F;alb-ingress.html&quot;&gt;Application load balancing on Amazon EKS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;173610242&quot;&gt;Monitorama PDX 2016 - Kelsey Hightower - healthz: Stop reverse engineering applications and start monitoring from the inside&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;configure-pod-container&#x2F;configure-liveness-readiness-startup-probes&#x2F;&quot;&gt;Kubernetes: Configure Liveness, Readiness and Startup Probes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read The Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;zero-to-prod-in-30&#x2F;zero-to-prod-in-30.zip&quot;&gt;Download the source code (&lt;em&gt;114kb zip
archive&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Until the next lecture… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zero to Prod in Half an Hour: Part 4 --- App Authentication Overview</title>
        <published>2022-01-11T00:00:00+00:00</published>
        <updated>2022-01-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/app-authentication-overview/"/>
        <id>https://zerotohero.dev/zero-to-prod/app-authentication-overview/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/app-authentication-overview/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;papers.png&quot; alt=&quot;Zero to Prod in Half an Hour: Part 4 --- App Authentication Overview&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Zero to Prod in Half an Hour: Part 4 --- App Authentication Overview&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In this section, we’ll create a blank project for your web application, then
overview how we can implement an &lt;strong&gt;Auth0&lt;&#x2F;strong&gt; Authenticator for our application to
be used in our &lt;strong&gt;OAuth 2.0&lt;&#x2F;strong&gt; authentication &lt;strong&gt;login&lt;&#x2F;strong&gt;, &lt;strong&gt;callback&lt;&#x2F;strong&gt;, and *
&lt;em&gt;logout&lt;&#x2F;em&gt;* routes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;MJvtlWGiaC0?si=yBgEWt-28-O0Vn94&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Zero to Prod in Half an Hour: Part 4 --- App Authentication Overview&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Zero to Prod in Half an Hour: Part 4 --- App Authentication Overview&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Part 4: App Authentication Overview&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;oauth.net&#x2F;2&#x2F;&quot;&gt;OAuth 2.0&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.digitalocean.com&#x2F;community&#x2F;tutorials&#x2F;an-introduction-to-oauth-2&quot;&gt;How Does OAuth 2.0 Work?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;auth0.com&#x2F;&quot;&gt;Auth0&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jwt.io&#x2F;&quot;&gt;JSON Web Tokens (&lt;em&gt;JWT&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;openid.net&#x2F;connect&#x2F;&quot;&gt;OpenID Connect (&lt;em&gt;OIDC&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;coreos&#x2F;go-oidc&quot;&gt;Go OIDC&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;golang&#x2F;oauth2&quot;&gt;Go OAuth2 Package&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;oauth2-authentication-sequence-diagram&quot;&gt;OAuth2 Authentication Sequence Diagram&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s the sequence diagram that the video talked about:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2022&#x2F;01&#x2F;Screen-Shot-2022-01-10-at-5.00.04-PM.png&quot; alt=&quot;OAuth2 Authentication Sequence Diagram&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read The Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;zero-to-prod-in-30&#x2F;zero-to-prod-in-30.zip&quot;&gt;Download the source code (&lt;em&gt;114kb zip
archive&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Until the next lecture… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zero to Prod in Half an Hour: Part 3 --- Mutating the Generated HTML Files</title>
        <published>2022-01-09T00:00:00+00:00</published>
        <updated>2022-01-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/mutating-the-generated-html-files/"/>
        <id>https://zerotohero.dev/zero-to-prod/mutating-the-generated-html-files/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/mutating-the-generated-html-files/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;mutation.png&quot; alt=&quot;Zero to Prod in Half an Hour: Part 3 — Mutating the Generated HTML Files&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;mutation.png&quot; alt=&quot;Zero to Prod in Half an Hour: Part 3 --- Mutating the Generated HTML Files&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Zero to Prod in Half an Hour: Part 3 --- Mutating the Generated HTML Files&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;As it turns out, using &lt;code&gt;pygmentize&lt;&#x2F;code&gt; can only do so much for us and we’ll need to
extend the generated HTML files. This section will update the generated HTML
files and implements custom mutations using Go programming language.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Ovj-iOIU8WQ?si=vggmDfdZaZPt0gH1&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Zero to Prod in Half an Hour: Part 3 --- Generating Static HTML&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Zero to Prod in Half an Hour: Part 3 --- Generating Static HTML&lt;&#x2F;p&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Part 3: Mutating the Generated HTML Files&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pygments.org&#x2F;&quot;&gt;&lt;strong&gt;Pygments&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;&quot;&gt;&lt;strong&gt;Go&lt;&#x2F;strong&gt; Programming Language&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;&quot;&gt;Places to Learn &lt;strong&gt;Go&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;tags&#x2F;go&#x2F;&quot;&gt;&lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Articles Tagged With “&lt;strong&gt;&lt;em&gt;Go&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;path&#x2F;filepath#Walk&quot;&gt;filepath.Walk()&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;path&#x2F;filepath#WalkFunc&quot;&gt;filepath.WalkFunc&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gobyexample.com&#x2F;regular-expressions&quot;&gt;Go By Example: egular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;http-party&#x2F;http-server&quot;&gt;http-server&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read The Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;zero-to-prod-in-30&#x2F;zero-to-prod-in-30.zip&quot;&gt;Download the source code (&lt;em&gt;114kb zip
archive&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Until the next lecture… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Attention, Intention: Compassion</title>
        <published>2022-01-07T00:00:00+00:00</published>
        <updated>2022-01-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0019/"/>
        <id>https://zerotohero.dev/highlights/issue-0019/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0019/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;comms.png&quot; alt=&quot;Compassion is the key to effective communication.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Compassion is the key to effective communication.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the nineteenth issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;It’s a new year and a new issue. I’m still recovering from the long break, and
ideas are a bit fragmented in my mind. So I’ll leave them that way and jot down
whatever comes to mind. It’s the first issue of the year after all 🙂.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zero-to-prod-in-half-an-hour&quot;&gt;Zero to Prod in Half an Hour&lt;&#x2F;h2&gt;
&lt;p&gt;I started the year with a video lecture series about &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;&quot;&gt;how you can
deploy a production-ready web application in half an hour&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have ~15 lectures. I’ve published two of them already. And I’m planning to
publish 2-3 lessons every week depending on my workload.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;

&lt;a href=&quot;@&amp;#x2F;zero-to-prod&amp;#x2F;_index.md&quot; title=&quot;Zero to prod.&quot;&gt;
&lt;div class=&quot;z2h-image&quot;&gt;
  &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;01&amp;#x2F;Screen-Shot-2022-01-07-at-6.42.33-PM.png&quot; alt=&quot;Zero to prod.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
  &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
    margin-top: -1.125em; font-size: 1em;&quot;&gt;Zero to prod.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;a&gt;
&lt;h2 id=&quot;fizzbuzz-pro&quot;&gt;FizzBuzz Pro&lt;&#x2F;h2&gt;
&lt;p&gt;While, on the topic of &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;, there is a lot planned for &lt;strong&gt;FizzBuzz
Pro&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the next few weeks, I want to focus on the infrastructure. Then, once the web
app has a minimally-viable feature set, I’ll circle back to adding more
competitive programming questions and learning resources there.&lt;&#x2F;p&gt;
&lt;p&gt;Stay tuned.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gophercon-was-awesome-tada&quot;&gt;GopherCon Was Awesome 🎉&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the slides and an the source code of &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;spire-rocks&#x2F;&quot;&gt;my recent GopherCon talk on
&lt;strong&gt;Cloud Native Identity Federation&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;gophercon-tr-dec-2021&#x2F;SPIRE-gophercon-TR-Dec-2021.pdf&quot;&gt;GopherCon TR, Dec 2021 (“&lt;em&gt;Friends Don’t Let Friends Hard-Code Their
Secrets&lt;&#x2F;em&gt;”) Slides&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;gophercon-tr-dec-2021&#x2F;SPIRE-gophercon-TR-Dec-2021-src.zip&quot;&gt;GopherCon TR, Dec 2021 (“&lt;em&gt;Friends Don’t Let Friends Hard-Code Their
Secrets&lt;&#x2F;em&gt;”) Source Code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is a video recording of the demo I made there too:&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;SlK-NoR7gc4?si=usU3UAVZMV8WT48A&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;🤘 SPIRE Rocks 🤘&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;🤘 SPIRE Rocks 🤘&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;Here are some random thoughts. I don’t have a theme; I’m writing as it comes to
mind. Yet, I’m sure you’ll find something useful out of them.&lt;&#x2F;p&gt;
&lt;p&gt;Here we go…&lt;&#x2F;p&gt;
&lt;h3 id=&quot;equating-innovation-to-throughput&quot;&gt;Equating Innovation to Throughput&lt;&#x2F;h3&gt;
&lt;p&gt;There’s a misperception that innovative teams are quick decision-makers. That’s
not always true: Sometimes the best ideas require long incubation periods.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes resisting the temptation to “&lt;em&gt;move fast&lt;&#x2F;em&gt;” can lead to more
far-reaching and creative solutions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;have-an-open-mind&quot;&gt;Have an Open Mind&lt;&#x2F;h3&gt;
&lt;p&gt;Creative thinking is a mentally taxing process. As a leader, you should pay
close attention to how new ideas are shared and discussed between your
teammates.&lt;&#x2F;p&gt;
&lt;p&gt;Encourage people to build upon each other’s ideas instead of flat-out
criticizing them. Approach ideas with an open mind; acknowledge what’s practical
and improve what appears weak.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;give-people-space-to-think-alone&quot;&gt;Give People Space to Think Alone&lt;&#x2F;h3&gt;
&lt;p&gt;While group brainstorming feels more productive because of the social
amplification factor, it’s not always the best way to come up with ideas.&lt;&#x2F;p&gt;
&lt;p&gt;If the problem is complex, you may want to let people think about it for
five-ten minutes before discussing the idea. Then you can ideate independently
without being sidetracked by others’ thoughts can be helpful. After five minutes
of self-ideation, you can go on group brainstorming as usual.&lt;&#x2F;p&gt;
&lt;p&gt;Try it, and you’ll feel the difference.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;listen-intently&quot;&gt;Listen Intently&lt;&#x2F;h3&gt;
&lt;p&gt;While it might sound like a cliché, there is one golden rule in communication: “
&lt;strong&gt;&lt;em&gt;Treat others the way you want to be treated&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;.“—actively listen to people
around you. If you can hear them with an open mind and willingness to learn, not
only you’ll become wiser, but you’ll also become better equipped to help them.&lt;&#x2F;p&gt;
&lt;p&gt;Whenever you are about to talk to someone in the team, step back a moment. Ask
yourself: What might be going on with them? Would they need any kind of support
other than the technical project you are working with? Leadership requires
compassion.&lt;&#x2F;p&gt;
&lt;p&gt;Motivate people to become a better version of themselves:&lt;&#x2F;p&gt;
&lt;p&gt;When you see that someone is doing good enough, you might feel that pushing them
to learn more or to do more can be discouraging. Instead, &lt;strong&gt;reframe&lt;&#x2F;strong&gt; that
thought as an indication that you care about them and want them to be better.
When you think that way, challenging people to grow (&lt;em&gt;within reason&lt;&#x2F;em&gt;) is
consequentially an act of kindness.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.svggobbler.com&#x2F;&quot;&gt;&lt;strong&gt;SVG Globber&lt;&#x2F;strong&gt; helps you download icons, logos and vectors SVG from any
site&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gra.dient.art&#x2F;&quot;&gt;&lt;strong&gt;Gradient Art&lt;&#x2F;strong&gt; is an Advanced CSS Gradient Editor&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tkellogg&#x2F;dura&quot;&gt;&lt;strong&gt;Dura&lt;&#x2F;strong&gt; is a background process that watches your Git repositories and
commits your uncommitted changes without impacting &lt;code&gt;HEAD&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 19: Attention, Intention, Compassion&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zero to Prod in Half an Hour: Part 2 --- Generating Static HTML</title>
        <published>2022-01-06T00:00:00+00:00</published>
        <updated>2022-01-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/generating-static-html/"/>
        <id>https://zerotohero.dev/zero-to-prod/generating-static-html/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/generating-static-html/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;structure.png&quot; alt=&quot;Zero to Prod in Half an Hour: Part 2 --- Generating Static HTML&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Zero to Prod in Half an Hour: Part 2 --- Generating Static HTML&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In this part of the series, we’ll create a generator that reads a repository
full of Go source code files, and create syntax-highlighted HTML versions of
those files. In this process, Pygments Python Syntax Highlighter will do the
heavy-lifting.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;c-3AI5x86jQ?si=6Q346nLpxImG74EQ&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Zero to Prod in Half an Hour: Part 2 --- Generating Static HTML&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Zero to Prod in Half an Hour: Part 2 --- Generating Static HTML&lt;&#x2F;p&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Part 2: Generating Static HTML&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pygments.org&#x2F;&quot;&gt;Python Pygments Syntax Highlighter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pygments.org&#x2F;docs&#x2F;cmdline&#x2F;&quot;&gt;Pygments Command Line Interface&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply “Terminal” 👌&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read The Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;zero-to-prod-in-30&#x2F;zero-to-prod-in-30.zip&quot;&gt;Download the source code (&lt;em&gt;114kb zip
archive&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Until the next lecture… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Setting Up SPIRE on EKS in Less Than Ten Minutes</title>
        <published>2021-12-18T00:00:00+00:00</published>
        <updated>2021-12-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/spire-rocks/"/>
        <id>https://zerotohero.dev/spire/spire-rocks/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/spire-rocks/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;trust.png&quot; alt=&quot;Setting Up SPIRE on EKS in Less Than Ten Minutes&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Psst… 🔎 Looking for &lt;strong&gt;GopherCon, 2021, TR&lt;&#x2F;strong&gt; resources? Say no more:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;GopherCon TR, Dec, 2021: &lt;em&gt;Friends Don’t Let Friends Hard-Code Their Secrets&lt;&#x2F;em&gt;
&lt;ul&gt;
&lt;li&gt;✴️ &lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;gophercon-tr-dec-2021&#x2F;SPIRE-gophercon-TR-Dec-2021.pdf&quot;&gt;&lt;strong&gt;Slides&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;✴️ &lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;gophercon-tr-dec-2021&#x2F;SPIRE-gophercon-TR-Dec-2021-src.zip&quot;&gt;&lt;strong&gt;Source Code&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is a video recording of the demo we made too:&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;n-hXWL5BgHg?si=ymLdQTIJlid0v8QH&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS Using Spire Under Three Minutes&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS Using Spire Under Three Minutes&lt;&#x2F;p&gt;
&lt;p&gt;Make sure you watch the longer video below, and read the rest of the article
too.&lt;&#x2F;p&gt;
&lt;p&gt;Enjoy, and may the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;⚠️ Important ⚠️&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you are new to &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;downloads&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, &lt;strong&gt;read the rest of the article
first&lt;&#x2F;strong&gt; before watching the video.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;FUDsXgrnI2c?si=TAvLj-iXXmDDQWg0&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Setting Up SPIRE on EKS in Less Than Ten Minutes&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Setting Up SPIRE on EKS in Less Than Ten Minutes&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;This article will look at what &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; are. Then, we’ll explore
why managing identities and &lt;strong&gt;Trust&lt;&#x2F;strong&gt; at scale is a tough challenge and how to
solve it in a repeatable, scalable, and platform-agnostic way.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;spiffe-spire-logo-small.png&quot; alt=&quot;SPIFFE and SPIRE Logos&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;SPIFFE and SPIRE Logos&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In the video that accompanies this article, you’ll see how you can configure
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; on an &lt;strong&gt;AWS EKS&lt;&#x2F;strong&gt; Kubernetes cluster. Then we’ll ensure that it can
fetch &lt;strong&gt;SPIFFE ID&lt;&#x2F;strong&gt; documents (&lt;em&gt;or &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s&lt;&#x2F;em&gt;) from the &lt;strong&gt;SPIRE Server&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;SVID&lt;&#x2F;strong&gt;s, which stand for &lt;em&gt;SPIFFE verifiable identity document&lt;&#x2F;em&gt;, are
specially-crafted &lt;strong&gt;X.509 Certificates&lt;&#x2F;strong&gt; that the &lt;strong&gt;Workloads&lt;&#x2F;strong&gt; can use to
authenticate with each other.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;**SVIDs Rotate Automatically&lt;&#x2F;p&gt;
&lt;p&gt;SVID**s are short-lived, their lifetime is 1 hour by default, and they are
renewed every 30 minutes so that you don’t run out of SVIDs due to TTL.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;But before going any further, it’s better to clarify all this buzzword bingo—I
mean, what is a “&lt;strong&gt;workload&lt;&#x2F;strong&gt;”?—what the heck is and &lt;strong&gt;SVID&lt;&#x2F;strong&gt;? Why do we even
need it? Can we eat it 😁?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-a-workload&quot;&gt;What is a Workload?&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s start with something familiar: The &lt;strong&gt;workload&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;workload&lt;&#x2F;strong&gt;, in the context of &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;, is anything that
does a computation.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Portable and Platform-Agnostic&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In Cloud-Native terms, a &lt;strong&gt;workload&lt;&#x2F;strong&gt; is an integrated stack of application,
middleware, and operating system that accomplishes a computing task. A workload
is &lt;strong&gt;portable&lt;&#x2F;strong&gt; and &lt;strong&gt;platform-agnostic&lt;&#x2F;strong&gt;. A workload, or a collection of
workloads makes up a &lt;strong&gt;business service&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Let us take the project that we have been developing so far, for example. In
that case, the &lt;strong&gt;idm&lt;&#x2F;strong&gt;, &lt;strong&gt;crypto&lt;&#x2F;strong&gt;, &lt;strong&gt;mailer&lt;&#x2F;strong&gt;, &lt;strong&gt;questions&lt;&#x2F;strong&gt;, and &lt;strong&gt;store&lt;&#x2F;strong&gt;
pods that expose RESTful APIs in our Kubernetes cluster are all &lt;strong&gt;workload&lt;&#x2F;strong&gt;s.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;➜  ~ kubectl get po
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NAME                         READY   STATUS    RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client-649db6b744-g85wb      1&#x2F;1     Running   0          23d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;crypto-66d75ccdbf-k2khl      1&#x2F;1     Running   0          31d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;idm-b9497f654-r7qg6          1&#x2F;1     Running   0          31d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mailer-6d5c745b87-nz9dt      1&#x2F;1     Running   0          31d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;questions-67d5559dd9-dglc6   1&#x2F;1     Running   0          31d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;store-74bd85799b-w5xx9       1&#x2F;1     Running   0          31d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pods in our FizzBuzz Pro production cluster.&lt;&#x2F;p&gt;
&lt;p&gt;Workloads will often need to communicate; they must send API requests to
different downstream workloads and receive API responses.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;Screen-Shot-2021-10-09-at-7.27.39-AM.png&quot; alt=&quot;FizzBuzz Pro email verification flow.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;FizzBuzz Pro email verification flow.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In the above sequence diagram, the &lt;strong&gt;idm&lt;&#x2F;strong&gt; workload talks to the &lt;strong&gt;crypto&lt;&#x2F;strong&gt;
workload to get a verification token. Then, the &lt;strong&gt;idm&lt;&#x2F;strong&gt; workload talks to the *
&lt;em&gt;mailer&lt;&#x2F;em&gt;* workload to relay that token in an email message.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Workload == Service&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;One more thing before I move further: In this article, and also in the video
that accompanies this article, I use the terms &lt;strong&gt;workloads&lt;&#x2F;strong&gt; and &lt;strong&gt;services&lt;&#x2F;strong&gt;
interchangeably. Our microservices &lt;strong&gt;are&lt;&#x2F;strong&gt; our workloads, don’t get confused.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Within the context of this article, a &lt;strong&gt;workload&lt;&#x2F;strong&gt; or &lt;strong&gt;service&lt;&#x2F;strong&gt; is a process
that lives on a physical or virtual machine and does some form of meaningful
computation. Workloads often communicate and exchange information through
protocols like &lt;strong&gt;RESTful API&lt;&#x2F;strong&gt;s, &lt;strong&gt;protocol buffers&lt;&#x2F;strong&gt;, &lt;strong&gt;domain sockets&lt;&#x2F;strong&gt;, or
other inter-process communication mechanisms.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hope-is-not-a-security-posture&quot;&gt;“&lt;em&gt;Hope&lt;&#x2F;em&gt;” Is Not a Security Posture&lt;&#x2F;h2&gt;
&lt;p&gt;The problem is, how do we &lt;strong&gt;secure&lt;&#x2F;strong&gt; this communication channel between the
workloads that we have?&lt;&#x2F;p&gt;
&lt;p&gt;One way to take care of this is to create a large enough &lt;strong&gt;trust boundary&lt;&#x2F;strong&gt; to
know that the network is trusted. Then you &lt;strong&gt;hope&lt;&#x2F;strong&gt; no malicious parties can get
inside this secured zone to attack your services.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;network.png&quot; alt=&quot;A subset of FizzBuzz Pro microservices&amp;#x27; network boundaries.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;A subset of FizzBuzz Pro microservices&amp;#x27; network boundaries.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;If we look into the above network boundary diagram, the &lt;strong&gt;mailer&lt;&#x2F;strong&gt; and **crypto
** services are inside a private network; they don’t expose any public APIs. We
&lt;strong&gt;hope&lt;&#x2F;strong&gt; this could be enough to secure them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Hope&lt;&#x2F;strong&gt; is not the best strategy in terms of hardening your security posture. I
won’t dive into too much detail in this article, and there are so many ways *
&lt;em&gt;hope&lt;&#x2F;em&gt;* as a security strategy can go wrong.&lt;&#x2F;p&gt;
&lt;p&gt;To give a single example, though, assume we have another pod here (&lt;em&gt;see the
diagram below&lt;&#x2F;em&gt;). This pod is a &lt;strong&gt;web-ui&lt;&#x2F;strong&gt; pod that has nothing to do with mailer
and crypto. Therefore, it should not know about these services and not care that
they exist at all.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;Screen-Shot-2021-10-09-at-8.11.10-AM.png&quot; alt=&quot;A brand new web UI pod, reaching larger parts of the network than it should.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;A brand new web UI pod, reaching larger parts of the network than it should.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Can you &lt;strong&gt;hope&lt;&#x2F;strong&gt; that this service will not start talking to the crypto service,
generate random tokens? Can you ensure there isn’t a vulnerability in a
dependency that it uses? How about &lt;em&gt;a dependency of a dependency of a
dependency… 🐢&lt;&#x2F;em&gt;? Can you be sure that the code is free of &lt;em&gt;logic errors&lt;&#x2F;em&gt;? Can
you be sure that the pod will not start acting weirdly all of a sudden?&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;code-reviews.jpeg&quot; alt=&quot;This is why code reviews are a good thing.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;This is why code reviews are a good thing.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Can you &lt;strong&gt;hope&lt;&#x2F;strong&gt; that nothing like this could happen?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Hope&lt;&#x2F;strong&gt; is &lt;strong&gt;not&lt;&#x2F;strong&gt; a strategy. Instead, it would be best if you hardened the
communication between these workloads. That way, only the intended parties could
talk to each other. No one else in the network could manipulate this
communication.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zero-trust&quot;&gt;Zero Trust&lt;&#x2F;h2&gt;
&lt;p&gt;That’s where the concept of &lt;strong&gt;Zero Trust&lt;&#x2F;strong&gt; comes into play. Again, you can learn
more about it in the &lt;strong&gt;References and Further Reading&lt;&#x2F;strong&gt; section at the end of
this article, but in essence, &lt;strong&gt;Zero Trust&lt;&#x2F;strong&gt; means that &lt;em&gt;you cannot trust the
network&lt;&#x2F;em&gt;. Therefore, you should assume that your network is insecure and is
breached by default.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Zero Trust&lt;&#x2F;strong&gt; is a network security model based on a strict identity
verification process. The &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Zero_trust_security_model&quot;&gt;&lt;em&gt;&lt;strong&gt;Zero Trust&lt;&#x2F;strong&gt; Security
Model&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; dictates that
only authenticated and authorized workloads can talk to other &lt;strong&gt;authenticated&lt;&#x2F;strong&gt;
and &lt;strong&gt;authorized&lt;&#x2F;strong&gt; workloads.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some of the key motivations behind the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Zero_trust_security_model&quot;&gt;&lt;em&gt;&lt;strong&gt;Zero Trust&lt;&#x2F;strong&gt; Security
Model&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Users, devices, applications, and data are moving outside trust boundaries all
the time. Now it’s near impossible to do perimeter-based protection.&lt;&#x2F;li&gt;
&lt;li&gt;“&lt;em&gt;Trust but verify&lt;&#x2F;em&gt;” is no longer an option, as targeted, advanced threats
constantly move inside the corporate perimeter.&lt;&#x2F;li&gt;
&lt;li&gt;The network has become a complex mess with the introduction of cloud apps and
the Internet of Things. The increased risk is not compatible with traditional
access-control-list-oriented network security models.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-cia-triad-man-in-suit&quot;&gt;The CIA Triad 🕴&lt;&#x2F;h2&gt;
&lt;p&gt;Then, the question reduces to “&lt;em&gt;how do we ensure workload-to-workload
communication where the network is untrustworthy?&lt;&#x2F;em&gt;”.&lt;&#x2F;p&gt;
&lt;p&gt;So how do we secure service-to-service communication then?&lt;&#x2F;p&gt;
&lt;p&gt;This puzzle has three parts to solve, also known as the &lt;strong&gt;CIA&lt;&#x2F;strong&gt; Triad: *
&lt;em&gt;Confidentiality&lt;&#x2F;em&gt;*, &lt;strong&gt;Authenticity&lt;&#x2F;strong&gt;, and &lt;strong&gt;Integrity&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Confidentiality&lt;&#x2F;strong&gt;: The workload-to-workload communication should be on a
secure channel that no one else can listen to.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Integrity&lt;&#x2F;strong&gt;: The message that is being sent from one workload has not been
tampered with. The data is complete, accurate, and hasn’t been altered by anyone
else.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Authenticity&lt;&#x2F;strong&gt;: The sender of the data is the workload who claims it is. It is
not some other service that’s trying to impersonate the original service.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;cia-triad.png&quot; alt=&quot;The CIA triad.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The CIA triad.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;x-509-digital-certificates&quot;&gt;X.509 Digital Certificates&lt;&#x2F;h2&gt;
&lt;p&gt;There are well-established, industry-standard ways of solving the puzzle. We can
establish &lt;strong&gt;confidentiality&lt;&#x2F;strong&gt;, verify &lt;strong&gt;integrity&lt;&#x2F;strong&gt;, and ensure &lt;strong&gt;authenticity&lt;&#x2F;strong&gt;
in an industry-standard way.&lt;&#x2F;p&gt;
&lt;p&gt;The most common way is to use asymmetric cryptography and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;X.509&quot;&gt;&lt;strong&gt;X.509 Digital
Certificates&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. Again, I’m not going into
too much detail about certificates and certificate chains. Check out the
reference material at the end of this article for a deeper drill-down on the
subject matter.&lt;&#x2F;p&gt;
&lt;p&gt;For the context of this article, we need to know that when two workloads have
each other’s &lt;strong&gt;X.509&lt;&#x2F;strong&gt; public keys, they can establish a secure communication
channel. Then, they can talk to each other through this secure communication
channel.&lt;&#x2F;p&gt;
&lt;p&gt;Moreover, they can prove the message’s authenticity and integrity by digitally
signing the message with their private key.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, they can ensure the confidentiality of the communication channel by
encrypting the payload with the receiver’s public key.&lt;&#x2F;p&gt;
&lt;p&gt;How these mechanisms work varies by the algorithm and implementation, and it’s a
bit more involved than the quick summary outlined above. Suppose we sacrifice a
little bit of rigor for clarity. In that case, we can say that when you have
your &lt;em&gt;Certificates of Trust&lt;&#x2F;em&gt;, you can ensure &lt;strong&gt;confidentiality&lt;&#x2F;strong&gt;, &lt;strong&gt;integrity&lt;&#x2F;strong&gt;,
and &lt;strong&gt;authenticity&lt;&#x2F;strong&gt; in your &lt;strong&gt;workload-to-workload communications&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;meet-spiffe&quot;&gt;Meet &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The following outstanding question is: “&lt;em&gt;Since they are so helpful, how do we
create these &lt;strong&gt;X.509&lt;&#x2F;strong&gt; Certificates?&lt;&#x2F;em&gt;”&lt;&#x2F;p&gt;
&lt;p&gt;Other questions one might wonder are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Since these certificates ensure secure service-to-service communication, it’s
a good idea to rotate them frequently. How do we do that?&lt;&#x2F;li&gt;
&lt;li&gt;And also, it’s a good idea to invalidate them if some of these certificates
leak. How can we do it?&lt;&#x2F;li&gt;
&lt;li&gt;Also, how do we optimize and automate the process the certificate rotation and
expiration?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Why automate? Because &lt;strong&gt;security and humans do not mix well together&lt;&#x2F;strong&gt;. So we
better &lt;strong&gt;automate&lt;&#x2F;strong&gt; this entire certificate generation, rotation, revocation,
and invalidation process &lt;strong&gt;without needing any human intervention&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That’s where &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; comes into play.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;, &lt;em&gt;the Secure Production Identity Framework For Everyone&lt;&#x2F;em&gt;, provides a
&lt;strong&gt;secure identity&lt;&#x2F;strong&gt;, in the form of a specially crafted &lt;strong&gt;x.509 certificate&lt;&#x2F;strong&gt;,
to every workload in your production environment.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Short-Lived Keys&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The heart of the &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; specifications is the one that defines short-lived
cryptographic identity documents – called &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s via a simple API. Workloads
can then use these identity documents when authenticating to other workloads.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; is a set of &lt;strong&gt;open-source specifications&lt;&#x2F;strong&gt; for a framework capable of
&lt;strong&gt;bootstrapping&lt;&#x2F;strong&gt; and issuing &lt;strong&gt;identity&lt;&#x2F;strong&gt; to services anywhere without
depending on any specific platform.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;There Are&lt;&#x2F;strong&gt; &lt;strong&gt;JWT SVIDs, Too&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There are other ways &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; provides identity documents too, but in this
article, we’ll talk about &lt;strong&gt;X.509&lt;&#x2F;strong&gt; identities only. More specifically, &lt;strong&gt;X.509
SPIFFE Verifiable Identity documents&lt;&#x2F;strong&gt; or &lt;strong&gt;SVIDs&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;spiffe-key-elements&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; Key Elements&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; has the following key components:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;SPIFFE ID&lt;&#x2F;strong&gt;, how a software service’s &lt;strong&gt;name&lt;&#x2F;strong&gt; (&lt;em&gt;or &lt;strong&gt;identity&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;) is
represented.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;SPIFFE Verifiable Identity Document&lt;&#x2F;strong&gt; (&lt;strong&gt;&lt;em&gt;SVID&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;), a cryptographically
verifiable document used to prove a service’s identity to a peer.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;SPIFFE Workload API&lt;&#x2F;strong&gt;, a simple node-local API that services use to
obtain their identities without the need for authentication.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;SPIFFE Trust Bundle&lt;&#x2F;strong&gt;, a format for representing the collection of
public keys in use by a given &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; issuing authority.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;SPIFFE Federation&lt;&#x2F;strong&gt;, a simple mechanism by which &lt;em&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; Trust Bundles&lt;&#x2F;em&gt;
can be shared.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;benefits-of-using-spiffe&quot;&gt;Benefits of Using &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;By using &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;, you won’t need to maintain application-level authentication
information.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;No Tokens, No Problem&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Think about it. That’s something &lt;strong&gt;BIG&lt;&#x2F;strong&gt;:&lt;br &#x2F;&gt;
You won’t need a unique secret service key or a special token for your
workload to prove its identity anymore.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In addition, &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; is a platform-agnostic standard, so you avoid vendor
lock-in by using it across your clusters.&lt;&#x2F;p&gt;
&lt;p&gt;And since &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; is an open standard, you can interact with any application
or service that supports &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; without having to modify your codebase or
your application configuration.&lt;&#x2F;p&gt;
&lt;p&gt;Moreover, &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; solves the automating the credential creation problem that
we mentioned before. It is an open standard that establishes how these &lt;strong&gt;SVID
x.509 Certificates&lt;&#x2F;strong&gt; are &lt;strong&gt;created&lt;&#x2F;strong&gt;, &lt;strong&gt;defined&lt;&#x2F;strong&gt;, &lt;strong&gt;rotated&lt;&#x2F;strong&gt;, &lt;strong&gt;verified&lt;&#x2F;strong&gt;,
and &lt;strong&gt;invalidated&lt;&#x2F;strong&gt; automatically without needing human intervention.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caching and Performance&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The workloads periodically receive updated identity documents (i.e., &lt;strong&gt;SVID&lt;&#x2F;strong&gt;
s) as certificates expire or the configuration changes. The &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; agent *
&lt;em&gt;preloads&lt;&#x2F;em&gt;* the identities for all workloads it may host. This preload operation
minimizes the impact of server downtime on the availability of the Workload API.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In addition to all these, you won’t have to assume that your network is secure
because the &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s will ensure the security and integrity of
service-to-service communication that the services have.&lt;&#x2F;p&gt;
&lt;p&gt;That’s a great advantage because maintaining network access control list and
firewall rules is &lt;strong&gt;cumbersome&lt;&#x2F;strong&gt;. It is prone to &lt;strong&gt;human errors&lt;&#x2F;strong&gt;,
time-consuming, and &lt;strong&gt;impractical&lt;&#x2F;strong&gt; when your network boundaries and the network
overlays you use change all the time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hello-spire&quot;&gt;Hello, &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Okay, that was &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;. But, what is
&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;{{img(
src=“&#x2F;images&#x2F;2021&#x2F;10&#x2F;keymaker.png”,
alt=“SPIFFE defines how to make keys; SPIRE is the key maker.”
)}&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;About SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; is a set of standards, what implements those standards? That’s
where &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; comes into play.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; is a production-ready reference implementation of &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; does its job by &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;#workload-attestation&quot;&gt;performing &lt;strong&gt;node&lt;&#x2F;strong&gt; and &lt;strong&gt;workload&lt;&#x2F;strong&gt;
&lt;strong&gt;attestation&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
This way, it reliably and securely identifies workloads and issues them &lt;strong&gt;SVID&lt;&#x2F;strong&gt;
s (&lt;em&gt;SPIFFE Verfifiables IDs&lt;&#x2F;em&gt;), which are nothing but specialized &lt;em&gt;X.509
Certificates&lt;&#x2F;em&gt;. The workloads, then, can use them to prove their identity.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;attestation.png&quot; alt=&quot;Workload attestation.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Workload attestation.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;You’ll see an example of how this attestation flow works in the video I’ve added
to the beginning of this article.&lt;&#x2F;p&gt;
&lt;p&gt;If you want a quick summary, workload attestation is a process where the
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; agent relies on locally trusted workload attributes. These attributes
can be as process&#x2F;group ID or container runtime metadata. Some examples of these
metadata include the pod names, namespaces, service accounts, and the like.&lt;&#x2F;p&gt;
&lt;p&gt;After all, if our cluster’s &lt;strong&gt;Kubernetes API&lt;&#x2F;strong&gt; can &lt;strong&gt;attest&lt;&#x2F;strong&gt; that our workload
pod has a particular &lt;strong&gt;name&lt;&#x2F;strong&gt;, with certain &lt;strong&gt;tags&lt;&#x2F;strong&gt;, managed by a specific *
&lt;em&gt;service account&lt;&#x2F;em&gt;*, in a given &lt;strong&gt;namespace&lt;&#x2F;strong&gt;, in a known &lt;strong&gt;cluster&lt;&#x2F;strong&gt;… that is
enough information to identify this workload.&lt;&#x2F;p&gt;
&lt;p&gt;This way, the workload will not need to provide a secret key to prove its
authenticity. Instead, we shift the trust and responsibility of establishing the
workload’s authenticity to the orchestration framework (&lt;em&gt;&lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; in this
case&lt;&#x2F;em&gt;). By talking to Kubernetes APIs, we can verify, with confidence, that this
workload pod is what it claims it is.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Node and Workload Registration&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;One thing that I’ve been conveniently hiding so far, is, you have to *
&lt;em&gt;register&lt;&#x2F;em&gt;* nodes and workloads before you can attest them. For the interested,
this document outlines the details of
&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;deploying&#x2F;registering&#x2F;&quot;&gt;how workloads are registered with &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; IDs in the
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; server&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;detective-female-sign-spire-agents&quot;&gt;🕵️‍♀️ SPIRE Agents&lt;&#x2F;h2&gt;
&lt;p&gt;There is a single &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; &lt;strong&gt;Agent&lt;&#x2F;strong&gt; on each &lt;strong&gt;Node&lt;&#x2F;strong&gt;. The agents talk to the
&lt;strong&gt;SPIRE Server&lt;&#x2F;strong&gt;. Multiple workloads on the node talk to the same agent using the
&lt;strong&gt;SPIFFE Workload API&lt;&#x2F;strong&gt; to receive their &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;server_and_agent.png&quot; alt=&quot;SPIRE Server and Agent architecture.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;SPIRE Server and Agent architecture.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;registering-a-workload&quot;&gt;Registering a Workload&lt;&#x2F;h2&gt;
&lt;p&gt;For &lt;strong&gt;workloads&lt;&#x2F;strong&gt; to receive &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s, they need to be &lt;strong&gt;registered&lt;&#x2F;strong&gt; first.&lt;&#x2F;p&gt;
&lt;p&gt;There are several ways to register a workload: Either an operator registers your
workloads to the &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; server, and then the operator manually provisions the
workloads. Or you can automate this step entirely in your &lt;strong&gt;CI Pipeline&lt;&#x2F;strong&gt;: Your
&lt;strong&gt;CI&#x2F;CD&lt;&#x2F;strong&gt; orchestration tool can &lt;strong&gt;register&lt;&#x2F;strong&gt; the workloads to the &lt;strong&gt;SPIRE
Server&lt;&#x2F;strong&gt; and &lt;strong&gt;deploy&lt;&#x2F;strong&gt; them to your cluster.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;You Define Your Attestors During Registration&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;Workload Registration&lt;&#x2F;strong&gt; step is also where you specify your workload
attestors to the SPIRE server. Then the &lt;strong&gt;SPIRE Agent&lt;&#x2F;strong&gt; will use those attestors
to assign an identity to your workload and assign them &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After the workoad registration is complete, workloads will bind to the spire
agent’s &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unix_domain_socket&quot;&gt;&lt;strong&gt;domain socket&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
and regularly fetch &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s.&lt;&#x2F;p&gt;
&lt;p&gt;And that’s all about it. After a successful registration, &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; takes care
of the certificate initialization, assignment, revocation, and rotation problems
when everything is set up, each of which is hard to solve individually.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;go-spiffe&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;go-spiffe&quot;&gt;&lt;strong&gt;go-spiffe&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is a library that can
make the “fetching &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s from the &lt;strong&gt;SPIRE Agent&lt;&#x2F;strong&gt;” part much painless
(&lt;em&gt;among other abstractions&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;turtle-secret-zero&quot;&gt;🐢 Secret Zero&lt;&#x2F;h2&gt;
&lt;p&gt;What makes &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; stand out is that it solves what’s called the
“&lt;strong&gt;&lt;em&gt;secret zero&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” problem. In a nutshell, the problem statement goes as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Enabling access control to service requires a secret such as an API key or
password.&lt;&#x2F;li&gt;
&lt;li&gt;That key or password needs to be protected, so you encrypt the key.&lt;&#x2F;li&gt;
&lt;li&gt;But then you have to watch the decryption key that you’ll use to get your
service key back.&lt;&#x2F;li&gt;
&lt;li&gt;So you put the decryption key to a Keystore.&lt;&#x2F;li&gt;
&lt;li&gt;But then you’ll have to protect the Keystore’s master key.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And this goes on and on. Ultimately, protecting access to one secret results in
a new secret you need to save.&lt;&#x2F;p&gt;
&lt;p&gt;Which begs the following question: “&lt;em&gt;Who protects the &lt;strong&gt;secret zero&lt;&#x2F;strong&gt;—the
ultimate secret—that gives the keys to the entire kingdom?&lt;&#x2F;em&gt;”.&lt;&#x2F;p&gt;
&lt;p&gt;Rest assured, we’ll get there. Just 🐻 with me for a while.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;turtle-it-s-secrets-all-the-way-down&quot;&gt;🐢 It’s Secrets all the Way Down&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Identity&lt;&#x2F;strong&gt; and &lt;strong&gt;Authentication&lt;&#x2F;strong&gt; go hand-in-hand. Claiming an identity is
useless unless you can &lt;strong&gt;authenticate&lt;&#x2F;strong&gt; that identity and &lt;strong&gt;prove&lt;&#x2F;strong&gt; with
confidence that the identity is indeed what it claims to be.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;turtles.jpeg&quot; alt=&quot;Turtles all the way down.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Turtles all the way down.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;One way to authenticate an identity is to provide a secret key or a password
along with the identity. Then a second independent identity management service
can verify this identity. In certain other implementations, services can use
hard-coded secret service keys to identify themselves.&lt;&#x2F;p&gt;
&lt;p&gt;In either case, to prove the identity, you need a &lt;strong&gt;secret&lt;&#x2F;strong&gt;. But this secret is
&lt;strong&gt;vital&lt;&#x2F;strong&gt; because if an attacker gets a hold of this secret, they can
authenticate as the service holding the secret.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Do Not Hard-Code Your Secrets&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That’s why hard-coding the secret inside the source code or baking it on a
virtual machine image such as an AWS AMI is not a good idea.&lt;&#x2F;p&gt;
&lt;p&gt;Also, although the &lt;a href=&quot;https:&#x2F;&#x2F;12factor.net&#x2F;&quot;&gt;Twelve Factor App Methodology&lt;&#x2F;a&gt;
encourages it, storing secrets in the workload as environment variables can
cause security problems (especially, in form of leaked environment variables
inside the aggregated log streams)—Apps should ideally keep their secrets in
&lt;strong&gt;temporary&lt;&#x2F;strong&gt; memory-mounted volumes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A better way is to put the secret into a &lt;strong&gt;Keystore&lt;&#x2F;strong&gt;, let the service
authenticate with the secret store, and let the service get it from the key
store.&lt;&#x2F;p&gt;
&lt;p&gt;A third-party orchestration system can authenticate with the Keystore by
unlocking the Keystore using the Keystore’s master key. Then it can fetch the
secret key that the service will use. Then inject it as a read-only, in-memory
configuration volume to the service and then lock the Keystore so that no one
else can reach it.&lt;&#x2F;p&gt;
&lt;p&gt;But then, how do we protect the Keystore’s master key? Because if an evil
attacker gets it from our orchestration system somehow, then we are at square
zero; they will get all the keys to all the services.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.vaultproject.io&#x2F;&quot;&gt;HashiCorp &lt;strong&gt;Vault&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, for example, attempts to
solve this problem using
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;&lt;strong&gt;Shamir’s Secret Sharing Algorithm&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Vault&lt;&#x2F;strong&gt; splits the key into three or more parts; if you don’t provide either
all the parts or the majority of the parts (&lt;em&gt;depending on how you set up Vault&lt;&#x2F;em&gt;),
Vault will not unlock.&lt;&#x2F;p&gt;
&lt;p&gt;So it makes getting the key harder, but still, it’s just pushing the problem one
level down, not entirely solving it.&lt;&#x2F;p&gt;
&lt;p&gt;No matter how hard it is, if you get the three master keys from wherever they
are stored, you can generate what Vault calls the “&lt;strong&gt;&lt;em&gt;unseal key&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;.” Then, you
gain access to the entire kingdom again.&lt;&#x2F;p&gt;
&lt;p&gt;To add more security, you can use Vault’s “&lt;em&gt;&lt;strong&gt;auto unseal&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;” feature and
delegate the providing and rotating of the unseal key to a &lt;em&gt;bare metal&lt;&#x2F;em&gt; or
*cloud_ &lt;strong&gt;HSM&lt;&#x2F;strong&gt;. But now, you’ll need to protect the HSM’s master key because
reaching it will give access to Vault’s unseal key, which will provide access to
all of your service secret keys.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;turtle-solving-the-bottom-turtle&quot;&gt;🐢 Solving the Bottom Turtle&lt;&#x2F;h2&gt;
&lt;p&gt;Do you see the issue here?&lt;&#x2F;p&gt;
&lt;p&gt;Managing secrets at scale requires effective &lt;strong&gt;access control&lt;&#x2F;strong&gt;; implementing
access control requires &lt;strong&gt;validating identity&lt;&#x2F;strong&gt;. That’s because without
providing a valid identity, it will be “&lt;em&gt;public access&lt;&#x2F;em&gt;,” which defeats the
entire purpose of using secret keys in the first place. Yet, proving identity
requires possession of &lt;strong&gt;yet another secret&lt;&#x2F;strong&gt;—That’s akin to stacking one
turtle atop another. It’s &lt;strong&gt;turtles all the way down&lt;&#x2F;strong&gt; 🐢.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;turtle-1.jpeg&quot; alt=&quot;A turtle in the bottom of the ocean (a &amp;#x27;bottom turtle&amp;#x27;?).&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;A turtle in the bottom of the ocean (a &amp;#x27;bottom turtle&amp;#x27;?).&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;🐢 &lt;strong&gt;Turtles All the Way Down&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;“&lt;strong&gt;Turtles all the way down&lt;&#x2F;strong&gt;”&lt;&#x2F;em&gt; is an expression of the problem of infinite
recursion. The saying alludes to the mythological idea of a World Turtle that
supports a flat earth on its back. It suggests that this turtle rests on the
back of an even larger turtle, which itself is part of a column of increasingly
large turtles that continues ad infinitum.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Protecting one secret requires coming up with some way to protect another
secret, which then requires protecting that secret, and so on.&lt;&#x2F;p&gt;
&lt;p&gt;That’s why improperly designed secrets management solutions have a master key
that unlocks everything. All a hacker needs to do is either steal or guess this
one master password to access everything. This master password is
&lt;strong&gt;secret zero&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This approach is equivalent to locking all of your keys in a drawer and then
putting the key of the drawer under the flower pot in your backyard—don’t do
that 🙃.&lt;&#x2F;p&gt;
&lt;p&gt;To break this loop, we need to find a &lt;strong&gt;&lt;em&gt;bottom turtle&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;, that is, some secret
that provides access to the rest of the secrets we need for authentication and
access control.&lt;&#x2F;p&gt;
&lt;p&gt;The next section is about how to find the &lt;strong&gt;bottom turtle&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-shift-of-trust&quot;&gt;The Shift of Trust&lt;&#x2F;h2&gt;
&lt;p&gt;A better solution to &lt;strong&gt;secret zero&lt;&#x2F;strong&gt; is a tad counterintuitive:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What If I Told You…&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Instead of securing the secret zero, what if we didn’t use any secret at all?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As it happens, we can avoid the &lt;strong&gt;secret zero&lt;&#x2F;strong&gt; problems entirely by leveraging
&lt;strong&gt;authenticators&lt;&#x2F;strong&gt; that work with the &lt;strong&gt;underlying infrastructure&lt;&#x2F;strong&gt; to
authenticate the access to your secrets.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;Screen-Shot-2021-10-09-at-8.49.47-AM.png&quot; alt=&quot;No secrets, no problem.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;No secrets, no problem.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;, this authentication process is called &lt;strong&gt;attestation&lt;&#x2F;strong&gt;. You
&lt;strong&gt;attest&lt;&#x2F;strong&gt; both the &lt;strong&gt;nodes&lt;&#x2F;strong&gt; and also the &lt;strong&gt;workloads&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;**What are Nodes?&lt;&#x2F;p&gt;
&lt;p&gt;Nodes** are virtual or physical machines, and &lt;strong&gt;workloads&lt;&#x2F;strong&gt; are processes
running on these nodes either directly or inside a container in a pod.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To verify that a workload is authorized for a particular identity,
&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;#workload-attestation&quot;&gt;the &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; agent performs
&lt;strong&gt;workload attestation&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
During &lt;strong&gt;workload attestation&lt;&#x2F;strong&gt;, workload’s attributes are read from the kernel
or other trusted components on the local system. Then, the &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; agent
matches the attributes against configured identities and provides each workload
with all the identities for which it is authorized.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Two Workloads Can Share the Same ID&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note that workload-identity association is a many-to-many relationship: A
workload may be authorized for zero or more identities. Similarly, zero or more
workloads can be associated with a single identity.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For example, if the Kubernetes &lt;strong&gt;api-server&lt;&#x2F;strong&gt; can verify that your pod has a
name &lt;strong&gt;idm&lt;&#x2F;strong&gt;, living inside a cluster named &lt;strong&gt;fizz-cluster&lt;&#x2F;strong&gt; using a service
account named &lt;strong&gt;fizz-sa&lt;&#x2F;strong&gt; under a namespace &lt;strong&gt;fizz&lt;&#x2F;strong&gt;; that is adequate
identifying information to &lt;strong&gt;prove&lt;&#x2F;strong&gt; the identity of the &lt;strong&gt;idm&lt;&#x2F;strong&gt; pod with
confidence. So even if the pod does not provide any secret, the &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;
&lt;strong&gt;workload attestor&lt;&#x2F;strong&gt; plugin can verify the identity of the idm pod by talking to
Kubernetes APIs.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Root of Trust&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;During the workload &lt;strong&gt;attestation&lt;&#x2F;strong&gt; process (&lt;em&gt;as exemplified above&lt;&#x2F;em&gt;),
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; establishes a &lt;strong&gt;Root of Trust&lt;&#x2F;strong&gt;. It builds an automated solution
around workload identity. This identity then forms the foundation for all the
interactions that require authentication and authorization.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;there-s-no-spoon&quot;&gt;There’s No Spoon&lt;&#x2F;h2&gt;
&lt;p&gt;In other words, when you use &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;, you shift the burden of trust from the
Keystore to the operating system’s kernel, the cloud provider APIs, the
orchestration framework, or to a mixture of all of these.&lt;&#x2F;p&gt;
&lt;p&gt;It’s a good time to re-intruduce the &lt;strong&gt;&lt;em&gt;SPIRE workload attestation&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; diagram.
Pay attention to how the &lt;strong&gt;workload attestor&lt;&#x2F;strong&gt; uses different plugins to use *
&lt;em&gt;kubelet&lt;&#x2F;em&gt;* for Kubernetes-native workloads, and the linux &lt;strong&gt;kernel&lt;&#x2F;strong&gt; for other
workloads. &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;planning&#x2F;extending&#x2F;&quot;&gt;This &lt;strong&gt;plugin-based&lt;&#x2F;strong&gt;
architecture&lt;&#x2F;a&gt; is one of
the reasons why &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; is so easy to extend.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2021&#x2F;10&#x2F;attestation-1.png&quot; alt=&quot;SPIRE workload attestation.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;How the &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; workload attestation works is—at a very high&#x2F;conceptual
level—similar to how the &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AWSEC2&#x2F;latest&#x2F;UserGuide&#x2F;ec2-instance-metadata.html&quot;&gt;&lt;em&gt;&lt;strong&gt;AWS Instance Metadata&lt;&#x2F;strong&gt;
API&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;
works or how the instance metadata API of any other cloud provider functions.&lt;&#x2F;p&gt;
&lt;p&gt;In a similar fashion to the &lt;em&gt;AWS Instance Metadata API&lt;&#x2F;em&gt;, the
&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;#workload-registration&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; &lt;strong&gt;Workload API&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
does not require that a calling workload have any knowledge of its own identity
or possess any authentication token when calling the API. Using the Instance
Metadata API means your application does not need not co-deploy any
authentication secrets with the workload:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;There’s no spoon&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;Screen-Shot-2021-10-09-at-9.07.00-AM.png&quot; alt=&quot;SPIRE workload attestation.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;SPIRE workload attestation.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Unlike these other APIs, however, the &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Workload API is
&lt;strong&gt;platform-agnostic&lt;&#x2F;strong&gt;. In addition, it can identify running services at the
&lt;strong&gt;process level&lt;&#x2F;strong&gt; and &lt;strong&gt;kernel level&lt;&#x2F;strong&gt;, making it suitable for use with
container schedulers such as &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Having learned the basics of &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;, let’s look at some use
cases from companies that use &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; on scale production.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;Use Cases&lt;&#x2F;h2&gt;
&lt;p&gt;Here are some examples of real-life use cases that talk about &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; out in the wild.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=o98SFmW4akQ&quot;&gt;Using &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; in Production at Uber&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.crowdcast.io&#x2F;e&#x2F;pin-spiffe&quot;&gt;Overcoming the identity crisis at Pinterest with &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;x642wq7lbpY&quot;&gt;10 Lessons From Migrating to &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; After 10 Years Of Service Identity at Square&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;nZXCbiS6wfE&quot;&gt;Passport App: The role of &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; in return to work solution&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;vX8SS5wQuY8&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; at GitHub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;4pfY0uFW7yk&quot;&gt;Securing Kafka with &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;xgzQEb9hbMI?t=222&quot;&gt;Attesting Istio Workload Identities with &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;xgzQEb9hbMI?t=1606&quot;&gt;Parsec and &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=eCLTdSp4JzE&quot;&gt;Cloud-Native Identity Management&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;H5IlmYmEDKk?t=2585&quot;&gt;Using &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; to ensure secure communications across hybrid infrastructure services&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=1TlEO0xO8jw&amp;amp;list=PLWsNZXV-gXVY_br7I8gz9q0Fijk4DoUxG&amp;amp;index=8&amp;amp;t=0s&quot;&gt;Securing Grey Matter: &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&#x2F;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; in a Hybrid Mesh&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=TfnU1xD9EFY&quot;&gt;Building Zero Trust-based Authentication in Healthcare with &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;TOjb_imYuLE&quot;&gt;Lessons Learned: Designing Scalable, PKI-based Authentication With &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; at ByteDance&#x2F;TikTok&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;use-the-source&quot;&gt;Use The Source&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;spire-rocks&#x2F;3092102c-18cf-4658-b918-862d93ca2ec2&#x2F;fizz-infra.zip&quot;&gt;Here’s the zip archive of the project that we’ve used in the
demo video&lt;&#x2F;a&gt;
(&lt;em&gt;32KB&lt;&#x2F;em&gt;). There are other manifest files that are not part of the demo. Yet, I’m
keeping them to give a more complete view of the system that we are working
with.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Aside&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the source code archive, I have not included Kubernetes Secret manifests
for obvious reasons—also, after reading this article, who needs secrets
anyway.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;¯\_(ツ)_&#x2F;¯&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;references-and-further-reading&quot;&gt;References and Further Reading&lt;&#x2F;h2&gt;
&lt;p&gt;Here is some additional “&lt;em&gt;bedtime reading&lt;&#x2F;em&gt;” for those who want to dig into the
concept further.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kubernetes-concepts-covered-in-the-video&quot;&gt;Kubernetes Concepts Covered in the Video&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;eks&#x2F;&quot;&gt;Amazon Elastic Kubernetes Service (&lt;strong&gt;&lt;em&gt;EKS&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;overview&#x2F;working-with-objects&#x2F;namespaces&#x2F;&quot;&gt;&lt;strong&gt;Namespace&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;daemonset&#x2F;&quot;&gt;&lt;strong&gt;DaemonSet&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;statefulset&#x2F;&quot;&gt;&lt;strong&gt;StatefulSet&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;configure-pod-container&#x2F;configure-service-account&#x2F;&quot;&gt;Configure &lt;strong&gt;ServiceAccount&lt;&#x2F;strong&gt;s for &lt;strong&gt;Pod&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;access-authn-authz&#x2F;rbac&#x2F;&quot;&gt;Using &lt;strong&gt;RBAC&lt;&#x2F;strong&gt; Authorization&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@hajsanad&#x2F;kubernetes-token-review-and-authentication-56e06cc55ed3&quot;&gt;Kubernetes &lt;strong&gt;Token Review API&lt;&#x2F;strong&gt; and &lt;strong&gt;Authentication&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;configmap&#x2F;&quot;&gt;&lt;strong&gt;ConfigMap&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;secret&#x2F;&quot;&gt;&lt;strong&gt;Secret&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;configure-pod-container&#x2F;configure-liveness-readiness-startup-probes&#x2F;&quot;&gt;Configure &lt;strong&gt;Liveness&lt;&#x2F;strong&gt;, &lt;strong&gt;Readiness&lt;&#x2F;strong&gt;, and &lt;strong&gt;Startup&lt;&#x2F;strong&gt; Probes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;services-networking&#x2F;service&#x2F;&quot;&gt;&lt;strong&gt;Service&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;deployment&#x2F;&quot;&gt;&lt;strong&gt;Deployment&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;&quot;&gt;&lt;strong&gt;Pod&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;persistent-volumes&#x2F;&quot;&gt;&lt;strong&gt;Persistent Volume&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;volumes&#x2F;&quot;&gt;&lt;strong&gt;Volume&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;architecture&#x2F;nodes&#x2F;&quot;&gt;&lt;strong&gt;Node&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;spiffe-and-spire-fundamentals&quot;&gt;SPIFFE and SPIRE Fundamentals&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spiffe-about&#x2F;spiffe-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; Concepts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Concepts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spiffe&#x2F;blob&#x2F;main&#x2F;standards&#x2F;SPIFFE_Workload_API.md&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; Workload API&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;deploying&#x2F;svids&#x2F;&quot;&gt;Working With &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;planning&#x2F;extending&#x2F;&quot;&gt;Extending &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;go-spiffe&quot;&gt;&lt;strong&gt;go-spiffe&lt;&#x2F;strong&gt;: Golang Library for &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; Support&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;key-concepts&quot;&gt;Key Concepts&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;csrc.nist.gov&#x2F;publications&#x2F;detail&#x2F;sp&#x2F;800-207&#x2F;final&quot;&gt;&lt;strong&gt;Zero Trust&lt;&#x2F;strong&gt; Architecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Zero_trust_security_model&quot;&gt;&lt;strong&gt;Zero Trust&lt;&#x2F;strong&gt; Security Model&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Trust_boundary&quot;&gt;Trust Boundary&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Information_security&quot;&gt;Information Security&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Public_key_infrastructure&quot;&gt;Public Key Infrastructure (&lt;em&gt;PKI&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;knowledge.digicert.com&#x2F;solution&#x2F;SO16297.html&quot;&gt;How Certificate Chains Work&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;protocol-buffers&quot;&gt;Protocol Buffers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;grpc.io&#x2F;&quot;&gt;&lt;strong&gt;gRPC&lt;&#x2F;strong&gt;: A Universal RPC Framework&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unix_domain_socket&quot;&gt;Unix Domain Sockets&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Inter-process_communication&quot;&gt;Inter-Process Communication&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.redhat.com&#x2F;en&#x2F;topics&#x2F;devops&#x2F;what-is-ci-cd&quot;&gt;What is CI&#x2F;CD?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;algorithms-and-standards&quot;&gt;Algorithms and Standards&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;X.509&quot;&gt;X.509&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spiffe&#x2F;blob&#x2F;main&#x2F;standards&#x2F;X509-SVID.md&quot;&gt;X.509 &lt;strong&gt;SVID&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir&amp;#x27;s_Secret_Sharing&quot;&gt;Shamir’s Secret Sharing Algorithm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Certificate_revocation_list&quot;&gt;Certificate Revocation Lists (&lt;em&gt;CRL&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;people.csail.mit.edu&#x2F;rivest&#x2F;pubs&#x2F;Riv98b.pdf&quot;&gt;Can we eliminate &lt;strong&gt;CRL&lt;&#x2F;strong&gt;s?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;related-technologies&quot;&gt;Related Technologies&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.vaultproject.io&#x2F;docs&#x2F;concepts&#x2F;seal&quot;&gt;How Vault Seals&#x2F;Unseals Using Shamir’s Secret Sharing Algorithm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hardware_security_module&quot;&gt;&lt;strong&gt;HSM&lt;&#x2F;strong&gt;: Hardware Security Module&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;cloudhsm&#x2F;&quot;&gt;AWS Cloud HSM&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;IBM&#x2F;istio-spire&quot;&gt;Istio identity with &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.openpolicyagent.org&#x2F;&quot;&gt;&lt;strong&gt;OPA&lt;&#x2F;strong&gt;: Open Policy Agent&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;certificate.transparency.dev&#x2F;&quot;&gt;Certificate Transparency&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AWSEC2&#x2F;latest&#x2F;UserGuide&#x2F;ec2-instance-metadata.html&quot;&gt;AWS Instance Metadata and User Data&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;eks&#x2F;&quot;&gt;Amazon &lt;strong&gt;EKS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AWSEC2&#x2F;latest&#x2F;UserGuide&#x2F;AMIs.html&quot;&gt;Amazon Machine Images (&lt;em&gt;AMI&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;security&#x2F;encryption-in-transit&#x2F;application-layer-transport-security&#x2F;&quot;&gt;ALTS: Application Layer Transport Security&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;engineering.fb.com&#x2F;2019&#x2F;05&#x2F;29&#x2F;security&#x2F;service-encryption&#x2F;&quot;&gt;Building Facebook’s Service Encryption&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=15H5uCj1hlE&quot;&gt;Automated Bootstrapping of Secrets &amp;amp; Identity in the Cloud&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;12factor.net&#x2F;&quot;&gt;The Twelve Factor App&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;key-terms&quot;&gt;Key Terms&lt;&#x2F;h2&gt;
&lt;p&gt;Here is an non-exhaustive list of the key terms and phrases covered in this
article and video. Of course, if you check the **References and Further Reading
** section above, you will find a lot more. Yet, it’s an excellent start to get
acquainted with these and do more profound research around them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zero-trust-1&quot;&gt;Zero Trust&lt;&#x2F;h3&gt;
&lt;p&gt;A security concept centered on the idea that organizations should not
automatically trust anything based on whether a service is running inside or
outside a network boundary and must verify everything trying to connect to its
systems before granting access.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;authentication&quot;&gt;Authentication&lt;&#x2F;h3&gt;
&lt;p&gt;The process of verifying the identity of a user or a system. Answers: “What are
you?”.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;authorization&quot;&gt;Authorization&lt;&#x2F;h3&gt;
&lt;p&gt;The process of determining the permissions of a user or a system over a
resource. Answers: “What can you do?”.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;node-worker&quot;&gt;Node&#x2F;Worker&lt;&#x2F;h3&gt;
&lt;p&gt;A logical or physical entity that runs computational workloads.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;workload&quot;&gt;Workload&lt;&#x2F;h3&gt;
&lt;p&gt;A workload is a single piece of software deployed with a particular
configuration for a single purpose that can consist of multiple running
instances, all of which perform the same task.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;attestation&quot;&gt;Attestation&lt;&#x2F;h3&gt;
&lt;p&gt;In the context of &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;, attestation is asserting specific properties of a
&lt;strong&gt;Node&lt;&#x2F;strong&gt; or &lt;strong&gt;Workload&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;spiffe-id&quot;&gt;SPIFFE ID&lt;&#x2F;h3&gt;
&lt;p&gt;A string that uniquely identifies a workload, e.g.
&lt;code&gt;spiffe:&#x2F;&#x2F;fizzbuzz.pro&#x2F;service&#x2F;idm&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;svid-spiffe-verifiable-identity-document&quot;&gt;SVID (&lt;em&gt;SPIFFE Verifiable Identity Document&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;A document with which a workload proves its identity. An &lt;strong&gt;SVID&lt;&#x2F;strong&gt; contains a
&lt;strong&gt;SPIFFE ID&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;trust-bootstrap&quot;&gt;Trust Bootstrap&lt;&#x2F;h3&gt;
&lt;p&gt;Establishing Trust in a service or system.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;trust-domain&quot;&gt;Trust Domain&lt;&#x2F;h3&gt;
&lt;p&gt;Corresponds to the Trust Root of a system. A &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; &lt;strong&gt;trust domain&lt;&#x2F;strong&gt; is an
identity namespace that is backed by an issuing authority.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;root-of-trust&quot;&gt;Root of Trust&lt;&#x2F;h3&gt;
&lt;p&gt;A source in which another trust is built on.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;signing&quot;&gt;Signing&lt;&#x2F;h3&gt;
&lt;p&gt;The addition of a digital signature for verifying the authenticity of a message
or document.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mutual-tls-mtls&quot;&gt;Mutual TLS (&lt;em&gt;mTLS&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;A cryptographic protocol that ensures that the network traffic is both secure
and trusted in both directions between a client and server.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;public-key-cryptography-asymmetric-cryptography&quot;&gt;Public-key cryptography (&lt;em&gt;asymmetric cryptography&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;A cryptographic system that uses pairs of keys (&lt;em&gt;&lt;strong&gt;private&lt;&#x2F;strong&gt; keys and &lt;strong&gt;public&lt;&#x2F;strong&gt;
keys&lt;&#x2F;em&gt;). One key encrypts data, while the other key is used to decrypt the data.
&lt;strong&gt;For example, X.509 Digital Certificates&lt;&#x2F;strong&gt; are created using public-key
cryptography.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pki-public-key-infrastructure&quot;&gt;PKI (&lt;em&gt;Public Key Infrastructure&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;A set of policies, procedures, and tools used to create, manage, and distribute
digital certificates.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;x-509&quot;&gt;X.509&lt;&#x2F;h3&gt;
&lt;p&gt;A widely used standard format for public-key certificates. These certificates
are used in many internet protocols, including TLS&#x2F;SSL.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;x509-svid&quot;&gt;X509-SVID&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;strong&gt;X.509&lt;&#x2F;strong&gt; representation of an &lt;strong&gt;SVID&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kernel&quot;&gt;Kernel&lt;&#x2F;h3&gt;
&lt;p&gt;The central part of an operating system, which manages the memory, CPU, and
device operations.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hardening&quot;&gt;Hardening&lt;&#x2F;h3&gt;
&lt;p&gt;The process of putting a system through a sequence of actions to increase its
security posture, including patching, updating configuration, and limiting
network access.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hardware-security-module-hsm&quot;&gt;Hardware Security Module (&lt;em&gt;HSM&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;A dedicated cryptographic processor designed to manage and safeguard sensitive
keys.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;key-management-service-kms&quot;&gt;Key Management Service (&lt;em&gt;KMS&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;A system that manages cryptographic keys. It deals with generating, exchange,
storing, and revocation of keys.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this article, we’ve seen how hard it is to manage service identity across
clusters at scale. We also had a demo video showing how you can install
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; on an &lt;strong&gt;AWS EKS&lt;&#x2F;strong&gt; Kubernetes cluster. In the video, we also consumed
the &lt;strong&gt;SPIRE Agent&lt;&#x2F;strong&gt;’s &lt;strong&gt;Workload API&lt;&#x2F;strong&gt;s to get &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s in no time.&lt;&#x2F;p&gt;
&lt;p&gt;When it comes to identity federation, &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and its reference implementation
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; solve many cross-cutting concerns. Some of these common
problems are &lt;strong&gt;secret management&lt;&#x2F;strong&gt;, secret creation, secret sharing, and
&lt;strong&gt;secret invalidation&lt;&#x2F;strong&gt;. With &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;, you don’t need to trust the network or
create firewall rules and access control lists.&lt;&#x2F;p&gt;
&lt;p&gt;Using the foundation that we created in this article, we’ll create a service to
service &lt;strong&gt;mTLS&lt;&#x2F;strong&gt; communication channel in the follow-up articles.&lt;&#x2F;p&gt;
&lt;p&gt;Until then… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Setting Up SPIRE on EKS in Less Than Ten Minutes&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;spike&#x2F;shamir-secrets-sharing&#x2F;&quot;&gt;Shamir’s Secret Sharing Scheme with SPIFFE and SPIKE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;&quot;&gt;mTLS with SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A Glossary of Mostly Developer-Related Things</title>
        <published>2021-11-27T00:00:00+00:00</published>
        <updated>2021-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/glossary/"/>
        <id>https://zerotohero.dev/roadmap/glossary/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/glossary/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;acronym.png&quot; alt=&quot;The tech industry loves its TLAs.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The tech industry loves its TLAs.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We love our terms and acronyms, don’t we? They help us communicate complex
notions with just a few characters; however, they can also be an obstacle when
you are learning new stuff. This page covers a list of mostly developer-related
terms and acronyms with links to further explanations about them.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;A&#x2F;B_testing&quot;&gt;A&#x2F;B Testing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Application_programming_interface&quot;&gt;API&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.interaction-design.org&#x2F;literature&#x2F;topics&#x2F;adaptive-design&quot;&gt;Adaptive Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Agile_software_development&quot;&gt;Agile Software Development&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Algorithm&quot;&gt;Algorithm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Automation&quot;&gt;Automation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Scrum_(software_development)#Product_backlog&quot;&gt;Backlog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bash_(Unix_shell)&quot;&gt;bash&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Behavior-driven_development&quot;&gt;BDD (&lt;em&gt;Behavior-Driven
Development&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Big_data&quot;&gt;Big Data&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;bigquery&quot;&gt;Big Query&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mozilla.org&#x2F;en-US&#x2F;firefox&#x2F;browsers&#x2F;what-is-a-browser&#x2F;&quot;&gt;Browser&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Software_bug&quot;&gt;Bug&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;tanhauhau&#x2F;what-is-module-bundler-and-how-does-it-work-3gp2&quot;&gt;Bundling&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Burn_rate&quot;&gt;Burn Rate&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;C_Sharp_(programming_language)&quot;&gt;C#&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;C%2B%2B&quot;&gt;C++&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Content_management_system&quot;&gt;CMS (&lt;em&gt;Content Management
System&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cncf.io&#x2F;&quot;&gt;CNCF (&lt;em&gt;Cloud Native Computing Foundation&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Central_processing_unit&quot;&gt;CPU (&lt;em&gt;Central Processing
Unit&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crm.org&#x2F;crmland&#x2F;what-is-a-crm&quot;&gt;CRM (&lt;em&gt;Customer Relationship
Management&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cascading_Style_Sheets&quot;&gt;CSS (&lt;em&gt;Cascading Style
Sheet&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Call_to_action_(marketing)&quot;&gt;CTA (&lt;em&gt;Call to
Action&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;C_(programming_language)&quot;&gt;C&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cache_(computing)&quot;&gt;Cache&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Churn_rate&quot;&gt;Churn Rate&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Source-code_editor&quot;&gt;Code Editor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;CommonJS&quot;&gt;CommonJS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;OS-level_virtualization&quot;&gt;Container&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Continuous_integration&quot;&gt;CI (&lt;em&gt;Continuous
Integration&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cookie&quot;&gt;Cookie&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Web_crawler&quot;&gt;Crawl&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Domain_Name_System&quot;&gt;DNS (&lt;em&gt;Domain Name System&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;List_of_DNS_record_types&quot;&gt;DNS Record Types&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dots_per_inch&quot;&gt;DPI (&lt;em&gt;Dots Per Inch&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Data_structure&quot;&gt;Data Structure&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Debugging&quot;&gt;Debugging&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Software_deployment&quot;&gt;Deployment&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Design&quot;&gt;Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;DevOps&quot;&gt;DevOps&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.docker.com&#x2F;&quot;&gt;Docker&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Domain_name&quot;&gt;Domain&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ECMAScript&quot;&gt;ECMAScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.erlang.org&#x2F;&quot;&gt;Erlang&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.dev&#x2F;first-meaningful-paint&#x2F;&quot;&gt;FMP (&lt;em&gt;First Meaningful Paint&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Functional_programming&quot;&gt;FP (&lt;em&gt;Functional
Programming&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;File_Transfer_Protocol&quot;&gt;FTP (&lt;em&gt;File Transfer
Protocol&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Function_as_a_service&quot;&gt;FaaS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Favicon&quot;&gt;Favicon&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Software_framework&quot;&gt;Framework&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Front_end_and_back_end&quot;&gt;Front End and Back End&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.blog&#x2F;2019&#x2F;10&#x2F;17&#x2F;imho-the-mythical-fullstack-engineer&#x2F;&quot;&gt;Full-Stack&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Graphical_user_interface&quot;&gt;GUI (&lt;em&gt;Graphical User
Interface&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;&quot;&gt;GitHub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;&quot;&gt;Git&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;&quot;&gt;Go&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;graphql.org&#x2F;&quot;&gt;GraphQL&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;&quot;&gt;Haskell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;HTML&quot;&gt;HTML (&lt;em&gt;Hypertext Markup Language&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Status&quot;&gt;HTTP Response Status Codes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&quot;&gt;HTTP (&lt;em&gt;Hypertext Transfer
Protocol&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;humanstxt.org&#x2F;&quot;&gt;humans.txt&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ionicframework.com&#x2F;resources&#x2F;articles&#x2F;what-is-hybrid-app-development&quot;&gt;Hybrid App&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hypervisor&quot;&gt;Hypervisor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Infrastructure_as_a_service&quot;&gt;IaaS (&lt;em&gt;Infrastructure as a
Service&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Inbound_marketing&quot;&gt;Inbound Marketing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Information_architecture&quot;&gt;Information Architecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Integration_testing&quot;&gt;Integration Testing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jamstack.org&#x2F;&quot;&gt;JAM Stack&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;JavaScript&#x2F;First_steps&#x2F;What_is_JavaScript&quot;&gt;JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;go.java&#x2F;&quot;&gt;Java&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Kaizen&quot;&gt;Kaizen&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Kanban_(development)&quot;&gt;Kanban&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;LAMP_(software_bundle)&quot;&gt;LAMP Stack&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Library_(computing)&quot;&gt;Library&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lisp_(programming_language)&quot;&gt;Lisp&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Window&#x2F;localStorage&quot;&gt;Local Storage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;MEAN_(solution_stack)&quot;&gt;MEAN Stack&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.educative.io&#x2F;edpresso&#x2F;what-is-mern-stack&quot;&gt;MERN Stack&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mock_object&quot;&gt;Mocking&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;mqtt.org&#x2F;&quot;&gt;MQTT (&lt;em&gt;Message Queue Telemetry Transport&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mean_time_to_repair&quot;&gt;MTTR (&lt;em&gt;Mean Time to
Repair&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Minimum_viable_product&quot;&gt;MVP (&lt;em&gt;Minimum Viable
Product&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Machine_learning&quot;&gt;Machine Learning&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Minification_(programming)&quot;&gt;Minification&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mobile_app&quot;&gt;Mobile App&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mockup#Software_engineering&quot;&gt;Mockup&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Modular_design&quot;&gt;Module&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Web_navigation&quot;&gt;Navigation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Not_invented_here&quot;&gt;NIH (&lt;em&gt;Not Invented Here&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;NoSQL&quot;&gt;NoSQL&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;&quot;&gt;Node.js&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Orchestration_(computing)&quot;&gt;Orchestration&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Object-oriented_programming&quot;&gt;OOP (&lt;em&gt;Object-Oriented
Programming&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Out_of_the_box_(feature)&quot;&gt;OOTB (&lt;em&gt;Out of the
Box&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;OSI_model&quot;&gt;OSI Model&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;owasp.org&#x2F;&quot;&gt;OWASP (&lt;em&gt;Open Web Application Security Project&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Operating_system&quot;&gt;Operating System&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Platform_as_a_service&quot;&gt;PaaS &lt;em&gt;_Platform as a
Service&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Plug-in_(computing)&quot;&gt;Plugin&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;pod&#x2F;&quot;&gt;Pod&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;flippedcoding&#x2F;difference-between-development-stage-and-production-d0p&quot;&gt;Production&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;protocol-buffers&quot;&gt;Protocol Buffers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Prototype&quot;&gt;Prototype&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;&quot;&gt;Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Random-access_memory&quot;&gt;RAM (&lt;em&gt;Random-Access
Memory&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Representational_state_transfer&quot;&gt;REST (&lt;em&gt;Representational State
Transfer&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;URL_redirection&quot;&gt;Redirect&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Registrar&quot;&gt;Registrar&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Image_resolution&quot;&gt;Resolution&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.smashingmagazine.com&#x2F;2011&#x2F;01&#x2F;guidelines-for-responsive-web-design&#x2F;&quot;&gt;Responsive Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Technology_roadmap&quot;&gt;Roadmap&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;support.google.com&#x2F;webmasters&#x2F;answer&#x2F;6062608&quot;&gt;robots.txt&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.ruby-lang.org&#x2F;en&#x2F;&quot;&gt;Ruby&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Simple_Mail_Transfer_Protocol&quot;&gt;SMTP (&lt;em&gt;Simple Mail Transfer
Protocol&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;SQL&quot;&gt;SQL (&lt;em&gt;Structured Query Language&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Solid-state_drive&quot;&gt;SSD (&lt;em&gt;Solid-State Drive&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Secure_Shell&quot;&gt;SSH (&lt;em&gt;Secure Shell&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Software_as_a_service&quot;&gt;SaaS (&lt;em&gt;Software as a
Service&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Scheme_(programming_language)&quot;&gt;Scheme&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Web_scraping&quot;&gt;Scrape&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Scrum_(software_development)&quot;&gt;Scrum&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Server_(computing)&quot;&gt;Server&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Separation_of_concerns&quot;&gt;Separation of Concerns&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thoughtbot.com&#x2F;blog&#x2F;a-closer-look-at-test-spies&quot;&gt;Spying&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Serverless_computing&quot;&gt;Serverless&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Window&#x2F;sessionStorage&quot;&gt;Session Storage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Site_map&quot;&gt;Sitemap&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Smalltalk&quot;&gt;Smalltalk&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Solution_stack&quot;&gt;Software Stack&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Version_control&quot;&gt;Source Control&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;SOLID&quot;&gt;SOLID&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.atlassian.com&#x2F;agile&#x2F;scrum&#x2F;sprints&quot;&gt;Sprint&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Test-driven_development&quot;&gt;TDD (&lt;em&gt;Test-Driven
Development&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Transport_Layer_Security&quot;&gt;TLS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Time_to_first_byte&quot;&gt;TTFB (&lt;em&gt;Time to First
Byte&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Tag_(metadata)&quot;&gt;Tags&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Web_template_system&quot;&gt;Template&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Test_stub&quot;&gt;Test Stub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Text_editor&quot;&gt;Text Editor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Acceptance_testing&quot;&gt;UAT (&lt;em&gt;User Acceptance
Testing&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;User_interface_design&quot;&gt;UI Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;User_interface&quot;&gt;UI (&lt;em&gt;User Interface&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;User_experience_design&quot;&gt;UX Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;User_experience&quot;&gt;UX (&lt;em&gt;User Experience&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unit_testing&quot;&gt;Unit Testing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.usability.gov&#x2F;how-to-and-tools&#x2F;methods&#x2F;usability-testing.html&quot;&gt;Usability Testing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;User_agent&quot;&gt;User Agent&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.interaction-design.org&#x2F;literature&#x2F;topics&#x2F;user-research&quot;&gt;User Research&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;WYSIWYG&quot;&gt;WYSIWYG (&lt;em&gt;What You See Is What You
Get&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Waterfall_model&quot;&gt;Waterfall&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Web_application&quot;&gt;Web App&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Graphical_widget&quot;&gt;Widget&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.usability.gov&#x2F;how-to-and-tools&#x2F;methods&#x2F;wireframing.html&quot;&gt;Wireframe&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;You_aren%27t_gonna_need_it&quot;&gt;YAGNI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Z_shell&quot;&gt;zsh&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ A Glossary of Mostly Developer-Related Things&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Learn Your JavaScript the Unconventional Way</title>
        <published>2021-11-27T00:00:00+00:00</published>
        <updated>2021-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/learn-javascript-the-unconventional-way/"/>
        <id>https://zerotohero.dev/roadmap/learn-javascript-the-unconventional-way/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/learn-javascript-the-unconventional-way/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;comfortable.png&quot; alt=&quot;Leave your comfort zone.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Leave your comfort zone.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;getting-your-feet-wet&quot;&gt;Getting Your Feet Wet&lt;&#x2F;h2&gt;
&lt;p&gt;Suppose you want a quick overview of &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; before diving into the real
deal. In that case, &lt;a href=&quot;https:&#x2F;&#x2F;bonsaiden.github.io&#x2F;JavaScript-Garden&#x2F;&quot;&gt;&lt;strong&gt;JavaScript Garden&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
is an oldie but goldie.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some other resources that you’ll find helpful too:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;javascript-allonge&#x2F;read&quot;&gt;&lt;strong&gt;JavaScript Allonge&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;eloquentjavascript.net&#x2F;&quot;&gt;&lt;strong&gt;Eloquent JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.smashingmagazine.com&#x2F;2012&#x2F;10&#x2F;designing-javascript-apis-usability&#x2F;&quot;&gt;Designing Usable &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; APIs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MostlyAdequate&#x2F;mostly-adequate-guide&quot;&gt;Mostly Adequate Guide to &lt;strong&gt;Functional&lt;&#x2F;strong&gt; Programming in &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Once you read the ones above, the following books can supplement your knowledge:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;exploringjs.com&#x2F;&quot;&gt;The “&lt;strong&gt;&lt;em&gt;Exploring JS&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” Series&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;148050.JavaScript&quot;&gt;JavaScript: The Definitive Guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;15812614-programming-javascript-applications&quot;&gt;Programming JavaScript Applications&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Along with these, here are a few additional resources for those who are just
getting started with &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&quot;&gt;MDN: &lt;strong&gt;Javascript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;htmldog.com&#x2F;guides&#x2F;javascript&#x2F;&quot;&gt;HTMLDog &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; Tutorials&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;javascript.info&#x2F;&quot;&gt;javascript.info&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.javascriptkit.com&#x2F;javatutors&#x2F;index.shtml&quot;&gt;&lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; Kit&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lukehoban&#x2F;es6features&quot;&gt;ES6 Features&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.adtile.me&#x2F;2014&#x2F;01&#x2F;16&#x2F;a-dive-into-plain-javascript&#x2F;&quot;&gt;A Dive Into Plain JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.jblotus.com&#x2F;2013&#x2F;01&#x2F;13&#x2F;common-javascript-gotchas&#x2F;&quot;&gt;Common &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; Gotchas&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;JavaScript&#x2F;Introduction&quot;&gt;WikiBooks: &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;digging-into-the-mildly-confusing&quot;&gt;Digging Into the Mildly-Confusing&lt;&#x2F;h2&gt;
&lt;p&gt;Here are a couple of “&lt;em&gt;relatively&lt;&#x2F;em&gt;” confusing parts of &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; that you&lt;br &#x2F;&gt;
might want to pay extra attention to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zeekat.nl&#x2F;articles&#x2F;constructors-considered-mildly-confusing.html&quot;&gt;Constructors Considered Mildly Confusing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;magazine&#x2F;ff852808.aspx&quot;&gt;Prototypes and Inheritance in &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;yehudakatz.com&#x2F;2011&#x2F;08&#x2F;12&#x2F;understanding-prototypes-in-javascript&#x2F;&quot;&gt;Understanding Prototypes in &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.jeremymartin.name&#x2F;2008&#x2F;03&#x2F;understanding-loose-typing-in.html&quot;&gt;Understanding Loose Typing in &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.kirupa.com&#x2F;html5&#x2F;a_deeper_look_at_objects_in_javascript.htm&quot;&gt;A Deeper Look at &lt;strong&gt;Objects&lt;&#x2F;strong&gt; in &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;yehudakatz.com&#x2F;2011&#x2F;08&#x2F;11&#x2F;understanding-javascript-function-invocation-and-this&#x2F;&quot;&gt;Understanding &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; Function Invocation and &lt;code&gt;this&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.adequatelygood.com&#x2F;JavaScript-Module-Pattern-In-Depth.html&quot;&gt;JavaScript &lt;strong&gt;Module&lt;&#x2F;strong&gt; Pattern In-Depth (&lt;em&gt;historical&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;2998152.JavaScript_The_Good_Parts&quot;&gt;&lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;: The Good Parts (&lt;em&gt;historical&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.dev&#x2F;promises&#x2F;&quot;&gt;JavaScript &lt;strong&gt;Promises&lt;&#x2F;strong&gt;: an Introduction&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.adequatelygood.com&#x2F;JavaScript-Scoping-and-Hoisting.html&quot;&gt;JavaScript &lt;strong&gt;Scoping&lt;&#x2F;strong&gt; and &lt;strong&gt;Hoisting&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.smashingmagazine.com&#x2F;2014&#x2F;01&#x2F;understanding-javascript-function-prototype-bind&#x2F;&quot;&gt;Understanding JavaScript &lt;code&gt;bind()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;promisesaplus.com&#x2F;&quot;&gt;&lt;strong&gt;Promise&lt;&#x2F;strong&gt; A+ Specification (&lt;em&gt;historical&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Promise&quot;&gt;&lt;strong&gt;Promise&lt;&#x2F;strong&gt; (&lt;em&gt;MDN&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;robotlolita.me&#x2F;2015&#x2F;11&#x2F;15&#x2F;how-do-promises-work.html&quot;&gt;How Do &lt;strong&gt;Promises&lt;&#x2F;strong&gt; Work&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;sporto.github.io&#x2F;blog&#x2F;2012&#x2F;12&#x2F;09&#x2F;callbacks-listeners-promises&#x2F;&quot;&gt;&lt;strong&gt;Callbacks&lt;&#x2F;strong&gt;, Listeners, and &lt;strong&gt;Promises&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;codeburst.io&#x2F;javascript-es-2017-learn-async-await-by-example-48acc58bad65&quot;&gt;Learn &lt;strong&gt;async&#x2F;await&lt;&#x2F;strong&gt; By Example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;javascript-inside&#x2F;generators-and-channels-in-javascript-594f2cf9c16e&quot;&gt;&lt;strong&gt;Generators&lt;&#x2F;strong&gt; and &lt;strong&gt;Channels&lt;&#x2F;strong&gt; in JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;2ality.com&#x2F;2017&#x2F;03&#x2F;csp-vs-async-generators.html&quot;&gt;&lt;strong&gt;Communicating Sequential Processess&lt;&#x2F;strong&gt; (CSP) in &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;lucasmreis.github.io&#x2F;blog&#x2F;quick-introduction-to-csp-in-javascript&#x2F;&quot;&gt;A Quick Introduction to &lt;strong&gt;CSP&lt;&#x2F;strong&gt; in JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Historical&lt;&#x2F;strong&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;The resources marked as “&lt;em&gt;historical”&lt;&#x2F;em&gt; might have outdated examples and
recommendations, so read them with a grain of salt. Though they still are worth
reading, don’t skip them.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;patterns-and-practices&quot;&gt;Patterns and Practices&lt;&#x2F;h2&gt;
&lt;p&gt;The more you practice, the more you establish your personal style. There are
also well-known and adopted JavaScript patterns and practices that are tailored
for specific use cases. The following resources can help you in those areas.
When you learn these best practices, you can adapt them to match your style and
make them yours:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;addyosmani.com&#x2F;resources&#x2F;essentialjsdesignpatterns&#x2F;book&#x2F;&quot;&gt;Learning JavaScript Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;7008656-high-performance-javascript&quot;&gt;High-Performance JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.smashingmagazine.com&#x2F;2012&#x2F;10&#x2F;designing-javascript-apis-usability&quot;&gt;How to Design Better &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; &lt;strong&gt;API&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;robotlolita.me&#x2F;articles&#x2F;2011&#x2F;understanding-javascript-oop&#x2F;&quot;&gt;Understanding Object-Oriented JavaScript (&lt;em&gt;historical&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;functions-and-functional-javascript&quot;&gt;Functions and Functional JavaScript&lt;&#x2F;h2&gt;
&lt;p&gt;Functional programming is not strictly related to JavaScript; however,
JavaScript is a better fit to be used along with Functional Programming
paradigms.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Learn Asynchronous JavaScript Well First&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Before diving deeper into &lt;strong&gt;functional&lt;&#x2F;strong&gt; &lt;strong&gt;programming&lt;&#x2F;strong&gt; with JavaScript, you
might want to get more comfortable with asynchronous flow control concepts,
including &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Statements&#x2F;async_function&quot;&gt;&lt;strong&gt;&lt;code&gt;async&#x2F;await&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
and &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Promise&quot;&gt;&lt;strong&gt;&lt;code&gt;Promise&lt;&#x2F;code&gt;s&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Along with those, diving further into &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Functional_programming&quot;&gt;&lt;strong&gt;Functional Programming&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
will change the way you look at the world—in a good way.&lt;&#x2F;p&gt;
&lt;p&gt;The current &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; programming scene is leaning more and more
towards [&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Functional_programming&quot;&gt;functional programming&lt;&#x2F;a&gt;,
so don’t be surprised if some of the functional paradigms that you see in the
libraries get merged into the language standards soon.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;How Do New Features Get Introduced Into JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When it comes to adopting new features into the language standards, that is
how it has been so far: If something gains enough popularity, it finds itself
in the next version of the language.&lt;&#x2F;p&gt;
&lt;p&gt;For example, first &lt;a href=&quot;http:&#x2F;&#x2F;bluebirdjs.com&#x2F;docs&#x2F;getting-started.html&quot;&gt;Bluebird&lt;&#x2F;a&gt;
and other libraries came up with a &lt;a href=&quot;https:&#x2F;&#x2F;promisesaplus.com&#x2F;&quot;&gt;&lt;strong&gt;Promise&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
implementation, and after its widespread
adoption, &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Promise&quot;&gt;the native &lt;code&gt;Promise&lt;&#x2F;code&gt; constructor&lt;&#x2F;a&gt;
got itself merged into the language.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Here are some resources to get you started you with &lt;strong&gt;Functional JavaScript&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Glossary&#x2F;First-class_Function&quot;&gt;First-class Function&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Closures&quot;&gt;&lt;strong&gt;Closures&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;benalman.com&#x2F;news&#x2F;2010&#x2F;11&#x2F;immediately-invoked-function-expression&#x2F;&quot;&gt;Immediately-Invoked Function Expression (&lt;em&gt;historical&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;javascript.info&#x2F;currying-partials&quot;&gt;&lt;strong&gt;Currying&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;benalman.com&#x2F;news&#x2F;2012&#x2F;09&#x2F;partial-application-in-javascript&#x2F;&quot;&gt;&lt;strong&gt;Partial Application&lt;&#x2F;strong&gt; in &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ramdajs.com&#x2F;&quot;&gt;Why &lt;strong&gt;Ramda&lt;&#x2F;strong&gt;?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;itnext.io&#x2F;a-beginners-guide-to-ramda-part-1-7e4a34972e97&quot;&gt;A Beginner’s Guide to &lt;strong&gt;Ramda&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.educative.io&#x2F;courses&#x2F;functional-programming-patterns-with-ramdajs&quot;&gt;Functional Programming Patterns With &lt;strong&gt;Ramda&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While at there, you might want to experiment with some of the functional
libraries out there to get a taste of how functional programming with JavaScript
feels like. &lt;a href=&quot;https:&#x2F;&#x2F;ramdajs.com&#x2F;&quot;&gt;&lt;strong&gt;Ramda&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveX&#x2F;rxjs&quot;&gt;&lt;strong&gt;RxJS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; are my favorites:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ramdajs.com&#x2F;&quot;&gt;Ramda&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveX&#x2F;rxjs&quot;&gt;RxJS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;folktale.origamitower.com&#x2F;&quot;&gt;FolkTale&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lodash.com&#x2F;&quot;&gt;LoDash&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cullophid&#x2F;barely-functional&quot;&gt;barely-functional&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;algesten&#x2F;fnuc&quot;&gt;fnuc&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fp-dom&#x2F;&quot;&gt;fp-dom&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;smartprocure&#x2F;futil-js&quot;&gt;futil&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;miketalbot&#x2F;js-coroutines&quot;&gt;js-coroutines&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Debdut&#x2F;omg-curry&quot;&gt;omg-curry&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cycle.js.org&#x2F;&quot;&gt;cycle.js&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dom-and-virtual-dom&quot;&gt;DOM and Virtual DOM&lt;&#x2F;h2&gt;
&lt;p&gt;Strictly speaking Virtual-DOM is not specific to &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;. And, in fact,
from a 50K feeet overview, it is merely an implementation of
the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Multiple_buffering&quot;&gt;double buffering technique&lt;&#x2F;a&gt;
that has been around since the dawn of time.&lt;&#x2F;p&gt;
&lt;p&gt;That being said, it’s so widespread that it will be helpful for you to learn
virtual dom along with dom. Here are some resources to get you started:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Document_Object_Model&#x2F;Introduction&quot;&gt;Introduction to DOM&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jbi.sh&#x2F;what-is-virtual-dom&#x2F;&quot;&gt;What is Virtual DOM&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;docs&#x2F;faq-internals.html&quot;&gt;Virtual DOM and React Internals&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;learn-your-timers&quot;&gt;Learn Your Timers&lt;&#x2F;h2&gt;
&lt;p&gt;Related to &lt;strong&gt;flow control&lt;&#x2F;strong&gt;, one concept that’s important and most do not pay&lt;br &#x2F;&gt;
enough attention is how the &lt;strong&gt;event loop&lt;&#x2F;strong&gt;, the &lt;strong&gt;main thread&lt;&#x2F;strong&gt;, the&lt;br &#x2F;&gt;
&lt;strong&gt;compositor thread&lt;&#x2F;strong&gt;, and various &lt;strong&gt;task queues&lt;&#x2F;strong&gt; and &lt;strong&gt;timers&lt;&#x2F;strong&gt; in&lt;br &#x2F;&gt;
&lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; runtimes work.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s, again, a list of study material to shed some light on it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jakearchibald.com&#x2F;2015&#x2F;tasks-microtasks-queues-and-schedules&#x2F;&quot;&gt;&lt;strong&gt;Tasks&lt;&#x2F;strong&gt;, &lt;strong&gt;Microtasks&lt;&#x2F;strong&gt;, Queues, and Schedules&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=8aGhZQkoFbQ&quot;&gt;What the Heck is &lt;strong&gt;Event Loop&lt;&#x2F;strong&gt; Anyway&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=cCOL7MC4Pl0&amp;amp;vl=en&quot;&gt;In the &lt;strong&gt;Loop&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;docs&#x2F;guides&#x2F;event-loop-timers-and-nexttick&#x2F;&quot;&gt;The &lt;strong&gt;Node.js&lt;&#x2F;strong&gt; Event Loops, &lt;strong&gt;Timers&lt;&#x2F;strong&gt;, and &lt;code&gt;process.nextTick&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jsblog.insiderattack.net&#x2F;timers-immediates-and-process-nexttick-nodejs-event-loop-part-2-2c53fd511bb3&quot;&gt;Timers, &lt;strong&gt;Immediates&lt;&#x2F;strong&gt;, and &lt;code&gt;process.nextTick&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;YuzuJS&#x2F;setImmediate&#x2F;blob&#x2F;master&#x2F;README.md&quot;&gt;&lt;code&gt;setImmediate&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=QyUFheng6J0&quot;&gt;JavaScript VM internals, &lt;strong&gt;EventLoop&lt;&#x2F;strong&gt;, &lt;strong&gt;Async&lt;&#x2F;strong&gt; and &lt;strong&gt;ScopeChain&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=8aGhZQkoFbQ&quot;&gt;What the Heck Is the &lt;strong&gt;Event Loop&lt;&#x2F;strong&gt; Anyway?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.zcfy.cc&#x2F;original&#x2F;how-node-event-loop-really-works-or-why-most-of-the-event-loop-diagrams-are-wrong-2544.html&quot;&gt;How Node &lt;strong&gt;Event Loop&lt;&#x2F;strong&gt; Really Works&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.html5rocks.com&#x2F;en&#x2F;tutorials&#x2F;speed&#x2F;animations&#x2F;&quot;&gt;Leaner Meaner Faster &lt;strong&gt;Animations&lt;&#x2F;strong&gt; with &lt;strong&gt;requestAnimationFrame&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.kirupa.com&#x2F;html5&#x2F;introduction_to_easing_in_javascript.htm&quot;&gt;Introduction to &lt;strong&gt;Easing&lt;&#x2F;strong&gt; in &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;learn-various-methods-of-communicating-with-the-server&quot;&gt;Learn Various Methods of Communicating With the Server&lt;&#x2F;h2&gt;
&lt;p&gt;If you are writing a web application, you’ll probably find yourself consuming
external resources and data streams. You’ll need to know various ways to
communicate with the remote endpoints. Here are a few articles and references
that can help you with that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;CORS&quot;&gt;Cross-Origin Resource Sharing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Fetch_API&quot;&gt;the Fetch API&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Window&#x2F;postMessage&quot;&gt;Web Messaging&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;WebSockets_API&quot;&gt;Web Sockets&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Server-sent_events&#x2F;Using_server-sent_events&quot;&gt;Server-Sent Events&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Server-sent_events&#x2F;Using_server-sent_events&quot;&gt;Web Workers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sendgrid.com&#x2F;blog&#x2F;whats-webhook&#x2F;&quot;&gt;What is a Webhook?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Beacon_API&quot;&gt;Beacon API&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;JSONP&quot;&gt;JSONP (&lt;em&gt;historical&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;bb735305.aspx&quot;&gt;Cross-Origin Communication with a Klein Bottle (&lt;em&gt;historical&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Historical&lt;&#x2F;strong&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;In this section, the techniques marked “&lt;em&gt;historical&lt;&#x2F;em&gt;” in this section
are—indeed— &lt;strong&gt;historical&lt;&#x2F;strong&gt;. &lt;strong&gt;Never&lt;&#x2F;strong&gt; resort to them unless there is no
other option because you are dealing with some legacy system.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;know-your-local-stores&quot;&gt;Know Your Local Stores&lt;&#x2F;h2&gt;
&lt;p&gt;Sooner or later, you are going to need to persist your data somewhere on the
client too. There are several options that you can try, each with its pros and
cons. Learn them, and understand which API, tool or technique is the best fit
for what types of scenarios.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a non-exhaustive list of client-side storage technologies:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;bb735305.aspx&quot;&gt;Cookies&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Window&#x2F;sessionStorage&quot;&gt;sessionStorage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Window&#x2F;localStorage&quot;&gt;localStorage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;IndexedDB_API&quot;&gt;indexedDB&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;progressive-web-apps&#x2F;&quot;&gt;Progressive Web Apps&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;fundamentals&#x2F;instant-and-offline&#x2F;web-storage&#x2F;offline-for-pwa&quot;&gt;Offline Storage for Progressive Web Apps&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are also storage API wrappers that can make your life easier.&lt;br &#x2F;&gt;
Here are a few of my selections—&lt;a href=&quot;https:&#x2F;&#x2F;pouchdb.com&#x2F;&quot;&gt;&lt;strong&gt;PouchDB&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is my
favorite, by the way:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pouchdb.com&#x2F;&quot;&gt;PouchDB&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;dexie.org&#x2F;&quot;&gt;Dexie&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;erikolson186&#x2F;zangodb&quot;&gt;ZangoDB&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;localforage.github.io&#x2F;localForage&#x2F;&quot;&gt;localForage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;jsstore.net&#x2F;&quot;&gt;JSStore&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;learn-a-javascript-type-system&quot;&gt;Learn a JavaScript Type System&lt;&#x2F;h2&gt;
&lt;p&gt;If it were a couple of years ago, I’d have said “&lt;em&gt;you can live without&lt;br &#x2F;&gt;
using a type system&lt;&#x2F;em&gt;”; however, the world is leaning towards a strongly-typed&lt;br &#x2F;&gt;
&lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; ecosystem, and it’s leaning towards that direction real fast. So,
better learn your types sooner than later.&lt;&#x2F;p&gt;
&lt;p&gt;Currently, &lt;strong&gt;TypeScript&lt;&#x2F;strong&gt; is the only mature type system that is widely adopted
and worth learning.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.typescriptlang.org&#x2F;&quot;&gt;TypeScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;flow.org&#x2F;&quot;&gt;FlowType&lt;&#x2F;a&gt; (&lt;em&gt;historical&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;meta-programming&quot;&gt;Meta Programming&lt;&#x2F;h2&gt;
&lt;p&gt;You’ll rarely find yourself in need to
use &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Reflective_programming&quot;&gt;reflection or meta programming&lt;&#x2F;a&gt;
in &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;. Even when you feel the urge to use reflection, think of a
cleaner way to code that does not involve reflection.
Remember: &lt;a href=&quot;https:&#x2F;&#x2F;dave.cheney.net&#x2F;2019&#x2F;07&#x2F;09&#x2F;clear-is-better-than-clever&quot;&gt;clear is better than clever&lt;&#x2F;a&gt;,
and &lt;strong&gt;reflection is never clear&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Reflect&quot;&gt;JavaScript Reflection API&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Proxy&quot;&gt;JavaScript Proxy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_objects&#x2F;Function&#x2F;bind&quot;&gt;&lt;code&gt;Function.prototype.bind&lt;&#x2F;code&gt; (&lt;em&gt;MDN&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_objects&#x2F;Function&#x2F;apply&quot;&gt;&lt;code&gt;Function.prototype.apply&lt;&#x2F;code&gt; (&lt;em&gt;MDN&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dialects-and-runtimes&quot;&gt;Dialects and Runtimes&lt;&#x2F;h2&gt;
&lt;p&gt;Here are several dialects and runtimes that you will likely encounter sooner or
later:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.typescriptlang.org&#x2F;index.html&quot;&gt;TypeScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nodejs.org&#x2F;&quot;&gt;Node&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;deno.land&#x2F;&quot;&gt;Deno&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I have mixed feelings about &lt;a href=&quot;https:&#x2F;&#x2F;deno.land&#x2F;&quot;&gt;&lt;strong&gt;Deno&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, and I still think
it’s in an experimental phase as of this writing, yet feel free to play with it
too. &lt;a href=&quot;https:&#x2F;&#x2F;nodejs.org&#x2F;&quot;&gt;&lt;strong&gt;Node&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is your choice if you want a battle-tested,
stable, and production-ready JavaScript runtime.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Want More Node? Keep on Reading&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
I’ll provide resources related to learning &lt;a href=&quot;https:&#x2F;&#x2F;nodejs.org&#x2F;&quot;&gt;&lt;strong&gt;Node&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
for the interested, in separate section near the end of this article.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;react-or-vue-or-angular-or-alpine-or-oh-my-exploding-head&quot;&gt;React, or Vue, or Angular, or Alpine, or… Oh my… 🤯&lt;&#x2F;h2&gt;
&lt;p&gt;Especially when you are new to &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; and Front-End development you have
this dilemma: “&lt;em&gt;shall I learn React, or Vue, or Ember, or Alpine, or jQuery…&lt;&#x2F;em&gt;”&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;confused.jpeg&quot; alt=&quot;Choosing a JavaScript framework can be confusing at times.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Choosing a JavaScript framework can be confusing at times.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Well, there is a very simple solution to this:&lt;&#x2F;p&gt;
&lt;p&gt;Choose one framework, and stick with it until you master it.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your preferences drive your choices.&lt;&#x2F;p&gt;
&lt;p&gt;But when you have two equally appealing choices (popcorn or pringles; Angular
or React, etc), your choices will create new neural pathways that
literally will define your preferences.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Learning a single JavaScript framework is often &lt;strong&gt;good enough&lt;&#x2F;strong&gt; because once you
learn one framework, it’s not so difficult to translate the underlying concepts
to the next.&lt;&#x2F;p&gt;
&lt;p&gt;There are a lot of web frameworks out there, and when it comes to picking one to
study most of the time you’ll find yourself choosing between
&lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;&quot;&gt;&lt;strong&gt;React&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;angular.io&#x2F;&quot;&gt;&lt;strong&gt;Angular&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Both &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;&quot;&gt;&lt;strong&gt;React&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;angular.io&#x2F;&quot;&gt;&lt;strong&gt;Angular&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
are useful tools that solve similar problems that have robust open-source
ecosystems behind them. So, learning either one will suffice.&lt;&#x2F;p&gt;
&lt;p&gt;However, if I were you, I’d pick &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;&quot;&gt;&lt;strong&gt;React&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, and only
after I master &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;&quot;&gt;&lt;strong&gt;React&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, would I look at &lt;a href=&quot;https:&#x2F;&#x2F;angular.io&#x2F;&quot;&gt;**Angular
**&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I have several reasons for that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;First and foremost, once you learn &lt;strong&gt;React&lt;&#x2F;strong&gt;, it’s easier to learn the
rest—The contrary is not always true.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;React&lt;&#x2F;strong&gt; treats &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; as a &lt;strong&gt;first-class citizen&lt;&#x2F;strong&gt;. That is not true
for many other frameworks.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;React&lt;&#x2F;strong&gt; is (&lt;em&gt;often&lt;&#x2F;em&gt;) &lt;strong&gt;not&lt;&#x2F;strong&gt; opinionated, you can bend it to your will.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;React&lt;&#x2F;strong&gt; is &lt;strong&gt;well-supported&lt;&#x2F;strong&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;docs&#x2F;getting-started.html&quot;&gt;&lt;strong&gt;well-documented&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;React&lt;&#x2F;strong&gt; is (&lt;em&gt;most of the time&lt;&#x2F;em&gt;) &lt;strong&gt;fool-proof&lt;&#x2F;strong&gt;. Unless you try hard to shoot
yourself in the foot, you can always create a React application that will
perform well.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Understanding Client-Side JavaScript Frameworks&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
If you want to drill down
deeper, &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;Tools_and_testing&#x2F;Client-side_JavaScript_frameworks&quot;&gt;MDN has a curated list of learning resources&lt;&#x2F;a&gt;
on various client-side libraries and frameworks.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;do-i-really-need-a-javascript-framework-anyway&quot;&gt;Do I Really Need a JavaScript Framework Anyway?&lt;&#x2F;h2&gt;
&lt;p&gt;Each framework comes with a &lt;strong&gt;performance baggage&lt;&#x2F;strong&gt;. Although it is very fast,
&lt;strong&gt;React&lt;&#x2F;strong&gt; is no exception: &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;docs&#x2F;faq-internals.html&quot;&gt;&lt;strong&gt;Virtual DOM&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
is fantastic; however, it is not free. The same is true for all the abstraction layers that &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;&quot;&gt;**React
**&lt;&#x2F;a&gt; provides over native
&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Document_Object_Model&quot;&gt;DOM&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;DocumentFragment&quot;&gt;Document fragment&lt;&#x2F;a&gt;
usage.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;strong&gt;very&lt;&#x2F;strong&gt; rare edge cases, you might find yourself opting out from using *
&lt;em&gt;React&lt;&#x2F;em&gt;* and &lt;strong&gt;Virtual DOM&lt;&#x2F;strong&gt; and managing your apps’ performance yourself by
using your own caching and DOM-manipulation strategies at a lower level
by &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Document_Object_Model&quot;&gt;using the &lt;strong&gt;DOM&lt;&#x2F;strong&gt; API&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;DocumentFragment&quot;&gt;Document fragments&lt;&#x2F;a&gt;
and all sorts of other clever tricks and black magic. I’ve been there; trust me,
&lt;strong&gt;it’s not as easy as it looks&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Using a framework eases that burden off of your shoulders, with a &lt;em&gt;slight&lt;&#x2F;em&gt;
(&lt;em&gt;often negligible&lt;&#x2F;em&gt;) performance cost. That said, especially when you are
developing a hybrid application to some low-end mobile devices, using a
framework might not be your best option: You might be better off writing a
well-optimized plain &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; from scratch instead. Yet, these are more
exceptions than the norm: 99% or the time &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;&quot;&gt;&lt;strong&gt;React&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
(&lt;em&gt;or any other front-end framework for that matter&lt;&#x2F;em&gt;) will be &lt;strong&gt;good enough&lt;&#x2F;strong&gt;
for your needs.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Why not Both?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You don’t have to take an all-or-nothing approach:&lt;br &#x2F;&gt;
With APIs
like &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;docs&#x2F;dom-elements.html#dangerouslysetinnerhtml&quot;&gt;&lt;code&gt;dangerouslySetInnerHTML()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;strong&gt;React&lt;&#x2F;strong&gt;, for example, can yield total control to your custom
framework-agnostic &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;, and let you optimize parts of the app using
plain &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Document_Object_Model&quot;&gt;&lt;strong&gt;DOM&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; as
you see fit.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;your-hard-work-will-pay-off&quot;&gt;Your Hard Work Will Pay Off&lt;&#x2F;h2&gt;
&lt;p&gt;When you consume all the content that I’ve shared so far, learning &lt;strong&gt;&lt;em&gt;any&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;
JavaScript framework will take a matter of &lt;strong&gt;days&lt;&#x2F;strong&gt; instead of weeks or months.&lt;&#x2F;p&gt;
&lt;p&gt;You’ll be able to see the similarities and differences between various
frameworks, understand them at the core architecture level. You will better
understand which framework is a better fit for what kinds of problems.&lt;&#x2F;p&gt;
&lt;p&gt;Trust me, it’s totally worth the opportunity cost of your time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-source-of-truth&quot;&gt;The Source of Truth&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;tc39.es&#x2F;ecma262&#x2F;&quot;&gt;ECMA-262 specification&lt;&#x2F;a&gt; contains the most
in-depth, detailed, and formalized information about &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;. It defines
the language. But being that formalized, it’s difficult to understand at first.
So if you need the most trustworthy source of information about the language
details, the specification is the right place. But it’s not for everyday use.&lt;&#x2F;p&gt;
&lt;p&gt;A new specification version is released every year. In-between these releases,
the latest specification draft is
at &lt;a href=&quot;https:&#x2F;&#x2F;tc39.es&#x2F;ecma262&quot;&gt;https:&#x2F;&#x2F;tc39.es&#x2F;ecma262&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To read about new bleeding-edge features, including those that are “almost
standard” (Stage 3), see proposals
at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tc39&#x2F;proposals&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;tc39&#x2F;proposals&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll give an unconventional recommendation again: After you trust yourself that
you’ve learned enough JavaScript to be dangerous at
least. &lt;a href=&quot;https:&#x2F;&#x2F;tc39.github.io&#x2F;ecma262&#x2F;&quot;&gt;read the JavaScript Language
Specification &lt;strong&gt;cover to cover&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll be honest with you: &lt;a href=&quot;https:&#x2F;&#x2F;tc39.github.io&#x2F;ecma262&#x2F;&quot;&gt;The &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; Language
Specification&lt;&#x2F;a&gt; is much harder to
read than, say, the &lt;a href=&quot;https:&#x2F;&#x2F;golang.org&#x2F;ref&#x2F;spec&quot;&gt;&lt;strong&gt;Go&lt;&#x2F;strong&gt; Language Specification&lt;&#x2F;a&gt;.
Honestly, it’s much duller to read than the &lt;strong&gt;Go&lt;&#x2F;strong&gt; Language Specification;
however, you will learn &lt;strong&gt;a lot&lt;&#x2F;strong&gt; by reading it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;blogs&quot;&gt;Blogs&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;scotch.io&#x2F;&quot;&gt;scotch.io&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;davidwalsh.name&#x2F;tutorials&#x2F;javascript&quot;&gt;David Walsh on JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;free-javascript-courses&quot;&gt;Free JavaScript Courses&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;search?query=javascript&quot;&gt;Coursera &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; Courses&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;channel9.msdn.com&#x2F;Series&#x2F;JavaScript-Fundamentals-Development-for-Absolute-Beginners&quot;&gt;Channel9: &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.udacity.com&#x2F;course&#x2F;intro-to-javascript--ud803&quot;&gt;Udacity: Introduction to &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.codecademy.com&#x2F;learn&#x2F;introduction-to-javascript&quot;&gt;Codecademy: Introduction to &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;teamtreehouse.com&#x2F;library&#x2F;javascript-basics&quot;&gt;TreeHouse: &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; Basics&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;youtube&quot;&gt;YouTube&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Sh6lK57Cuk4&amp;amp;list=PL0vfts4VzfNixzfaQWwDUg3W5TRbE7CyI&quot;&gt;The Weird History of &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=hdI2bqOjy3c&quot;&gt;&lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; Crash Course&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLZlA0Gpn_vH9k5ju1yq9qCDqvtuTVgTr6&quot;&gt;Introduction to &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLoYCgNOIyGACTDHuZtn0qoBdpzV9c327V&quot;&gt;&lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; Fundamentals&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLgBH1CvjOA636I8hnHSyuOnX341XQrBth&quot;&gt;&lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; Form Validation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLRpq_iSq4KCHV2hNst8Uu1cI-abPCXDyv&quot;&gt;Flavio: &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; Fundamentals&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLRD1Niz0lz1uR4W3ms6DygWMjXW-6hDB_&quot;&gt;&lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; Game Walkthroughs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=2nZiB1JItbY&amp;amp;list=PLDyQo7g0_nsX8_gZAB8KD1lL4j4halQBJ&quot;&gt;Getting Started With &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=iWOYAxlnaww&amp;amp;list=PL4cUxeGkcC9haFPT7J25Q9GRB_ZkFrQAc&quot;&gt;Modern JavaScript Tutorial&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=PkZNo7MFNFg&quot;&gt;&lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; in Three Hours&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;know-your-web-fundamentals&quot;&gt;Know Your Web Fundamentals&lt;&#x2F;h2&gt;
&lt;p&gt;You cannot separate the web, browsers, CSS from JavaScript. So once you get
comfortable with programming in JavaScript, you’ll inevitably need to dig into
web fundamentals. Here is a list of learning resources to get you started with
in that area.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;web-fundamentals-in-general&quot;&gt;Web Fundamentals In General&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.internetingishard.com&#x2F;&quot;&gt;Interneting Is Hard&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;Front-end_web_developer&quot;&gt;MDN: Front-End Developer Learning Path&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&quot;&gt;MDN: Web Technology for Developers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;&quot;&gt;GDN: Web Fundamentals&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;learn-your-html-like-a-pro&quot;&gt;Learn Your HTML Like a Pro&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;html.spec.whatwg.org&#x2F;&quot;&gt;HTML Spec&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&quot;&gt;MDN: HTML&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&quot;&gt;HyperText Markup Language&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;become-a-css-master&quot;&gt;Become a CSS Master&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;CSS&quot;&gt;MDN: Learn CSS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learn.shayhowe.com&#x2F;html-css&#x2F;&quot;&gt;Learn to Code HTML and CSS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;CSS&quot;&gt;Learn to Style HTML Using CSS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hicksdesign.co.uk&#x2F;boxmodel&#x2F;&quot;&gt;Box Model&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.smashingmagazine.com&#x2F;2007&#x2F;07&#x2F;css-specificity-things-you-should-know&#x2F;&quot;&gt;CSS Specificity: Things You Should Know&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;css-tricks.com&#x2F;snippets&#x2F;css&#x2F;a-guide-to-flexbox&#x2F;&quot;&gt;A Complete Guide to Flexbox&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learncssgrid.com&#x2F;&quot;&gt;Learn CSS Grid&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;CSS&#x2F;CSS_Animations&#x2F;Using_CSS_animations&quot;&gt;Using CSS Animations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;CSS&#x2F;CSS_Transitions&#x2F;Using_CSS_transitions&quot;&gt;Using CSS Transitions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cssguidelin.es&#x2F;&quot;&gt;CSS Guidelines&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;css-tricks.com&#x2F;&quot;&gt;CSS Tricks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;css-frameworks-tools-and-paradigms&quot;&gt;CSS Frameworks, Tools, and Paradigms&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;smacss.com&#x2F;&quot;&gt;Scalable and Modern Architecture for CSS&lt;&#x2F;a&gt; (&lt;em&gt;an oldie,
but still the best conceptual framework&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sass-lang.com&#x2F;&quot;&gt;Sass: Syntactically Awesome Stylesheets&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.styled-components.com&#x2F;&quot;&gt;Styled Components&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;getbem.com&#x2F;&quot;&gt;BEM&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tailwindcss.com&#x2F;&quot;&gt;Tailwind CSS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;acss.io&#x2F;&quot;&gt;Atomic CSS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;get-better-at-visualization&quot;&gt;Get Better at Visualization&lt;&#x2F;h3&gt;
&lt;p&gt;Again, sooner or later you’ll need to &lt;strong&gt;visualize&lt;&#x2F;strong&gt; things. That can be a&lt;br &#x2F;&gt;
simple dashboard, or a real-time histogram, or a time series data
visualization.&lt;br &#x2F;&gt;
Knowing of a couple of visualization libraries will be helpful.&lt;&#x2F;p&gt;
&lt;p&gt;Here are a few libraries that you can take a stab at:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;d3js.org&#x2F;&quot;&gt;d3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;snapsvg.io&#x2F;&quot;&gt;snapsvg&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;dmitrybaranovskiy.github.io&#x2F;raphael&#x2F;&quot;&gt;Raphaël&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;get-comfortable-with-developer-tools&quot;&gt;Get Comfortable with Developer Tools&lt;&#x2F;h2&gt;
&lt;p&gt;When it comes to web development, browser tooling is something that you
definitely need to get yourself familiar with. Here are a few pointers that can
help you in that area:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;Tools_and_testing&#x2F;Understanding_client-side_tools&quot;&gt;MDN: Understanding Client-Side Tools&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;tools&#x2F;chrome-devtools&#x2F;&quot;&gt;Chrome Developer Tools&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Tools&quot;&gt;Firefox Developer Tools&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;christianheilmann.com&#x2F;2021&#x2F;11&#x2F;01&#x2F;developer-tools-secrets-that-shouldnt-be-secrets&#x2F;&quot;&gt;Developer Tools Secrets that Shouldn’t Be Secrets&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Knowing your tools will help a &lt;strong&gt;great deal&lt;&#x2F;strong&gt; when you need to debug web user
interfaces and code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;know-your-bundlers&quot;&gt;Know Your Bundlers&lt;&#x2F;h2&gt;
&lt;p&gt;Related to developer tooling is bundlers and builders. The most popular ones
are &lt;a href=&quot;https:&#x2F;&#x2F;webpack.js.org&#x2F;&quot;&gt;&lt;strong&gt;Webpack&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;parceljs.org&#x2F;&quot;&gt;&lt;strong&gt;parcel&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;rollupjs.org&#x2F;guide&#x2F;en&quot;&gt;&lt;strong&gt;rollup&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;gulpjs.com&#x2F;&quot;&gt;&lt;strong&gt;gulp&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you are not sure where to start, I’d suggest you master &lt;a href=&quot;https:&#x2F;&#x2F;webpack.js.org&#x2F;&quot;&gt;&lt;strong&gt;Webpack&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
first, and take a stab at other tools later. But, regardless, all of these tools
serve more-or-less similar purposes (&lt;em&gt;with some variations in how you configure
them&lt;&#x2F;em&gt;); so once you know how one of them work conceptually, the others will
just make sense.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;browsers-and-performance-optimization&quot;&gt;Browsers And Performance Optimization&lt;&#x2F;h2&gt;
&lt;p&gt;This section is the last section, and there’s a reason for that. Performance
optimization is so tempting that once you get the poison, you’ll want to
optimize everything all the time.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2021&#x2F;11&#x2F;premature.jpeg&quot; alt=&quot;Premature optimization is the root of all evil.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There’s an old (&lt;em&gt;and quite correct&lt;&#x2F;em&gt;) saying about performance optimization:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The first rule of program optimization: Don’t do it. The second rule of
program optimization (&lt;em&gt;for experts only!&lt;&#x2F;em&gt;): Don’t do it &lt;strong&gt;yet&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There’s no need to prematurely &lt;strong&gt;optimize&lt;&#x2F;strong&gt; your code until you feel enough *
&lt;em&gt;pain&lt;&#x2F;em&gt;* to justify the cause.
Remember, &lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;everything-is-fast-for-small-n&#x2F;&quot;&gt;everything is fast for small n&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you don’t take my word for it, maybe you can listen
to &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Donald_Knuth&quot;&gt;Donald Knuth&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Programmers waste enormous amounts of time thinking about, or worrying about,
the speed of noncritical parts of their programs, and these attempts at
efficiency actually have a strong negative impact when debugging and maintenance
are considered. We should forget about small efficiencies, say about 97% of the
time: &lt;strong&gt;premature optimization is the root of all evil&lt;&#x2F;strong&gt;. Yet we should not pass
up our opportunities in that critical 3%.”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;One quick tip before giving performance pointers: &lt;strong&gt;Write code for humans to
read&lt;&#x2F;strong&gt;. When you need to choose between performance and readability, &lt;strong&gt;always
choose readability&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To quote it differently…&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Always code as if the guy who ends up maintaining your code will be a&lt;br &#x2F;&gt;
violent psychopath who knows where you live.”&lt;br &#x2F;&gt;
— &lt;a href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;forum&#x2F;#!msg&#x2F;comp.lang.c++&#x2F;rYCO5yn4lXw&#x2F;oITtSkZOtoUJ&quot;&gt;&lt;strong&gt;John Woods&lt;&#x2F;strong&gt;, Software Engineer, Google&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Those said, here are a few pointers to guide you through the dark alleys of
&lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; performance optimization:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;7008656.High_Performance_JavaScript&quot;&gt;High-Performance JavaScript&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;jankfree.org&#x2F;&quot;&gt;Jank Free&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=hAzhayTnhEI&quot;&gt;Jank Busters: Building Performant Web Apps&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.dev&#x2F;time-to-first-byte&#x2F;&quot;&gt;Time to First Byte&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.dev&#x2F;first-meaningful-paint&#x2F;&quot;&gt;First Meaningful Paint&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.dev&#x2F;extract-critical-css&#x2F;&quot;&gt;Extract Critical CSS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;speakerdeck.com&#x2F;addyosmani&#x2F;velocityconf-rendering-performance-case-studies&quot;&gt;Rendering Performance Case Studies&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;gent.ilcore.com&#x2F;2011&#x2F;03&#x2F;how-not-to-trigger-layout-in-webkit.html&quot;&gt;How not to Trigger a Layout in Webkit (&lt;em&gt;historical&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.smashingmagazine.com&#x2F;2012&#x2F;11&#x2F;writing-fast-memory-efficient-javascript&#x2F;&quot;&gt;How to Write Fast, Memory-Efficient JavaScript (&lt;em&gt;historical&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;blog&#x2F;uncategorized&#x2F;profiling-node-js&#x2F;&quot;&gt;Profiling Node.js&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;1911015&#x2F;how-do-i-debug-node-js-applications&#x2F;16512303#16512303&quot;&gt;Debugging and Profiling Node.js&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;help&#x2F;webstorm&#x2F;v8-cpu-and-memory-profiling.html&quot;&gt;v8 CPU and Memory Profiling&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.oreilly.com&#x2F;ideas&#x2F;top-nodejs-metrics-to-watch&quot;&gt;Top Node.js Metrics to Watch&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;3133219-performance-testing-guidance-for-web-applications&quot;&gt;Performance Testing Guidance for Web Applications&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;4843320-the-art-of-application-performance-testing&quot;&gt;The Art of Application Performance Testing: Help for Programmers and QA&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;4843320-the-art-of-application-performance-testing&quot;&gt;How Do You Load Test a Web Application&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;4843320-the-art-of-application-performance-testing&quot;&gt;Application Performance Testing Tutorial&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;4843320-the-art-of-application-performance-testing&quot;&gt;Software Performance Testing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCnUYZLuoy1rq1aVMwx4aTzw&quot;&gt;YouTube: Google Chrome Developers Channel&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While learning &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;, you’ll inevitably have to learn browser internals
to a certain extent. I believe this topic deserves a separate article on its own.
Yet, here are some resources to get you started if you want to dive into the
performance optimization rabbit hole:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mathiasbynens.be&#x2F;notes&#x2F;shapes-ics&quot;&gt;JavaScript Engine Fundamentals&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.html5rocks.com&#x2F;en&#x2F;tutorials&#x2F;internals&#x2F;howbrowserswork&#x2F;&quot;&gt;How Browsers Work: Behind the Scenes of Modern Web Browsers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;v8&#x2F;v8&#x2F;wiki&quot;&gt;v8 wiki&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hpbn.co&#x2F;&quot;&gt;High-Performance Browser Networking&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.smashingmagazine.com&#x2F;2012&#x2F;11&#x2F;writing-fast-memory-efficient-javascript&#x2F;&quot;&gt;How to Write Fast, Memory Efficient &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;danbev&#x2F;learning-v8&quot;&gt;Learning v8&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;codeburst.io&#x2F;node-js-v8-internals-an-illustrative-primer-83766e983bf6&quot;&gt;v8 internals: an Illustrative Primer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;richardartoul.github.io&#x2F;jekyll&#x2F;update&#x2F;2015&#x2F;04&#x2F;26&#x2F;hidden-classes.html&quot;&gt;Hidden Classes and Inline Caching in v8&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.ghaiklor.com&#x2F;optimizations-tricks-in-v8-d284b6c8b183&quot;&gt;Optimization Tricks in v8&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.html5rocks.com&#x2F;en&#x2F;tutorials&#x2F;speed&#x2F;v8&#x2F;&quot;&gt;Performance tips for JavaScript in v8&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.jayconrod.com&#x2F;posts&#x2F;51&#x2F;a-tour-of-v8-full-compiler&quot;&gt;A Tour of v8 Compiler&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thibaultlaurens.github.io&#x2F;javascript&#x2F;2013&#x2F;04&#x2F;29&#x2F;how-the-v8-engine-works&#x2F;&quot;&gt;How the v8 Engine Works&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The videos, books, links, and resources I shared here are by no means
conclusive. &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; in particular, and &lt;strong&gt;Front-End Development&lt;&#x2F;strong&gt; in
general, are vast and ever-growing fields. Again, I believe the material you
find here will be a good starting point for newcomers and refreshers for the
masters alike.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Learn JavaScript the Unconventional Way&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Master Your vim</title>
        <published>2021-11-27T00:00:00+00:00</published>
        <updated>2021-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/vim/"/>
        <id>https://zerotohero.dev/roadmap/vim/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/vim/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;vim.png&quot; alt=&quot;vim is powerful.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;vim is powerful.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.vim.org&#x2F;&quot;&gt;&lt;code&gt;vim&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is a highly configurable text editor built to make
creating and changing any kind of text very efficient. It is included as &lt;code&gt;vi&lt;&#x2F;code&gt;
with most UNIX systems and with Apple OS X. &lt;code&gt;vim&lt;&#x2F;code&gt; is famous for having a steep
learning curve. But if you ask me, learning vim is not much different than
learning touch typing. It all boils down to repetition, practice, and muscle
memory.&lt;&#x2F;p&gt;
&lt;p&gt;You don’t have to learn vim to be a developer; however, learning how to use vim
well will certainly make you a more productive developer. Besides, if you are a
developer, sooner or later, you’ll have to use &lt;code&gt;vim&lt;&#x2F;code&gt; in your career at least at
a bare minimum level. So the earlier you begin learning it, the better.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-do-i-learn-vim&quot;&gt;How Do I Learn &lt;code&gt;vim&lt;&#x2F;code&gt;?&lt;&#x2F;h2&gt;
&lt;p&gt;Here are a few resources that can help you speed up your &lt;code&gt;vim&lt;&#x2F;code&gt; learning:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.vimgenius.com&#x2F;&quot;&gt;Vim genius&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.openvim.com&#x2F;&quot;&gt;Open Vim&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;13607232-practical-vim&quot;&gt;Practical Vim: Edit Text at the Speed of Thought&lt;&#x2F;a&gt;
(&lt;em&gt;this one is one of the best books I’ve read about &lt;code&gt;vim&lt;&#x2F;code&gt;; and it, indeed,
is practical&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;2403747.Learning_the_vi_and_Vim_Editors&quot;&gt;Learning &lt;code&gt;vi&lt;&#x2F;code&gt; and &lt;code&gt;vim&lt;&#x2F;code&gt; Editors&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;However, the only way to learn &lt;code&gt;vim&lt;&#x2F;code&gt; is to &lt;strong&gt;actively&lt;&#x2F;strong&gt; use it. Luckily
enough, almost any code editor has a &lt;em&gt;vim emulation&lt;&#x2F;em&gt; mode or a &lt;em&gt;vim plugin&lt;&#x2F;em&gt; that
you can download and install.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Most IDEs Have a &lt;code&gt;vim&lt;&#x2F;code&gt; Emulation Mode&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
When you learn &lt;code&gt;vim&lt;&#x2F;code&gt;, you can use the vim mode in your favorite IDE of your
choice. Except for specific crazy macros, you could use it just like good
old &lt;code&gt;vim&lt;&#x2F;code&gt;—it’s not exactly the same thing, but for most practical purposes
it’ll be “close enough.”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If you use the “&lt;em&gt;vim mode&lt;&#x2F;em&gt;” in your editor of choice, then using &lt;code&gt;vim&lt;&#x2F;code&gt; on the
terminal will be second-nature to you.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;When you master &lt;code&gt;vim&lt;&#x2F;code&gt;, you’ll see that it will have a &lt;strong&gt;positive&lt;&#x2F;strong&gt; impact on
your development productivity.&lt;&#x2F;p&gt;
&lt;p&gt;Yes, &lt;code&gt;vim&lt;&#x2F;code&gt; is an editor that has one of the &lt;strong&gt;steepest&lt;&#x2F;strong&gt; learning curves; and
it’s &lt;strong&gt;worth&lt;&#x2F;strong&gt; your time to learn it. There are even people who claim “&lt;a href=&quot;https:&#x2F;&#x2F;robots.thoughtbot.com&#x2F;the-vim-learning-curve-is-a-myth&quot;&gt;&lt;em&gt;vim
learning curve is a myth&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;”, so
maybe it is not that hard after all 😉.&lt;&#x2F;p&gt;
&lt;p&gt;I hope you find the resources here useful in you &lt;code&gt;vim&lt;&#x2F;code&gt; learning journey.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Master Your Vim-Fu&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A Startup Founder&#x27;s Bedtime Reading List</title>
        <published>2021-11-26T00:00:00+00:00</published>
        <updated>2021-11-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/a-startup-founders-bedtime-reading-list/"/>
        <id>https://zerotohero.dev/roadmap/a-startup-founders-bedtime-reading-list/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/a-startup-founders-bedtime-reading-list/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot; alt=&quot;A Startup Founder’s Bedtime Reading List&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;journey-ship.png&quot; alt=&quot;It is a journey.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;It is a journey.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Founding a startup? Here is a hand-picked list of transformational books for
you.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll add more to the list if I bump into other interesting resources.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;22835624-the-art-of-the-start-2-0&quot;&gt;Art of the Start 2.0: The Time-Tested, Battle-Hardened Guide for Anyone
Starting Anything&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;6828896-delivering-happiness&quot;&gt;Delivering Happiness: A Path to Profits, Passion, and
Purpose&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;98233.Founders_at_Work&quot;&gt;Founders at Work: Stories of Startups’ Early
Days&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;76865.Good_to_Great&quot;&gt;Good to Great: Why Some Companies Make the Leap and Others
Don’t&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;4865.How_to_Win_Friends_and_Influence_People&quot;&gt;How To Win Friends and Influence
People&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;123684.Influence&quot;&gt;Influence: Science and Practice&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;641604.Purple_Cow&quot;&gt;Purple Cow: Transform Your Business by Being
Remarkable&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;69571.Rich_Dad_Poor_Dad&quot;&gt;Rich Dad Poor Dad: What the Rich Teach Their Kids About Money That the Poor
and Middle Class Do Not&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;27220736-shoe-dog&quot;&gt;Shoe Dog: A Memoir by the Creator of
Nike&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;7108725-start-with-wh&quot;&gt;Start with Why: How Great Leaders Inspire Everyone to Take
Action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;12605157-the-100-startup&quot;&gt;The $100 Startup: Reinvent the Way You Make a Living, Do What You Love, and
Create a New Future&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;368593.The_4_Hour_Workweek&quot;&gt;The 4-Hour Workweek: Escape 9-5, Live Anywhere, and Join the New
Rich&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;36072.The_7_Habits_of_Highly_Effective_People&quot;&gt;The 7 Habits of Highly Effective People: Powerful Lessons in Personal
Change&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;40742319-e-myth-revisited-drive-life-leverage-7-habits-of-highly-effective-peo&quot;&gt;The E-Myth Revisited: Why Most Small Businesses Don’t Work and What to Do
About It&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;18176747-the-hard-thing-about-hard-things&quot;&gt;The Hard Thing About Hard Things: Building a Business When There Are No Easy
Answers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;2615.The_Innovator_s_Dilemma&quot;&gt;The Innovator’s Dilemma: When New Technologies Cause Great Firms to Fail
(Management of Innovation and Change)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;10127019-the-lean-startup&quot;&gt;The Lean Startup: How Today’s Entrepreneurs Use Continuous Innovation to
Create Radically Successful Businesses&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;12609433-the-power-of-habit&quot;&gt;The Power of Habit: Why We Do What We Do in Life and
Business&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;30186948-think-and-grow-rich&quot;&gt;Think and Grow Rich: The Landmark Bestseller Now Revised and Updated for the
21st Century (Think and Grow Rich Series)&lt;&#x2F;a&gt;]&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;31823677-tools-of-titans&quot;&gt;Tools of Titans: The Tactics, Routines, and Habits of Billionaires, Icons,
and World-Class Performers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;22091581-traction&quot;&gt;Traction: How Any Startup Can Achieve Explosive Customer
Growth&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;18050143-zero-to-one&quot;&gt;Zero to One: Notes on Startups, or How to Build the
Future&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That’s all for now. Good luck with your startup.&lt;&#x2F;p&gt;
&lt;p&gt;And, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ A Startup Founder’s Bedtime Reading List&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Orange Is the New Purple</title>
        <published>2021-11-26T00:00:00+00:00</published>
        <updated>2021-11-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/color-theory/"/>
        <id>https://zerotohero.dev/roadmap/color-theory/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/color-theory/">&lt;p&gt;![Orange Is the New Purple](&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;colors.png&quot; alt=&quot;Colors.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Colors.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Here is a list of resources on &lt;strong&gt;color theory&lt;&#x2F;strong&gt; to help you reason about what
shade of purple goes well with what shade of orange 🙂—Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;drawpaintacademy.com&#x2F;a-comprehensive-guide-to-color-theory-for-artists&#x2F;&quot;&gt;A Comprehensive Guide To Color Theory For Artists&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.colormatters.com&#x2F;color-and-design&#x2F;basic-color-theory&quot;&gt;Basic Color Theory&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;designstudio.com&#x2F;color-theory-basics&#x2F;&quot;&gt;Color Theory: A Beginner’s Guide to the Basics&lt;&#x2F;a&gt;]&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ciechanow.ski&#x2F;lights-and-shadows&quot;&gt;Lights and Shadows&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.hubspot.com&#x2F;marketing&#x2F;color-theory-design&quot;&gt;The Designer’s Guide to Color Theory, Color Wheels, and Color Schemes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;99designs.com&#x2F;blog&#x2F;tips&#x2F;the-7-step-guide-to-understanding-color-theory&#x2F;&quot;&gt;The Fundamentals of Understanding Color Theory&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That’s all for now. I’ll occasionally visit this page to add more learning
resources.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Orange Is the New Purple&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Paint Me Like One of Your French Design Patterns</title>
        <published>2021-11-26T00:00:00+00:00</published>
        <updated>2021-11-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/design-patterns/"/>
        <id>https://zerotohero.dev/roadmap/design-patterns/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/design-patterns/">&lt;p&gt;![Paint Me Like One of Your French Design Patterns](&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;design-pattern.png&quot; alt=&quot;Using design patterns are half science, half art.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Using design patterns are half science, half art.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;The more you are in software engineering, the more you realize that similar
problems are repeated all the time. Moreover, those similar sets of issues are
often solved using similar approaches.&lt;&#x2F;p&gt;
&lt;p&gt;That’s where &lt;strong&gt;design patterns&lt;&#x2F;strong&gt; come in handy. A design pattern is a *
&lt;em&gt;repeatable&lt;&#x2F;em&gt;* solution to a commonly occurring software problem. You can
consider it as a “&lt;em&gt;blueprint&lt;&#x2F;em&gt;.” It is not a finished design; it’s more like a
template to solve a specific problem that can be used in many different
scenarios.&lt;&#x2F;p&gt;
&lt;p&gt;Design patterns can speed up the development process by providing tried and
tested paradigms. Using design patterns creates a &lt;strong&gt;common language.&lt;&#x2F;strong&gt; It makes
the code more readable and prevents subtle issues that might become visible much
later. It’ll be much harder to modify and refactor the code.&lt;&#x2F;p&gt;
&lt;p&gt;We can split design patterns into three categories:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Creational design patterns,&lt;&#x2F;li&gt;
&lt;li&gt;Structural design patterns,&lt;&#x2F;li&gt;
&lt;li&gt;And behavioral design pattern.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This article summarizes the most commonly used design patterns, with links that
discuss each pattern more deeply.&lt;&#x2F;p&gt;
&lt;p&gt;So, without further ado, let’s dig in.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creational-design-patterns&quot;&gt;Creational Design Patterns&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Abstract_factory_pattern&quot;&gt;Abstract Factory&lt;&#x2F;a&gt;:
Create instances of several kinds of objects.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Builder_pattern&quot;&gt;Builder&lt;&#x2F;a&gt;: You have a common
source of truth, and you want different representations of it.&lt;&#x2F;li&gt;
&lt;li&gt;[Factory Method]((https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Factory_method_pattern): A (
&lt;em&gt;mostly&lt;&#x2F;em&gt;) static method to let a class defer the instantiation to subclasses.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Object_pool_pattern&quot;&gt;Object Pool&lt;&#x2F;a&gt;: Avoid
expensive object initialization by maintaining a pool of reusable objects.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Prototype_pattern&quot;&gt;Prototype&lt;&#x2F;a&gt;: A fully
initialized instance that can be cloned elsewhere.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Singleton_pattern&quot;&gt;Singleton&lt;&#x2F;a&gt;: A class that
only has a single instance.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;structural-design-patterns&quot;&gt;Structural Design Patterns&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Adapter_pattern&quot;&gt;Adapter&lt;&#x2F;a&gt;: Convert an interface
into another interface that the client expects.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bridge_pattern&quot;&gt;Bridge&lt;&#x2F;a&gt;: Segregate interfaces
from their implementations.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Composite_pattern&quot;&gt;Composite&lt;&#x2F;a&gt;: A glorified tree
structure of objects.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Decorator_pattern&quot;&gt;Decorator&lt;&#x2F;a&gt;: Monkey-patch
additional responsibilities to an object.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Facade_pattern&quot;&gt;Façade&lt;&#x2F;a&gt;: There’s a mess behind
the doors, but the building looks beautiful.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Flyweight_pattern&quot;&gt;Flyweight&lt;&#x2F;a&gt;: Share as much
common data as possible to reduce the memory footprints of instantiated
objects.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Proxy_pattern&quot;&gt;Proxy&lt;&#x2F;a&gt;: An object acting on
behalf of another object.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;behavioral-design-patterns&quot;&gt;Behavioral Design Patterns&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Chain-of-responsibility_pattern&quot;&gt;Chain of Responsibility&lt;&#x2F;a&gt;:
A way to pass the request between a pipeline of middlewares.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Command%E2%80%93query_separation&quot;&gt;Command-Query Separation Principle&lt;&#x2F;a&gt;:
Things that modify state and things that query state should be isolated.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Command_pattern&quot;&gt;Command&lt;&#x2F;a&gt;): Encapsulate a
request and its parameters and context to be run later.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Iterator_pattern&quot;&gt;Iterator&lt;&#x2F;a&gt;: Access a list of
items sequentially without exposing their underlying representations.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mediator_pattern&quot;&gt;Mediator&lt;&#x2F;a&gt;: The best analogy
is planes talking to the control tower (&lt;em&gt;the mediator&lt;&#x2F;em&gt;) instead of talking to
each other, thus reducing exponentially-increasing communication overhead.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Memento_pattern&quot;&gt;Memento&lt;&#x2F;a&gt;: Capture an object’s
internal state so that it can be re-initialized later, faster.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Null_object_pattern&quot;&gt;Null Object&lt;&#x2F;a&gt;: Provide a
helpful default value of an object.
The &lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;&quot;&gt;go programming language&lt;&#x2F;a&gt; leaves and breathes by this.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Observer_pattern&quot;&gt;Observer&lt;&#x2F;a&gt;: When one object
changes state, all of the interested objects get notified.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;State_pattern&quot;&gt;State&lt;&#x2F;a&gt;: A &lt;strong&gt;state machine&lt;&#x2F;strong&gt;; the
object’s behavior changes (&lt;em&gt;as if its type has changed&lt;&#x2F;em&gt;) when its state
changes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Strategy_pattern&quot;&gt;Strategy&lt;&#x2F;a&gt;: Define a family of
algorithms and make them interchangeable.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Template_method_pattern&quot;&gt;Template Method&lt;&#x2F;a&gt;:
Delegate how the method is implemented to the subclass of an object.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Visitor_pattern&quot;&gt;Visitor&lt;&#x2F;a&gt;: Represent an
operation to be performed on the elements of a graph of objects.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;One thing to keep in mind is that design patterns are just &lt;strong&gt;guidelines&lt;&#x2F;strong&gt;. They
are rules that are set in stone to follow religiously. So the more you use them,
the more you’ll realize when it makes to deviate from them.&lt;&#x2F;p&gt;
&lt;p&gt;In addition, not every problem has an exactly matching design pattern.
Similarly, not every situation needs to be solved with a design pattern. When in
doubt, keep things simple.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;11&amp;#x2F;guidelines.jpeg&quot; alt=&quot;Design patterns are what you&amp;#x27;d call &amp;#x27;guidelines&amp;#x27; than actual &amp;#x27;rules.&amp;#x27;&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Design patterns are what you&amp;#x27;d call &amp;#x27;guidelines&amp;#x27; than actual &amp;#x27;rules.&amp;#x27;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;One last thing: People, especially when learning design patterns for the first
time, don’t consider the tradeoffs of using a certain pattern. Each design
pattern comes with its benefits and liabilities. And it’s up to you as the
software engineer to use your experience and judgement to decide what to use
when.&lt;&#x2F;p&gt;
&lt;p&gt;That being said, that’s all there is about common software design patterns.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Paint Me Like One of Your French Design Patterns&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tame Your Regular Expressions</title>
        <published>2021-11-26T00:00:00+00:00</published>
        <updated>2021-11-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/regexp/"/>
        <id>https://zerotohero.dev/roadmap/regexp/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/regexp/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;cat.png&quot; alt=&quot;Tame Your Regular Expressions&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;cat.png&quot; alt=&quot;The fastest way to create a regular expression is to find a cat first.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The fastest way to create a regular expression is to find a cat first.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Here are some learning resources and tools that will untangle that nasty
regular expression for you.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;regular-expression-books&quot;&gt;Regular Expression Books&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;6125777-regular-expressions-cookbook&quot;&gt;Regular Expressions Cookbook&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;583628.Mastering_Regular_Expressions&quot;&gt;Mastering Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;13285877-introducing-regular-expressions&quot;&gt;Introducing Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;354485.sed_and_awk_Pocket_Reference&quot;&gt;&lt;code&gt;sed&lt;&#x2F;code&gt; and &lt;code&gt;awk&lt;&#x2F;code&gt; Pocket Reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;regular-expression-toolbox&quot;&gt;Regular Expression Toolbox&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.regexbuddy.com&#x2F;&quot;&gt;RegexBuddy&lt;&#x2F;a&gt; (&lt;em&gt;my favorite RegExp tool on Windows&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;regexr.com&#x2F;&quot;&gt;Regexr&lt;&#x2F;a&gt; (&lt;em&gt;my favorite web-based RegExp editor&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.debuggex.com&#x2F;&quot;&gt;Debuggex&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ihateregex.io&#x2F;&quot;&gt;I Hate Regex&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;extendsclass.com&#x2F;regex-tester.html&quot;&gt;Regex Tester&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;leaverou.github.io&#x2F;regexplained&#x2F;&quot;&gt;Regexplained&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;scriptular.com&#x2F;&quot;&gt;Scriptular&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That’s all for now. I’ll update the list if I bump into new tools or learning
resources.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Tame Your Regular Expressions&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Security Is Not Optional</title>
        <published>2021-11-26T00:00:00+00:00</published>
        <updated>2021-11-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/security/"/>
        <id>https://zerotohero.dev/roadmap/security/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/security/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;securu.png&quot; alt=&quot;Security Is Not Optional&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;securu.png&quot; alt=&quot;All your base are belong to us.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;All your base are belong to us.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;No matter what you develop, application security, infrastructure security, and
having proper authorization and authentication mechanisms are critical. The
earlier you learn about them in your development career, the better. In
addition, you should keep an eye on the latest public vulnerabilities and
exploits to harden your apps and infrastructure.&lt;&#x2F;p&gt;
&lt;p&gt;Without adequately securing your apps and hardening the infrastructure that your
apps are running on, you risk having vulnerabilities that will be exploited
within a few minutes, if not seconds, as soon as your app is publicly available.&lt;&#x2F;p&gt;
&lt;p&gt;Here, you’ll find some bedtime reading to help you dive into the security rabbit
hole.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;security-fundamentals&quot;&gt;Security Fundamentals&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;articles&#x2F;web-security-basics.html&quot;&gt;Web Security Basics&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Web_application_security&quot;&gt;Web Application Security&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;articles&#x2F;web-security-basics.html&quot;&gt;The Basics of Web Application Security&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;books-to-read&quot;&gt;Books To Read&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;48816583-container-security&quot;&gt;Container Security: Fundamental Technology Concepts That Protect Containerized Applications&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;11553604-the-tangled-web&quot;&gt;The Tangled Web: A Guide to Securing Web Applications&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;authentication-schemes&quot;&gt;Authentication Schemes&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Authentication&quot;&gt;HTTP Authentication&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.iana.org&#x2F;assignments&#x2F;http-authschemes&#x2F;http-authschemes.xhtml&quot;&gt;HTTP Security Auth Schemes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Security_Assertion_Markup_Language&quot;&gt;SAML&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jwt.io&#x2F;introduction&#x2F;&quot;&gt;Introduction to JSON Web Tokens&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.digitalocean.com&#x2F;community&#x2F;tutorials&#x2F;an-introduction-to-oauth-2&quot;&gt;An Introduction to OAuth 2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;openid.net&#x2F;connect&#x2F;&quot;&gt;OpenID Connect&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;swagger.io&#x2F;docs&#x2F;specification&#x2F;authentication&#x2F;&quot;&gt;Swagger Authentication&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;common-vulnerabilities&quot;&gt;Common Vulnerabilities&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cwe.mitre.org&#x2F;&quot;&gt;CVE: Common Vulnerability Enumeration&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cwe.mitre.org&#x2F;&quot;&gt;CWE: Common Weakness Enumeration&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;checklists-and-best-practices&quot;&gt;Checklists and Best Practices&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eoftedal&#x2F;writings&#x2F;blob&#x2F;master&#x2F;published&#x2F;javascript-security-cheat-sheet.md&quot;&gt;Single Page Web Application Security Cheat Sheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;owasp.org&#x2F;www-project-top-ten&#x2F;&quot;&gt;OWASP Top Ten&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.owasp.org&#x2F;index.php&#x2F;Authentication_Cheat_Sheet&quot;&gt;OWASP Authentication Cheat Sheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.owasp.org&#x2F;index.php&#x2F;Session_Management_Cheat_Sheet&quot;&gt;OWASP Session Management Cheat Sheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cheatsheetseries.owasp.org&#x2F;cheatsheets&#x2F;Authentication_Cheat_Sheet.html&quot;&gt;HTTP Authentication Cheat Sheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cheatsheetseries.owasp.org&#x2F;cheatsheets&#x2F;Session_Management_Cheat_Sheet.html&quot;&gt;Session Management Cheat Sheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.teamtreehouse.com&#x2F;how-to-create-bulletproof-sessions&quot;&gt;How to Create Bulletproof Sessions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;&#x2F;strong&gt;, &lt;strong&gt;authentication&lt;&#x2F;strong&gt;, &lt;strong&gt;authorization&lt;&#x2F;strong&gt;, and &lt;strong&gt;identity federation&lt;&#x2F;strong&gt;
are vast subjects. This article provided you with some links and pointers that
you might want to read to drill down further; however, it’s by no means a
definitive list. That said, after consuming the material here, you’ll have
adequate knowledge to do your research and build upon what you have learned
here.&lt;&#x2F;p&gt;
&lt;p&gt;That’s all for now. I’ll update this page and add more to the list as I see more
tools, resources, and techniques.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Security Is Not Optional&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Get Better at Typography</title>
        <published>2021-11-26T00:00:00+00:00</published>
        <updated>2021-11-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/typography/"/>
        <id>https://zerotohero.dev/roadmap/typography/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/typography/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;typo.png&quot; alt=&quot;Get Better at Typography&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;typo.png&quot; alt=&quot;Types are beautiful.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Types are beautiful.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Content matters a lot, but so does the medium the content is conveyed withing.
Understanding how type, rhythm, line height, case, capitalization, character,
etc. come together will help communicate your message much effectively.&lt;&#x2F;p&gt;
&lt;p&gt;In a sense, typography is one of the best hidden skills that you can have.&lt;&#x2F;p&gt;
&lt;p&gt;To help you master your typography, here’s a hand-curated non-exhaustive list of
typography books, resources, and learning material:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.8faces.com&#x2F;&quot;&gt;8Faces Blog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.canva.com&#x2F;learn&#x2F;typography-guide&#x2F;&quot;&gt;Canva’s Typography Guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;28600.Designing_with_Type&quot;&gt;Designing with Type&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;2318174.Detail_In_Typography&quot;&gt;Detail in Typography&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;119197.Digital_Typography&quot;&gt;Digital Typography&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;abookapart.com&#x2F;products&#x2F;flexible-typesetting&quot;&gt;Flexibly Typesetting&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fonts.com&#x2F;content&#x2F;learning&#x2F;fontology&quot;&gt;Fontology&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ilovetypography.com&#x2F;&quot;&gt;I Love Typography&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;15772292-inside-paragraphs&quot;&gt;Inside Paragraphs Typographic Fundamentals&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;2318174.Detail_In_Typography&quot;&gt;Jost Hochuli: Detail In Typography&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thefutur.com&#x2F;blog&#x2F;learn-typography&quot;&gt;Learn Type&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;typography&#x2F;&quot;&gt;Microsoft Typography&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;13608106-on-web-typograph&quot;&gt;On Web Typography&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;practicaltypography.com&#x2F;&quot;&gt;Practical Typgoraphy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;prowebtype.com&#x2F;&quot;&gt;Pro Web Type&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;17573647-shady-characters&quot;&gt;Shady Characters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;378165.Stop_Stealing_Sheep_Find_Out_How_Type_Works&quot;&gt;Stop Stealing Sheep &amp;amp; Find Out How Type Works&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.tdc.org&#x2F;&quot;&gt;TDC&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;13623981-the-anatomy-of-type&quot;&gt;The Anatomy of Type&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;44735.The_Elements_of_Typographic_Style&quot;&gt;The Elements of Typographic Style&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;History_of_Western_typography&quot;&gt;The History of Western Typography&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;26095079-the-triumph-of-typography&quot;&gt;The Triumph of Typography: Culture. Communication. New Media&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.canva.com&#x2F;learn&#x2F;the-ultimate-guide-to-font-pairing&#x2F;&quot;&gt;The Ultimate Guide to Font Pairing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;33785427-the-visual-history-of-type&quot;&gt;The Visual History of Type: A visual survey of 320 typefaces&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;38818935-theory-of-type-design&quot;&gt;Theory of Type Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;69736.Thinking_with_Type&quot;&gt;Thinking with Type&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.typesociety.org&#x2F;&quot;&gt;Type Society&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;typedia.com&#x2F;&quot;&gt;Typedia&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.typogui.de&#x2F;&quot;&gt;TypoGUI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.typography.com&#x2F;blog&#x2F;typographic-doubletakes&quot;&gt;Typographic Doubletakes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;99designs.co.uk&#x2F;blog&#x2F;tips&#x2F;typographic-hierarchy-web-design&#x2F;&quot;&gt;Typographic Hierarchy of Web Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;typographica.org&#x2F;&quot;&gt;Typographica&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;typography.guru&#x2F;&quot;&gt;Typography Guru&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;typographyhandbook.com&#x2F;&quot;&gt;Typography Handbook&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;variablefonts.io&#x2F;&quot;&gt;Variable Types&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;book.webtypography.net&#x2F;&quot;&gt;Web Typography Book&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.atypi.org&#x2F;&quot;&gt;aTypi&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That’s all for now. I hope these resources give you some insight into the
wonderful world of typography. I’ll add more to the list if I bump into new
material.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Get Better at Typography&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>You Need Testing</title>
        <published>2021-11-26T00:00:00+00:00</published>
        <updated>2021-11-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/you-need-testing/"/>
        <id>https://zerotohero.dev/roadmap/you-need-testing/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/you-need-testing/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;testing.png&quot; alt=&quot;Test all the thingz!&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Test all the thingz!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;testing-is-not-about-the-tools&quot;&gt;Testing is &lt;strong&gt;not&lt;&#x2F;strong&gt; About the Tools&lt;&#x2F;h2&gt;
&lt;p&gt;Yes, there are frameworks
like &lt;a href=&quot;https:&#x2F;&#x2F;jestjs.io&#x2F;&quot;&gt;Jest&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;mochajs.org&#x2F;&quot;&gt;Mocha&lt;&#x2F;a&gt;,
and &lt;a href=&quot;https:&#x2F;&#x2F;jasmine.github.io&#x2F;&quot;&gt;Jasmine&lt;&#x2F;a&gt;. There are even test runners
like &lt;a href=&quot;https:&#x2F;&#x2F;karma-runner.github.io&#x2F;2.0&#x2F;index.html&quot;&gt;Karma&lt;&#x2F;a&gt;; however, without
proper &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Behavior-driven_development&quot;&gt;Behavior-Driven Development&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Test-driven_development&quot;&gt;Test Driven Development&lt;&#x2F;a&gt;
foundation, you will not benefit from those tools.&lt;&#x2F;p&gt;
&lt;p&gt;Testing is all about the mindset.&lt;&#x2F;p&gt;
&lt;p&gt;At the very least, you’ll need to understand the terminology
like &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unit_testing&quot;&gt;unit tests&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Test_stub&quot;&gt;stubs&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;12827580&#x2F;mocking-vs-spying-in-mocking-frameworks&quot;&gt;spies&lt;&#x2F;a&gt;,
and more important than that, you’ll have to figure out &lt;strong&gt;why&lt;&#x2F;strong&gt; &lt;em&gt;you need
testing (“unit testing”—see what I did there?&lt;&#x2F;em&gt;) and &lt;strong&gt;how&lt;&#x2F;strong&gt; to implement
various testing strategies.&lt;&#x2F;p&gt;
&lt;p&gt;There are several different testing types and strategies that you need to be
aware of as well. For starters, you might want to learn
about &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unit_testing&quot;&gt;unit tests&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Integration_testing&quot;&gt;integration tests&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Functional_testing&quot;&gt;functional tests&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Acceptance_testing&quot;&gt;acceptance tests&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Software_performance_testing&quot;&gt;performance tests&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Smoke_testing_(software)&quot;&gt;smoke tests&lt;&#x2F;a&gt;,
and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Exploratory_testing&quot;&gt;exploratory testing&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-much-testing-is-enough-testing&quot;&gt;How Much Testing is Enough Testing?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;How much&lt;&#x2F;strong&gt; testing is &lt;strong&gt;enough&lt;&#x2F;strong&gt; testing?&lt;&#x2F;p&gt;
&lt;p&gt;That’s an important question too. The answer to it depends on your situation:&lt;&#x2F;p&gt;
&lt;p&gt;For instance, if you are a startup, rapidly prototyping at an insane cadence,
writing tests may (&lt;em&gt;“&lt;strong&gt;may&lt;&#x2F;strong&gt;” is the keyword here&lt;&#x2F;em&gt;) be counter-productive.&lt;&#x2F;p&gt;
&lt;p&gt;Per contra, if you are a well-established organization with remotely
collaborating teams and business units, or if you are open-sourcing a library,
then &lt;em&gt;not&lt;&#x2F;em&gt; writing tests will be equivalent to being back-kicked by a donkey in
the guts—not fun!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;learning-resources&quot;&gt;Learning Resources&lt;&#x2F;h2&gt;
&lt;p&gt;Here are some reference materials that can help in your journey:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;387190.Test_Driven_Development&quot;&gt;Test-Driven Development By Example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;17165516-javascript-testing-with-jasmine&quot;&gt;JavaScript Testing with Jasmine: JavaScript Behavior-Driven Development&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.uxebu.com&#x2F;blog&#x2F;2013&#x2F;01&#x2F;08&#x2F;make-tests-read-like-a-book&#x2F;&quot;&gt;Make Tests Read Like a Book&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;3133219-performance-testing-guidance-for-web-applications&quot;&gt;Performance Testing Guidance for Web Applications&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;20578311-bdd-in-action&quot;&gt;BDD in Action: Behavior-Driven Development for the Whole Software Lifecycle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This article provided you with some bedtime reading material on test-driven
development.&lt;&#x2F;p&gt;
&lt;p&gt;Testing is a vast field, and there is a lot to explore. Hence, the resources
here are by no means a definitive list. Instead, they are hand-curated for you
as a &lt;strong&gt;starting point&lt;&#x2F;strong&gt; to build a solid testing &lt;strong&gt;foundation&lt;&#x2F;strong&gt; and &lt;strong&gt;mindset&lt;&#x2F;strong&gt;.
Once you consume them, you’ll have a much better understanding of where to go
next.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ You Need Testing&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Knowing JavaScript Is Not Good Enough</title>
        <published>2021-11-21T00:00:00+00:00</published>
        <updated>2021-11-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/knowing-javascript-is-not-good-enough/"/>
        <id>https://zerotohero.dev/roadmap/knowing-javascript-is-not-good-enough/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/knowing-javascript-is-not-good-enough/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;Volkan_zelik_the_most_buoyant_girl_in_the_known_universe_c92b2c3b-d6d5-4142-8b1b-7dcafcf07e14.png&quot; alt=&quot;Elevate yourself beyond.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Elevate yourself beyond.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;expand-your-vision&quot;&gt;Expand Your Vision&lt;&#x2F;h2&gt;
&lt;p&gt;Especially on social media, I see and read this preached a lot:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Learn JavaScript, and you won’t need to learn anything else; you can do
everything with JavaScript, from front-end to back-end, to AI&#x2F;ML, to game
development… It is the best investment you’ll ever make!”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That’s a codswallop! Complete and utter 🐴💩.&lt;&#x2F;p&gt;
&lt;p&gt;Don’t believe me? Check the profiles of these preaches. You’ll see that they are
highly likely selling a JavaScript course, book, newsletter, or something along
those lines. However, be aware that that advice is targeted more towards the
preacher’s benefit rather than yours.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;learning-javascript-is-a-great-starting-point&quot;&gt;Learning JavaScript is a Great Starting Point&lt;&#x2F;h2&gt;
&lt;p&gt;And if you want to stay there for the rest of your career, that’s totally okay.
Just do this knowingly. Do it because you know that it is the right decision for
you. Don’t do that because some figure with many followers on social media told
you you should do it.&lt;&#x2F;p&gt;
&lt;p&gt;Yes, learning JavaScript and related front-end technologies will take you
places. But that will only take you so far. It is okay, as long as you and &lt;strong&gt;you
only&lt;&#x2F;strong&gt; realize that that’s only part of the journey, and that’s where you want
to be for the time being.&lt;&#x2F;p&gt;
&lt;p&gt;However, if someone claims that only knowing &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; is good enough for
you because you can get whatever you need out of it. Or, worse, they tell you
that you’ll be a (quote&#x2F;unquote) “&lt;em&gt;full stack developer&lt;&#x2F;em&gt;” once you master
JavaScript, then approach that person’s “&lt;em&gt;thought leadership&lt;&#x2F;em&gt;” with a grain of
salt.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;there-is-no-spoon&quot;&gt;There is No Spoon&lt;&#x2F;h2&gt;
&lt;p&gt;On top of all these, people who preach these things intentionally ignore that
there is no such thing as “&lt;em&gt;the stack&lt;&#x2F;em&gt;”. The term “full-stack” is redundant at
least, useless at worst.&lt;&#x2F;p&gt;
&lt;p&gt;The boundaries between the layers of “&lt;em&gt;the stack&lt;&#x2F;em&gt;” vanished a long time ago. It
is a “&lt;strong&gt;mesh&lt;&#x2F;strong&gt;”—if anything—rather than a stack. Nowadays, the things one
needs to know to manage an application end-to-end are so broad and wide that
nobody can claim to know it all.&lt;&#x2F;p&gt;
&lt;p&gt;Think about it.&lt;&#x2F;p&gt;
&lt;p&gt;Can anyone claim to be an expert from Orchestration, to InfoSec, to performance
optimization and SRE, to supply chain management, to Flexbox, to Edge networking
and Serverless Compute, to CSS, sass and friends, to Accessibility and
Usability, to Message Queues, Streams, Consensus Algorithms, Rate Limiting
Distributed Tracing, to front end frameworks, to Databases, Sharding,
Clustering, Distributed system design…?&lt;&#x2F;p&gt;
&lt;p&gt;☝️ The list can go on and on… No one on earth can assume to know the entire
stack of things.&lt;&#x2F;p&gt;
&lt;p&gt;If one considers
understanding &lt;a href=&quot;https:&#x2F;&#x2F;blog.logrocket.com&#x2F;mern-stack-tutorial&#x2F;&quot;&gt;the MERN Stack&lt;&#x2F;a&gt; inside out as a sufficient prerequisite
to adding the term “full-stack engineer” to their résumé, they likely don’t
know how much they don’t know yet.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;is-there-such-thing-as-a-half-stack-anyway&quot;&gt;Is There Such Thing as a “Half-Stack” Anyway?&lt;&#x2F;h2&gt;
&lt;p&gt;The curios thing is, there is no such thing as &lt;strong&gt;half-stack&lt;&#x2F;strong&gt; either.&lt;&#x2F;p&gt;
&lt;p&gt;To be a great software engineer, you’ll have to know &lt;strong&gt;both&lt;&#x2F;strong&gt; front-end and
back-end anyway. Why? Because to be a great front-end developer, you first have
to be a great back-end developer and vice versa. So if you think otherwise, you
are deceiving yourself.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;There Are No Boundaries&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
The stack is not layered. You cannot isolate the stack. Nor can you restrict
the stack. Without knowing about one part of the stack, you cannot be productive
in the other parts either.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Ergo, any qualified developer has no other choice to work across the stack.
Calling a developer a “&lt;em&gt;full-stack&lt;&#x2F;em&gt;” developer is akin to calling a car a
“&lt;em&gt;horseless carriage&lt;&#x2F;em&gt;”—It is &lt;strong&gt;redundant&lt;&#x2F;strong&gt;, outdated, and a &lt;strong&gt;tautology&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Know your path. Know where you want to go. And walk your path knowingly.&lt;&#x2F;p&gt;
&lt;p&gt;If you claim to work on the entire stack with a single language under your tool
belt, it only proves that you are afraid of and closed to learning new
things—None of these are good attributes to have in a developer who wants to
get better at what they do.&lt;&#x2F;p&gt;
&lt;p&gt;Everything changes. And everything starts by knowing yourself.&lt;&#x2F;p&gt;
&lt;p&gt;Knowing one’s self, in itself, is a lifelong journey. A Twitter thread cannot
show you that. Ironically, neither this article can show it to you. Though, I
humbly hope it shed some light on the “why“s and “how” of expanding your
horizon.&lt;&#x2F;p&gt;
&lt;p&gt;Until the next one… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Knowing JavaScript Is Not Good Enough&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Who Else is Ready to Hack?</title>
        <published>2021-11-12T00:00:00+00:00</published>
        <updated>2021-11-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/hack-the-system/"/>
        <id>https://zerotohero.dev/roadmap/hack-the-system/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/hack-the-system/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;hackers-in-action.png&quot; alt=&quot;Hack the Planet&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Hack the Planet&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;movies-versus-reality&quot;&gt;Movies Versus Reality&lt;&#x2F;h2&gt;
&lt;p&gt;I’m sick of the mainstream media, movies, and everyone else depicting the term “
&lt;strong&gt;hacker&lt;&#x2F;strong&gt;“ like a badass script kiddie, screwing up secret files and financial
records.&lt;&#x2F;p&gt;
&lt;p&gt;This biased representation in the media leads many people to think of the word “
&lt;strong&gt;hacker&lt;&#x2F;strong&gt;“ disparagingly. Instead, the hacker is pictured as “&lt;em&gt;a fringe-type
individual with highly-specialized programming skills—who do what they do out
of greed, malice, and ill intentions&lt;&#x2F;em&gt;.”&lt;&#x2F;p&gt;
&lt;p&gt;To many people around the world, the concept of “&lt;strong&gt;hacking for good&lt;&#x2F;strong&gt;” may seem
like an oxymoron. The dark image of hackers shadows the fact that people can *
&lt;em&gt;work together&lt;&#x2F;em&gt;*, in a &lt;strong&gt;collective&lt;&#x2F;strong&gt; effort, to make things &lt;strong&gt;better&lt;&#x2F;strong&gt; for
themselves and others around them.&lt;&#x2F;p&gt;
&lt;p&gt;I can proudly confess that I’m a hacker, and I am proud to be a geek, and my
friends and colleagues consider I’m damn good at it.&lt;&#x2F;p&gt;
&lt;p&gt;Yet, I have not done anything illegal so far. I sure can exploit quite a few
security holes to gather information. But why would I?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;but-isn-t-hacking-an-illegal-crime&quot;&gt;But… Isn’t “&lt;em&gt;Hacking&lt;&#x2F;em&gt;” an Illegal Crime?&lt;&#x2F;h2&gt;
&lt;p&gt;Saying “&lt;em&gt;hackers are evil because they can screw your online identity&lt;&#x2F;em&gt;” is as
equally ridiculous as saying “&lt;em&gt;car mechanics are lunatics because they can
install a time bomb in your engine&lt;&#x2F;em&gt;”.&lt;&#x2F;p&gt;
&lt;p&gt;Hacking, in and of itself, is &lt;strong&gt;not&lt;&#x2F;strong&gt; illegal. It is as legal as throwing a
dart. It all boils down to your &lt;strong&gt;intent&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;If you are throwing the dart at the bull’s eye of a dartboard, then it’s fair
game; but if you are poking the dart into a person, then sorry, friend, you are
going to jail.&lt;&#x2F;p&gt;
&lt;p&gt;As in everything, &lt;strong&gt;you&lt;&#x2F;strong&gt; are responsible, and &lt;strong&gt;you&lt;&#x2F;strong&gt; will be kept *
&lt;em&gt;accountable&lt;&#x2F;em&gt;* for anything you do. Once this distinction is clear, then hacking
is no more dangerous than wood painting.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;hacker&lt;&#x2F;strong&gt; is none but an insanely &lt;strong&gt;creative&lt;&#x2F;strong&gt; person. As with anything out
of the ordinary, creativity can be used for good purposes and evil purposes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hacking-is-misunderstood&quot;&gt;Hacking Is Misunderstood&lt;&#x2F;h2&gt;
&lt;p&gt;A &lt;strong&gt;hacker&lt;&#x2F;strong&gt; is a person who makes things work beyond perceived limits or beyond
their everyday use. Hackers enjoy &lt;strong&gt;exploring&lt;&#x2F;strong&gt; the details of systems and are
&lt;strong&gt;curious&lt;&#x2F;strong&gt; about how they can &lt;strong&gt;stretch&lt;&#x2F;strong&gt; the system’s capabilities, unlike many
who merely prefer to learn the &lt;em&gt;minimum&lt;&#x2F;em&gt; necessary skill set to get the stuff
done.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Hacking&lt;&#x2F;strong&gt; is all about &lt;strong&gt;learning&lt;&#x2F;strong&gt;, &lt;strong&gt;empowerment&lt;&#x2F;strong&gt;, and &lt;strong&gt;sharing knowledge&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Hacking&lt;&#x2F;strong&gt; is &lt;strong&gt;not&lt;&#x2F;strong&gt; a goal; it is a &lt;strong&gt;means&lt;&#x2F;strong&gt; to do good.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hacking is a Path&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Hacking&lt;&#x2F;strong&gt; is an “&lt;em&gt;attitude&lt;&#x2F;em&gt;”. There’s a &lt;strong&gt;community&lt;&#x2F;strong&gt;, a shared &lt;strong&gt;culture&lt;&#x2F;strong&gt;,
and the accumulated &lt;strong&gt;wisdom&lt;&#x2F;strong&gt; behind it.&lt;&#x2F;p&gt;
&lt;p&gt;And you don’t necessarily have to confine yourself to hacking software: The
“&lt;em&gt;hacker nature&lt;&#x2F;em&gt;” is independent of the particular medium the hacker works in.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;No matter what you do, and no matter where you are if you have the hacker
spirit, you will reflect it on every action you take. And that’s something to be
proud of.&lt;&#x2F;p&gt;
&lt;p&gt;As hackers, we &lt;strong&gt;solve&lt;&#x2F;strong&gt; problems; we &lt;strong&gt;build&lt;&#x2F;strong&gt; things and believe in
&lt;strong&gt;collaboration&lt;&#x2F;strong&gt;, &lt;strong&gt;meritocracy&lt;&#x2F;strong&gt;, and &lt;strong&gt;mutual help&lt;&#x2F;strong&gt;. That’s the core
essence of being a hacker.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;curiosity-kills-the-cat&quot;&gt;Curiosity Kills the Cat&lt;&#x2F;h2&gt;
&lt;p&gt;If we do something really, really well, then it is &lt;strong&gt;discovering&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;We are &lt;strong&gt;motivated&lt;&#x2F;strong&gt;, &lt;strong&gt;curious&lt;&#x2F;strong&gt;, and &lt;strong&gt;creative.&lt;&#x2F;strong&gt; We get so deep into how
things work that we acquire the knowledge to control them and change them to
&lt;em&gt;something else&lt;&#x2F;em&gt;; most-of-the-time something they are &lt;strong&gt;not&lt;&#x2F;strong&gt;, or something that
they are not “&lt;em&gt;meant to be&lt;&#x2F;em&gt;.”&lt;&#x2F;p&gt;
&lt;p&gt;From the eyes of a hacker, &lt;strong&gt;failure is not a mistake&lt;&#x2F;strong&gt;. It is something to be
taken a lesson from. Every failure means something new has got to be learned.
Moreover, making the same mistake twice is not that bad because, out of
&lt;strong&gt;scientific curiosity&lt;&#x2F;strong&gt;, that same mistake might lead to different results to
&lt;strong&gt;explore&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;teach-hacking-at-schools&quot;&gt;Teach Hacking at Schools&lt;&#x2F;h2&gt;
&lt;p&gt;A hacker’s exploratory mindset is what society needs to progress. That’s why
&lt;strong&gt;hacking must be taught in schools&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After a hard day at work, I would love
to &lt;a href=&quot;http:&#x2F;&#x2F;www.eurekalert.org&#x2F;pub_releases&#x2F;2014-07&#x2F;tuhs-tur071614.php&quot;&gt;how a strand of virus can be entirely deleted from human cells for the
first time&lt;&#x2F;a&gt;,
or &lt;a href=&quot;http:&#x2F;&#x2F;time.com&#x2F;3013439&#x2F;language-trying-hurts-learning&#x2F;&quot;&gt;what the best way of learning a new
language is&lt;&#x2F;a&gt;,
or &lt;a href=&quot;http:&#x2F;&#x2F;www.renewableenergyworld.com&#x2F;rea&#x2F;blog&#x2F;post&#x2F;2014&#x2F;02&#x2F;nano-flake-technology-a-cheaper-way-to-produce-solar-cells&quot;&gt;how nanoflakes provide greater solar efficiency and may solve the energy
needs of the next generations&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This constant and ever-growing thirst for knowledge is a significant personality
trait&#x2F;disorder of a hacker:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Learning for the Sake of Learning&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Hackers have an irrecoverable malfunction in their brains called “&lt;strong&gt;curiosity&lt;&#x2F;strong&gt;.”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We want to learn &lt;strong&gt;anything&lt;&#x2F;strong&gt; and &lt;strong&gt;everything&lt;&#x2F;strong&gt; regardless of whether it will
be useful at work or in our daily life. It’s this “&lt;em&gt;curiosity&lt;&#x2F;em&gt;” that makes us
look at things from diagonally different angles. It’s this &lt;strong&gt;curiosity&lt;&#x2F;strong&gt; that
makes a hacker figure out unconventional solutions to seemingly-hard problems in
ways that no one else can imagine.&lt;&#x2F;p&gt;
&lt;p&gt;Not only do we want to &lt;strong&gt;acquire&lt;&#x2F;strong&gt; knowledge about everything but the kitchen
sink, but we also want to &lt;strong&gt;share&lt;&#x2F;strong&gt; the culture and help others who wish to
&lt;strong&gt;walk the walk&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And I bet you, if there were a way to inject this mentality to the rest of the
world, then the world would become an exponentially better place.&lt;&#x2F;p&gt;
&lt;p&gt;Yet still, people want to see us as skinny nerds with their $100,000 computer
set-up, using nicknames like “&lt;em&gt;M4fi4-B0i&lt;&#x2F;em&gt;” as an alias to talk to other fellow
hackers, plotting on how to take down the government.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, wake up Trinity… Wake… Up!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Well, that $#!% only happens in Hollywood movies.&lt;&#x2F;p&gt;
&lt;p&gt;Everything the majority of the world knows about hackers is entirely and utterly
wrong. There’s a way to fix this by showing, to the rest of the world, that we,
hackers, can hack the world and make it a better place to live.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;our-disobedience-is-to-the-status-quo&quot;&gt;Our Disobedience Is to the Status Quo&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Hacking is evolution&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Whatever we hack, be it a programming language, a poem, a math formula, a new
color and shape for our yard fence, a new melody for a song… we create a *
&lt;em&gt;possibility&lt;&#x2F;em&gt;* of &lt;strong&gt;new&lt;&#x2F;strong&gt; stuff entering our world.&lt;&#x2F;p&gt;
&lt;p&gt;Not always great stuff, not even stuff that works or has a particular purpose,
but &lt;strong&gt;new&lt;&#x2F;strong&gt; stuff—it’s the information that matters. It’s in that information
where new possibilities for a new world emerge.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hacking is Change&lt;br &#x2F;&gt;
Hacking&lt;&#x2F;strong&gt;, is the change in the inherited characteristics of a system over
successive iterations.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This rapid iterative change gives rise to &lt;strong&gt;diversity&lt;&#x2F;strong&gt;, and &lt;strong&gt;diversity&lt;&#x2F;strong&gt; helps
us create &lt;strong&gt;better solutions&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Hacking&lt;&#x2F;strong&gt; is not a result; it is a &lt;strong&gt;movement&lt;&#x2F;strong&gt; towards a future higher state:
Continuous &lt;strong&gt;improvement&lt;&#x2F;strong&gt;; it is a &lt;strong&gt;curious exploration&lt;&#x2F;strong&gt; that leads to
massive change.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-are-born-to-be-a-hacker&quot;&gt;You Are Born To Be a Hacker&lt;&#x2F;h2&gt;
&lt;p&gt;Haven’t you ever tried to do something over and over again, in different ways,
to make it do what you wanted?&lt;&#x2F;p&gt;
&lt;p&gt;Haven’t you ever disassembled a toy to see how it works while you were a child?&lt;&#x2F;p&gt;
&lt;p&gt;Haven’t you ever ended your almost finished jar of Nutella with ice cream? (&lt;em&gt;if
not, try it; seriously&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;That &lt;strong&gt;exactly&lt;&#x2F;strong&gt; is what hacking is. You &lt;strong&gt;hack&lt;&#x2F;strong&gt; stuff when you deeply examine
how things work and change it &lt;strong&gt;creatively&lt;&#x2F;strong&gt; into doing what you want.&lt;&#x2F;p&gt;
&lt;p&gt;Diving right into the problem and following a &lt;strong&gt;feeling&lt;&#x2F;strong&gt; rather than a formal
methodology; that’s the hacker’s way of doing things.&lt;&#x2F;p&gt;
&lt;p&gt;And it is &lt;strong&gt;not&lt;&#x2F;strong&gt; necessarily a bad thing. Many great inventions have spawned
out of genius minds who have not followed the conventions of what had been
believed to be accurate at their time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;every-society-needs-crazy-makers&quot;&gt;Every Society Needs Crazy Makers&lt;&#x2F;h2&gt;
&lt;p&gt;Hackers are pioneers. We discover new and unusual ways of doing things; we
continuously learn, research, and explore.&lt;&#x2F;p&gt;
&lt;p&gt;Hacking is about discovering and finding unusual solutions to seemingly-ordinary
problems. It’s about doing things differently with the hope of creating better
outcomes.&lt;&#x2F;p&gt;
&lt;p&gt;Every child is a natural hacker; ergo, &lt;strong&gt;you are born to be a hacker&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It’s time, society, the system, whatever you name it… makes you grind this
innate ability to a halt.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pardon-me-so-what-is-a-hack-again&quot;&gt;Pardon Me, So What Is a “&lt;em&gt;Hack&lt;&#x2F;em&gt;” Again?&lt;&#x2F;h2&gt;
&lt;p&gt;A “&lt;strong&gt;&lt;em&gt;hack&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” is trying to do something differently.&lt;&#x2F;p&gt;
&lt;p&gt;It’s possible that what you create can turn out to be a solution that’s better
than similar ones that have ever been done before, or it can be some crazy shit
that no one else but you will ever use.&lt;&#x2F;p&gt;
&lt;p&gt;The essence of hacking is not the final outcome. Per contra, hacking is the road
you are &lt;strong&gt;willing&lt;&#x2F;strong&gt; to walk.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-makes-a-hacker&quot;&gt;What Makes a Hacker?&lt;&#x2F;h2&gt;
&lt;p&gt;If everybody is born to be a hacker, then so are you. Yet, certain
characteristics make hackers stand out.&lt;&#x2F;p&gt;
&lt;p&gt;Do you want to walk the walk? Then just sharpen the following habits of yours:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;be-self-directed&quot;&gt;Be &lt;strong&gt;Self-Directed&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We value inner motivation and self-direction. We believe that people learn best
when they are free to explore their passions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;be-accessible&quot;&gt;Be &lt;strong&gt;Accessible&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We know that no matter how much karate you know, there’s someone better than you
somewhere. So we share knowledge, share wisdom, and try to build things on top
of the shoulders of giants, and we openly share what we’ve learned on the way.&lt;&#x2F;p&gt;
&lt;p&gt;Hackers are &lt;strong&gt;connected&lt;&#x2F;strong&gt;, &lt;strong&gt;thoughtful&lt;&#x2F;strong&gt;, and &lt;strong&gt;supportive&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;be-curious&quot;&gt;Be &lt;strong&gt;Curious&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;That’s the most crucial part of it. Just observe a three-year-old interacting
with the environment; how curious they are, how they question even the most
basic facts. A hacker is that three-year-old kiddo—fully grown up—without
losing their &lt;strong&gt;attention&lt;&#x2F;strong&gt;, &lt;strong&gt;intention&lt;&#x2F;strong&gt;, and &lt;strong&gt;curiosity&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Contrary to the popular myth, you don’t have to be a nerd to be a hacker. It
does help, however, 😉.&lt;&#x2F;p&gt;
&lt;p&gt;Have you read anything about coding, computers, or programming in this article
so far?&lt;&#x2F;p&gt;
&lt;p&gt;Read once more, if you are not sure.&lt;&#x2F;p&gt;
&lt;p&gt;It’s a preconceived notion that to be a hacker, you need to be good at math, or
you need to be good at cracking some code. To be a hacker, all you need to do is
be curious and be able to &lt;strong&gt;question everything&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You don’t need to be a programming prodigy to achieve that. You just need to be
&lt;strong&gt;willing&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-can-hack-for-good&quot;&gt;You Can Hack For Good&lt;&#x2F;h2&gt;
&lt;p&gt;Hacking, in a sense, is the ability to connect the dots to create desirable
outcomes. When this ability is used to promote ecology, sustainability, civic
life… to improve the state of the world around us, then &lt;strong&gt;beautiful things
happen&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There are enough insurmountable issues that need to be tackled in the world
today. Take, for example, the climate crisis, racial injustice, all forms of
discrimination, gender inequality, war, hunger, need for clean air,
underrepresented groups, increased crime rates, torture…&lt;&#x2F;p&gt;
&lt;p&gt;Hacking is one way to create better alternatives to those. It is a way to create
a better alternative to our current way of living. Sometimes you want to flip
things around and want to convince people of actually wanting to live in a
better world sustainably and humanely. And that’s when the hackers come into
play.&lt;&#x2F;p&gt;
&lt;p&gt;It’s as simple as that and not simpler.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hacking-is-not-only-for-the-elite&quot;&gt;Hacking is Not Only For the Elite&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Hacking&lt;&#x2F;strong&gt; is not something exclusive to a limited sub-community of geeks.&lt;&#x2F;p&gt;
&lt;p&gt;One of the core values of the hacker ethic is that hackers are not judged by
bogus criteria like their degrees, their education, whether they have a CS
major, or a Ph.D., or an MBA, or their race, or their position, or how long they
have been into hacking. In contrast, the &lt;strong&gt;hacker culture&lt;&#x2F;strong&gt; is exceptionally
&lt;strong&gt;open&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;best idea&lt;&#x2F;strong&gt; and the &lt;strong&gt;best implementation&lt;&#x2F;strong&gt; always win–&lt;strong&gt;not&lt;&#x2F;strong&gt; the person
who’s best at lobbying for a picture or the person who has a more prominent role
power.&lt;&#x2F;p&gt;
&lt;p&gt;Which makes us &lt;strong&gt;do more&lt;&#x2F;strong&gt;, &lt;strong&gt;talk less&lt;&#x2F;strong&gt;, and &lt;strong&gt;get $#!% done&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hack-the-system&quot;&gt;Hack the System&lt;&#x2F;h2&gt;
&lt;p&gt;You can learn a lot from the world, or a system, by taking it apart into pieces,
seeing how stuff works. This micro-level knowledge that you acquire helps you
create new and more exciting things.&lt;&#x2F;p&gt;
&lt;p&gt;Seeing the system’s internals will help you understand how it is broken and what
can be done to fix it.&lt;&#x2F;p&gt;
&lt;p&gt;And the thing to fix it need not be a computer program:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It can be the day-long waiting lines in government agencies;&lt;&#x2F;li&gt;
&lt;li&gt;It can be &lt;em&gt;discrimination&lt;&#x2F;em&gt; or &lt;em&gt;racism&lt;&#x2F;em&gt; that we constantly see around;&lt;&#x2F;li&gt;
&lt;li&gt;It can be a preventing disease from killing millions;&lt;&#x2F;li&gt;
&lt;li&gt;It can be preventing child abuse;&lt;&#x2F;li&gt;
&lt;li&gt;Or it can be gender inequality…&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As a matter of fact, &lt;strong&gt;something can always be better&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Nothing is ever complete. You just have to &lt;strong&gt;go fix it&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;this-is-not-a-cake-walk&quot;&gt;This Is Not a Cake Walk&lt;&#x2F;h2&gt;
&lt;p&gt;I will be upfront, though. This is not an easy task because human beings have an
astonishing capacity to disregard all kinds of noise.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Human beings have a galactically-strong resistance to change&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So it’s not just a matter of coming up with an ingenious solution, supported by
a strong argument; to make people care, you have to make your solution so *
&lt;em&gt;desirable&lt;&#x2F;em&gt;* that people cannot resist it.&lt;&#x2F;p&gt;
&lt;p&gt;You have to translate an &lt;strong&gt;idea&lt;&#x2F;strong&gt; into something tangible that can &lt;strong&gt;blend&lt;&#x2F;strong&gt;
into the everyday lives of people. And this &lt;strong&gt;leap&lt;&#x2F;strong&gt; can only be done with a *
&lt;em&gt;hacker’s mindset&lt;&#x2F;em&gt;*.&lt;&#x2F;p&gt;
&lt;p&gt;You do have this mindset; it’s just “&lt;em&gt;maybe&lt;&#x2F;em&gt;” you haven’t taken the red pill “
&lt;em&gt;yet&lt;&#x2F;em&gt;“.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jfdi&quot;&gt;JFDI&lt;&#x2F;h2&gt;
&lt;p&gt;This is not about thinking about who we are or what hacking is.&lt;&#x2F;p&gt;
&lt;p&gt;This is about “&lt;em&gt;getting your hands dirty and getting $#!% done&lt;&#x2F;em&gt;” because once
your hands are dirty, miracles can happen.&lt;&#x2F;p&gt;
&lt;p&gt;So, if you are unhappy with the status quo, instead of putting a black ribbon on
your social media profile, &lt;strong&gt;go and make a flocking change&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Hacking is good&lt;&#x2F;strong&gt;, and &lt;strong&gt;you are born to be a hacker&lt;&#x2F;strong&gt;. Remember that.&lt;&#x2F;p&gt;
&lt;p&gt;There’s only one question that remains…&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Are you ready to hack&lt;&#x2F;em&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;Then, may the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Who Else is Ready to Hack?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Want to Learn JavaScript? Learn Haskell First</title>
        <published>2021-11-09T00:00:00+00:00</published>
        <updated>2021-11-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/learn-haskell/"/>
        <id>https://zerotohero.dev/roadmap/learn-haskell/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/learn-haskell/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;functinal.png&quot; alt=&quot;Want to Learn JavaScript? Learn Haskell First&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;functinal.png&quot; alt=&quot;Be functional.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Be functional.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;srsly&quot;&gt;Srsly?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;I&lt;&#x2F;em&gt;’m serious about this.&lt;&#x2F;p&gt;
&lt;p&gt;Anyone who wants to master &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; had
better &lt;a href=&quot;http:&#x2F;&#x2F;learnyouahaskell.com&#x2F;&quot;&gt;learn Haskell&lt;&#x2F;a&gt; beforehand.&lt;&#x2F;p&gt;
&lt;p&gt;This article explains the “&lt;em&gt;why&lt;&#x2F;em&gt;“s and “&lt;em&gt;how&lt;&#x2F;em&gt;“s of it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-do-i-need-haskell&quot;&gt;Why Do I Need Haskell?&lt;&#x2F;h2&gt;
&lt;p&gt;Modern &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; has become and more &lt;strong&gt;functional&lt;&#x2F;strong&gt;. Also, the modern
&lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; frameworks and libraries strongly encourage (&lt;em&gt;sometimes, to the
point of &lt;strong&gt;enforcing&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;) you
to &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;29627874-functional-thinking&quot;&gt;think functionally&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Moreover, most of the &lt;strong&gt;functional&lt;&#x2F;strong&gt; constructs that modern &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;
implements have been borrowed straight out of &lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;&quot;&gt;&lt;strong&gt;Haskell&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
or are easier to grok when you already know their &lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;&quot;&gt;&lt;strong&gt;Haskell&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; counterparts.&lt;&#x2F;p&gt;
&lt;p&gt;Not only vanilla &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt;, but also many popular &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; tools and
frameworks such as &lt;a href=&quot;https:&#x2F;&#x2F;redux.js.org&#x2F;&quot;&gt;Redux&lt;&#x2F;a&gt;, or
the &lt;a href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;docs&#x2F;context.html&quot;&gt;React Context API&lt;&#x2F;a&gt;,
or &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;immutable-js&#x2F;&quot;&gt;immutable.js&lt;&#x2F;a&gt; are tools that are *
&lt;em&gt;highly inspired&lt;&#x2F;em&gt;* by &lt;em&gt;functional&lt;&#x2F;em&gt; languages like &lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;&quot;&gt;&lt;strong&gt;Haskell&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Even &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Promise&quot;&gt;&lt;code&gt;Promise&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
s are &lt;a href=&quot;https:&#x2F;&#x2F;wiki.haskell.org&#x2F;All_About_Monads&quot;&gt;Monadic constructs&lt;&#x2F;a&gt;, and
&lt;a href=&quot;https:&#x2F;&#x2F;adit.io&#x2F;posts&#x2F;2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot;&gt;&lt;strong&gt;Monad&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
is a data type that &lt;strong&gt;Haskell&lt;&#x2F;strong&gt; programs use extensively to modify state.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Haskell is a Paradigm Shift&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;&quot;&gt;Learning &lt;strong&gt;Haskell&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; will change how you think:
You’ll look at programming problems from a &lt;strong&gt;simplistic&lt;&#x2F;strong&gt;, elegant, &lt;strong&gt;pure&lt;&#x2F;strong&gt;,
and different perspective. That’s what matters.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The reason many developers have a hard time understanding &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; is not
about the complexity of
it: &lt;a href=&quot;https:&#x2F;&#x2F;tc39.github.io&#x2F;ecma262&#x2F;&quot;&gt;JavaScript is an easy-to-understand language&lt;&#x2F;a&gt;.
You can learn the basics of it in a couple of days to a few months tops.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is not the rules, or semantics of the language: Learning to “&lt;em&gt;think
in JavaScript&lt;&#x2F;em&gt;” is what takes time, effort, and energy.&lt;&#x2F;p&gt;
&lt;p&gt;When you learn a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Purely_functional_programming&quot;&gt;&lt;em&gt;purely functional
language&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;,
and &lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;&quot;&gt;&lt;strong&gt;Haskell&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is the best “&lt;em&gt;pure&lt;&#x2F;em&gt;” functional
language out there, thinking in &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; will be a &lt;strong&gt;cakewalk&lt;&#x2F;strong&gt; for you.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-do-i-learn-haskell&quot;&gt;Where Do I Learn Haskell?&lt;&#x2F;h2&gt;
&lt;p&gt;Here are a few links to help you learn Haskell:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;channel9.msdn.com&#x2F;Series&#x2F;C9-Lectures-Erik-Meijer-Functional-Programming-Fundamentals&#x2F;Lecture-Series-Erik-Meijer-Functional-Programming-Fundamentals-Chapter-1&quot;&gt;C9: Programming in Haskell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.haskell.org&#x2F;Tutorials&quot;&gt;Introduction to Haskell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;learnyouahaskell.com&#x2F;introduction&quot;&gt;Learn Your Haskell for Great Good&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.haskell.org&#x2F;Learning_Haskel&quot;&gt;Learning Haskell (&lt;em&gt;Haskell Wiki&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;book.realworldhaskell.org&#x2F;&quot;&gt;Real-World Haskell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.haskell.org&#x2F;All_About_Monads&quot;&gt;All About Monads&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;adit.io&#x2F;posts&#x2F;2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot;&gt;Functors, Applicatives, and Monads in Pictures&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;hoogle&#x2F;&quot;&gt;Hoogle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.cs.nott.ac.uk&#x2F;~pszgmh&#x2F;pih.html&quot;&gt;Programming in Haskell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.haskell.org&#x2F;Tutorials&quot;&gt;Haskell Tutorials&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bonus-read-k-r-s-c-programming-language&quot;&gt;&lt;strong&gt;Bonus&lt;&#x2F;strong&gt;: Read K&amp;amp;R’s &lt;strong&gt;C Programming Language&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Even if you don’t professionally plan to write C, every developer should
read &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;515601.The_C_Programming_Language&quot;&gt;K&amp;amp;R’s C Programming Language&lt;&#x2F;a&gt;
—It teaches you a lot in so little; it’s a classic.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rant&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A programmer who has not
read &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;515601.The_C_Programming_Language&quot;&gt;K&amp;amp;R’s ANSI C&lt;&#x2F;a&gt;
is like a geek who has not read Asimov. Don’t be that person.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;After learning &lt;strong&gt;Haskell&lt;&#x2F;strong&gt;, I’d recommend you
&lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;&quot;&gt;give &lt;strong&gt;Go&lt;&#x2F;strong&gt; a go&lt;&#x2F;a&gt; too.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Don’t Forget Your HTML and CSS&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
It would even be better if you dig into
some &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTML&quot;&gt;HTML&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;CSS&quot;&gt;CSS&lt;&#x2F;a&gt;,
and a good dose
of &lt;a href=&quot;https:&#x2F;&#x2F;owasp.org&#x2F;www-project-top-ten&#x2F;&quot;&gt;Web Application Security&lt;&#x2F;a&gt; before you
begin your &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; journey.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I hear some of you asking, “&lt;em&gt;What’s the advantage of learning two other
languages, just to learn a third language?&lt;&#x2F;em&gt;”.&lt;&#x2F;p&gt;
&lt;p&gt;If you ever watched &lt;a href=&quot;https:&#x2F;&#x2F;www.imdb.com&#x2F;title&#x2F;tt0087538&#x2F;&quot;&gt;The Karate Kid&lt;&#x2F;a&gt;,
then you know the reason: Even if you have studied a couple of weeks of &lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;&quot;&gt;*
&lt;em&gt;Haskell&lt;&#x2F;em&gt;*&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;&quot;&gt;**Go
**&lt;&#x2F;a&gt;, you’ll be “&lt;em&gt;miles
ahead&lt;&#x2F;em&gt;”
when you
begin your &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; journey.&lt;&#x2F;p&gt;
&lt;p&gt;Your mind will be &lt;em&gt;wired&lt;&#x2F;em&gt; to think in &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; without you even realize.&lt;&#x2F;p&gt;
&lt;p&gt;There are countless articles, books, videos, and tutorials to cover your *
&lt;em&gt;JavaScript&lt;&#x2F;em&gt;* bases. I’ll write about it later. Yet a quick web search will
provide you with more resources than you need 🙂.&lt;&#x2F;p&gt;
&lt;p&gt;So off you go, learn some cool $#!%.&lt;&#x2F;p&gt;
&lt;p&gt;And until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>One Does Not Simply &quot;Terminal&quot; 👌</title>
        <published>2021-11-07T00:00:00+00:00</published>
        <updated>2021-11-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/one-does-not-simply-terminal/"/>
        <id>https://zerotohero.dev/roadmap/one-does-not-simply-terminal/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/one-does-not-simply-terminal/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;one-does-not.png&quot; alt=&quot;One does not simply...&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;One does not simply...&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;getting-comfortable-with-the-linux-terminal&quot;&gt;Getting Comfortable With the Linux Terminal&lt;&#x2F;h2&gt;
&lt;p&gt;Here are some articles you can read to get more intimate with the command line:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.digitalocean.com&#x2F;community&#x2F;tutorials&#x2F;an-introduction-to-the-linux-terminal&quot;&gt;An introduction to the Linux Terminal&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;help.ubuntu.com&#x2F;community&#x2F;UsingTheTerminal&quot;&gt;Using the Terminal&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tldr.sh&#x2F;&quot;&gt;tldr Pages&lt;&#x2F;a&gt; (&lt;em&gt;easier to scan than&lt;&#x2F;em&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;man-pages&#x2F;&quot;&gt;&lt;em&gt;man pages&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;em&gt;, more practical&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;explainshell.com&#x2F;&quot;&gt;Explain Shell&lt;&#x2F;a&gt; (&lt;em&gt;paste your command, and let explain shell… well… explain it&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;commands-that-you-ll-use-frequently&quot;&gt;Commands That You’ll Use Frequently&lt;&#x2F;h2&gt;
&lt;p&gt;The more terminal you know, the more power you’ll have. Yet, here is a list of
common commands that you might want to start familiarizing yourself with:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=awk&amp;amp;section=all&quot;&gt;&lt;code&gt;awk&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=sed&amp;amp;section=all&quot;&gt;&lt;code&gt;sed&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=grep&amp;amp;section=all&quot;&gt;&lt;code&gt;grep&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=sort&amp;amp;section=all&quot;&gt;&lt;code&gt;sort&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=uniq&amp;amp;section=all&quot;&gt;&lt;code&gt;uniq&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=cat&amp;amp;section=all&quot;&gt;&lt;code&gt;cat&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;man.he.net&#x2F;?topic=cut&amp;amp;section=all&quot;&gt;&lt;code&gt;cut&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=echo&amp;amp;section=all&quot;&gt;&lt;code&gt;echo&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=egrep&amp;amp;section=all&quot;&gt;&lt;code&gt;egrep&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=fgrep&amp;amp;section=all&quot;&gt;&lt;code&gt;fgrep&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=wc&amp;amp;section=all&quot;&gt;&lt;code&gt;wc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=less&amp;amp;section=all&quot;&gt;&lt;code&gt;less&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=more&amp;amp;section=all&quot;&gt;&lt;code&gt;more&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=ps&amp;amp;section=all&quot;&gt;&lt;code&gt;ps&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=top&amp;amp;section=all&quot;&gt;&lt;code&gt;top&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=htop&amp;amp;section=all&quot;&gt;&lt;code&gt;htop&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;1&#x2F;atop&quot;&gt;&lt;code&gt;atop&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;nmon.sourceforge.net&#x2F;pmwiki.php&quot;&gt;&lt;code&gt;nmon&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=iostat&amp;amp;section=all&quot;&gt;&lt;code&gt;iostat&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=vmstat&amp;amp;section=all&quot;&gt;&lt;code&gt;vmstat&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=ifconfig&amp;amp;section=all&quot;&gt;&lt;code&gt;ifconfig&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;1&#x2F;nmap&quot;&gt;&lt;code&gt;nmap&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=tcpdump&amp;amp;section=all&quot;&gt;&lt;code&gt;tcpdump&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=ping&amp;amp;section=all&quot;&gt;&lt;code&gt;ping&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;man.he.net&#x2F;?topic=ping&amp;amp;section=all&quot;&gt;&lt;code&gt;traceroute&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;👆 These are the ones that you might use frequently. Obviously, there are more
that you might want to look into.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;know-enough-shell-scripting-to-be-dangerous&quot;&gt;Know Enough Shell Scripting to Be Dangerous&lt;&#x2F;h2&gt;
&lt;p&gt;Here are a few guides on the topic:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.tldp.org&#x2F;LDP&#x2F;Bash-Beginners-Guide&#x2F;html&#x2F;&quot;&gt;Bash Guide for Beginners&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ryanstutorials.net&#x2F;bash-scripting-tutorial&#x2F;&quot;&gt;Bash Scripting Tutorial&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.bashoneliners.com&#x2F;&quot;&gt;Bash One-Liners&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.tldp.org&#x2F;LDP&#x2F;abs&#x2F;html&#x2F;&quot;&gt;Advanced Bash Scripting Guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;1130902.Bash_Cookbook&quot;&gt;Bash Cookbook&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Idnan&#x2F;bash-guide&quot;&gt;Bash Guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;27112374-bash-pocket-reference&quot;&gt;Bash Pocket Reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tldp.org&#x2F;HOWTO&#x2F;Bash-Prog-Intro-HOWTO.html&quot;&gt;Bash Programming Intro&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;bash&#x2F;manual&#x2F;bash.pdf&quot;&gt;Bash Reference Manual&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;devhints.io&#x2F;bash&quot;&gt;Bash Scripting Cheatsheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;Bash_Shell_Scripting&quot;&gt;Bash Shell Scripting&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.bash-hackers.org&#x2F;&quot;&gt;Bash Wiki&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.learnshell.org&#x2F;&quot;&gt;Learn Shell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learnxinyminutes.com&#x2F;docs&#x2F;bash&#x2F;&quot;&gt;Learn X in Y Minutes Where X is Bash&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;google.github.io&#x2F;styleguide&#x2F;shellguide.html&quot;&gt;Shell Guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jlevy&#x2F;the-art-of-command-line&quot;&gt;The Art of Command Line&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jlevy&#x2F;the-art-of-command-line&quot;&gt;The Art of Command Line&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;connecting-to-a-remote-server&quot;&gt;Connecting to a Remote Server&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.digitalocean.com&#x2F;community&#x2F;tutorials&#x2F;how-to-use-ssh-to-connect-to-a-remote-server-in-ubuntu&quot;&gt;Connecting a remote server via
&lt;strong&gt;SSH&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
is something you’ll have to do sooner or later.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Explore Community Docs&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you need more than connecting to a server. Like, for example, if you need
to install and configure applications, services, proxies, firewalls,
databases,
containers, and the like, then &lt;a href=&quot;https:&#x2F;&#x2F;www.digitalocean.com&#x2F;community&#x2F;tutorials&quot;&gt;&lt;strong&gt;DigitalOcean&lt;&#x2F;strong&gt;’s community tutorials&lt;&#x2F;a&gt; is
one of the best resources that you can have; closely followed by &lt;a href=&quot;https:&#x2F;&#x2F;www.linode.com&#x2F;docs&#x2F;&quot;&gt;&lt;strong&gt;Linode&lt;&#x2F;strong&gt;’s helpful articles&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The only commands you need to master probably
are &lt;a href=&quot;https:&#x2F;&#x2F;man.openbsd.org&#x2F;ssh&quot;&gt;&lt;code&gt;ssh&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;man.openbsd.org&#x2F;ssh&quot;&gt;&lt;code&gt;ssh-copy-id&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Below, I’ll list some terminal emulators that you might want to try out too;
however, most of the time, the default terminal emulator on your operating
system will be sufficient for your needs.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Windows and Terminal&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
If you have a Windows development machine and you are planning to work on
Linux-like environments, do yourself a favor and give
&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;wsl&#x2F;install&quot;&gt;Windows Subsystem for Linux&lt;&#x2F;a&gt;
a go. You’ll thank me later.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;cross-platform-terminal-emulators&quot;&gt;Cross-Platform Terminal Emulators&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;alacritty&quot;&gt;Alacritty&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alacritty&#x2F;alacritty&quot;&gt;&lt;strong&gt;Alacritty&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is the &lt;strong&gt;fastest&lt;&#x2F;strong&gt;
terminal emulator that you can find around. It’s fast, lightweight, based on
OpenGL.&lt;&#x2F;p&gt;
&lt;p&gt;However, when I say &lt;strong&gt;lightweight&lt;&#x2F;strong&gt;, it truly &lt;strong&gt;is&lt;&#x2F;strong&gt; lightweight. You cannot
find tabs, split windows, and other fancy add-ons that other terminal emulators
provide.&lt;&#x2F;p&gt;
&lt;p&gt;To be productive with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alacritty&#x2F;alacritty&quot;&gt;&lt;strong&gt;alacritty&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
you’ll have to learn &lt;a href=&quot;https:&#x2F;&#x2F;www.hamvocke.com&#x2F;blog&#x2F;a-quick-and-easy-guide-to-tmux&#x2F;&quot;&gt;&lt;strong&gt;tmux&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
too, so that you’ll have an equivalent tabbed user interface experience that you might be
used to from other terminal emulators.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;💁‍&lt;&#x2F;p&gt;
&lt;p&gt;Here’s &lt;a href=&quot;https:&#x2F;&#x2F;www.hamvocke.com&#x2F;blog&#x2F;a-quick-and-easy-guide-to-tmux&#x2F;&quot;&gt;a quick and easy guide to &lt;strong&gt;tmux&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;kitty&quot;&gt;Kitty&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sw.kovidgoyal.net&#x2F;kitty&#x2F;&quot;&gt;&lt;strong&gt;Kitty&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is another fast, GPU-based
terminal. So what makes it different than,
say &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alacritty&#x2F;alacritty&quot;&gt;alacritty&lt;&#x2F;a&gt;? It is feature-rich,
scriptable, and composable while still being fast and minimalistic.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hyper&quot;&gt;Hyper&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hyper.is&#x2F;&quot;&gt;&lt;strong&gt;Hyper&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is an
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;electron&#x2F;electron&quot;&gt;electron&lt;&#x2F;a&gt;-based terminal emulator. It
is built on HTML&#x2F;CSS&#x2F;JS. Fully extensible, absolutely hackable. If you want
something customizable, with &lt;a href=&quot;https:&#x2F;&#x2F;hyper.is&#x2F;&quot;&gt;hyper&lt;&#x2F;a&gt; sky is the limit.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mosh&quot;&gt;Mosh&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mosh.org&#x2F;&quot;&gt;&lt;strong&gt;Mosh&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is especially useful when you are, say, using your
terminal on a train, where connectivity is intermittent and unreliable.&lt;&#x2F;p&gt;
&lt;p&gt;It is a replacement for interactive SSH terminals. It works wonders, especially
over Wi-Fi, cellular, and long-distance links.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;terminus&quot;&gt;Terminus&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;eugeny.github.io&#x2F;terminus&#x2F;&quot;&gt;&lt;strong&gt;Terminus&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; boast to be a customizable
terminal for the modern age, and it does look pretty slick if you ask me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;linux-terminal-emulators&quot;&gt;Linux Terminal Emulators&lt;&#x2F;h2&gt;
&lt;p&gt;For the Linux UI fans out there, here are a few terminal emulators that you can
try.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;guake-project.org&#x2F;&quot;&gt;&lt;strong&gt;Guake&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, is my preferred terminal on my
&lt;a href=&quot;https:&#x2F;&#x2F;ubuntu.com&#x2F;&quot;&gt;&lt;strong&gt;Ubuntu&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, mostly because I’m so used to
the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Quake_(video_game)&quot;&gt;Quake&lt;&#x2F;a&gt;-style keyboard
shortcuts to show and hide it. If you are a gamer, it becomes second nature to
use it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gnometerminator.blogspot.com&#x2F;&quot;&gt;&lt;strong&gt;Terminator&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is really useful if
you find yourself needing to split your window horizontally and vertically to
see multiple terminal sessions simultaneously.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;konsole.kde.org&#x2F;&quot;&gt;&lt;strong&gt;Konsole&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is another popular option to try out.&lt;&#x2F;li&gt;
&lt;li&gt;So is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lanoxx&#x2F;tilda&quot;&gt;&lt;strong&gt;Tilda&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;mac-terminal-emulators&quot;&gt;Mac Terminal Emulators&lt;&#x2F;h2&gt;
&lt;p&gt;Mac Terminal emulators come and go all the time, yet there’s only a single one
that stays and gets better year after year: &lt;a href=&quot;https:&#x2F;&#x2F;www.iterm2.com&#x2F;&quot;&gt;&lt;strong&gt;iTerm2&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;While the default Terminal app is more than enough for your programming needs,
in case you want to spice things up a bit, you can try out
&lt;a href=&quot;https:&#x2F;&#x2F;www.iterm2.com&#x2F;&quot;&gt;&lt;strong&gt;iTerm2&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. It provides a split window view similar
to &lt;a href=&quot;https:&#x2F;&#x2F;gnometerminator.blogspot.com&#x2F;&quot;&gt;terminator&lt;&#x2F;a&gt;, so if you come from the
Unix world and seek a similar experience, &lt;a href=&quot;https:&#x2F;&#x2F;www.iterm2.com&#x2F;&quot;&gt;iTerm2&lt;&#x2F;a&gt; can
be your ally.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;windows-terminal-emulators&quot;&gt;Windows Terminal Emulators&lt;&#x2F;h3&gt;
&lt;p&gt;To be honest, I don’t use Terminal on Windows too much; however, the following
are the terminal emulators I’ve used and liked over time. Pick your own poison
🙂.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;p&#x2F;windows-terminal&#x2F;9n0dx20hk701&quot;&gt;&lt;strong&gt;Windows Terminal&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;conemu.github.io&#x2F;&quot;&gt;&lt;strong&gt;Conemu&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;felixse&#x2F;FluentTerminal&quot;&gt;&lt;strong&gt;Fluent Terminal&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;powershell&#x2F;scripting&#x2F;overview&quot;&gt;&lt;strong&gt;Powershell&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
(&lt;em&gt;it’s a shell, not a terminal, but still &lt;strong&gt;very&lt;&#x2F;strong&gt; useful&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.putty.org&#x2F;&quot;&gt;&lt;strong&gt;PuTTY&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.emtec.com&#x2F;zoc&#x2F;index.html&quot;&gt;&lt;strong&gt;ZOC Terminal&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cmder.net&#x2F;&quot;&gt;&lt;strong&gt;Cmder&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;shells&quot;&gt;Shells&lt;&#x2F;h2&gt;
&lt;p&gt;Picking a terminal emulator is the first step in the journey of making your
terminal experience better. Next up is &lt;strong&gt;picking up a shell&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Z_shell&quot;&gt;&lt;strong&gt;Z-shell&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is popular nowadays, and
whoever uses &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Z_shell&quot;&gt;Z-shell&lt;&#x2F;a&gt; also installs
&lt;a href=&quot;https:&#x2F;&#x2F;ohmyz.sh&#x2F;&quot;&gt;&lt;strong&gt;Oh My Zsh&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; as a sane starting point in customizing their
shell.&lt;&#x2F;p&gt;
&lt;p&gt;There is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;unixorn&#x2F;zsh-quickstart-kit&quot;&gt;zsh Quickstart Kit&lt;&#x2F;a&gt;
that you might want to look at too.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fishshell.com&#x2F;&quot;&gt;&lt;strong&gt;Fish&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is another popular shell that is famous for
its autocomplete support.&lt;&#x2F;p&gt;
&lt;p&gt;Ah, there is also &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oh-my-fish&#x2F;oh-my-fish&quot;&gt;&lt;strong&gt;oh my fish&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to
set up your fish 🐠.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;terminal-utilities&quot;&gt;Terminal Utilities&lt;&#x2F;h2&gt;
&lt;p&gt;Here I’m listing terminal tools and utilities I’ve found useful over the course
of years.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;find-search-filter-files-folders-and-streams&quot;&gt;Find; Search; Filter Files, Folders and Streams&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;beyondgrep.com&#x2F;&quot;&gt;&lt;strong&gt;ack&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;this is a must-learn, especially if you
search source code a lot&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;junegunn&#x2F;fzf&quot;&gt;&lt;strong&gt;fzf&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;Fuzzy Finder: Another finder
utility that you’d question how you lived without it&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ss64.com&#x2F;bash&#x2F;grep.html&quot;&gt;&lt;strong&gt;grep&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;must be in your toolbox&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;peco&#x2F;peco&quot;&gt;&lt;strong&gt;peco&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;strong&gt;peco&lt;&#x2F;strong&gt; is a simplistic,
interactive filtering tool)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ripgrep&lt;&#x2F;strong&gt; (&lt;em&gt;&lt;strong&gt;ripgrep&lt;&#x2F;strong&gt; recursively searches your directories&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;geoff.greer.fm&#x2F;ag&#x2F;&quot;&gt;&lt;strong&gt;The Silver Searcher&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;a code searching tool
similar to &lt;strong&gt;ack&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;antonmedv&#x2F;fx&quot;&gt;&lt;strong&gt;fx&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;a utility to view JSON in
terminal&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stedolan.github.io&#x2F;jq&#x2F;&quot;&gt;&lt;strong&gt;jq&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;so as this one&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;sed&#x2F;manual&#x2F;sed.html&quot;&gt;&lt;strong&gt;sed&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (Stream
Editor—another powerful tool to learn)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ajeetdsouza&#x2F;zoxide&quot;&gt;&lt;strong&gt;zoxide&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;alias cd zoxide&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;help&quot;&gt;Help&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;explainshell.com&#x2F;&quot;&gt;&lt;strong&gt;ExplainShell&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is a web app to explain the
shell command you paste in.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nvbn&#x2F;thefuck&quot;&gt;&lt;strong&gt;fuck&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is a command-line utility that
recovers you from your mistakes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;santinic&#x2F;how2&quot;&gt;&lt;strong&gt;how2&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; finds the simplest way to do
something in a Unix shell.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gleitz&#x2F;howdoi&quot;&gt;&lt;strong&gt;howdoi&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; provides instant coding answers
via the command line.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tldr-pages&#x2F;tldr&quot;&gt;&lt;strong&gt;tldr-pages&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is for those who are
tired of reading the full manual.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tldr.sh&#x2F;&quot;&gt;&lt;strong&gt;tldr.sh&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is the website for &lt;code&gt;tldr-pages&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;terminal-multiplexing&quot;&gt;Terminal Multiplexing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;screen&#x2F;&quot;&gt;&lt;strong&gt;screen&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tmux&#x2F;tmux&quot;&gt;&lt;strong&gt;tmux&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tmuxinator&#x2F;tmuxinator&quot;&gt;&lt;strong&gt;tmuxinator&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;file-and-folder-management&quot;&gt;File and Folder Management&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ogham&#x2F;exa&quot;&gt;&lt;strong&gt;exa&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;alias ls exa&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sindresorhus&#x2F;trash&quot;&gt;&lt;strong&gt;trash&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;moves files and
directories to trash&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gsamokovarov&#x2F;jump&quot;&gt;&lt;strong&gt;jump&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;jump helps you navigate
faster by learning your habits&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wting&#x2F;autojump&quot;&gt;&lt;strong&gt;autojump&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;similar to &lt;strong&gt;jump&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pedramamini&#x2F;lazy-cd&quot;&gt;&lt;strong&gt;lazy-cd&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;path bookmarking for
bash&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Jintin&#x2F;aliasme&quot;&gt;&lt;strong&gt;aliasme&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;a shell script to organize
your aliases&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sindresorhus&#x2F;fkill-cli&quot;&gt;&lt;strong&gt;fkill-cli&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;fabulously kill
processes with extreme prejudice&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;direnv.net&#x2F;&quot;&gt;&lt;strong&gt;direnv&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;unclutter your &lt;code&gt;.profile&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;monitoring-and-system-info&quot;&gt;Monitoring and System Info&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hisham.hm&#x2F;htop&#x2F;&quot;&gt;&lt;strong&gt;htop&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;better&lt;&#x2F;em&gt; &lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man1&#x2F;top.1.html&quot;&gt;
&lt;em&gt;&lt;code&gt;top&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MrRio&#x2F;vtop&quot;&gt;&lt;strong&gt;vtop&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;similar to &lt;strong&gt;htop&lt;&#x2F;strong&gt;, but
graphical&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicolargo&#x2F;glances&quot;&gt;&lt;strong&gt;glances&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;better &lt;strong&gt;htop&lt;&#x2F;strong&gt; 🙂&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dylanaraps&#x2F;neofetch&quot;&gt;&lt;strong&gt;neofetch&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;a command-line system
information tool&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Xfennec&#x2F;progress&quot;&gt;&lt;strong&gt;progress&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (shows the progress
of &lt;code&gt;cp&lt;&#x2F;code&gt;, &lt;code&gt;mv&lt;&#x2F;code&gt;, &lt;code&gt;dd&lt;&#x2F;code&gt;, etc.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;getting-done&quot;&gt;Getting $#!% Done&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;todotxt.org&#x2F;&quot;&gt;&lt;strong&gt;todo.txt&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;a future-proof task tracking tool&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;mac-specific&quot;&gt;Mac-Specific&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mas-cli&#x2F;mas&quot;&gt;&lt;strong&gt;mas&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;Mac AppStore command-line
interface because why not 🤷‍♂️&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;brew.sh&#x2F;&quot;&gt;&lt;strong&gt;homebrew&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;the closest you can get to a package
manager for Mac OS&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.macports.org&#x2F;&quot;&gt;&lt;strong&gt;macports&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;similar to &lt;strong&gt;homebrew&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;That’s a lot of tools and utilities to get you started with the terminal. I
hope you find them useful.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ One Does Not Simply Terminal 👌&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Keep Calm and Carry On</title>
        <published>2021-11-04T00:00:00+00:00</published>
        <updated>2021-11-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0018/"/>
        <id>https://zerotohero.dev/highlights/issue-0018/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0018/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;calm.png&quot; alt=&quot;Keep calm.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Keep calm.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the eighteenth issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;It has been a while since I published the last issue, and a lot happened in
between. Here are some of the previous few weeks’ highlights.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update-zero-to-hero-articles&quot;&gt;Update Zero to Hero Articles&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve updated…&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;,&lt;&#x2F;li&gt;
&lt;li&gt;and &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read—No Exceptions&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So you have more than enough &lt;strong&gt;bedtime reading&lt;&#x2F;strong&gt; material till the end of next
year 🙂.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;on-hacker-mindset&quot;&gt;On Hacker Mindset&lt;&#x2F;h2&gt;
&lt;p&gt;If you make, break, and create things, I’m sure you’ll like
&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you believe reinvention is the core ingredient to everything creative and
innovative, you should read &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gophercon-is-coming&quot;&gt;GopherCon is Coming&lt;&#x2F;h2&gt;
&lt;p&gt;I was planning to prep for my &lt;strong&gt;GopherCon&lt;&#x2F;strong&gt; talk but life got in the way and
I have a draft to complete. It’s on &lt;em&gt;Dec, 18th, 2021&lt;&#x2F;em&gt;, so I have around two
weeks.&lt;&#x2F;p&gt;
&lt;p&gt;So, if you don’t see much content from me, it’s because I’m researching in the
rabbit hole of Cloud Native Identity Federation, preparing for the upcoming
Christmas break, and mostly getting into the holiday mood where the entire
concept of time melds like a marshmallow.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;Work can be stressful. Especially when you are not used to
“&lt;em&gt;sheltering at work&lt;&#x2F;em&gt;” for so long. When the boundary between &lt;em&gt;work&lt;&#x2F;em&gt; and
&lt;em&gt;non-work&lt;&#x2F;em&gt; diminishes, you end up thinking about work all the time. Work becomes
something that keeps you at night (&lt;em&gt;in a not-so-good way&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Honestly, the best of your work-related ideas emerge when you are not doing
work.
However, thinking about work “&lt;em&gt;all the time&lt;&#x2F;em&gt;” can also mean stressing about
work, which keeps you up at night or creates a constant feeling of anxiety.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;12&amp;#x2F;8e5f0182b47d2dfa911bc1821f462afa689b60dc7d33f11e7e22c7e4c3b26ccc_1.jpg&quot; alt=&quot;Work.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Work.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Here are some strategies you can try to avoid thinking about work in the middle
of the night.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;make-a-list&quot;&gt;Make a List&lt;&#x2F;h3&gt;
&lt;p&gt;I might sound corny. But once you write down what you are going to do the next
few days, you offload them from your mind. You will feel relaxed.&lt;&#x2F;p&gt;
&lt;p&gt;Unfinished tasks cycling through your mind will keep your mind busy; your brain
will stay at a heightened level of cognitive action: Not the best way to put
yourself to sleep.&lt;&#x2F;p&gt;
&lt;p&gt;If you wake up in the middle of the night, remembering a task, find a piece of
paper, a pen, and write it down. You’ll be amazed at how easy it is to let that
thought go and get back to sleep.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;keep-a-journal&quot;&gt;Keep a Journal&lt;&#x2F;h3&gt;
&lt;p&gt;Journaling has many benefits that you only realize once you start doing it. A
journal is an honest and private conversation with yourself.&lt;&#x2F;p&gt;
&lt;p&gt;Once you write down how things make you feel and your longer-term desires and
aspirations, you’ll process those emotions from an outsider’s perspective.
You’ll observe them, rationalize them, and find a medium to express them without
judgment. That will reduce your anxiety.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;be-compassionate-to-yourself&quot;&gt;Be Compassionate to Yourself&lt;&#x2F;h3&gt;
&lt;p&gt;Self-compassion is showing yourself the same kindness, care, and concern you
would offer to a good friend. You are your best friend, after all.&lt;&#x2F;p&gt;
&lt;p&gt;Practicing self-compassion beats the shit out of the impostor in you: You’ll
break the cycle of negative thoughts and self-judgment.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;be-physically-active&quot;&gt;Be Physically Active&lt;&#x2F;h3&gt;
&lt;p&gt;Any kind of physical activity can help you decompress your mind.&lt;&#x2F;p&gt;
&lt;p&gt;I often solve problems much quickly by physically moving away from my workspace.
For example, I go out for a walk and do not think about work. The problems
magically solve themselves when I get back to work.&lt;&#x2F;p&gt;
&lt;p&gt;Trust me, when you move away from work for half an hour, skies will not fall
apart; things will be exactly how you left them off. So give yourself the time
you deserve.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;meditation&quot;&gt;Meditation&lt;&#x2F;h3&gt;
&lt;p&gt;Like self-compassion, practicing mindfulness, being fully present, focusing, and
observing yourself without judgment will calm you down. When you are “&lt;em&gt;at the
moment&lt;&#x2F;em&gt;,” fully present, you don’t mull over the past events, neither do you
worry about the future events.&lt;&#x2F;p&gt;
&lt;p&gt;Calm down your racing mind. It helps a lot.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stress-is-inevitable&quot;&gt;Stress is Inevitable&lt;&#x2F;h3&gt;
&lt;p&gt;Work stress is inevitable; it is part of life. However, you’ll feel refreshed
and under control with these strategies and tips. Don’t just read them. Try
them and make them a habit. You’ll see that you’ll sleep like a baby and wake
up fully refreshed, ready to tackle whatever the next day will throw at you.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.supremo.co.uk&#x2F;designers-eye&#x2F;&quot;&gt;Do you have a designer’s eye? Let’s see&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;micro-editor.github.io&#x2F;&quot;&gt;Tired of &lt;code&gt;vim&lt;&#x2F;code&gt;? &lt;strong&gt;micro&lt;&#x2F;strong&gt; is a modern and intuitive terminal-based
editor&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;openbase.com&#x2F;&quot;&gt;&lt;strong&gt;Openbase&lt;&#x2F;strong&gt; helps you choose the right open-source package for your
task&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 18: Keep Cam and Carry On&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Grab Your Chisel and Start Pounding</title>
        <published>2021-11-01T00:00:00+00:00</published>
        <updated>2021-11-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/chisel/"/>
        <id>https://zerotohero.dev/roadmap/chisel/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/chisel/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;creativity2.png)g&quot; alt=&quot;Creativity requires experimentation.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Creativity requires experimentation.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;encourage-reinvention&quot;&gt;Encourage Reinvention&lt;&#x2F;h2&gt;
&lt;p&gt;Everyone discourages us from reinventing the wheel. And it’s not just the people
around: All the software architecture &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;85039.Pattern_Oriented_Software_Architecture_Volume_1&quot;&gt;books&lt;&#x2F;a&gt;
👏 &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;85009.Design_Patterns&quot;&gt;we&lt;&#x2F;a&gt; 👏 &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;14788830-structured-parallel-programming&quot;&gt;read&lt;&#x2F;a&gt; are
&lt;strong&gt;against&lt;&#x2F;strong&gt; reinvention, too.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Well, you’re obviously being totally naïve, of course,” said the girl, “When
you’ve been in marketing as long as I have, you’ll know that before any new
product can be developed it has to be properly researched. We’ve got to find out
what people want from fire, how they relate to it, what sort of image it has for
them.”&lt;&#x2F;p&gt;
&lt;p&gt;“Stick it up your nose,” he said.&lt;&#x2F;p&gt;
&lt;p&gt;“Which is precisely the sort of thing we need to know,” insisted the girl, “Do
people want fire that can be fitted nasally?”&lt;&#x2F;p&gt;
&lt;p&gt;“And the wheel,” said the Captain, “What about this wheel thingy? It sounds a
terribly interesting project.”&lt;&#x2F;p&gt;
&lt;p&gt;— &lt;strong&gt;Douglas Adams&lt;&#x2F;strong&gt;, [The Hitchhiker’s Guide to the Galaxy,
Chapter 32][hhttg]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The reasoning is simple: The problem you are trying to solve has already been
solved by others. Instead of doing it yourself, you should learn from others’
sufferings because it’s the most effective way to occupy your time.&lt;&#x2F;p&gt;
&lt;p&gt;That’s the conventional wisdom. And &lt;strong&gt;conventional wisdom&lt;&#x2F;strong&gt;, like “&lt;em&gt;common
sense&lt;&#x2F;em&gt;”, is an &lt;strong&gt;oxymoron&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Can you see the circular problem with the line of thought that deems reinventing
a futile effort?—If everyone denies to solve any problem unless an existing
solution exists, then there won’t be any solutions, to begin with.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Nothing new will ever get written under such an approach;&lt;&#x2F;li&gt;
&lt;li&gt;And nothing existing will ever be polished, either.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To break the cliché even further, you might be surprised that
&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;exec&#x2F;obidos&#x2F;ASIN&#x2F;1568985967&quot;&gt;the &lt;strong&gt;wheel&lt;&#x2F;strong&gt; has been the most reinvented tool ever&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reinvent-to-make-it-better&quot;&gt;Reinvent to &lt;strong&gt;Make It Better&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s talk about software:&lt;&#x2F;p&gt;
&lt;p&gt;Any software that is older than a couple of years will be full of workarounds
for features that fall short, and patches that just don’t fit. Have you just
inherited a ten-year-old legacy code from a frustrated developer? If you are a
developer, I sure bet you have.&lt;&#x2F;p&gt;
&lt;p&gt;You have every right to wonder how on earth so much &lt;strong&gt;crap&lt;&#x2F;strong&gt; can cripple its way
into a codebase. Seriously though, if you’ve ever wondered why so much code is
crap; the reason is simple:&lt;&#x2F;p&gt;
&lt;p&gt;There is crap because we &lt;strong&gt;compromise&lt;&#x2F;strong&gt;—we have to: It’s often considered *
&lt;em&gt;quicker&lt;&#x2F;em&gt;* and &lt;strong&gt;faster&lt;&#x2F;strong&gt; to live with the current flaws.&lt;&#x2F;p&gt;
&lt;p&gt;We have deadlines to meet, metrics to hit, customers to satisfy.&lt;&#x2F;p&gt;
&lt;p&gt;The bottom line is:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;There is always something out there that can be made better&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is not only true for software but also true for anything you can imagine.
Anything can be made better, faster,
stronger; &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=gAjR4_CbPpQ&quot;&gt;our work is never over&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reinvent-to-transform&quot;&gt;Reinvent to &lt;strong&gt;Transform&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Mapping&lt;&#x2F;em&gt;, &lt;em&gt;Reduction&lt;&#x2F;em&gt;, &lt;em&gt;Filtering&lt;&#x2F;em&gt;, and &lt;em&gt;Transformation&lt;&#x2F;em&gt;: Anything you imagine
will fall into one of these categories (&lt;em&gt;that means life, as we know it, is
purely functional; yet that’s the point of another article 🙂&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;You can express any concept as a mapping, filtering, or transformation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Inventing&lt;&#x2F;strong&gt; is one of these concepts:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;invention-is-transformation&quot;&gt;Invention Is &lt;strong&gt;Transformation&lt;&#x2F;strong&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;You take a bunch of crazy &lt;strong&gt;$#!%&lt;&#x2F;strong&gt; and transform them into even crazier **$#!%
**.&lt;&#x2F;p&gt;
&lt;p&gt;I don’t know you what you’d think, and I wholeheartedly believe that
transformation is &lt;strong&gt;not&lt;&#x2F;strong&gt; a waste of time. We need to be &lt;strong&gt;more creative&lt;&#x2F;strong&gt; and
&lt;strong&gt;less dull&lt;&#x2F;strong&gt;. That’s the only way to &lt;strong&gt;transform&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The hard truth is that we carve out the edges of square pegs to fit them into
round holes, and call this “&lt;em&gt;code reuse&lt;&#x2F;em&gt;”.&lt;&#x2F;p&gt;
&lt;p&gt;Nothing is a simple as it seems. Nothing fits right for the first time.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;About the NIH Syndrome&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now, to be clear, I am also against the “&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Not_invented_here&quot;&gt;&lt;em&gt;not invented here&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;”
(NIH) syndrome. Yet, in the developer community, I see an increased aptitude
to blindly use tools without questioning their internals.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It’s okay to be outrageous. It’s the acts of insanity that often lead the
simplest of solutions: Try new things and have fun.&lt;&#x2F;p&gt;
&lt;p&gt;Think differently. Do something different. By doing things differently, you will
begin to &lt;strong&gt;see&lt;&#x2F;strong&gt; things &lt;strong&gt;differently&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Why do we like to stick with what we know?&lt;&#x2F;p&gt;
&lt;p&gt;We like to stick with certain tools&#x2F;patterns&#x2F;libraries—it is not because we
support code reuse. Quite the opposite: it is because we are wired to preserve
energy. We are protecting our mental resources. We are too lazy to leave our
comfort zones.&lt;&#x2F;p&gt;
&lt;p&gt;Now &lt;strong&gt;that&lt;&#x2F;strong&gt; is dull. And &lt;strong&gt;dull&lt;&#x2F;strong&gt; is the polar opposite of creative—it is not
something that you would aspire to be.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;invention-is-insight&quot;&gt;Invention is &lt;strong&gt;Insight&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Reinventing the wheel gives you the insight about the wheel.&lt;&#x2F;p&gt;
&lt;p&gt;If you don’t know a concept well enough to reinvent it; how can you understand
it enough to build something more complicated on top of it?!&lt;&#x2F;p&gt;
&lt;p&gt;You know what? Occasionally you will come up with a better wheel, too.&lt;&#x2F;p&gt;
&lt;p&gt;That’s not the purpose, though.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;em&gt;purpose&lt;&#x2F;em&gt; is to go &lt;strong&gt;through&lt;&#x2F;strong&gt; a &lt;strong&gt;transformation&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The world needs its crazy-makers&lt;&#x2F;strong&gt;, and the world needs lots of them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reinvent-to-learn&quot;&gt;Reinvent to &lt;strong&gt;Learn&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;“What I cannot create, I do not understand.”&lt;&#x2F;p&gt;
&lt;p&gt;👆 those were &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Richard_Feynman&quot;&gt;Richard Feynman&lt;&#x2F;a&gt;’s
last words on his blackboard at the time of his death.&lt;&#x2F;p&gt;
&lt;p&gt;Why do children break their toys? Because the best way to learn about something
is to tear it into pieces and then bring those pieces together.&lt;&#x2F;p&gt;
&lt;p&gt;Understanding is what makes you grow. Without an &lt;strong&gt;understanding&lt;&#x2F;strong&gt; of your
&lt;strong&gt;environment&lt;&#x2F;strong&gt;, you won’t have the power. And to survive in any ecosystem,
knowing the system helps a lot.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;be-a-tinkerer&quot;&gt;Be a Tinkerer&lt;&#x2F;h2&gt;
&lt;p&gt;I have a massive pile of “&lt;strong&gt;stuff&lt;&#x2F;strong&gt;” (&lt;em&gt;pieces of code, images, assets, snippets,
documents&lt;&#x2F;em&gt;) that are &lt;strong&gt;diverse&lt;&#x2F;strong&gt; and interesting to me. And I &lt;strong&gt;tinker&lt;&#x2F;strong&gt; to
figure out ways to make those things fit together.&lt;&#x2F;p&gt;
&lt;p&gt;I am sure there are better solutions somewhere, written by someone, that address
what that I am trying to achieve. That’s &lt;strong&gt;not&lt;&#x2F;strong&gt; the point, though.&lt;&#x2F;p&gt;
&lt;p&gt;The point is that &lt;em&gt;sustaining&lt;&#x2F;em&gt; a &lt;strong&gt;habit&lt;&#x2F;strong&gt; to combine and mentally fit
&lt;em&gt;seemingly-unrelated&lt;&#x2F;em&gt; pieces together becomes extremely helpful. It is
especially useful when you find yourself in a situation where you &lt;strong&gt;have to&lt;&#x2F;strong&gt;
come up with a solution to a really hard problem &lt;strong&gt;ASAP&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The best way to learn how to use tools is to learn to &lt;strong&gt;be a tool-maker&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;do-not-limit-yourself&quot;&gt;Do Not Limit Yourself&lt;&#x2F;h2&gt;
&lt;p&gt;I don’t also believe that you need to create something that others would use.&lt;&#x2F;p&gt;
&lt;p&gt;Don’t limit yourself to others’ requirements because no matter what you come up
with, you will learn &lt;strong&gt;a lot&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;You will gain confidence in a given area of expertise. That expertise will help
you come up with actual productive work better and faster than anyone else.&lt;&#x2F;p&gt;
&lt;p&gt;Don’t fear the be the only &lt;strong&gt;crazy maker&lt;&#x2F;strong&gt; in the room.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;p&gt;Just one thing, though:&lt;&#x2F;p&gt;
&lt;p&gt;Don’t get your hands dirty all of a sudden, thinking that nobody has solved a
similar problem before you. Before starting anything, &lt;strong&gt;examine&lt;&#x2F;strong&gt; what others
have done before you:&lt;&#x2F;p&gt;
&lt;p&gt;While reinventing your wheel, you will see the size of the giants on whose
shoulders you are standing. Also, don’t shy away from some of those people. When
you &lt;a href=&quot;http:&#x2F;&#x2F;www.catb.org&#x2F;esr&#x2F;faqs&#x2F;smart-questions.html&quot;&gt;ask smart questions&lt;&#x2F;a&gt;,
they are, indeed, quite receptive and welcoming.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reinvent-to-adapt&quot;&gt;Reinvent to &lt;strong&gt;Adapt&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s talk about &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Evolution&quot;&gt;&lt;strong&gt;evolution&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Without &lt;strong&gt;variation&lt;&#x2F;strong&gt;, a population cannot evolve in response to changing
environmental variables. As a result, it may face an increased risk of
&lt;strong&gt;extinction&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That’s what &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Evolution&quot;&gt;the theory of evolution&lt;&#x2F;a&gt;
tells us. That is true for anything: &lt;em&gt;economics&lt;&#x2F;em&gt;, &lt;em&gt;politics&lt;&#x2F;em&gt;, &lt;em&gt;finance&lt;&#x2F;em&gt;,
&lt;em&gt;programming&lt;&#x2F;em&gt;, &lt;em&gt;open-source&lt;&#x2F;em&gt;, &lt;strong&gt;&lt;em&gt;ideas&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;…&lt;&#x2F;p&gt;
&lt;p&gt;Without &lt;strong&gt;variety&lt;&#x2F;strong&gt;, you cannot be fruitful, let alone multiply.&lt;&#x2F;p&gt;
&lt;p&gt;As a corollary to that: &lt;strong&gt;Without reinvention, diversity is impossible&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So if you plan to create yet another JavaScript MVC Framework, you are actually
doing good to the community.&lt;&#x2F;p&gt;
&lt;p&gt;Having different things that try to solve a problem is not bad, it is good; it
is really damn good.&lt;&#x2F;p&gt;
&lt;p&gt;The flawed mentality of “&lt;em&gt;never reinventing the wheel&lt;&#x2F;em&gt;” might lead to *
&lt;em&gt;stagnation&lt;&#x2F;em&gt;* and can hinder the &lt;strong&gt;evolution&lt;&#x2F;strong&gt; of &lt;strong&gt;better&lt;&#x2F;strong&gt; outcomes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;beware-the-frankenware&quot;&gt;Beware the Frankenware&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Frankeware&lt;&#x2F;strong&gt; is any software product that consists of a mashup of various
reusable code pieces—the problem is, those reusable pieces do not quite fit
into the product. They also do not play well with each other.&lt;&#x2F;p&gt;
&lt;p&gt;The result is a working yet &lt;strong&gt;buggy&lt;&#x2F;strong&gt; and &lt;strong&gt;unstable&lt;&#x2F;strong&gt; code base that can blow
up with even the simplest feature modification.&lt;&#x2F;p&gt;
&lt;p&gt;Why? Because reuse comes with its &lt;strong&gt;hidden assumptions&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The person who invented the wheel designed it with their &lt;strong&gt;preconceived&lt;&#x2F;strong&gt;
notions, and their sets of requirements. You should find yourself lucky if any
of these are documented at all. Any time you attempt to reuse the wheel, it is
quite possible that one or more of these assumptions won’t hold.&lt;&#x2F;p&gt;
&lt;p&gt;Reusing the wheel &lt;strong&gt;can&lt;&#x2F;strong&gt; be inefficient at best, and just plain wrong at worst.&lt;&#x2F;p&gt;
&lt;p&gt;I am not saying to reinvent all the things—that would be counter-productive.&lt;&#x2F;p&gt;
&lt;p&gt;It’s just that you should analyze the reusable pieces that you plan to use
&lt;strong&gt;very well&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;Don’t just read the public documents; dive into developer communities, read the
source code, check the open bugs and issues, see what common pitfalls they have
avoided along their way…&lt;&#x2F;p&gt;
&lt;p&gt;Don’t buy into anything because it is the coolest newest kid on the block.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Know&lt;&#x2F;strong&gt; what you are doing, and be &lt;strong&gt;wise&lt;&#x2F;strong&gt; in your decisions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reinvent-and-be-responsible&quot;&gt;Reinvent and &lt;strong&gt;Be Responsible&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;That goes without saying, and I’ll say anyway:&lt;&#x2F;p&gt;
&lt;p&gt;I am by no means advocating for inefficient use of company time.&lt;&#x2F;p&gt;
&lt;p&gt;If your job title is not “&lt;em&gt;Chief Executive Crazy-Maker&lt;&#x2F;em&gt;”, then you are expected
to get things done, as soon as possible, as cost-effective as possible, with the
best quality as possible.&lt;&#x2F;p&gt;
&lt;p&gt;Unless you have a solid reason that your reinvention is necessary (&lt;em&gt;because it
will be simpler, easier to integrate, more lightweight, easy-to-maintain, you
name it…&lt;&#x2F;em&gt;), then suck your ego up and use a battle-tested solution that
everyone trusts.&lt;&#x2F;p&gt;
&lt;p&gt;And if you do want to come up with your solution anyway, then do it in your
&lt;strong&gt;personal&lt;&#x2F;strong&gt; time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reinvent-for-a-competitive-edge&quot;&gt;Reinvent for a &lt;strong&gt;Competitive Edge&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Assume you are one of the rare individuals wanting to create something that has
never been done before. The type who wants
to &lt;a href=&quot;https:&#x2F;&#x2F;thedobook.co&#x2F;products&#x2F;do-disrupt-change-the-status-quo-or-become-it&quot;&gt;disrupt the status quo&lt;&#x2F;a&gt;,
you know—if you are aware of the alternatives and are purposefully
reinventing, it is actually an &lt;strong&gt;advantage&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s how &lt;a href=&quot;https:&#x2F;&#x2F;joelonsoftware.com&#x2F;&quot;&gt;Joel Spolsky&lt;&#x2F;a&gt; states that:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, if you’re writing a cool 3D shoot-em-up game (&lt;em&gt;like Quake, around
the same period&lt;&#x2F;em&gt;) and your key number one differentiator is to have the
coolest 3D graphics, you do not use whatever 3D library you can find—you
write your own because it’s fundamental to what you do.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Joel Spolsky&lt;&#x2F;strong&gt;—&lt;a href=&quot;https:&#x2F;&#x2F;www.joelonsoftware.com&#x2F;2000&#x2F;12&#x2F;02&#x2F;up-the-tata-without-a-tutu&#x2F;&quot;&gt;Up the tata without a tutu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is far more than a pedagogical benefit:&lt;&#x2F;p&gt;
&lt;p&gt;Reinventing the wheel actually takes you &lt;strong&gt;ahead of the competition&lt;&#x2F;strong&gt; because
you can fine-tune your wheel precisely to your needs. Thus, you will &lt;strong&gt;opt in&lt;&#x2F;strong&gt;
to &lt;strong&gt;differentiate&lt;&#x2F;strong&gt;, and &lt;strong&gt;perform better&lt;&#x2F;strong&gt; (&lt;em&gt;while, possibly, compromising
clarity and reusability—and that’s okay&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;beware-of-the-cost-of-reinvention&quot;&gt;Beware of the &lt;strong&gt;Cost of Reinvention&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This is not to discourage you. I just want to lay out the facts as straight as I
can:&lt;&#x2F;p&gt;
&lt;p&gt;During your reinvention, you will start with a &lt;strong&gt;simple&lt;&#x2F;strong&gt; and &lt;strong&gt;obvious&lt;&#x2F;strong&gt;
solution to your problem.&lt;&#x2F;p&gt;
&lt;p&gt;That “&lt;em&gt;simple&lt;&#x2F;em&gt;” and “&lt;em&gt;obvious&lt;&#x2F;em&gt;” solution will, &lt;em&gt;99% of the time&lt;&#x2F;em&gt;, be
&lt;strong&gt;inadequate&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;You will have to &lt;strong&gt;reiterate&lt;&#x2F;strong&gt; your solution over and over again.&lt;&#x2F;p&gt;
&lt;p&gt;And that’s a &lt;strong&gt;good thing&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes, you will think that you have taken a reasonable path, only to find
that things are getting more and more difficult as you try to improve your
solution.&lt;&#x2F;p&gt;
&lt;p&gt;Then you will discover a different path that looks promising. Then you erase and
rewind to the beginning.&lt;&#x2F;p&gt;
&lt;p&gt;Your implementation will “&lt;em&gt;probably&lt;&#x2F;em&gt;” stink, and people will discourage you a
lot.&lt;&#x2F;p&gt;
&lt;p&gt;That’s &lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;2615.The_Innovator_s_Dilemma&quot;&gt;&lt;strong&gt;the innovator’s dilemma&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. Sometimes it is right to listen
to others, and then continue doing what you believe to be the right thing.&lt;&#x2F;p&gt;
&lt;p&gt;Another thing:&lt;&#x2F;p&gt;
&lt;p&gt;Don’t try to reinvent everything at once. — It will put you into a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Analysis_paralysis&quot;&gt;&lt;em&gt;paralysis
by analysis&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; mode, and you will gain nothing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;choose-something-that-adds-value-to-you&quot;&gt;Choose Something that Adds Value to You&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“I know why you’re here, Neo. I know what you’ve been doing… why you hardly
sleep, why you live alone, and why night after night, you sit by your
computer… It’s the question that drives us, Neo. It’s the question that
brought you here. You know the question.”&lt;br &#x2F;&gt;
— &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;The_Matrix&quot;&gt;&lt;strong&gt;The Matrix&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;1999&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As long as reinventing is your intention, and it does not stem from your lack of
knowledge of other options, it’s perfectly fine to do so—having said that, I
am pretty much sure I can live without programming another linked list in my
lifetime.&lt;&#x2F;p&gt;
&lt;p&gt;So the question is not whether to reinvent.&lt;&#x2F;p&gt;
&lt;p&gt;The question is: “&lt;em&gt;Is &lt;a href=&quot;https:&#x2F;&#x2F;www.investopedia.com&#x2F;terms&#x2F;o&#x2F;opportunitycost.asp&quot;&gt;&lt;strong&gt;the opportunity cost of the time you spend&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
reinventing worth your efforts?&lt;&#x2F;em&gt;”&lt;&#x2F;p&gt;
&lt;p&gt;Or, in other words: “&lt;em&gt;Is there a more productive way to occupy &lt;strong&gt;your&lt;&#x2F;strong&gt;
time&lt;&#x2F;em&gt;?”&lt;&#x2F;p&gt;
&lt;p&gt;Answering this question—and other similar questions—is &lt;strong&gt;personal&lt;&#x2F;strong&gt;, and has
never been easy, and it &lt;strong&gt;has to be made&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That answer will &lt;strong&gt;irreversibly change you&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“Every child is an artist, the problem is staying an artist when you grow
up.”&lt;br &#x2F;&gt;
— &lt;strong&gt;Pablo Picasso&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;My friends consider me a hacker—and as such— I have been &lt;strong&gt;different&lt;&#x2F;strong&gt;,
diverse, &lt;strong&gt;divergent&lt;&#x2F;strong&gt;, throughout my life.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve been saying for the longest time, that reinventing is &lt;strong&gt;not&lt;&#x2F;strong&gt; necessarily a
waste:&lt;&#x2F;p&gt;
&lt;p&gt;At the very least, it helps you to gain more knowledge to choose the right tool
for the job. At a more existential perspective, it &lt;strong&gt;transforms&lt;&#x2F;strong&gt; you into a
totally different being.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Very few&lt;&#x2F;em&gt; believed me.&lt;&#x2F;p&gt;
&lt;p&gt;With this article, I just wanted to reach out to those who felt the same way
somewhere along their journeys.&lt;&#x2F;p&gt;
&lt;p&gt;Screw the naysayers, and do &lt;strong&gt;reinvent&lt;&#x2F;strong&gt; things.&lt;&#x2F;p&gt;
&lt;p&gt;With one caveat though:&lt;&#x2F;p&gt;
&lt;p&gt;Don’t think you are a smart ass who does not need to learn from the existing
wheels and wheel makers, as that approach would be &lt;strong&gt;selfish&lt;&#x2F;strong&gt;, and
&lt;strong&gt;galactically stupid&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We are geeks for a reason:&lt;&#x2F;p&gt;
&lt;p&gt;We love to tinker; we &lt;strong&gt;love&lt;&#x2F;strong&gt; to solve problems.&lt;&#x2F;p&gt;
&lt;p&gt;And who cares if the problem has already been solved a bazillion times—if you
haven’t solved it, it’s &lt;strong&gt;yours&lt;&#x2F;strong&gt; to solve. The beauty is in the &lt;strong&gt;path&lt;&#x2F;strong&gt; you
walk, &lt;strong&gt;not&lt;&#x2F;strong&gt; the destination.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of seeing a problem and solving it, it’s much better to see a solution
and find its problem. Assuming there is no true answer and continuously asking
questions is better than sticking to a presumed answer.&lt;&#x2F;p&gt;
&lt;p&gt;Some will think that you are not getting results; however, not getting results
is different than resulting in nothing. Those who are only looking forward
cannot see the leap you make.&lt;&#x2F;p&gt;
&lt;p&gt;Dream a better dream and &lt;strong&gt;reinvent&lt;&#x2F;strong&gt; to make it real 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Grab Your Chisel and Start Pounding&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Git Comfortable</title>
        <published>2021-10-27T00:00:00+00:00</published>
        <updated>2021-10-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/git/"/>
        <id>https://zerotohero.dev/roadmap/git/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/git/">&lt;p&gt;{{img(
src=“&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;git.png”,
alt=“Mastering git is one of the best investments you can make as a
developer.”
)}&lt;&#x2F;p&gt;
&lt;p&gt;As a developer, you’ll spend a considerable amount of time
with &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;&quot;&gt;&lt;code&gt;git&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. So the more comfortable you get with it, the
more productive you will be. This page lists learning resources to ramp up
your &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;&quot;&gt;&lt;code&gt;git&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; skills.&lt;&#x2F;p&gt;
&lt;p&gt;For starters, &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;&quot;&gt;The Git Book&lt;&#x2F;a&gt; would be enough to learn
about &lt;code&gt;git&lt;&#x2F;code&gt;. And, &lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;&quot;&gt;&lt;strong&gt;GitHub&lt;&#x2F;strong&gt;’s Help Documentation&lt;&#x2F;a&gt; is
a great place to start &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;&quot;&gt;&lt;strong&gt;GitHub&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. Once you skim through
them, here are a few additional resources that you can use:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;krishnabiradar.com&#x2F;blogs&#x2F;deconstructing-a-git-commit&#x2F;&quot;&gt;Deconstructing a Git Commit&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.deployhq.com&#x2F;git&quot;&gt;DeployHQ: Git Tutorial&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;onlywei.github.io&#x2F;explain-git-with-d3&#x2F;&quot;&gt;Explain Git With D3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arslanbilal&#x2F;git-cheat-sheet&quot;&gt;Git Cheat Sheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;sethrobertson.github.io&#x2F;GitFixUm&#x2F;fixup.html&quot;&gt;Git Fix Up&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jwiegley.github.io&#x2F;git-from-the-bottom-up&#x2F;&quot;&gt;Git From the Bottom Up&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;githowto.com&#x2F;&quot;&gt;Git How To&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www-cs-students.stanford.edu&#x2F;~blynn&#x2F;gitmagic&#x2F;index.html&quot;&gt;Git Magic&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;17239270-git-pocket-guide&quot;&gt;Git Pocket Guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;justinhileman.info&#x2F;article&#x2F;git-pretty&#x2F;git-pretty.png&quot;&gt;Git Pretty&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;c&#x2F;DanGitschoolDude&quot;&gt;Git School&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;git-tips&#x2F;tips&quot;&gt;Git Tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.atlassian.com&#x2F;git&#x2F;tutorials&quot;&gt;Atlassian: Git Tutorials&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;codewords.recurse.com&#x2F;issues&#x2F;two&#x2F;git-from-the-inside-out&quot;&gt;Git from the Inside Out&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.developintelligence.com&#x2F;blog&#x2F;2015&#x2F;06&#x2F;making-sense-of-git-a-visual-perspective&#x2F;&quot;&gt;Git: a Visual Perspective&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;susam&#x2F;gitpr&quot;&gt;GitPR&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.columbia.edu&#x2F;~zjn2101&#x2F;intermediate-git&#x2F;#1&quot;&gt;Intermediate Git&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learngitbranching.js.org&#x2F;&quot;&gt;Learn Git Branching&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.git-tower.com&#x2F;learn&#x2F;&quot;&gt;Learn Git&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tom.preston-werner.com&#x2F;2009&#x2F;05&#x2F;19&#x2F;the-git-parable.html&quot;&gt;The Git Parable&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;try.github.io&#x2F;&quot;&gt;Try Github&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lostechies.com&#x2F;joshuaflanagan&#x2F;2010&#x2F;09&#x2F;03&#x2F;use-gitk-to-understand-git&#x2F;&quot;&gt;Use &lt;code&gt;gitk&lt;&#x2F;code&gt; to Understand Git&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I guess, that’s more than enough to &lt;strong&gt;git&lt;&#x2F;strong&gt; you started 🙂.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Git Comfortable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Resources Every Developer Must Read: No Exceptions</title>
        <published>2021-10-25T00:00:00+00:00</published>
        <updated>2021-10-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/bedtime-reading/"/>
        <id>https://zerotohero.dev/roadmap/bedtime-reading/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/bedtime-reading/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot; alt=&quot;Resources Every Developer Must Read—No Exceptions&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;books.png&quot; alt=&quot;Resources.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Resources.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This is an extension to &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;&quot;&gt;&lt;strong&gt;Be the Next Version of Yourself&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; I wrote
a while ago. Here, you’ll find mainly language and platform-agnostic
learning resources to help you become a better software craftsman.&lt;&#x2F;p&gt;
&lt;p&gt;I have roughly categorized the links in this document into sections, but they
are in no particular order.&lt;&#x2F;p&gt;
&lt;p&gt;All of those links below point to the books’
&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;&quot;&gt;&lt;strong&gt;Goodreads&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; profile so that you can read what
others have to say about them and decide whether to read them yourself.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;user-experience&quot;&gt;User Experience&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;289062.About_Face_3&quot;&gt;About Face 3: The Essentials of Interaction Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;344724.Designing_Interfaces&quot;&gt;Designing Interfaces: Patterns for Effective Interaction Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;22149.Designing_Web_Usability&quot;&gt;Designing Web Usability&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;18197267-don-t-make-me-think-revisited&quot;&gt;Don’t Make Me Think, Revisited: A Common Sense Approach to Web Usability&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;841.Emotional_Design&quot;&gt;Emotional Design: Why We Love (&lt;em&gt;or
Hate&lt;&#x2F;em&gt;) Everyday Things&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;840.The_Design_of_Everyday_Things&quot;&gt;The Design of Everyday Things&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;263287.The_Design_of_Future_Things&quot;&gt;The Design of Future Things&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;344726.The_Humane_Interface&quot;&gt;The Humane Interface: New Directions for Designing Interactive Systems&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;information-architecture&quot;&gt;Information Architecture&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;17745.Envisioning_Information&quot;&gt;Envisioning Information&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;70132.Information_Architecture_for_the_World_Wide_Web&quot;&gt;Information Architecture for the World Wide Web: Designing Large-Scale Web Sites&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;marketing&quot;&gt;Marketing&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;22668729-hooked&quot;&gt;Hooked: How to Build Habit-Forming Products&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;microservices-and-system-design&quot;&gt;Microservices and System Design&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;en&#x2F;book&#x2F;show&#x2F;30460867-beyond-the-twelve-factor-app-exploring-the-dna-of-highly-scalable-resil&quot;&gt;Beyond the Twelve-Factor App Exploring the DNA of Highly Scalable, Resilient Cloud Applications&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;23463279-designing-data-intensive-applications&quot;&gt;Designing Data-Intensive Applications&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;179133.Domain_Driven_Design&quot;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;high-scalability&quot;&gt;High Scalability&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;highscalability.com&#x2F;all-time-favorites&#x2F;&quot;&gt;High Scalability (&lt;em&gt;All-Time
Favorites&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;data-structures-and-algorithms&quot;&gt;Data Structures and Algorithms&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;108986.Introduction_to_Algorithms&quot;&gt;Cormen, Introduction to Algorithms&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;425208.The_Algorithm_Design_Manual&quot;&gt;Skiena, Algorithm Design Manual&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;43713.Structure_and_Interpretation_of_Computer_Programs&quot;&gt;Structure and Interpretation of Computer Programs (&lt;em&gt;MIT Electrical
Engineering and Computer Science&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;112247.The_Art_of_Computer_Programming_Volume_1&quot;&gt;Knuth, The Art of Computer Programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;387190.Test_Driven_Development&quot;&gt;Test Driven Development: By Example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;4843320-the-art-of-application-performance-testing&quot;&gt;The Art of Application Performance Testing: Help for Programmers and Quality Assurance&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;software-craftsmanship&quot;&gt;Software Craftsmanship&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;3735293-clean-code&quot;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;4845.Code_Complete&quot;&gt;Code Complete&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;6713575-coders-at-work&quot;&gt;Coders at Work: Reflections on the Craft of Programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;8686650-continuous-delivery&quot;&gt;Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;1416996.Dynamics_of_Software_Development&quot;&gt;Dynamics of Software Development&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;41793.Hackers_Painters&quot;&gt;Hackers &amp;amp; Painters: Big Ideas from the Computer Age&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;276079.Hacker_s_Delight&quot;&gt;Hacker’s Delight&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;349417.Implementing_Lean_Software_Development&quot;&gt;Implementing Lean Software Development: From Concept to Cash&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;67825.Peopleware&quot;&gt;Peopleware: Productive Projects and Teams&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;1275277.Programming_On_Purpose_III&quot;&gt;Programming On Purpose III: Essays On Software Technology&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;52084.Programming_Pearls&quot;&gt;Programming Pearls&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;93892.Rapid_Development&quot;&gt;Rapid Development: Taming Wild Software Schedules&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;44936.Refactoring&quot;&gt;Refactoring: Improving the Design of Existing Code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;6732019-rework&quot;&gt;Rework&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;23232941-soft-skills&quot;&gt;Soft Skills: The Software Developer’s Life Manual&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;134825.The_Cathedral_the_Bazaar&quot;&gt;The Cathedral &amp;amp; the Bazaar: Musings on Linux and Open Source by an Accidental Revolutionary&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;10284614-the-clean-coder&quot;&gt;The Clean Coder: A Code of Conduct for Professional Programmers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;17349.The_Demon_Haunted_World&quot;&gt;The Demon-Haunted World: Science as a Candle in the Dark&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;13629.The_Mythical_Man_Month&quot;&gt;The Mythical Man-Month: Essays on Software Engineering&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;6399113-the-passionate-programmer&quot;&gt;The Passionate Programmer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;4099.The_Pragmatic_Programmer&quot;&gt;The Pragmatic Programmer: From Journeyman to Master&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;en&#x2F;book&#x2F;show&#x2F;51941365-the-self-taught-programmer&quot;&gt;The Self-Taught Programmer: The Definitive Guide to Programming Professionally&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;44919.Working_Effectively_with_Legacy_Code&quot;&gt;Working Effectively with Legacy Code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;629.Zen_and_the_Art_of_Motorcycle_Maintenance&quot;&gt;Zen and the Art of Motorcycle Maintenance: An Inquiry Into Values&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;productivity-and-personal-development&quot;&gt;Productivity and Personal Development&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.lifehack.org&#x2F;articles&#x2F;communication&#x2F;this-what-happens-when-you-move-out-your-comfort-zone.html&quot;&gt;This is What Happens When You Move Out of Your Comfort Zone&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.heysigmund.com&#x2F;why-what-you-focus-on-is-what-becomes-powerful-why-your-thoughts-and-feelings-matter&#x2F;&quot;&gt;What You Focus on Is What Becomes Powerful&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;6667514-the-checklist-manifesto&quot;&gt;The Checklist Manifesto: How to Get Things Right&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.catb.org&#x2F;esr&#x2F;faqs&#x2F;smart-questions.html&quot;&gt;How to Ask Questions the Smart Way&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cs.jhu.edu&#x2F;~jason&#x2F;advice&#x2F;how-to-read-a-paper.html&quot;&gt;How to Read a Technical Paper&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;timeless-classics&quot;&gt;Timeless Classics&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=APx2yFA0-B4&quot;&gt;Bruce Lee: Be Like Water&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;are-your-exceptions-silent&#x2F;&quot;&gt;Are Your Exceptions Silent&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;steve-yegge.blogspot.com&#x2F;2006&#x2F;03&#x2F;execution-in-kingdom-of-nouns.html&quot;&gt;Execution in the Kingdom of Nouns&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.joelonsoftware.com&#x2F;2005&#x2F;05&#x2F;11&#x2F;making-wrong-code-look-wrong&#x2F;&quot;&gt;Making Wrong Code Look Wrong&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;the-best-code-is-no-code-at-all&#x2F;&quot;&gt;The Best Code is No Code at all&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;the-broken-window-theory&#x2F;&quot;&gt;The Broken Window Theory&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;the-joy-of-deletion&#x2F;&quot;&gt;The Joy of Deletion&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.joelonsoftware.com&#x2F;2000&#x2F;12&#x2F;02&#x2F;up-the-tata-without-a-tutu&#x2F;&quot;&gt;Up the tata without a tutu&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;pages.di.unipi.it&#x2F;corradini&#x2F;Didattica&#x2F;AP-19&#x2F;DOCS&#x2F;WhyDoIHateFrameworks.pdf&quot;&gt;Why I hate Frameworks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.joelonsoftware.com&#x2F;2003&#x2F;10&#x2F;08&#x2F;the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses&#x2F;&quot;&gt;The Absolute Minimum Every Developer Must Know About Unicode&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.joelonsoftware.com&#x2F;2000&#x2F;08&#x2F;09&#x2F;the-joel-test-12-steps-to-better-code&#x2F;&quot;&gt;The Joel Test: 12 Steps to Better Code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;being-technologically-savvy-isnt-enough&#x2F;&quot;&gt;Being Technically Savvy Isn’t Enough&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;dont-be-afraid-to-break-stuff&#x2F;&quot;&gt;Don’t Be Afraid to Break Stuff&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;fail-early-fail-often&#x2F;&quot;&gt;Fail Early, Fail Often&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;egoless-programming-you-are-not-your-job&#x2F;&quot;&gt;Egoless Programming, You Are not Your Job&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;the-multi-tasking-myth&#x2F;&quot;&gt;The Multitasking Myth&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;the-first-rule-of-programming-its-always-your-fault&#x2F;&quot;&gt;The First Rule of Programming: It’s Always Your Fault&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;code-tells-you-how-comments-tell-you-why&#x2F;&quot;&gt;Code Tells You How, Comments Tell You Why&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;we-make-shitty-software-with-bugs&#x2F;&quot;&gt;We Make Shitty Software With Bugs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;have-fun-book&quot;&gt;Have Fun 📖&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for now. Enjoy your bedtime reading list.&lt;&#x2F;p&gt;
&lt;p&gt;And until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Resources Every Developer Must Read: No Exceptions&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Interview Done. Radio Silence 🎃 What Now?</title>
        <published>2021-10-22T00:00:00+00:00</published>
        <updated>2021-10-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0024/"/>
        <id>https://zerotohero.dev/highlights/issue-0024/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0024/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot; alt=&quot;Interview Done. Radio Silence 🎃 What Now?&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;radio.png&quot; alt=&quot;Radio silence?&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Radio silence?&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the 24th issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;My schedule had been a total trainwreck for the last few months, and I couldn’t
find much time to show ❤️ to &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights highlights.&lt;&#x2F;p&gt;
&lt;p&gt;Starting from this one, I’m planning to change this 🙂.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;woman-fried-egg-tiny-updates-here-and-there&quot;&gt;👩‍🍳 Tiny Updates Here and There&lt;&#x2F;h2&gt;
&lt;p&gt;If you are a frequent visitor, you might have realized some minor design changes
here and there. More of those are coming, and I’m also creating a mini video
about my overall design process.&lt;&#x2F;p&gt;
&lt;p&gt;After all, Zero to Hero is one of the &lt;strong&gt;central&lt;&#x2F;strong&gt; places I create content, and
no matter how hectic my life is, it deserves attention and care.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;turtle-power-turtle-zap&quot;&gt;Turtle Power 🐢⚡️&lt;&#x2F;h2&gt;
&lt;p&gt;If you are interested in federating identities across multiple clusters and
using mutual transport layer security over &lt;strong&gt;gRPC&lt;&#x2F;strong&gt; to let workloads talk
between those clusters. First of all, you have weird interests 🙂. And secondly,
I have a series of ten videos over forty-five minutes that you can
enjoy &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;&quot;&gt;mTLS With SPIRE&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2022&amp;#x2F;10&amp;#x2F;Fe0tEnHUcAAzJ45-2.jpeg&quot; alt=&quot;SPIFFE, SPIRE, Ninja Turtles 🐢🐢🐢&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;SPIFFE, SPIRE, Ninja Turtles 🐢🐢🐢&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;&quot;&gt;In the series&lt;&#x2F;a&gt;, as usual, I assume
nothing and begin with a blank slate, coding everything from scratch and
creating a brand-new project. On the videos’ web page, you can also get the
source code and find many relevant links and articles to dive further.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;distributed-systems-are-grinches&quot;&gt;Distributed Systems Are Grinches&lt;&#x2F;h2&gt;
&lt;p&gt;Well, I thought of something else instead of a “&lt;em&gt;grinch&lt;&#x2F;em&gt;”, but I’m so very
polite, and I’m not going to say that thing.&lt;&#x2F;p&gt;
&lt;p&gt;This is from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;evan2645&quot;&gt;Evan Gilman&lt;&#x2F;a&gt; on &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; Slack
Channel. Evan is also the author
of &lt;a href=&quot;https:&#x2F;&#x2F;goodreads.com&#x2F;book&#x2F;show&#x2F;31805610-zero-trust-networks&quot;&gt;Zero Trust Networks&lt;&#x2F;a&gt;.
So, when he talks about &lt;strong&gt;Distributed Systems&lt;&#x2F;strong&gt;, you can assume he knows what
he’s talking about (&lt;em&gt;content edited for brevity and clarity&lt;&#x2F;em&gt;):&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here are a few things that come to mind when you want to use a remote database
such as Google Cloud Spanner as the backing store of a distributed system that
requires &lt;strong&gt;strong consistency&lt;&#x2F;strong&gt; (&lt;em&gt;such as &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;&quot;&gt;SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Performance&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tight consistency will always require some number of round trips with some
quorum of nodes to commit changes and move forward. And, there will always be an
upper limit applied to how fast this system can progress: The latency or round
trip time between participants is a crucial factor.&lt;&#x2F;p&gt;
&lt;p&gt;Given (&lt;em&gt;increased&lt;&#x2F;em&gt;) latency, the system will naturally hit a performance wall.
This can be (&lt;em&gt;sometimes disastrously&lt;&#x2F;em&gt;) exacerbated by the “&lt;em&gt;Internet weather&lt;&#x2F;em&gt;”.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Operational Overhead&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Some systems require synchronization periods when starting new or restarting
existing nodes. During these periods, bulk transfer of data occurs.&lt;&#x2F;p&gt;
&lt;p&gt;Cross-region pipes or commodity Internet is usually (&lt;em&gt;comparatively&lt;&#x2F;em&gt;) lower
throughput. So, depending on how much data you’re talking about, it can induce
significant amounts of overhead on the wire and wait time during operations for
the cluster to stabilize following some event.&lt;&#x2F;p&gt;
&lt;p&gt;There will be similar concerns about time-to-recover from a restore
(&lt;em&gt;i.e., make sure your restore data is close by&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exotic Failure Modes&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Most distributed systems aren’t written, and don’t get tested, for use across
high latency lossy links. Lots of weird things can happen across these links,
which tend to have at least a couple middle boxes:&lt;&#x2F;p&gt;
&lt;p&gt;– TCP sessions that get held open but nobody is there,&lt;br &#x2F;&gt;
– High jitter on one link in the system that is traversing a really busy
router,&lt;br &#x2F;&gt;
– And many more…&lt;&#x2F;p&gt;
&lt;p&gt;Persistence systems—particularly those requiring consensus—like to fall
over when these things happen.&lt;&#x2F;p&gt;
&lt;p&gt;And many times, bugs are uncovered because nobody ever tried it before.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For the record, &lt;a href=&quot;https:&#x2F;&#x2F;ars-technica.com&#x2F;information-technology&#x2F;2015&#x2F;05&#x2F;the-discovery-of-apache-zookeepers-poison-packet&#x2F;&quot;&gt;here is an article that Evan wrote about exactly one of
these cases&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Why did I share it? Because I didn’t want it to be lost in Slack archives. And
dear Slack: &lt;strong&gt;show some ❤️ to open source communities&lt;&#x2F;strong&gt;. Not many of them have
the funds to secure a paid plan.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;interview-done-radio-silence-what-now&quot;&gt;Interview Done. Radio Silence. What Now?&lt;&#x2F;h2&gt;
&lt;p&gt;Radio silence after a job interview can be a painful feeling. But it doesn’t
always mean rejection.&lt;&#x2F;p&gt;
&lt;p&gt;Especially in large companies, the hiring teams might take a very long time to
deliberate, discuss potential candidates, and decide on the candidate to extend
an offer. It can take an equal amount of time to come up with an official offer
latter obtaining all the required approvals.&lt;&#x2F;p&gt;
&lt;p&gt;To better understand what’s holding up the process, ask questions and listen
carefully. In this process—like it or not—your recruiter is your ally. So
ask them (&lt;em&gt;or whoever the facilitator of the process is&lt;&#x2F;em&gt;) questions similar to
these:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When will you be reviewing candidates with the hiring manager?&lt;&#x2F;li&gt;
&lt;li&gt;When is the hiring manager hoping to make a decision?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This time frame is essential. Because if the hiring manager isn’t communicating
with you after this deliberation period, you are most likely not a top
candidate.&lt;&#x2F;p&gt;
&lt;p&gt;And there is nothing wrong with that, either.And, there is nothing wrong with
that either. Companies choose candidates for variety of reasons, and some of
those reasons are not related to knowledge, skills, and abilities.&lt;&#x2F;p&gt;
&lt;p&gt;Though if they say something like, “&lt;em&gt;We’ll have some decision made in the next
two weeks&lt;&#x2F;em&gt;,” you are likely still in consideration.&lt;&#x2F;p&gt;
&lt;p&gt;Once the debriefing time passes, don’t take the silence personally. Either the
hiring manager has not been dedicated yet. Or, more likely, the recruiter has
offered another candidate the job before rejecting you.&lt;&#x2F;p&gt;
&lt;p&gt;Also, as I said, don’t beat yourself up if you don’t end up getting the job.
Interviews, especially in the tech industry, are a numbers game. The more you
attend, the higher your odds are.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Look from the bright side:&lt;&#x2F;strong&gt; Your résumé demonstrated that your experience and
interview skills were solid. You weren’t the top candidate and maybe got a
“&lt;em&gt;silver medal&lt;&#x2F;em&gt;,” so what? That’s a-o-kay. Chin up, buckle up, and move on to the
next opportunity.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.prisma.io&#x2F;&quot;&gt;&lt;strong&gt;Prisma&lt;&#x2F;strong&gt; is an “all batteries included” &lt;strong&gt;ORM&lt;&#x2F;strong&gt; for &lt;strong&gt;Node.js&lt;&#x2F;strong&gt; and
&lt;strong&gt;TypeScript&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pressly&#x2F;goose&quot;&gt;&lt;strong&gt;Goose&lt;&#x2F;strong&gt; is a Database migration tool to migrate your databases.
Goose—get it?&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;numpad.io&#x2F;&quot;&gt;Have you ever wanted to embed a calculator inside a text editor?
Me neither. But &lt;strong&gt;NumPad&lt;&#x2F;strong&gt; has&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 1: Introduction</title>
        <published>2021-10-19T00:00:00+00:00</published>
        <updated>2021-10-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/intro/"/>
        <id>https://zerotohero.dev/spire/mtls/intro/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/intro/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;cluster-arch.png&quot; alt=&quot;mTLS With SPIRE: Part 1: Introduction&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This video will introduce the cluster architecture and talk about what we are
planning to achieve by the end of the video series.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;xvfjZpZtOdo?si=rl2EJYZLOucc0Ijc&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 1: Introduction&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;spire-rocks&#x2F;&quot;&gt;Setting Up &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; on EKS in Less
Than Ten Minutes&lt;&#x2F;a&gt; (&lt;em&gt;read this first&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Public_key_infrastructure&quot;&gt;Public Key Infrastructure (&lt;strong&gt;&lt;em&gt;PKI&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Transport_Layer_Security&quot;&gt;Transport Layer Security (&lt;strong&gt;&lt;em&gt;TLS&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mutual_authentication&quot;&gt;Mutual Transport Layer Security (&lt;strong&gt;&lt;em&gt;mTLS&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;X.509&quot;&gt;&lt;strong&gt;X.509&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;home&#x2F;&quot;&gt;Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;containers&#x2F;&quot;&gt;Containers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;&quot;&gt;Pods&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;grpc.io&#x2F;&quot;&gt;&lt;strong&gt;gRPC&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spiffe-about&#x2F;overview&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;architecture&#x2F;federation&#x2F;readme&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Federation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 2: Creating the Server App</title>
        <published>2021-10-19T00:00:00+00:00</published>
        <updated>2021-10-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/server-app/"/>
        <id>https://zerotohero.dev/spire/mtls/server-app/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/server-app/">&lt;h2 id=&quot;mtls-with-spire-part-2-creating-the-server-app&quot;&gt;mTLS With SPIRE: Part 2 — Creating the Server App&lt;&#x2F;h2&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;server-app.png&quot; alt=&quot;mTLS With SPIRE: Part 2: Creating the Server App&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We’ll start by creating a server application. Once the server is ready, we’ll
continue with the client application on the next video.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;sNqJxFE7eR8?si=hFxATeHr6n1_OGPx&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 2: Creating the Server App&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;&quot;&gt;&lt;strong&gt;Go&lt;&#x2F;strong&gt; Programming Language&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;blog&#x2F;using-go-modules&quot;&gt;Using &lt;strong&gt;Go&lt;&#x2F;strong&gt; Modules&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bash_(Unix_shell)&quot;&gt;&lt;strong&gt;Bash&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;grpc.io&#x2F;&quot;&gt;&lt;strong&gt;gRPC&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 9: Configuring the Client to User SPIRE mTLS</title>
        <published>2021-10-19T00:00:00+00:00</published>
        <updated>2021-10-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/setup-client/"/>
        <id>https://zerotohero.dev/spire/mtls/setup-client/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/setup-client/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;almost-there.png&quot; alt=&quot;mTLS With SPIRE: Part 9: Configuring the Client to User SPIRE mTLS&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to User SPIRE mTLS&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We are almost there! Once we configure the client to use &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; mTLS, the
client and the server can talk securely within a single cluster. In the
following video, we’ll move the client to a different cluster and federate the
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; servers to establish cross-clsuter &lt;strong&gt;mTLS&lt;&#x2F;strong&gt; too.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;5Onh7nR6xcs?si=q7SvMuDqZAxIhaRl&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 9: Configuring the Client to User SPIRE mTLS&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to User SPIRE mTLS&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 8 --- Configuring the Server to Use SPIRE mTLS</title>
        <published>2021-10-19T00:00:00+00:00</published>
        <updated>2021-10-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/setup-server/"/>
        <id>https://zerotohero.dev/spire/mtls/setup-server/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/setup-server/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;server.png&quot; alt=&quot;mTLS With SPIRE: Part 8: Configuring the Server to User SPIRE mTLS&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to User SPIRE mTLS&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Now that we have &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;, our server application can use it to establish an
&lt;strong&gt;mTLS&lt;&#x2F;strong&gt; connectivity.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;8mbVPEl9iio?si=NI0rkjX-7mXX1AkB&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 8: Configuring the Server to User SPIRE mTLS&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to User SPIRE mTLS&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Concepts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;microk8s.io&#x2F;&quot;&gt;MicroK8s&lt;&#x2F;a&gt; (&lt;em&gt;the Kubernetes variant that we used in these videos&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;go-spiffe&quot;&gt;go-spiffe: Go Library for &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; Support&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;auth0.com&#x2F;docs&#x2F;get-started&#x2F;identity-fundamentals&#x2F;authentication-and-authorization&quot;&gt;Authentication and Authorization&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.redhat.com&#x2F;en&#x2F;topics&#x2F;microservices&#x2F;what-is-a-service-mesh&quot;&gt;What’s a Service Mesh&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;istio.io&#x2F;&quot;&gt;&lt;strong&gt;istio&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.openpolicyagent.org&#x2F;&quot;&gt;Open Policy Agent (&lt;strong&gt;&lt;em&gt;OPA&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.envoyproxy.io&#x2F;&quot;&gt;&lt;strong&gt;Envoy&lt;&#x2F;strong&gt; Proxy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.envoyproxy.io&#x2F;docs&#x2F;envoy&#x2F;latest&#x2F;configuration&#x2F;security&#x2F;secret&quot;&gt;&lt;strong&gt;Envoy&lt;&#x2F;strong&gt; Secret Discovery Service&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Ghosted?</title>
        <published>2021-10-15T00:00:00+00:00</published>
        <updated>2021-10-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0016/"/>
        <id>https://zerotohero.dev/highlights/issue-0016/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0016/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;vortex-1.png&quot; alt=&quot;Ghosted in a vortex?&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Ghosted in a vortex?&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the sixteenth issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;In the last few weeks, I’ve done a lot and created lots of valuable content too.
Let me share some of the highlights.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;big-sur-was-awesome-mountain-snow-ocean-evergreen-tree&quot;&gt;Big Sur Was Awesome 🏔🌊🌲&lt;&#x2F;h2&gt;
&lt;p&gt;First, some personal updates. We went to a &lt;strong&gt;Big Sur&lt;&#x2F;strong&gt; retreat as a family. It
was something that we needed badly for so long.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;FBdzoRKVQAA3jbR.jpeg&quot; alt=&quot;Big Sur coastline.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Big Sur coastline.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;There was zero technology, full of nature; no Internet, no 5G, even mobile phone
was useless since there was zero reception mostly.&lt;&#x2F;p&gt;
&lt;p&gt;It’s definitely one of the most beautiful places in the world.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cleaner-bolder-zero-to-hero-re-alignment&quot;&gt;Cleaner, Bolder Zero To Hero Re-Alignment&lt;&#x2F;h2&gt;
&lt;p&gt;I’ve replaced anything redundant and came up with a clean paper white reading
experience:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;Screen-Shot-2021-10-15-at-2.15.16-PM.png&quot; alt=&quot;The new design.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The new design.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;new-articles-woman-fried-egg&quot;&gt;New Articles 👩‍🍳&lt;&#x2F;h2&gt;
&lt;p&gt;I don’t know how, but I managed to develop three valuable articles in the last
two weeks.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;spire-rocks&#x2F;&quot;&gt;&lt;strong&gt;Setting Up SPIRE on EKS in Less Than Ten Minutes&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
talks about things like &lt;strong&gt;Zero Trust&lt;&#x2F;strong&gt; and &lt;strong&gt;Identity Federation&lt;&#x2F;strong&gt; in detail,
explains how &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; solves these problems at scale. There is also an 18-minute
lecture that shows you how you can set up &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; on your Kubernetes cluster.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;&lt;strong&gt;One Does Not Simply “Terminal” 👌&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
provides you a list of tools and utilities for those command-line aficionados
out there. I’ll add more to the list when I find new cool stuff.&lt;&#x2F;p&gt;
&lt;p&gt;Last but not least, &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;&lt;strong&gt;Be the Next Version of Yourself&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
tells you how to be… well, the next version of yourself 🙂.&lt;&#x2F;p&gt;
&lt;p&gt;I have more articles and videos down the line, so stay tuned.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;Ghosted? It happens to all of us. You get ghosted by a recruiter, or a manager,
or a colleague, or even a friend.&lt;&#x2F;p&gt;
&lt;p&gt;Whether it’s a recruiter who switched to radio silence after extending an offer
or a connection on a business network that stopped responding, you probably have
professionally “ghosted” before. And if not, lucky you—but you &lt;strong&gt;will&lt;&#x2F;strong&gt; be
ghosted sooner or later 🙂.&lt;&#x2F;p&gt;
&lt;p&gt;Instances of sudden silence can shatter your confidence. You will likely feel
confused and rejected. Here are a few tips and tricks to follow up when you are
ghosted.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of feeling haunted by the silence, send a brief message and leave the
door open for the other party to reconnect.&lt;&#x2F;p&gt;
&lt;p&gt;You can even ask whether they are interested in continuing the conversation
further. An “I’d appreciate it if you let me know either way” can go a long
distance.&lt;&#x2F;p&gt;
&lt;p&gt;It might be possible that you might have gone off their radar while they are
working on some major issue with a critical deadline.&lt;&#x2F;p&gt;
&lt;p&gt;After you send the message, give it a few business days.&lt;&#x2F;p&gt;
&lt;p&gt;If you don’t hear back, the best course of action is to consider moving on. You
have done all you can do after all.&lt;&#x2F;p&gt;
&lt;p&gt;I know that’s harder said than done, especially when a potential job offer or a
career change is at stake. Yet, consider how badly you want to work for the
other party if they don’t even have the courtesy to send a one-line reply to
your question?&lt;&#x2F;p&gt;
&lt;p&gt;In fact, ghosting during the hiring process can indicate the company culture
that you might want to avoid.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;landrop.app&#x2F;&quot;&gt;&lt;strong&gt;LANDrop&lt;&#x2F;strong&gt; is an application that you can drop and share any file on you
LAN, no need to use Instant Messaging anymore&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bilibili&#x2F;flv.js&quot;&gt;&lt;strong&gt;flv.js&lt;&#x2F;strong&gt; is an HTML5 FLV Player&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hyper.is&#x2F;&quot;&gt;&lt;strong&gt;Hyper&lt;&#x2F;strong&gt; is an HTML-based. highly customizable terminal emulator that hit
v3.1.4 recently&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 16: Ghosted?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Pivoting Your Career?</title>
        <published>2021-10-02T00:00:00+00:00</published>
        <updated>2021-10-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0015/"/>
        <id>https://zerotohero.dev/highlights/issue-0015/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0015/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;pivot.png&quot; alt=&quot;Pivoting is a big decision. Make sure you are ready for it.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Pivoting is a big decision. Make sure you are ready for it.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the fifteenth issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;I’m still deep down into &lt;strong&gt;Cloud-Native Security&lt;&#x2F;strong&gt;. The good news is, I’ve
learned “&lt;strong&gt;a lot&lt;&#x2F;strong&gt;,” and lots of quality stuff will likely come up your way.&lt;&#x2F;p&gt;
&lt;p&gt;On the topic of “Cloud Native,” I asked the community what &lt;strong&gt;Cloud-Native
Security&lt;&#x2F;strong&gt; meant for them.&lt;&#x2F;p&gt;
&lt;p&gt;I did this on &lt;strong&gt;Twitter&lt;&#x2F;strong&gt; and other mediums, like &lt;strong&gt;IRC&lt;&#x2F;strong&gt;, &lt;strong&gt;Slack&lt;&#x2F;strong&gt;, and
&lt;strong&gt;Discord&lt;&#x2F;strong&gt;. Then I came up with a 20-page “mini” bedtime reading material,
a Cloud-Native Security DevRel’s survival guide 🥑.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cloud-native-security-developer-relations-engineer-s-survival-guide&quot;&gt;Cloud-Native Security Developer Relations Engineer’s Survival Guide&lt;&#x2F;h2&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;Screen-Shot-2021-09-30-at-8.38.49-PM.png&quot; alt=&quot;Don&amp;#x27;t Panic&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Don&amp;#x27;t Panic&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I’ve even outlined the blueprint of a book. Not sure if I’ll create a book; or
come off with a series of articles or both. We’ll see 😀.&lt;&#x2F;p&gt;
&lt;p&gt;“Cloud-Native Security Developer Relations Engineer”? Wow, fancy title. But,
what exactly is it?&lt;&#x2F;p&gt;
&lt;p&gt;Here’s how I defined it in the document.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;Cloud-Native Security Developer Relations Engineer&lt;&#x2F;strong&gt; collaborates,
partners, grows, contributes, and &lt;strong&gt;hacks&lt;&#x2F;strong&gt; with the &lt;strong&gt;Cloud-Native&lt;&#x2F;strong&gt; security
community. They explore new venues find where the developers are, listen to
them and engage with them, mentor and support them, and lift them.&lt;&#x2F;p&gt;
&lt;p&gt;While doing these, they will also be the bridge between the developer
community and the larger &lt;strong&gt;Cloud-Native Security&lt;&#x2F;strong&gt; ecosystem. They will share
ideas, solutions, and recommendations, gather feedback, and spread the word to
the observable universe.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Right now, the document has some Company-specific information, so I cannot quite
publicly release it. Still, I am planning to pivot off a more general document
for the larger community to benefit.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;spiffe-anyone&quot;&gt;SPIFFE Anyone?&lt;&#x2F;h2&gt;
&lt;p&gt;I also looked into &lt;strong&gt;Trust&lt;&#x2F;strong&gt; and &lt;strong&gt;Identity Federation&lt;&#x2F;strong&gt; in the cloud.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;Screen-Shot-2021-09-30-at-8.51.13-PM.png&quot; alt=&quot;SPIRE Tutorial Audio Recording&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;SPIRE Tutorial Audio Recording&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;I have &lt;strong&gt;18 minutes&lt;&#x2F;strong&gt; of screencast where I deploy a &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; server on
an &lt;strong&gt;AWS EKS&lt;&#x2F;strong&gt; cluster and then fetch &lt;strong&gt;x.509&lt;&#x2F;strong&gt; SVID’s from a workload. If it does
not mean much to you, I promise it’ll make sense after watching the video.&lt;&#x2F;p&gt;
&lt;p&gt;The content is almost ready. It just has some post-production and annotation
work to do before it’ll be ready for your viewing pleasure.&lt;&#x2F;p&gt;
&lt;p&gt;Along with the video, there will be an accompanying article that has been tech
reviewed by not one but two &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; core contributors:
&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;d_feldman&quot;&gt;&lt;strong&gt;Daniel Feldman&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;evan2645&quot;&gt;&lt;strong&gt;Evan Gilman&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So it’ll be &lt;strong&gt;awesome&lt;&#x2F;strong&gt;. Wait for it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;Are you making a big career decision?&lt;&#x2F;p&gt;
&lt;p&gt;Changing job roles is hard no matter what the circumstances. So before pressing
the big red button, ask yourself the following questions. Once you answer them
all, you’ll have gained clarity and narrowed down your options.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;How do you feel about the opportunity&lt;&#x2F;strong&gt;? How do you envision your future when
you do the switch? Think about the kind of work you do right now. Now, think
about the work that you are planning to do. Take a pen and paper and write down
your ideas and feelings.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Does this opportunity align with what matters to you most&lt;&#x2F;strong&gt;? Knowing and
understanding your values will help you make choices that align with what you
care about most.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;How does this change will affect others&lt;&#x2F;strong&gt;? Consider how your decision will
impact your family, friends, loved ones, the people you most care about. Then,
before jumping hoops, ask them for their comments, suggestions, insights, and
thoughts.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What’s behind that screensaver&lt;&#x2F;strong&gt;? You want to make the right choice for the
right reason. Be objective. The grass will always look greener from the outside.
Though, are you considering facts and data, or are you considering your hopes
and assumptions? If you make your decision solely based on your &lt;em&gt;gut&lt;&#x2F;em&gt; feeling,
be aware that you are taking the risk of disappointment in the long run. Gather
as much evidence as you can.&lt;&#x2F;p&gt;
&lt;p&gt;Once you answer these questions, and maybe &lt;strong&gt;sleep on&lt;&#x2F;strong&gt; the idea a little,
you’ll better understand how to proceed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;skruv.io&#x2F;&quot;&gt;&lt;strong&gt;skruv&lt;&#x2F;strong&gt; is no-dependency, no-build, small JS framework&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nodeshift.dev&#x2F;opossum&#x2F;&quot;&gt;&lt;strong&gt;Opossum&lt;&#x2F;strong&gt; is a Node.js circuit breaker that executes asynchronous
functions and monitors their execution status&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sindresorhus&#x2F;globby&quot;&gt;&lt;strong&gt;globby&lt;&#x2F;strong&gt; is a user-friendly glob matcher&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 15: Pivoting Your Career?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Scaling Your Node.js API Like a Boss</title>
        <published>2021-09-27T00:00:00+00:00</published>
        <updated>2021-09-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/tips/scaling-your-node-api-like-a-boss/"/>
        <id>https://zerotohero.dev/tips/scaling-your-node-api-like-a-boss/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/tips/scaling-your-node-api-like-a-boss/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;scalability.png&quot; alt=&quot;Scaling Your Node.js API Like a Boss.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Scaling Your Node.js API Like a Boss.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a 90-minute tech talk that I’ve given several years ago.&lt;&#x2F;p&gt;
&lt;p&gt;Having seen that the patterns and practices I mentioned there still apply, I
believe it’s still worthwhile to have it here.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It’s one thing to create a sample RESTful API using Node.js (maybe utilizing the
cluster module to distribute the load), but it’s quite another to horizontally
scale your architecture to hundreds of thousands of concurrent connections while
trying to ensure redundancy and high availability.&lt;&#x2F;p&gt;
&lt;p&gt;Knowing how to scale is important, but more important than that is knowing when
to scale. In this two-part tutorial, I will explore what it takes to create a
real-life, scalable, highly available, and highly responsive Node.js
application.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the first part:&lt;&#x2F;p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;Ogjb60Fg10A?si=FBu0Kn4aBhbEc8UR&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Here is the second part:&lt;&#x2F;p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;f5phsX4VUOU?si=C0oatuzskeT5eq5G&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Enjoy… And until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;base64-decoding-a-string-in-go&#x2F;&quot;&gt;Base64 Decoding a String in Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;destructure&#x2F;&quot;&gt;Use Destructuring to Remove Attributes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;getting-the-body-of-an-http-request-with-go&#x2F;&quot;&gt;Getting the Body of an HTTP Request With Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;lets-create-a-syslog-logger&#x2F;&quot;&gt;Let’s Create a Syslog Logger&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;make-your-code-leaner&#x2F;&quot;&gt;Make Your Code Leaner By Extracting Method&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;mastodon-101&#x2F;&quot;&gt;Who Else Wants to Have Their Own Mastodon Server?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;microservice-env-vars&#x2F;&quot;&gt;How to Ensure Environment Variables Are Set&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Scaling Your Node.js API Like a Boss&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;talkspiffe-stream-setup&#x2F;&quot;&gt;The Live Stream Dream&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;zshell-startup-files&#x2F;&quot;&gt;.zprofile, .zshrc, .zenv, OMG! What Do I Put Where?!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;redirect-index-page&#x2F;&quot;&gt;Redirecting a Static Web Page&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Respect and Understanding</title>
        <published>2021-09-10T00:00:00+00:00</published>
        <updated>2021-09-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0014/"/>
        <id>https://zerotohero.dev/highlights/issue-0014/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0014/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;diverse-team.png&quot; alt=&quot;Diversity begets respect and understanding.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Diversity begets respect and understanding.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the fourteenth issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;This week, I started digging deeper into &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; Security]. It
will be my main focus next couple of months.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Since I’ll be in &lt;strong&gt;R&amp;amp;D&lt;&#x2F;strong&gt; mode, I will create less content. However, no matter
how busy I am, I still want to do these weekly reviews because I’ve received
&lt;strong&gt;great feedback&lt;&#x2F;strong&gt; about them so far. It makes me delighted that you folks are
finding them helpful and informative—I will keep them coming!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Also, deep research on the subject matter will mean more articles and video
ideas in the backlog. Eventually, those items will find their place on &lt;strong&gt;Zero to
Hero&lt;&#x2F;strong&gt;—I see this as a &lt;strong&gt;marathon&lt;&#x2F;strong&gt;, not a race. And as always, I value
quality over quantity.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fizzbuzz-pro-computer&quot;&gt;FizzBuzz Pro 💻&lt;&#x2F;h2&gt;
&lt;p&gt;Next on my agenda is setting up the &lt;strong&gt;Stripe Integration&lt;&#x2F;strong&gt; and working on the *
&lt;em&gt;subscriptions API&lt;&#x2F;em&gt;*.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s the sequence diagram of actions that I have in mind:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;09&amp;#x2F;Screen-Shot-2021-09-10-at-10.11.11-PM.png&quot; alt=&quot;FizzBuzz Pro Subscription Sequence Diagram&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;FizzBuzz Pro Subscription Sequence Diagram&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Of course, things may change along the way, and I may update the diagram, and I
wanted to share it while it was fresh in my mind.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;synesthesia-anyone&quot;&gt;Synesthesia Anyone?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCdpJG2a5xmDRcYjjQuFH8KQ&quot;&gt;I’ve created a YouTube channel where I combine my &lt;strong&gt;piano&lt;&#x2F;strong&gt;
interpretations with AI-generated OpenGL
&lt;strong&gt;visualization&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I have four music pieces already. I’ll add more in time. That’s also a good
motivation factor for me to put my heiney on that bench and study piano. Win-win
😀.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;09&amp;#x2F;Screen-Shot-2021-09-10-at-10.14.31-PM.png&quot; alt=&quot;Synestetic Experiences&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Synestetic Experiences&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;It’s a &lt;strong&gt;mesmerizing&lt;&#x2F;strong&gt; experience. &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCdpJG2a5xmDRcYjjQuFH8KQ&quot;&gt;&lt;strong&gt;Come check it out&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;When your team is diverse, figuring out where everyone is coming from can be
difficult.&lt;&#x2F;p&gt;
&lt;p&gt;It’s not only diversity in culture. Today, a typical office environment can
include members from four different generations. The amount of diversity is both
an opportunity and also a challenge in itself.&lt;&#x2F;p&gt;
&lt;p&gt;And there are ways to reap the benefits of a multi-cultural, multi-generational
work environment. Here’s how:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Firstly, challenge assumptions&lt;&#x2F;strong&gt;. It’s easy to make generalizations like
“&lt;em&gt;they are experienced, but possibly they have lost the fire in their belly;
they are just resting and vesting…&lt;&#x2F;em&gt;”. Debunk your stereotypes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Know your preferences&lt;&#x2F;strong&gt;. Ask everyone to be open about their preferences,
especially around communication. Different people can have different
communication styles, methods, or tools that they prefer.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Make sure everyone is equally heard&lt;&#x2F;strong&gt;. Dur9ing meetings, make an extra effort
to ensure every point of view is heard and considered, regardless of the
person’s level or seniority.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;You are a team&lt;&#x2F;strong&gt;. Instead of sustaining the “&lt;em&gt;us versus them&lt;&#x2F;em&gt;” mindset, change
the overall theme and narrative of the environment to &lt;strong&gt;respect&lt;&#x2F;strong&gt; and *
&lt;em&gt;understanding&lt;&#x2F;em&gt;*.&lt;&#x2F;p&gt;
&lt;p&gt;Encourage mutual respect and understanding. You’ll see that everything will run
smoother, and things will get done faster.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;grailbio&#x2F;reflow&quot;&gt;&lt;strong&gt;Reflow&lt;&#x2F;strong&gt; is A language and runtime for distributed, incremental data
processing in the cloud&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;buraksezer&#x2F;connpool&quot;&gt;&lt;strong&gt;connpool&lt;&#x2F;strong&gt; is a Connection pool for &lt;strong&gt;Go&lt;&#x2F;strong&gt;’s &lt;code&gt;net.Conn&lt;&#x2F;code&gt;
interface&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;changelog.com&#x2F;posts&#x2F;you-might-as-well-timestamp-it&quot;&gt;Have you considered using &lt;strong&gt;timestamp&lt;&#x2F;strong&gt;s instead of &lt;strong&gt;boolean&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;?.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 14: Respect and Understanding&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Let&#x27;s Create a Syslog Logger</title>
        <published>2021-09-06T00:00:00+00:00</published>
        <updated>2021-09-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/tips/lets-create-a-syslog-logger/"/>
        <id>https://zerotohero.dev/tips/lets-create-a-syslog-logger/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/tips/lets-create-a-syslog-logger/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;papertrail.png&quot; alt=&quot;Papertrail.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Papertrail.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;In this article, we’ll create a logging wrapper module that will log messages
to &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Syslog&quot;&gt;Syslog&lt;&#x2F;a&gt;: a standard network-based
logging protocol that works on a wide variety of different types of devices and
applications.&lt;&#x2F;p&gt;
&lt;p&gt;I chose &lt;strong&gt;Syslog&lt;&#x2F;strong&gt; because I want to stream &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;
microservices’ logs to &lt;a href=&quot;https:&#x2F;&#x2F;papertrailapp.com&#x2F;&quot;&gt;&lt;em&gt;Papertrail&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;,
and &lt;em&gt;Papertrail&lt;&#x2F;em&gt; has a &lt;em&gt;Syslog server&lt;&#x2F;em&gt; for that purpose listening on
a &lt;strong&gt;UDP&lt;&#x2F;strong&gt; port.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-papertrail-syslog-destination&quot;&gt;Creating a Papertrail Syslog Destination&lt;&#x2F;h2&gt;
&lt;p&gt;Before getting into code, I’ll create a
&lt;a href=&quot;https:&#x2F;&#x2F;papertrailapp.com&#x2F;&quot;&gt;&lt;strong&gt;Papertrail&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; log destination. Our logger will use
this destination as a sink to stream logs.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;papertrailapp.com&#x2F;&quot; title=&quot;Papertrail&quot;&gt;Papertrail&lt;&#x2F;a&gt; is a “&lt;em&gt;logging as a
service&lt;&#x2F;em&gt;” solution that aggregates logs from applications, devices, and platforms
to a central location.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For that, I’ll go to my dashboard, find &lt;strong&gt;Log Destinations&lt;&#x2F;strong&gt;, and tap &lt;strong&gt;Create
Log Destination&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;papertrail-destination.png&quot; alt=&quot;Create a log destination.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Create a log destination.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Then I’ll give my log destination a description, tap &lt;strong&gt;Create&lt;&#x2F;strong&gt;, and I’ll be all
set:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;06&amp;#x2F;Screen-Shot-2021-06-06-at-8.51.35-AM-2.png&quot; alt=&quot;Configuring the Papertrail log destination.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Configuring the Papertrail log destination.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When you tap &lt;strong&gt;Create&lt;&#x2F;strong&gt;, you’ll see an endpoint URL in the form
of &lt;code&gt;logs$n.papertrailapp.com:$port&lt;&#x2F;code&gt;. Note the URL down; you’ll need it when
configuring your logger.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Dependencies&lt;&#x2F;p&gt;
&lt;p&gt;Let’s start with the dependencies that we need.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll use
the &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;make-your-code-leaner&#x2F;&quot;&gt;&lt;code&gt;fizz-env&lt;&#x2F;code&gt; module from the last article&lt;&#x2F;a&gt;.
Other dependencies we need are all parts of &lt;strong&gt;Go&lt;&#x2F;strong&gt; standard library.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; $WORKSPACE&#x2F;fizz-logging&#x2F;pkg&#x2F;log&#x2F;log.go
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;github.com&#x2F;zerotohero-dev&#x2F;fizz-env&#x2F;pkg&#x2F;env&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;log&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;log&#x2F;syslog&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;os&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;initializing-a-syslog-writer&quot;&gt;Initializing a Syslog Writer&lt;&#x2F;h2&gt;
&lt;p&gt;Next up, we’ll write a method that initializes our logger. &lt;code&gt;appName&lt;&#x2F;code&gt; is the name
of our app, typically the name of the microservice that you are streaming the
logs for.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; $WORKSPACE&#x2F;fizz-logging&#x2F;pkg&#x2F;log&#x2F;log.go
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;writer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;syslog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Writer
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Init&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;appName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;syslog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Writer &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SanitizeLog&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; The destination is in the form 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; &amp;quot;logs$n.papertrailapp.com:$port&amp;quot;.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;dest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Destination
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;syslog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Dial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;udp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;dest&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;syslog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LOG_INFO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;syslog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;LOG_USER&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;appName&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;failed to dial syslog for log destination &amp;#39;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ 
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;dest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;#39;.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Cache the writer for other helper methods to call.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;writer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;writer
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;wrapping-common-log-methods&quot;&gt;Wrapping Common Log Methods&lt;&#x2F;h2&gt;
&lt;p&gt;Then we’ll create utility methods that call our &lt;em&gt;Syslog&lt;&#x2F;em&gt; writer &lt;code&gt;writer&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Note that if &lt;code&gt;writer&lt;&#x2F;code&gt; hasn’t been initialized, or if &lt;code&gt;writer&lt;&#x2F;code&gt; cannot be
initialized, we fall back to the &lt;strong&gt;Go&lt;&#x2F;strong&gt; standard library’s &lt;code&gt;log&lt;&#x2F;code&gt; module instead.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; $WORKSPACE&#x2F;fizz-logging&#x2F;pkg&#x2F;log&#x2F;log.go
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span&gt;{}) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;writer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;writer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span&gt;{}) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;writer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;writer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Warning&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span&gt;{}) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;writer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;writer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Warning&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span&gt;{}) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;our-papertrail-syslog-logger-in-action&quot;&gt;Our Papertrail Syslog Logger in Action&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s see our logger in action:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; This will be our microservice that uses the logger.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;github.com&#x2F;zerotohero-dev&#x2F;fizz-logging&#x2F;pkg&#x2F;log&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Initialize the logger first:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Init&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fizz-crypto-svc&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Log something:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Got a response &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39; from the server.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you have set up everything correctly, running the above &lt;code&gt;main()&lt;&#x2F;code&gt; method will
stream a log similar to the following to your &lt;strong&gt;PaperTrail&lt;&#x2F;strong&gt; console.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;06&amp;#x2F;Screen-Shot-2021-06-06-at-8.59.43-AM-2.png&quot; alt=&quot;Papertrail log tail output.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Papertrail log tail output.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this article, we’ve created a logger class that uses a &lt;strong&gt;Syslog&lt;&#x2F;strong&gt; writer to
stream logs to Papertrail over &lt;strong&gt;UDP&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We will use (&lt;em&gt;and improve&lt;&#x2F;em&gt;) this logger while developing our
&lt;a href=&quot;https:&#x2F;&#x2F;fizzbuzz.pro&#x2F;&quot;&gt;&lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;API microservices.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;p&gt;Below, you’ll find the &lt;strong&gt;zip archives&lt;&#x2F;strong&gt; of the projects and other related
artifacts that we’ve covered in this article.&lt;&#x2F;p&gt;
&lt;p&gt;Enjoy… And may the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;lets-create-a-syslog-logger&#x2F;5f7a69db-658d-482c-bac1-9f036bb01edd&#x2F;fizz-logging.zip&quot;&gt;&lt;code&gt;fizz-logging&lt;&#x2F;code&gt; (&lt;strong&gt;3KB&lt;&#x2F;strong&gt; zip archive)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;base64-decoding-a-string-in-go&#x2F;&quot;&gt;Base64 Decoding a String in Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;destructure&#x2F;&quot;&gt;Use Destructuring to Remove Attributes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;getting-the-body-of-an-http-request-with-go&#x2F;&quot;&gt;Getting the Body of an HTTP Request With Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Let’s Create a Syslog Logger&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;make-your-code-leaner&#x2F;&quot;&gt;Make Your Code Leaner By Extracting Method&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;mastodon-101&#x2F;&quot;&gt;Who Else Wants to Have Their Own Mastodon Server?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;microservice-env-vars&#x2F;&quot;&gt;How to Ensure Environment Variables Are Set&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;scaling-your-node-api-like-a-boss&#x2F;&quot;&gt;Scaling Your Node.js API Like a Boss&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;talkspiffe-stream-setup&#x2F;&quot;&gt;The Live Stream Dream&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;zshell-startup-files&#x2F;&quot;&gt;.zprofile, .zshrc, .zenv, OMG! What Do I Put Where?!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;redirect-index-page&#x2F;&quot;&gt;Redirecting a Static Web Page&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Don&#x27;t Make the User Think</title>
        <published>2021-08-28T00:00:00+00:00</published>
        <updated>2021-08-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/ramp-up-in-user-experience-design/"/>
        <id>https://zerotohero.dev/roadmap/ramp-up-in-user-experience-design/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/ramp-up-in-user-experience-design/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;ux.png&quot; alt=&quot;Don&amp;#x27;t see UX as a liability.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Don&amp;#x27;t see UX as a liability.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;ux-design-matters-a-lot&quot;&gt;UX Design Matters a Lot&lt;&#x2F;h2&gt;
&lt;p&gt;Knowing &lt;strong&gt;how&lt;&#x2F;strong&gt; and &lt;strong&gt;why&lt;&#x2F;strong&gt; the user &lt;strong&gt;thinks&lt;&#x2F;strong&gt; is essential. Knowing &lt;strong&gt;what&lt;&#x2F;strong&gt;
makes the user “&lt;em&gt;&lt;strong&gt;not think&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;” and act &lt;em&gt;instinctively&lt;&#x2F;em&gt; can differentiate
between a “good enough” product and a great product. Knowing how to design *
&lt;em&gt;usable&lt;&#x2F;em&gt;*, &lt;strong&gt;consistent&lt;&#x2F;strong&gt;, &lt;strong&gt;coherent&lt;&#x2F;strong&gt;, and &lt;strong&gt;delightful&lt;&#x2F;strong&gt; interfaces that help
the users achieve their goals is an essential skill that every developer needs
to acquire.&lt;&#x2F;p&gt;
&lt;p&gt;If you are creating something—“&lt;em&gt;anything&lt;&#x2F;em&gt;”—that someone other than yourself
uses, then &lt;strong&gt;user experience design&lt;&#x2F;strong&gt; is something that you have to know.&lt;&#x2F;p&gt;
&lt;p&gt;There are a lot of books and articles that you can find about the subject
matter.&lt;&#x2F;p&gt;
&lt;p&gt;I’d read the following two for starters:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;18197267-don-t-make-me-think-revisited&quot;&gt;Don’t Make Me Think (revisited)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;840.The_Design_of_Everyday_Things&quot;&gt;Design of Everyday Things&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Those books are both quick reads and also are excellent resources to get you
started. After reading them, &lt;strong&gt;Google is your friend&lt;&#x2F;strong&gt;… I’m sure you will find
lots of quality books, articles, and tutorials about creating delightful user
experiences.&lt;&#x2F;p&gt;
&lt;p&gt;Here are a few of those resources from my personal stash, for example:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sources-for-ux-inspiration&quot;&gt;Sources for UX Inspiration&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;uxarchive.com&#x2F;&quot;&gt;UX Archive&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;ui-patterns.com&#x2F;&quot;&gt;UI Patterns&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.mobile-patterns.com&#x2F;&quot;&gt;Mobile Patterns&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;refactoringui.com&#x2F;&quot;&gt;Refactoring UI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;inspired-ui.com&#x2F;&quot;&gt;Inspired UI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;design-and-ux-books&quot;&gt;Design and UX Books&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;10778139-100-things-every-designer-needs-to-know-about-people&quot;&gt;100 Things Every Designer Needs to Know About People&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.designbetter.co&#x2F;design-systems-handbook&quot;&gt;Design Systems Handbook&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;344724.Designing_Interfaces&quot;&gt;Designing Interfaces&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;22668729-hooked&quot;&gt;Hooked (&lt;em&gt;How to Build Habit-Forming Products&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;13436116-lean-ux&quot;&gt;Lean UX&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;9815906-responsive-web-design&quot;&gt;Responsive Web Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;840.The_Design_of_Everyday_Things&quot;&gt;The Design of Everyday Things&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;1867.The_Elements_of_User_Experience&quot;&gt;User-Centered Design for the Web&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;checklists&quot;&gt;Checklists&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.process.st&#x2F;checklist&#x2F;ux-design-process&#x2F;&quot;&gt;UX Design Process Checklist&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;uxchecklist.github.io&#x2F;&quot;&gt;UX Checklist&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;helpful-ux-resources&quot;&gt;Helpful UX Resources&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;52weeksofux.com&#x2F;&quot;&gt;52 Weeks of UX&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;refactoring-ui&#x2F;7-practical-tips-for-cheating-at-design-40c736799886&quot;&gt;7 Practical Tips for Cheating at Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;alistapart.com&#x2F;&quot;&gt;A List Apart&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.allaboutux.org&#x2F;field-methods&quot;&gt;All About UX&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;boxesandarrows.com&#x2F;&quot;&gt;Boxes and Arrows&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;designshack.net&#x2F;&quot;&gt;Design Shack&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;designmodo.com&#x2F;&quot;&gt;DesignModo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.interaction-design.org&#x2F;&quot;&gt;Interaction Design Foundation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;i&#x2F;events&#x2F;880688233641848832&quot;&gt;Little UI Details&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.lukew.com&#x2F;&quot;&gt;LukeW&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.nngroup.com&#x2F;articles&#x2F;&quot;&gt;Nielsen Norman Group Articles and Videos&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sidebar.io&#x2F;&quot;&gt;Sidebar&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.smashingmagazine.com&#x2F;&quot;&gt;Smashing Magazine&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.uxbooth.com&#x2F;&quot;&gt;UX Booth&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;uxdesign.cc&#x2F;&quot;&gt;UX Collective&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;uxmag.com&#x2F;&quot;&gt;UX Magazine&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;uxmastery.com&#x2F;&quot;&gt;UX Mastery&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.uxmatters.com&#x2F;&quot;&gt;UX Matters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;uxmovement.com&#x2F;&quot;&gt;UX Movement&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;uxmyths.com&#x2F;&quot;&gt;UX Myths&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.uxpin.com&#x2F;knowledge&quot;&gt;UXPin Knowledge Base&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;usabilitygeek.com&#x2F;&quot;&gt;Usability Geek&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;usabilitypost.com&#x2F;archive&#x2F;&quot;&gt;Usability Post&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.useronboard.com&#x2F;&quot;&gt;User Onboarding&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.usertesting.com&#x2F;blog&quot;&gt;UserTesting Blog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.webdesignerdepot.com&#x2F;&quot;&gt;Web Designer Depot&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;on-product-design&quot;&gt;On Product Design&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;the-happy-startup-school&#x2F;beyond-mvp-10-steps-to-make-your-product-minimum-loveable-51800164ae0c&quot;&gt;How to Build a Minimum Lovable Product&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fr.slideshare.net&#x2F;MaximeBraud&#x2F;road-to-a-great-product-methods-tools-and-hacks&#x2F;&quot;&gt;The Road to a Great Product&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;product-design-books&quot;&gt;Product Design Books&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.intercom.com&#x2F;books&#x2F;product-management&quot;&gt;Successes Start with a Great Product&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;INSPIRED-Create-Tech-Products-Customers&#x2F;dp&#x2F;1119387507&quot;&gt;Inspired: Create Tech Products Customers Love&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Building-StoryBrand-Clarify-Message-Customers&#x2F;dp&#x2F;0718033329&quot;&gt;Building a StoryBrand&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Writing-10th-Anniversary-Memoir-Craft&#x2F;dp&#x2F;1439156816&quot;&gt;On Writing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Power-Moments-Certain-Experiences-Extraordinary&#x2F;dp&#x2F;1501147765&quot;&gt;The Power of Moments: Why Certain Experiences Have Extraordinary Impact&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;on-design-thinking&quot;&gt;On Design Thinking&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.nngroup.com&#x2F;articles&#x2F;design-thinking&#x2F;&quot;&gt;Design Thinking 101&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thedesignteam.io&#x2F;the-design-process-67df3e8ec68f&quot;&gt;The Design Process&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.nngroup.com&#x2F;articles&#x2F;empathy-mapping&#x2F;&quot;&gt;Empathy Mapping&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;design-thinking-books&quot;&gt;Design Thinking Books&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.designbetter.co&#x2F;design-thinking&quot;&gt;Design Thinking Handbook&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Change-Design-Transforms-Organizations-Innovation&#x2F;dp&#x2F;0061766089&quot;&gt;Change by Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Creative-Confidence-Unleashing-Potential-Within&#x2F;dp&#x2F;038534936X&quot;&gt;Creative Confidence: Unleashing the Creative Potential Within Us All&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Shape-Design-Frank-Chimero&#x2F;dp&#x2F;0985472200&quot;&gt;The Shape of Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;on-defining-the-problem&quot;&gt;On Defining the Problem&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hbr.org&#x2F;2017&#x2F;01&#x2F;are-you-solving-the-right-problems&quot;&gt;Are You Solving the Right Problems&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;swlh&#x2F;start-with-problems-not-solutions-8521c53264b2&quot;&gt;Start With Problems, Not Solutions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;swlh&#x2F;how-to-perfectly-capture-your-customers-need-c924e3209484&quot;&gt;How to Sell the Problem Before Selling the Solution&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;robots.thoughtbot.com&#x2F;writing-effective-problem-statements&quot;&gt;Writing Effective Problem Statements&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;firstround.com&#x2F;review&#x2F;classpass-founder-on-how-marketplace-startups-can-achieve-product-market-fit&#x2F;&quot;&gt;ClassPass’ Founder on How Marketplace Startups Can Achieve Product&#x2F;Market Fit&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;about-ideation&quot;&gt;About Ideation&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.interaction-design.org&#x2F;literature&#x2F;article&#x2F;introduction-to-the-essential-ideation-techniques-which-are-the-heart-of-design-thinking&quot;&gt;Introduction to the Essential Ideation Techniques which are the Heart of Design Thinking&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ideation-books&quot;&gt;Ideation Books&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Technique-Producing-Ideas-James-Young&#x2F;dp&#x2F;198781746X&quot;&gt;A Technique for Producing Ideas&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Made-Stick-Ideas-Survive-Others&#x2F;dp&#x2F;1400064287&quot;&gt;Made to Stick: Why Some Ideas Survive and Others Die&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;on-interaction-design&quot;&gt;On Interaction Design&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.prototypr.io&#x2F;boost-your-ux-with-these-successful-interaction-design-principles-e2f0c2b49050&quot;&gt;Boost Your UX with These Successful Interaction Design Principles&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.smashingmagazine.com&#x2F;2018&#x2F;02&#x2F;comprehensive-guide-to-mobile-app-design&#x2F;&quot;&gt;A Comprehensive Guide To Mobile App Design&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;library.launchkit.io&#x2F;the-right-way-to-ask-users-for-ios-permissions-96fa4eb54f2c&quot;&gt;The Right Way to Ask Users for Mobile Permissions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;design.google&#x2F;library&#x2F;fabulous-motivating-app-engagement&#x2F;&quot;&gt;Fabulous: Motivating App Engagement&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;interaction-design-books&quot;&gt;Interaction Design Books&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Designing-Interactions-Press-Bill-Moggridge&#x2F;dp&#x2F;0262134748&quot;&gt;Designing Interactions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Elements-User-Experience-User-Centered-Design&#x2F;dp&#x2F;0321683684&quot;&gt;The Elements of User Experience: User-Centered Design for the Web and Beyond&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Best-Interface-No-brilliant-technology&#x2F;dp&#x2F;0133890333&quot;&gt;The Best Interface is No Interface&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;on-information-architecture&quot;&gt;On Information Architecture&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;uxplanet.org&#x2F;information-architecture-basics-for-designers-b5d43df62e20&quot;&gt;Information Architecture. Basics for Designers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.uxbooth.com&#x2F;articles&#x2F;complete-beginners-guide-to-information-architecture&#x2F;&quot;&gt;Complete Beginner’s Guide to Information Architecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;information-architecture-books&quot;&gt;Information Architecture Books&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Information-Architecture-Beyond-Louis-Rosenfeld&#x2F;dp&#x2F;1491911689&quot;&gt;Information Architecture for the Web and Beyond&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;How-Make-Sense-Any-Mess&#x2F;dp&#x2F;1500615994&quot;&gt;How to Make Sense of Any Mess: Information Architecture for Everybody&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;on-design-systems&quot;&gt;On Design Systems&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;sketch-app-sources&#x2F;setting-up-a-design-system-8729510def93&quot;&gt;Setting Up a Design System&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;design-systems-books&quot;&gt;Design Systems Books&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.designbetter.co&#x2F;design-systems-handbook&quot;&gt;Design Systems Handbook&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;on-data-analytics&quot;&gt;On Data Analytics&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;firstround.com&#x2F;review&#x2F;the-four-cringe-worthy-mistakes-too-many-startups-make-with-data&#x2F;&quot;&gt;The Four Cringe-Worthy Mistakes Too Many Startups Make with Data&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.leadwithdatahq.com&#x2F;scaling-dropbox-with-data-38776b959c2c&quot;&gt;Scaling Dropbox with Data&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;firstround.com&#x2F;review&#x2F;im-sorry-but-those-are-vanity-metrics&#x2F;&quot;&gt;I’m Sorry, But Those Are Vanity Metrics&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@joshelman&#x2F;the-only-metric-that-matters-ab24a585b5ea&quot;&gt;The Only Metric That Matters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;data-analytics-books&quot;&gt;Data Analytics Books&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Lean-Analytics-Better-Startup-Faster&#x2F;dp&#x2F;1449335675&quot;&gt;Lean Analytics: Use Data to Build a Better Startup Faster&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Data-Science-Business-Data-Analytic-Thinking-ebook&#x2F;dp&#x2F;B00E6EQ3X4&quot;&gt;Data Science for Business: What You Need to Know about Data Mining and Data-Analytic Thinking&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Naked-Statistics-Stripping-Dread-Data&#x2F;dp&#x2F;039334777X&quot;&gt;Naked Statistics: Stripping the Dread from the Data&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;on-sales-and-marketing&quot;&gt;On Sales and Marketing&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;explore.reallygoodemails.com&#x2F;what-makes-a-really-good-email-1aa835e5f3a6&quot;&gt;What Makes a Really Good Email&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;adventures-in-consumer-technology&#x2F;people-dont-buy-products-they-buy-better-versions-of-themselves-d481390bfcee&quot;&gt;People Don’t Buy Products, They Buy Better Versions of Themselves&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;User experience design is more than just creating pretty user interfaces. It
involves design thinking, analytics, big data, information architecture,
sociology, psychology, and even sales and marketing.&lt;&#x2F;p&gt;
&lt;p&gt;I hope the resources you find here will help you jumpstart your UI&#x2F;UX journey.&lt;&#x2F;p&gt;
&lt;p&gt;And until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;git&#x2F;&quot;&gt;Git Comfortable&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Ramp Up in User Experience Design&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>.zprofile, .zshrc, .zenv, OMG! What Do I Put Where?!</title>
        <published>2021-08-09T00:00:00+00:00</published>
        <updated>2021-08-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/tips/zshell-startup-files/"/>
        <id>https://zerotohero.dev/tips/zshell-startup-files/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/tips/zshell-startup-files/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;plac2.png&quot; alt=&quot;.zprofile, .zshrc, .zenv, OMG! What Do I Put Where?!&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;.zprofile, .zshrc, .zenv, OMG! What Do I Put Where?!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zsh.sourceforge.io&#x2F;Doc&#x2F;Release&#x2F;index.html&quot;&gt;Z-shell&lt;&#x2F;a&gt; has quite a bunch
of &lt;a href=&quot;https:&#x2F;&#x2F;zsh.sourceforge.io&#x2F;Intro&#x2F;intro_3.html&quot;&gt;startup and shutdown&lt;&#x2F;a&gt; files.
So sometimes it gets difficult to decide what kind of functions, aliases, and
operations to define in which of those files.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the complete list of files:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;$ZDOTDIR&#x2F;.zshenv
&lt;&#x2F;span&gt;&lt;span&gt;$ZDOTDIR&#x2F;.zprofile
&lt;&#x2F;span&gt;&lt;span&gt;$ZDOTDIR&#x2F;.zshrc
&lt;&#x2F;span&gt;&lt;span&gt;$ZDOTDIR&#x2F;.zlogin
&lt;&#x2F;span&gt;&lt;span&gt;$ZDOTDIR&#x2F;.zlogout
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this article, we’ll cover what those files are for, when, and how to use
them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-zprofile&quot;&gt;What is ~&#x2F;.zprofile&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;~&#x2F;.zprofile&lt;&#x2F;code&gt; is one of
the &lt;a href=&quot;https:&#x2F;&#x2F;zsh.sourceforge.io&#x2F;Doc&#x2F;Release&#x2F;Files.html#Files&quot;&gt;zsh startup and shutdown files&lt;&#x2F;a&gt;.
It is &lt;strong&gt;read at login&lt;&#x2F;strong&gt;. There’s also its cousin, &lt;code&gt;~&#x2F;.zshrc&lt;&#x2F;code&gt;, which is &lt;strong&gt;read
when interactive&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;login-and-interactive-shells&quot;&gt;Login and Interactive Shells&lt;&#x2F;h2&gt;
&lt;p&gt;But what is &lt;strong&gt;login&lt;&#x2F;strong&gt;, and what is &lt;strong&gt;interactive&lt;&#x2F;strong&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;Or—to ask differently—what is a &lt;strong&gt;login shell&lt;&#x2F;strong&gt; and what is an &lt;strong&gt;interactive
non-login shell&lt;&#x2F;strong&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;login shell&lt;&#x2F;strong&gt; is a shell where you log in. You can recognize a login shell
from a &lt;code&gt;ps -f&lt;&#x2F;code&gt; listing. For example, when I call &lt;code&gt;ps -f&lt;&#x2F;code&gt; after opening a Mac
terminal, I get the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;volkan@iMac ~ % ps -f
&lt;&#x2F;span&gt;&lt;span&gt;  UID   PID  PPID   C STIME   TTY           TIME CMD
&lt;&#x2F;span&gt;&lt;span&gt;  501 22250 22249   0  6:47PM ttys000    0:00.18 -zsh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An &lt;strong&gt;interactive non-login shell&lt;&#x2F;strong&gt; is typically a shell environment that you can
read from and write to (&lt;em&gt;i.e., your typical terminal session&lt;&#x2F;em&gt;). An interactive
non-login shell can be invoked from the &lt;em&gt;login shell&lt;&#x2F;em&gt;, such as when you
type &lt;code&gt;zsh&lt;&#x2F;code&gt; and press enter in the command prompt. Or, it can be invoked when you
open a new terminal tab.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-goes-to-zprofile-and-what-goes-to-zshrc&quot;&gt;What Goes to &lt;code&gt;~&#x2F;.zprofile&lt;&#x2F;code&gt; and What Goes to &lt;code&gt;~&#x2F;.zshrc&lt;&#x2F;code&gt;?&lt;&#x2F;h2&gt;
&lt;p&gt;Since &lt;code&gt;~&#x2F;.zprofile&lt;&#x2F;code&gt; is loaded &lt;strong&gt;only once&lt;&#x2F;strong&gt; at login time, it’s best to put
things that are loaded only once and can be inherited by subshells. An excellent
example of this is &lt;strong&gt;environment variables&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand, &lt;code&gt;~&#x2F;.zshrc&lt;&#x2F;code&gt; is typically reserved for things that are &lt;strong&gt;not&lt;&#x2F;strong&gt;
inheritable by subshells, such as &lt;strong&gt;aliases&lt;&#x2F;strong&gt; and &lt;strong&gt;functions&lt;&#x2F;strong&gt;, custom prompts,
history customizations, and so on.&lt;&#x2F;p&gt;
&lt;p&gt;In addition, put the commands that should run &lt;strong&gt;every time&lt;&#x2F;strong&gt; you launch a new
shell in the &lt;code&gt;.zshrc&lt;&#x2F;code&gt; file, too.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What About &lt;code&gt;.zshenv&lt;&#x2F;code&gt;?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For &lt;strong&gt;Z-Shell&lt;&#x2F;strong&gt;, another good place to put environment variables is
the &lt;code&gt;~&#x2F;.zshenv&lt;&#x2F;code&gt; file. The &lt;code&gt;~&#x2F;.zshenv&lt;&#x2F;code&gt; file is &lt;strong&gt;always loaded&lt;&#x2F;strong&gt;. See the
remainder of the article for details. That said, I, personally, prefer putting
my environment variables into &lt;code&gt;~&#x2F;.zprofile&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;zsh-startup-and-shutdown-files&quot;&gt;&lt;code&gt;zsh&lt;&#x2F;code&gt; Startup and Shutdown Files&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;.zprofile&lt;&#x2F;code&gt; and &lt;code&gt;.zshrc&lt;&#x2F;code&gt; are the two main startup files that you’ll 99% be
dealing with. Yet, other files have their uses too. Let’s see all together.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zsh.sourceforge.io&#x2F;Doc&#x2F;Release&#x2F;Files.html&quot;&gt;You can refer to the official reference&lt;&#x2F;a&gt;
if you like. I will just add some notes and comments that you may not find in
the official docs, to clarfiy things a little, if you will.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zprofile&quot;&gt;.zprofile&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;.zlogin&lt;&#x2F;code&gt; and &lt;code&gt;.zprofile&lt;&#x2F;code&gt; do the same thing. They set the environment for *
&lt;em&gt;login shells&lt;&#x2F;em&gt;*. The only difference is they just get loaded at different
times (&lt;em&gt;see below&lt;&#x2F;em&gt;). I would use &lt;code&gt;.zprofile&lt;&#x2F;code&gt; at all times for consistence.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zshrc&quot;&gt;.zshrc&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;.zshrc&lt;&#x2F;code&gt; sets the environment for &lt;strong&gt;interactive shells&lt;&#x2F;strong&gt;. &lt;code&gt;.zshrc&lt;&#x2F;code&gt; gets loaded *
&lt;em&gt;after&lt;&#x2F;em&gt;* &lt;code&gt;.zprofile&lt;&#x2F;code&gt;. It is a place where you “&lt;em&gt;set and forget&lt;&#x2F;em&gt;” things.&lt;&#x2F;p&gt;
&lt;p&gt;Since it’s loaded after &lt;code&gt;.zprofile&lt;&#x2F;code&gt;, in interactive shells, it will override
anything you set in &lt;code&gt;.zprofile&lt;&#x2F;code&gt;. Like the &lt;code&gt;$PATH&lt;&#x2F;code&gt; variable. It’s a good place to
define &lt;strong&gt;aliases&lt;&#x2F;strong&gt; and &lt;strong&gt;functions&lt;&#x2F;strong&gt; that you would like to have both in login *
&lt;em&gt;and&lt;&#x2F;em&gt;* interactive shells (&lt;em&gt;see the sidenote below&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;.zprofile Quirks&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Apple terminal initially opens &lt;strong&gt;both a login &lt;em&gt;and&lt;&#x2F;em&gt; an interactive shell&lt;&#x2F;strong&gt;
even though you don’t authenticate (i.e., enter login credentials). That’s
why &lt;code&gt;.zshrc&lt;&#x2F;code&gt; will &lt;strong&gt;always&lt;&#x2F;strong&gt; be loaded. However, after the first terminal
session, any subsequent shells that are opened are only interactive;
thus &lt;code&gt;.zprofile&lt;&#x2F;code&gt; will &lt;strong&gt;not&lt;&#x2F;strong&gt; be loaded.&lt;&#x2F;p&gt;
&lt;p&gt;You can test this out by putting an alias or setting a variable
in &lt;code&gt;.zprofile&lt;&#x2F;code&gt;, then opening Terminal and seeing if that variable&#x2F;alias exists.
Then open another shell (type &lt;code&gt;zsh&lt;&#x2F;code&gt;); that variable won’t be accessible anymore.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;zshenv&quot;&gt;.zshenv&lt;&#x2F;h3&gt;
&lt;p&gt;This is read first and read &lt;strong&gt;every time&lt;&#x2F;strong&gt;, regardless of the shell being login,
interactive, or none.&lt;&#x2F;p&gt;
&lt;p&gt;This is the &lt;strong&gt;recommended&lt;&#x2F;strong&gt; place to set &lt;strong&gt;environment variables&lt;&#x2F;strong&gt;, though I
still prefer to set my environment variables in &lt;code&gt;.zprofile&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Why would you need it? Because, for example, if you have a script that gets
called by &lt;code&gt;launchd&lt;&#x2F;code&gt;, it will run under &lt;strong&gt;non-interactive non-login&lt;&#x2F;strong&gt; shell, so
neither &lt;code&gt;.zshrc&lt;&#x2F;code&gt; nor &lt;code&gt;.zprofile&lt;&#x2F;code&gt; will get loaded.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve never needed to use this file so far, but it’s there if you need it, and
there is nothing wrong with using it to define environment variables.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zlogout&quot;&gt;.zlogout&lt;&#x2F;h3&gt;
&lt;p&gt;This file is read when you &lt;strong&gt;log out&lt;&#x2F;strong&gt; of a session. Useful for cleaning things
up.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;file-load-order&quot;&gt;File Load Order&lt;&#x2F;h3&gt;
&lt;p&gt;Here’s the order these profile files are processed, without getting into too
much detail:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;.zshenv&lt;&#x2F;code&gt; → &lt;code&gt;.zprofile&lt;&#x2F;code&gt; → &lt;code&gt;.zshrc&lt;&#x2F;code&gt; → &lt;code&gt;.zlogin&lt;&#x2F;code&gt; → &lt;code&gt;.zlogout&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;That was an overview
of &lt;a href=&quot;https:&#x2F;&#x2F;zsh.sourceforge.io&#x2F;Intro&#x2F;intro_3.html&quot;&gt;Z-Shell startup and shutdown
files&lt;&#x2F;a&gt;. If you are a
&lt;strong&gt;bash&lt;&#x2F;strong&gt; user, &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;bash&#x2F;manual&#x2F;html_node&#x2F;Bash-Startup-Files.html&quot;&gt;bash has a a similar set up startup
files too&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Aside&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For the sake of completeness, &lt;a href=&quot;https:&#x2F;&#x2F;kb.iu.edu&#x2F;d&#x2F;abdy&quot;&gt;this knowledge base contains startup and
termination files used by various unix systems&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I hope this article clarifies what all these &lt;strong&gt;Z-Shell&lt;&#x2F;strong&gt; startup files are, and
how to use them in the most canonical way.&lt;&#x2F;p&gt;
&lt;p&gt;Until the next article… may the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;base64-decoding-a-string-in-go&#x2F;&quot;&gt;Base64 Decoding a String in Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;destructure&#x2F;&quot;&gt;Use Destructuring to Remove Attributes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;getting-the-body-of-an-http-request-with-go&#x2F;&quot;&gt;Getting the Body of an HTTP Request With Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;lets-create-a-syslog-logger&#x2F;&quot;&gt;Let’s Create a Syslog Logger&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;make-your-code-leaner&#x2F;&quot;&gt;Make Your Code Leaner By Extracting Method&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;mastodon-101&#x2F;&quot;&gt;Who Else Wants to Have Their Own Mastodon Server?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;microservice-env-vars&#x2F;&quot;&gt;How to Ensure Environment Variables Are Set&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;scaling-your-node-api-like-a-boss&#x2F;&quot;&gt;Scaling Your Node.js API Like a Boss&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;talkspiffe-stream-setup&#x2F;&quot;&gt;The Live Stream Dream&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ .zprofile, .zshrc, .zenv, OMG! What Do I Put Where?!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;redirect-index-page&#x2F;&quot;&gt;Redirecting a Static Web Page&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Journey of a Microservice: From Source Code to a Full-Blown Kubernetes Deployment</title>
        <published>2021-08-09T00:00:00+00:00</published>
        <updated>2021-08-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/deploying-a-microservice-to-k8s/"/>
        <id>https://zerotohero.dev/zero-to-prod/deploying-a-microservice-to-k8s/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/deploying-a-microservice-to-k8s/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;harmony.png&quot; alt=&quot;The Journey of a Microservice: From Source Code to a Full-Blown Kubernetes Deployment&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The Journey of a Microservice: From Source Code to a Full-Blown Kubernetes Deployment&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;In this lecture, we’ll containerize and deploy a &lt;a href=&quot;https:&#x2F;&#x2F;www.redhat.com&#x2F;en&#x2F;topics&#x2F;api&#x2F;what-is-a-rest-api&quot;&gt;**REST
**ful&lt;&#x2F;a&gt; Go microservice
to a &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;&lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; cluster. We’ll also learn about
some important building blocks of our cluster such
as &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;deployment&#x2F;&quot;&gt;&lt;code&gt;Deployment&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
s, &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;services-networking&#x2F;service&#x2F;&quot;&gt;&lt;code&gt;Service&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
s, &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;configmap&#x2F;&quot;&gt;&lt;code&gt;ConfigMap&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
s, &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;secret&#x2F;&quot;&gt;&lt;code&gt;Secret&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
s, &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;services-networking&#x2F;ingress&#x2F;&quot;&gt;&lt;code&gt;Ingress&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
es, and the like.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;xSUKS0MiElA?si=PsHgJAToCmTEFjK9&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Deploying a Microservice to Kubernetes&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;p&gt;
&lt;p&gt;Below, you’ll find the &lt;strong&gt;source code&lt;&#x2F;strong&gt; of the projects that we used in this
video, links, resources, and other reference material for you learn and practice
even further.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;p&gt;Below, you’ll find the &lt;strong&gt;zip archives&lt;&#x2F;strong&gt; of the projects and other related
artifacts that we’ve covered in this article.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;deploying-a-microserve-to-kubernetes&#x2F;68c3fb40-efdf-497b-8341-25962884db0d&#x2F;fizz-crypto.zip&quot;&gt;&lt;code&gt;fizz-crypto&lt;&#x2F;code&gt; (&lt;strong&gt;53KB&lt;&#x2F;strong&gt; zip archive)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;deploying-a-microserve-to-kubernetes&#x2F;68c3fb40-efdf-497b-8341-25962884db0d&#x2F;fizz-infra.zip&quot;&gt;&lt;code&gt;fizz-infra&lt;&#x2F;code&gt; (&lt;strong&gt;29KB&lt;&#x2F;strong&gt; zip archive)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-contents-of-the-netrc-file&quot;&gt;The Contents of the .netrc File&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;machine github.com
&lt;&#x2F;span&gt;&lt;span&gt;login your_github_username_comes_here
&lt;&#x2F;span&gt;&lt;span&gt;password ghp_your_github_api_key_comes_here
&lt;&#x2F;span&gt;&lt;span&gt;machine api.github.com
&lt;&#x2F;span&gt;&lt;span&gt;login your_github_username_comes_here
&lt;&#x2F;span&gt;&lt;span&gt;password ghp_your_github_api_key_comes_here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-environment-variables&quot;&gt;The Environment Variables&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the environment variables of interest that our builder script uses:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ECR_REPO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;112233445566.dkr.ecr.us-west-2.amazonaws.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ECR_IMAGE_FIZZ_CRYPTO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;fizz-crypto
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ECR_TAG_FIZZ_CRYPTO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;0.0.15
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ecr-login-script&quot;&gt;ECR Login Script&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s the login script I used in the video:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;aws ecr get-login-password --region us-west-2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;docker login --username AWS --password-stdin \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;1122334455667788.dkr.ecr.us-west-2.amazonaws.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To use the above script, you need
to &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;install and configure AWS CLI&lt;&#x2F;a&gt;
first.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;resources-and-additional-reading&quot;&gt;Resources and Additional Reading&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;services-we-used-in-the-video&quot;&gt;Services We Used in the Video&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;eks&#x2F;&quot;&gt;Amazon Elastic Kubernetes Service&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.papertrail.com&#x2F;&quot;&gt;Papertrail: Frustration-free Log Management&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;Kuberetes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes-sigs&quot;&gt;Kubernetes Special Interest Groups (_SIG_s)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tutorials&#x2F;kubernetes-basics&#x2F;update&#x2F;update-intro&#x2F;&quot;&gt;Kubernetes: Performing a Rolling Update&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;access-application-cluster&#x2F;configure-access-multiple-clusters&#x2F;&quot;&gt;Configuring Access to Multiple Clusters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;configure-pod-container&#x2F;configure-liveness-readiness-startup-probes&#x2F;&quot;&gt;Configuring Liveness, Readiness, and Startup Probes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;kubernetes-api-objects-that-we-saw-in-the-video&quot;&gt;Kubernetes API Objects That We Saw in the Video&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;deployment&#x2F;&quot;&gt;&lt;code&gt;Deployment&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;replicaset&#x2F;&quot;&gt;&lt;code&gt;ReplicaSet&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;services-networking&#x2F;service&#x2F;&quot;&gt;&lt;code&gt;Service&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;configmap&#x2F;&quot;&gt;&lt;code&gt;ConfigMap&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;secret&#x2F;&quot;&gt;&lt;code&gt;Secret&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;services-networking&#x2F;ingress&#x2F;&quot;&gt;&lt;code&gt;Ingress&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;job&#x2F;&quot;&gt;&lt;code&gt;Job&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;containers&quot;&gt;Containers&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;containers&#x2F;&quot;&gt;Containers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;&quot;&gt;&lt;strong&gt;Docker Engine&lt;&#x2F;strong&gt; Overview&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;containerd.io&#x2F;docs&#x2F;&quot;&gt;&lt;strong&gt;containerd&lt;&#x2F;strong&gt; Overview&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cri-o.io&#x2F;#what-is-cri-o&quot;&gt;What is &lt;strong&gt;cri-o&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;manage-resources-containers&#x2F;&quot;&gt;Managing Resources for Containers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kubernetes&#x2F;community&#x2F;blob&#x2F;master&#x2F;contributors&#x2F;devel&#x2F;sig-node&#x2F;container-runtime-interface.md&quot;&gt;&lt;strong&gt;CRI&lt;&#x2F;strong&gt;: Container Runtime Interface&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;container-images-we-used&quot;&gt;Container Images We Used&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;_&#x2F;golang&quot;&gt;&lt;code&gt;golang&lt;&#x2F;code&gt; Official Docker Image&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nicolaka&#x2F;netshoot&quot;&gt;&lt;code&gt;netshoot&lt;&#x2F;code&gt;: a Docker + Kubernetes network trouble-shooting swiss-army container&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;building-images&quot;&gt;Building Images&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;builder&#x2F;&quot;&gt;&lt;code&gt;Dockerfile&lt;&#x2F;code&gt; reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;develop&#x2F;develop-images&#x2F;multistage-build&#x2F;&quot;&gt;Using multi-stage builds&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.redhat.com&#x2F;en&#x2F;topics&#x2F;api&#x2F;what-is-a-rest-api&quot;&gt;What is a REST API&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;semver.org&#x2F;&quot;&gt;Semantic Versioning&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;github-access-tokens&quot;&gt;GitHub Access Tokens&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;inetutils&#x2F;manual&#x2F;html_node&#x2F;The-_002enetrc-file.html&quot;&gt;&lt;code&gt;.netrc&lt;&#x2F;code&gt; File&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;github&#x2F;authenticating-to-github&#x2F;keeping-your-account-and-data-secure&#x2F;creating-a-personal-access-token&quot;&gt;Creating &lt;strong&gt;GitHub&lt;&#x2F;strong&gt; Personal Access Tokens&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;linux&quot;&gt;Linux&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;zshell-startup-files&#x2F;&quot;&gt;.zprofile, .zshrc, .zenv, OMG! What Do I Put Where?! (&lt;em&gt;a &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; article&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;curl.se&#x2F;&quot;&gt;&lt;code&gt;curl&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Telnet&quot;&gt;&lt;code&gt;telnet&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Deploying a Microservice to Kubernetes&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;That was how you can containerize and deploy a &lt;strong&gt;Go&lt;&#x2F;strong&gt;-based microservice to a
&lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; cluster.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll have more &lt;strong&gt;Go&lt;&#x2F;strong&gt; programming and &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; deployments in the
upcoming future.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Assemble Your Personal Board of Advisors</title>
        <published>2021-07-31T00:00:00+00:00</published>
        <updated>2021-07-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0011/"/>
        <id>https://zerotohero.dev/highlights/issue-0011/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0011/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;board.png&quot; alt=&quot;Your personal board of advisors will help you navigate the tough times.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Your personal board of advisors will help you navigate the tough times.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the eleventh issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;We had quite a ride in the last week. Let’s take a look at a few highlights.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fizzbuzz-pro-kubernetes-cluster-is-up-and-running-metal&quot;&gt;FizzBuzz Pro** Kubernetes Cluster is Up and Running 🤘&lt;&#x2F;h2&gt;
&lt;p&gt;Well, it’s up, running; and there’s still a lot to implement, but at least I can
get a list of pods and deployments. Also, the critical services
like &lt;code&gt;idm&lt;&#x2F;code&gt;, &lt;code&gt;mailer&lt;&#x2F;code&gt;, &lt;code&gt;crypto&lt;&#x2F;code&gt; are &lt;strong&gt;mostly&lt;&#x2F;strong&gt; complete.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s what I see when I query the cluster:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$ kubectl get deployment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NAME        READY   UP-TO-DATE   AVAILABLE   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;crypto      1&#x2F;1     1            1           3d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;idm         1&#x2F;1     1            1           3d21h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mailer      1&#x2F;1     1            1           4d2h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;questions   1&#x2F;1     1            1           4d2h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;store       1&#x2F;1     1            1           4d2h
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$ kubectl get po
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NAME                         READY   STATUS      RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;crypto-84f64dc7bf-qnj8l      1&#x2F;1     Running     0          3d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;idm-844969c6dd-pzmks         1&#x2F;1     Running     0          3d21h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mailer-67fcf8b5dc-zc8lp      1&#x2F;1     Running     0          4d2h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;questions-7f5ccd5b84-2tmdp   1&#x2F;1     Running     0          4d2h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;store-5f8b66f949-tsc42       1&#x2F;1     Running     0          4d2h
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$  kubectl get ingress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NAME       CLASS    HOSTS              ADDRESS 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cerberus   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;   api.fizzbuzz.pro   k8s-...amazonaws.com 80   10d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So nothing has been broken for days! Everything is healthy as a horse. Progress!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ll be writing more articles and creating more videos about how these
services all tie together. Stay tuned.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;deploying-a-microservice-to-kubernetes&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;h2&gt;
&lt;p&gt;While on the topic of videos, &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;&quot;&gt;I published a video about how you can deploy a
microservice to an AWS EKS Kubernetes cluster&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the video, I start from the source code:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Build the code.&lt;&#x2F;li&gt;
&lt;li&gt;Containerize it.&lt;&#x2F;li&gt;
&lt;li&gt;Push it to a registry.&lt;&#x2F;li&gt;
&lt;li&gt;Link the registry image to Kubernetes Deployments, Services, and Pods.&lt;&#x2F;li&gt;
&lt;li&gt;And more.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It’s an excellent overview of how everything ties together.&lt;&#x2F;p&gt;
&lt;p&gt;Note that this is just the &lt;strong&gt;video&lt;&#x2F;strong&gt; part of the content. There will be an
accompanying article on &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;&quot;&gt;&lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; that will dive deeper and
provide you with additional &lt;em&gt;bedtime reading material&lt;&#x2F;em&gt; to dig in.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing-an-aws-eks-kubernetes-cluster-using-eksctl&quot;&gt;Installing an AWS EKS Kubernetes Cluster Using &lt;code&gt;eksctl&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The above video talks about deploying to &lt;strong&gt;Kubernetes,&lt;&#x2F;strong&gt; but how do we create a
&lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; cluster in the first place.&lt;&#x2F;p&gt;
&lt;p&gt;There are many ways but
&lt;a href=&quot;https:&#x2F;&#x2F;eksctl.io&#x2F;&quot;&gt;eksctl&lt;&#x2F;a&gt; is the preferred way.
As always, there’s more than mere instructions; I discuss the pros and cons of
things, and there are further reference material for the interested to do a
deeper dive.&lt;&#x2F;p&gt;
&lt;p&gt;That’s more or less this week in a nutshell. So what’s coming up next?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-on-the-horizon-woman-fried-egg&quot;&gt;What’s on the Horizon 👩‍🍳&lt;&#x2F;h2&gt;
&lt;p&gt;I have a couple of [&lt;strong&gt;Zero to Hero Twitch Screencasts&lt;&#x2F;strong&gt;][twitch] that I
haven’t published yet.&lt;&#x2F;p&gt;
&lt;p&gt;On the &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; end, I, at least, want to finish the &lt;strong&gt;IDM&lt;&#x2F;strong&gt; µService
endpoints (&lt;em&gt;which is almost done&lt;&#x2F;em&gt;), but we’ll see how it goes.
I’ll let you know next week.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;Don’t take the phrase “&lt;em&gt;you must have a mentor&lt;&#x2F;em&gt;” too literally. The reality is
&lt;strong&gt;you need more than a single mentor&lt;&#x2F;strong&gt;; you need your &lt;strong&gt;personal board of
advisors&lt;&#x2F;strong&gt; if you will. But how do you find all these people? Let’s see.&lt;&#x2F;p&gt;
&lt;p&gt;I don’t want to sound cheesy, but the first step is to
&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;&lt;strong&gt;know yourself&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. Finding what you
want requires knowing what you want. Then, reflect deeply and write down a *
&lt;em&gt;personal vision statement&lt;&#x2F;em&gt;*. Make sure that your &lt;em&gt;personal vision statement&lt;&#x2F;em&gt;
resonates with what &lt;strong&gt;you&lt;&#x2F;strong&gt; want to aspire to be. &lt;strong&gt;Not&lt;&#x2F;strong&gt; what society, your
teammates, your managers, or your family expects from you.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Think about how your career &lt;strong&gt;aligns&lt;&#x2F;strong&gt; with your personal vision down the
road. How does your ideal life look like fifteen years ahead?&lt;br &#x2F;&gt;
How will it be different from your present-day?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Then create a list of different kinds of support that you will need to
&lt;strong&gt;actualize&lt;&#x2F;strong&gt; that aspiration. For example, what types of support do you need to
take yourself from where you are to where you want to be?&lt;&#x2F;p&gt;
&lt;p&gt;Then consider which areas are already fulfilled by mentors and helpers and which
aren’t.&lt;&#x2F;p&gt;
&lt;p&gt;Do you want a few examples?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Who do you go when you need to discuss some tactical advice to navigate
company internals?&lt;&#x2F;li&gt;
&lt;li&gt;Where do you go for emotional support?&lt;&#x2F;li&gt;
&lt;li&gt;Whom do you rely on to enhance your technical understanding?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Enhance the list as much as you can.&lt;&#x2F;p&gt;
&lt;p&gt;Then for any role that is “&lt;em&gt;missing&lt;&#x2F;em&gt;” a mentor, think about who could fill that
need. Does that person exist in your network, do they exist in your
second-degree network; or do you need to look even further?&lt;&#x2F;p&gt;
&lt;p&gt;Based on that assessment, you can develop new relationships or strengthen the
existing ones.&lt;&#x2F;p&gt;
&lt;p&gt;You’ll also find that a prospective mentor or a coach will be &lt;strong&gt;much&lt;&#x2F;strong&gt; inclined
to help you on a particular topic rather than the generic “&lt;em&gt;would you be my
mentor?&lt;&#x2F;em&gt;” questions.&lt;&#x2F;p&gt;
&lt;p&gt;In short, as I’ve been telling you a million times: &lt;strong&gt;do your homework&lt;&#x2F;strong&gt; before
reaching out for help.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;middyjs&#x2F;middy&quot;&gt;&lt;strong&gt;Middy&lt;&#x2F;strong&gt; is the stylish Node.js middleware engine for AWS Lambda&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.blog&#x2F;2021-03-18-how-we-found-and-fixed-a-rare-race-condition-in-our-session-handling&#x2F;&quot;&gt;Here’s how &lt;strong&gt;GitHub&lt;&#x2F;strong&gt; found and fixed a rare race condition in their
session handling&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nesslabs.com&#x2F;power-of-simplicity-complexity-bias&quot;&gt;&lt;strong&gt;Flash News&lt;&#x2F;strong&gt;: You can manage your complexity bias by… keeping things
simple, who knew&lt;&#x2F;a&gt;!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>FizzBuzz Pro High Level Design</title>
        <published>2021-07-23T00:00:00+00:00</published>
        <updated>2021-07-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/fizzbuzz-pro-hla/"/>
        <id>https://zerotohero.dev/zero-to-prod/fizzbuzz-pro-hla/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/fizzbuzz-pro-hla/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;blueprint.png&quot; alt=&quot;FizzBuzz Pro High Level Design&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;FizzBuzz Pro High Level Design&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In this quick video, we’ll overview a high-level overview of &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;
APIs.&lt;&#x2F;p&gt;
&lt;p&gt;Since &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; is a work in progress, anything can change anytime;
however we have to start designing somewhere. So, without further ado, here
comes the video that explains the initial design:&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;6DUrJrPyePo?si=4XQPv94j0TkxEGTv&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;FizzBuzz Pro High Level Design&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;FizzBuzz Pro High Level Design&lt;&#x2F;p&gt;
&lt;p&gt;As I said in the video, I’ll create additional content in the form of **articles
**, &lt;strong&gt;source code&lt;&#x2F;strong&gt;, and more &lt;strong&gt;videos&lt;&#x2F;strong&gt; as I continue implementing &lt;strong&gt;FizzBuzz
Pro&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It’ll be an awesome learning journey. Stay tuned 🎵.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ FizzBuzz Pro High-Level Design&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;resources-and-additional-reading&quot;&gt;Resources and Additional Reading&lt;&#x2F;h2&gt;
&lt;p&gt;Here are some of the concepts that we covered in the video that you might want
to drill down further.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.virtuesecurity.com&#x2F;kb&#x2F;username-enumeration&#x2F;&quot;&gt;What is username enumeration&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cheatsheetseries.owasp.org&#x2F;index.html&quot;&gt;OWASP Cheatsheet Series&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jwt.io&#x2F;&quot;&gt;JSON Web Tokens&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.vinaysahni.com&#x2F;best-practices-for-a-pragmatic-restful-api&quot;&gt;Best Practices for Designing Pragmatic RESTful API&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;next-up&quot;&gt;Next Up&lt;&#x2F;h2&gt;
&lt;p&gt;Next on my video production queue are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How to harden our IAM account security.&lt;&#x2F;li&gt;
&lt;li&gt;A quickie about Ghost theme development.&lt;&#x2F;li&gt;
&lt;li&gt;And a mini-series about provisioning an AKS cluster and configuring TLS,
Ingress, networking and other magic.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There will be a lot of cool content coming up. Wait for it.&lt;&#x2F;p&gt;
&lt;p&gt;Until the next video… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Who Else Journals Daily?</title>
        <published>2021-06-26T00:00:00+00:00</published>
        <updated>2021-06-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0007/"/>
        <id>https://zerotohero.dev/highlights/issue-0007/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0007/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;jornul.png&quot; alt=&quot;Journaling is self-reflection.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Journaling is self-reflection.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the seventh issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;This week, I was busy refactoring a tiered enterprise &lt;strong&gt;Java Spring&lt;&#x2F;strong&gt; project.
It consumed more time that I anticipated. Can I say I’m a &lt;strong&gt;JavaSpring&lt;&#x2F;strong&gt;
developer now 😀 (&lt;em&gt;instead of “JavaScript”—get it, get it?&lt;&#x2F;em&gt;)—okay, lousy dad
pun. But still, I had to shift my schedule to adapt to tackling with that beast,
which consumed &lt;strong&gt;a lot&lt;&#x2F;strong&gt; of my time and energy.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The good part&lt;&#x2F;strong&gt;: I learned a heck lot of &lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;projects&#x2F;spring-cloud&quot;&gt;&lt;strong&gt;&lt;em&gt;Spring Cloud&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;projects&#x2F;spring-securit&quot;&gt;&lt;strong&gt;&lt;em&gt;Spring Security&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; internals,
more than I’d like to know, actually. My verdict is: Although Java has moved a
long way since &lt;em&gt;J2EE&lt;&#x2F;em&gt;, and with the &lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;&quot;&gt;&lt;strong&gt;Spring Framework&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;**,
**it’s on the right path; yet I still do think it is &lt;strong&gt;heavy&lt;&#x2F;strong&gt; and &lt;strong&gt;verbose&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;&quot;&gt;&lt;strong&gt;The Spring Framework&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is still worth learning &lt;strong&gt;&lt;em&gt;if&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;
you want to shoot flies using rocket launchers 😜—kidding, or &lt;strong&gt;maybe not&lt;&#x2F;strong&gt;.
Anyhoo, &lt;a href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;&quot;&gt;try it yourself&lt;&#x2F;a&gt; and tell me how your learning
experience went.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;what-s-new-on-zero-to-hero-woman-fried-egg&quot;&gt;What’s New on &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; 👩‍🍳&lt;&#x2F;h2&gt;
&lt;p&gt;This week, I mainly did infrastructure and plumbing work, such as creating
container images and ensuring that &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; microservices are at least
answering to &lt;em&gt;health&lt;&#x2F;em&gt; and &lt;em&gt;liveness&lt;&#x2F;em&gt; endpoints.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;06&amp;#x2F;Screen-Shot-2021-06-26-at-2.11.45-PM.png&quot; alt=&quot;Creating a go Docker image.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Creating a go Docker image.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;I don’t have a definite schedule. Yet, since I work during the day, I’ll
mostly be streaming at nights (&lt;em&gt;pacific time&lt;&#x2F;em&gt;)—stay tuned.&lt;&#x2F;p&gt;
&lt;p&gt;I stream every couple of days; however, it also depends on my energy levels,
and the programs that I might have with family and friends.&lt;&#x2F;p&gt;
&lt;p&gt;The best way to get notified as soon as I’m online is
to &lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot; title=&quot;Follow me on Twitch.&quot;&gt;hop on the channel and follow me on &lt;strong&gt;Twitch&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Other than the live streams, there’s not much visible progress, but many cool
things are brewing behind-the-scenes—stay tuned.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;Do you keep a journal? If not, you should.&lt;&#x2F;p&gt;
&lt;p&gt;Your journal also helps to start your day with a set of probing questions. Here
are the five questions I ask myself &lt;strong&gt;every single day&lt;&#x2F;strong&gt; and how those questions
change and shape my life:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;06&amp;#x2F;checkin.jpg&quot; alt=&quot;The questions I ask to myself every single day.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The questions I ask to myself every single day.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;what-is-it-that-you-really-want-to-be-and-do&quot;&gt;What is it that you really want to be and do?&lt;&#x2F;h3&gt;
&lt;p&gt;This question is about your &lt;strong&gt;aspiration&lt;&#x2F;strong&gt; and &lt;strong&gt;purpose&lt;&#x2F;strong&gt;. What is it that you
do, and what is it that you &lt;strong&gt;really&lt;&#x2F;strong&gt; want to be great at doing. The key is to
&lt;strong&gt;be honest&lt;&#x2F;strong&gt; with yourself. The question does not read “&lt;em&gt;what do people want
you to become?&lt;&#x2F;em&gt;”, it asks what is it that &lt;strong&gt;YOU&lt;&#x2F;strong&gt; want to be and do.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-are-you-doing-really-well-that-is-helping-you-get-there&quot;&gt;What are you doing really well that is helping you get there?&lt;&#x2F;h3&gt;
&lt;p&gt;This question helps you spotlight a core strength and your ability to execute
towards your goal.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-are-you-not-doing-well-that-is-preventing-you-from-getting-there&quot;&gt;What are you not doing well that is preventing you from getting there?&lt;&#x2F;h3&gt;
&lt;p&gt;This, again, requires an honest and critical assessment of the things that block
your way.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-will-you-do-differently-tomorrow-to-meet-those-challenges&quot;&gt;What will you do differently tomorrow to meet those challenges?&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t practice your forehand while your backhand sucks.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This question pushes you to focus on the right priorities so that you don’t get
into a situation of “&lt;em&gt;I am making good time, but I am lost.&lt;&#x2F;em&gt;” It also helps move
you out of your comfort zone.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-can-i-help-myself-where-do-i-need-the-most-help&quot;&gt;How can I help myself &#x2F; where do I need the most help?&lt;&#x2F;h3&gt;
&lt;p&gt;The answers to the first four questions match against areas where you (&lt;em&gt;as your
own mentor&lt;&#x2F;em&gt;) can have particular strengths. In contrast, the second question
helps you to open up to your network to &lt;strong&gt;ask for help&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;keep-on-journaling&quot;&gt;Keep on Journaling&lt;&#x2F;h2&gt;
&lt;p&gt;I journal a lot, initially with pen and paper and later on digitally. I believe
it’s a &lt;strong&gt;transformative&lt;&#x2F;strong&gt; experience that everyone needs to give it an honest
try at least.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your journal is a regular private, personal, &lt;strong&gt;honest&lt;&#x2F;strong&gt;, and &lt;strong&gt;truthful&lt;&#x2F;strong&gt;
self-diagnosis that can take &lt;strong&gt;at most two minutes&lt;&#x2F;strong&gt; of your time.&lt;br &#x2F;&gt;
If you don’t have two minutes a day to spare, well, then you do need to sort
out your priorities.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Besides, journaling is not a big hurdle: You are not writing a novel or an
essay—unless you want to. You can use anything to journal: Pen and paper works
just fine; you can use a dedicated app, or you can fire your favorite text
editor. It doesn’t matter.&lt;&#x2F;p&gt;
&lt;p&gt;Keeping a journal clears your mind off of random thoughts, helps you keep on
track and achieve your goals and clarifies your intentions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wasmer.io&#x2F;&quot;&gt;Run any code on any client with &lt;strong&gt;WebAssembly&lt;&#x2F;strong&gt; and &lt;strong&gt;Wasmer&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;0.30000000000000004.com&quot;&gt;&lt;strong&gt;IEEE754&lt;&#x2F;strong&gt; anyone&lt;&#x2F;a&gt;?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alpinejs&#x2F;alpine&quot;&gt;Fed up from the React&#x2F;Vue&#x2F;Angular madness?—&lt;strong&gt;Alpine&lt;&#x2F;strong&gt; is a rugged, minimal
framework for composing &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; behavior in your markup&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 7: Who Else Journals Daily?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Earn the Promotion You Deserve</title>
        <published>2021-06-18T00:00:00+00:00</published>
        <updated>2021-06-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0006/"/>
        <id>https://zerotohero.dev/highlights/issue-0006/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0006/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;happy.png&quot; alt=&quot;You deserve it; you will earn it.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;You deserve it; you will earn it.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the sixth issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;This week, I did a lot of work behind the scenes, so there are not many new
articles to read for you folks. And still, I have a ton to talk about, so here
we go.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-new-on-zero-to-hero-woman-fried-egg&quot;&gt;What’s New on &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; 👩‍🍳&lt;&#x2F;h2&gt;
&lt;p&gt;This week, I was primarily focused
on &lt;a href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;VadidekiVolkan&quot;&gt;restarting the Zero to Hero live streams&lt;&#x2F;a&gt; and creating the initial
API architecture of &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;. Thus, there are no new articles so far.
And there’s a lot in the pipeline. For instance, I want to create a
&lt;strong&gt;learning roadmap&lt;&#x2F;strong&gt; for the interested, which will be about how you can keep
up with everything without getting overwhelmed (&lt;em&gt;hint: give yourself
the time you need—but there’s more to it&lt;&#x2F;em&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;There’s one video about &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating AWS ECR Repositories&lt;&#x2F;a&gt; that you might
like, though.&lt;&#x2F;p&gt;
&lt;p&gt;So, stay tuned. Lots of quality content is on its way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zero-to-hero-on-twitch&quot;&gt;&lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; on Twitch&lt;&#x2F;h2&gt;
&lt;p&gt;I started sharing my development environment, live coding, and chatting with
whoever bumps into &lt;a href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;VadidekiVolkan&quot;&gt;&lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Twitch Channel&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Nowadays, I’m mostly coding &lt;strong&gt;Go&lt;&#x2F;strong&gt;; yet I’ll be all over the stack, from
containers to Kubernetes, to UI&#x2F;UX design.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I don’t have a definite schedule. Yet, since I work during the day, I’ll
mostly be streaming at nights (&lt;em&gt;pacific time&lt;&#x2F;em&gt;)—stay tuned.&lt;&#x2F;p&gt;
&lt;p&gt;I stream every couple of days; however, it also depends on my energy levels,
and the programs that I might have with family and friends.&lt;&#x2F;p&gt;
&lt;p&gt;The best way to get notified as soon as I’m online is
to &lt;a href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;VadidekiVolkan&quot;&gt;hop on the channel and follow me on &lt;strong&gt;Twitch&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;I know you are working hard, and &lt;strong&gt;deserve&lt;&#x2F;strong&gt; that promotion, or the salary hike,
or &lt;em&gt;at least&lt;&#x2F;em&gt; the recognition. And that’s not enough. So &lt;strong&gt;are you making a case
for it&lt;&#x2F;strong&gt;? Here’s how:&lt;&#x2F;p&gt;
&lt;p&gt;It’s true that, especially during the pandemic, people’s focus was more on
“&lt;em&gt;sheltering at work&lt;&#x2F;em&gt;” and feeling blessed to have a job than fighting for a
promotion.&lt;&#x2F;p&gt;
&lt;p&gt;And since things are turning back to normal, it might be just the time to work
for the promotion that you rightfully deserve. Yet, don’t expect your managers
and your peers recognize you. From their perspective, they are working as hard
as you are. You need to make your case for your promotion. You need to make a
case that you are already operating one level above you, and your peers already
know and approve of your hard work.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s how to do that:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Stay connected&lt;&#x2F;strong&gt;: This is important, especially when most of us are working
remotely due to circumstances. Build a solid relationship with your manager.
Ensure that you are having a one-on-one conversation at least twice a month, if
not every week. Stay on their radar. Make your work visible, share the ideas you
are interested in, and offer to help them in however way you can.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Add value&lt;&#x2F;strong&gt;: Leverage your knowledge, skills, and abilities to position
yourself as the perfect person to lead a project; become the &lt;strong&gt;go-to&lt;&#x2F;strong&gt; person
for particular domain topics. &lt;strong&gt;Be a bridge&lt;&#x2F;strong&gt; between people, teams, and even
business units. Show your superiors how people around you can benefit from your
assistance. Show that you can create an impact that exceeds your boundaries.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Have a brag book&lt;&#x2F;strong&gt;: This is important, and it’s often overlooked. But, trust
me, two weeks from now, you will forget the vital feature you created today that
delighted the customers.&lt;&#x2F;p&gt;
&lt;p&gt;Three months from now, you’ll not even remember the names of the people you
worked with within that project and how you made their lives better.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your brain is an amazing machine, but it is a &lt;strong&gt;&lt;em&gt;grinch&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; when it comes to
remembering the historical nitty-gritty details of your achievements.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Document&lt;&#x2F;strong&gt; everything you do (&lt;em&gt;in no more than 200 words&lt;&#x2F;em&gt;). I’ve found out
that keeping a daily free-form &lt;strong&gt;work journal&lt;&#x2F;strong&gt; is excellent for this purpose.&lt;&#x2F;p&gt;
&lt;p&gt;Before the end of your workday, you can write into your journal about what you
did today and what you’ll accomplish tomorrow. And you’ll have a chronological
record of your achievements that you can brag about in your next performance
review meeting with your boss.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes these might be obvious tips, but you know what’s important?&lt;&#x2F;p&gt;
&lt;p&gt;Actually &lt;strong&gt;doing them&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Agreeing that they are great tips will not get you that promotion:&lt;br &#x2F;&gt;
&lt;strong&gt;Getting your hands dirty&lt;&#x2F;strong&gt; and &lt;strong&gt;working on&lt;&#x2F;strong&gt; your promotion will
“&lt;em&gt;eventually&lt;&#x2F;em&gt;” get you that promotion.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So grab that pen and start scribbling in your work journal, and good luck with
your next performance review talk: If you start now, you’ll be well equipped
when the time comes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;opensearch.org&#x2F;&quot;&gt;&lt;strong&gt;Open Search&lt;&#x2F;strong&gt; is an open-source alternative to ElasticSearch and Kibana&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;istio.io&#x2F;latest&#x2F;blog&#x2F;2021&#x2F;external-locality-failover&#x2F;&quot;&gt;Here’s how you can use &lt;strong&gt;Istio&lt;&#x2F;strong&gt; for failover for external services&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;futurewei-cloud&#x2F;alcor&quot;&gt;&lt;strong&gt;Alcor&lt;&#x2F;strong&gt; is a hyperscale cloud native SDN platform&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 6: Earn the Promotion You Deserve&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Creating ECR Repositories</title>
        <published>2021-06-18T00:00:00+00:00</published>
        <updated>2021-06-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/creating-ecr-repositories/"/>
        <id>https://zerotohero.dev/zero-to-prod/creating-ecr-repositories/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/creating-ecr-repositories/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;elastic.png&quot; alt=&quot;These are &amp;#x27;elastic&amp;#x27; containers.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;These are &amp;#x27;elastic&amp;#x27; containers.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This quick video will create an &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;ecr&#x2F;&quot;&gt;&lt;strong&gt;AWS ECR&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; repo
and set up our development environment to interact with it.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;domIOFhMjpI?si=9-ofptjrcT6arxoS&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Creating ECR Repositories&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Creating ECR Repositories&lt;&#x2F;p&gt;
&lt;h2 id=&quot;resources-and-additional-reading&quot;&gt;Resources and Additional Reading&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;ecr&#x2F;&quot;&gt;Amazon Elastic Container Registry&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;cli&#x2F;latest&#x2F;userguide&#x2F;cli-chap-install.html&quot;&gt;Installing the AWS CLI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.digitalocean.com&#x2F;community&#x2F;tutorials&#x2F;what-is-a-container&quot;&gt;What is a Container&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Creating ECR Repositories&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;next-up&quot;&gt;Next Up&lt;&#x2F;h2&gt;
&lt;p&gt;Next on my video production queue are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Going through the sequence diagrams of &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; authentication,
subscription, and signup flow.&lt;&#x2F;li&gt;
&lt;li&gt;How to harden our &lt;strong&gt;IAM account security&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;And a quickie about &lt;strong&gt;Ghost theme development&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Once those videos are done, we’ll start working on actually implementing the *
&lt;em&gt;FizzBuzz Pro&lt;&#x2F;em&gt;* infrastructure, one microservice at a time; it’ll be fun.&lt;&#x2F;p&gt;
&lt;p&gt;Until the next video… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Be Kind</title>
        <published>2021-06-11T00:00:00+00:00</published>
        <updated>2021-06-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0005/"/>
        <id>https://zerotohero.dev/highlights/issue-0005/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0005/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;kind.png&quot; alt=&quot;Be kind.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Be kind.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the fifth issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;This week was full of new videos and articles. It was a productive week overall.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s jump right in.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-new-on-zero-to-hero-woman-fried-egg&quot;&gt;What’s New on &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; 👩‍🍳&lt;&#x2F;h2&gt;
&lt;p&gt;Here is a list of articles that I’ve published this week:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;The Repositories, Tools, and Services We’ll Use for FizzBuzz
Pro&lt;&#x2F;a&gt; use case, we looked into the repositories and services that
we will use in &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;microservice-env-vars&#x2F;&quot;&gt;A Technique to Ensure Environment Variables Are Set Before Starting a
Microservice&lt;&#x2F;a&gt; article, we saw a technique to ensure that our
microservice does not start if any of the environment variables it depends on
is missing.&lt;&#x2F;li&gt;
&lt;li&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;make-your-code-leaner&#x2F;&quot;&gt;Make Your Code Leaner By Extracting Methods&lt;&#x2F;a&gt; article, we saw an
example of the &lt;strong&gt;method extraction&lt;&#x2F;strong&gt; refactoring technique.&lt;&#x2F;li&gt;
&lt;li&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;lets-create-a-syslog-logger&#x2F;&quot;&gt;Let’s Create a Syslog Logger&lt;&#x2F;a&gt;
use case, we created a &lt;strong&gt;logging wrapper&lt;&#x2F;strong&gt; module that logs messages to
&lt;strong&gt;Syslog&lt;&#x2F;strong&gt;: a standard network-based logging protocol that works on a wide
variety of different types of devices and applications.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;volkan-uses-keyboard&quot;&gt;Volkan Uses ⌨️&lt;&#x2F;h2&gt;
&lt;p&gt;Ah, I’ve &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;volkan-uses&#x2F;&quot;&gt;created an extensive inventory of hardware, software, and tooling that
I &lt;strong&gt;prefer&lt;&#x2F;strong&gt; using&lt;&#x2F;a&gt;—I thought you might like it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;I’ll keep this week’s random thought short and sweet: &lt;strong&gt;be kind&lt;&#x2F;strong&gt;—it’s more
important than you think it is.&lt;&#x2F;p&gt;
&lt;p&gt;Not only &lt;strong&gt;be kind&lt;&#x2F;strong&gt; but also &lt;strong&gt;model kindness on your team&lt;&#x2F;strong&gt; too.&lt;&#x2F;p&gt;
&lt;p&gt;But how do you do that? I mean, how do you promote generosity and kindness in
your team? Let’s see.&lt;&#x2F;p&gt;
&lt;p&gt;First, start with yourself: &lt;strong&gt;Take the lead&lt;&#x2F;strong&gt;. Give compliments to your
teammates.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes, people are blunt and up-front. Yet, that does not mean they have bad
intentions or ulterior motives. They likely want the team’s success as much as
anyone else. Be available, helpful, and present for them.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Teams are cauldrons of bubbling emotions, and decisions are made by carefully
considering everyone’s feelings—along with other things.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Never assume malice&lt;&#x2F;strong&gt;. People can have different ways to communicate. People
come from different cultural norms, and backgrounds. Reaching consensus is
complicated with two people already; it gets more complex as the number
increases. Don’t make it even harder.&lt;&#x2F;p&gt;
&lt;p&gt;Kindness is contagious: Small gestures can have a big impact.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dpritchett&#x2F;aws-budget-limiter&quot;&gt;&lt;strong&gt;AWS Budget Limiter&lt;&#x2F;strong&gt; is Terraform script for capping monthly AWS
spend&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;extrawurst&#x2F;gitui&quot;&gt;&lt;strong&gt;GitUI&lt;&#x2F;strong&gt; provides the comfort of a Git UI right in your terminal&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.codinghorror.com&#x2F;whats-worse-than-crashing&#x2F;&quot;&gt;An oldie but goldie for your bedtime reading: &lt;strong&gt;What’s Worse Than
Crashing?&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 5: Be Kind&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Make Your Code Leaner By Extracting Methods</title>
        <published>2021-06-06T00:00:00+00:00</published>
        <updated>2021-06-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/tips/make-your-code-leaner/"/>
        <id>https://zerotohero.dev/tips/make-your-code-leaner/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/tips/make-your-code-leaner/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;extract.png&quot; alt=&quot;Extracting methods.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Extracting methods.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;In this article, we’ll see an example
of &lt;a href=&quot;https:&#x2F;&#x2F;refactoring.com&#x2F;catalog&#x2F;extractFunction.html&quot;&gt;method extraction&lt;&#x2F;a&gt;.
We’ll make our code less repetitive, cleaner, and easier to follow.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;duplicating-a-method&quot;&gt;Duplicating a Method&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s take the &lt;code&gt;SanitizeCrypto()&lt;&#x2F;code&gt; function
from &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;microservice-env-vars&#x2F;&quot;&gt;our former &lt;code&gt;fizz-env&lt;&#x2F;code&gt; module&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;FizzEnv&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SanitizeCrypto&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sanitizeCommon&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reflect&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ValueOf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Crypto&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NumField&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The environment variable for&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39; is not defined.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                ),
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What if, along with &lt;code&gt;e.Crypto&lt;&#x2F;code&gt;, we also have… say… an &lt;code&gt;e.Log&lt;&#x2F;code&gt; member that
requires the same kind of sanitization. We can come up with a &lt;code&gt;SanitizeLog()&lt;&#x2F;code&gt;
method like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;FizzEnv&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SanitizeLog&lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; &amp;lt;-- (1)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sanitizeCommon&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reflect&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ValueOf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; &amp;lt;-- (2)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NumField&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The environment variable for &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39; is not defined.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                ),
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you look closely at the replicated &lt;code&gt;SanitizeLog()&lt;&#x2F;code&gt; function, aside from the
method name and the attribute &lt;code&gt;e.Log&lt;&#x2F;code&gt; that we are reflecting upon (&lt;em&gt;&lt;code&gt;(1)&lt;&#x2F;code&gt;
and &lt;code&gt;(2)&lt;&#x2F;code&gt; in the source code, respectively&lt;&#x2F;em&gt;), we are repeating the majority of
the code.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;These kind of &lt;strong&gt;copy&#x2F;paste&lt;&#x2F;strong&gt; method duplications is a fact of development
life. They happen all the time. It’s your responsibility, as a developer, to be
vigilant and &lt;strong&gt;defend the code quality&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;extracting-the-repetitive-code-piece&quot;&gt;Extracting the Repetitive Code Piece&lt;&#x2F;h2&gt;
&lt;p&gt;Instead, we can extract the for loop into its own method like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;sanitize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v reflect&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NumField&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The environment variable for &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39; is not defined.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                ),
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;calling-the-extracted-function&quot;&gt;Calling the Extracted Function&lt;&#x2F;h2&gt;
&lt;p&gt;Then we can call it in our methods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;FizzEnv&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SanitizeCrypto&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sanitize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reflect&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ValueOf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Crypto&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;FizzEnv&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SanitizeLog&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sanitize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reflect&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ValueOf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Much cleaner, isn’t it?&lt;&#x2F;p&gt;
&lt;p&gt;This approach is known
as &lt;a href=&quot;https:&#x2F;&#x2F;refactoring.com&#x2F;catalog&#x2F;extractFunction.html&quot;&gt;method extracting&lt;&#x2F;a&gt;,
and when done with a purpose, it can make your code &lt;strong&gt;clearer&lt;&#x2F;strong&gt; to read,
&lt;strong&gt;leaner&lt;&#x2F;strong&gt;, and more &lt;strong&gt;maintainable&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just keep in mind that each method extraction is an additional level of
indirection. So if you abuse it, you will make your code harder to read
(&lt;em&gt;instead of easier&lt;&#x2F;em&gt;), harder to follow, and harder to reason about.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Do this refactoring &lt;strong&gt;only&lt;&#x2F;strong&gt; when it makes sense. Do it only when the **benefits
** of doing it (&lt;em&gt;i.e., not repeating your code&lt;&#x2F;em&gt;) &lt;strong&gt;outweigh&lt;&#x2F;strong&gt; the liabilities of
doing it (&lt;em&gt;i.e., an additional level of indirection, making code harder to
follow&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=PAAkCSZUG1c&quot;&gt;Sometimes a little copying is better than a little
dependency&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;p&gt;Below, you’ll find the &lt;strong&gt;zip archives&lt;&#x2F;strong&gt; of the projects and other related
artifacts that we’ve covered in this article.&lt;&#x2F;p&gt;
&lt;p&gt;Enjoy… And may the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;lets-create-a-syslog-logger&#x2F;5f7a69db-658d-482c-bac1-9f036bb01edd&#x2F;fizz-logging.zip&quot;&gt;&lt;code&gt;fizz-env&lt;&#x2F;code&gt; (**3KB ** zip archive)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;base64-decoding-a-string-in-go&#x2F;&quot;&gt;Base64 Decoding a String in Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;destructure&#x2F;&quot;&gt;Use Destructuring to Remove Attributes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;getting-the-body-of-an-http-request-with-go&#x2F;&quot;&gt;Getting the Body of an HTTP Request With Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;lets-create-a-syslog-logger&#x2F;&quot;&gt;Let’s Create a Syslog Logger&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Make Your Code Leaner By Extracting Method&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;mastodon-101&#x2F;&quot;&gt;Who Else Wants to Have Their Own Mastodon Server?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;microservice-env-vars&#x2F;&quot;&gt;How to Ensure Environment Variables Are Set&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;scaling-your-node-api-like-a-boss&#x2F;&quot;&gt;Scaling Your Node.js API Like a Boss&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;talkspiffe-stream-setup&#x2F;&quot;&gt;The Live Stream Dream&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;zshell-startup-files&#x2F;&quot;&gt;.zprofile, .zshrc, .zenv, OMG! What Do I Put Where?!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;redirect-index-page&#x2F;&quot;&gt;Redirecting a Static Web Page&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Here&#x27;s a Technique to Ensure Environment Variables Are Set Before Starting a Microservice</title>
        <published>2021-06-06T00:00:00+00:00</published>
        <updated>2021-06-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/tips/microservice-env-vars/"/>
        <id>https://zerotohero.dev/tips/microservice-env-vars/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/tips/microservice-env-vars/">&lt;p&gt;&lt;img src=&quot;&#x2F;content&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;pipes.png&quot; alt=&quot;Environment Variables&quot; &#x2F;&gt;&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;pipes.png&quot; alt=&quot;Configuration and Pipes.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Configuration and Pipes.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s say that you have microservices that you don’t want to start serving
content unless certain environment variables have been defined.&lt;&#x2F;p&gt;
&lt;p&gt;Recently, we had to implement such a solution for &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In our case, we needed to make sure that the &lt;code&gt;fizz-crypto&lt;&#x2F;code&gt; microservice did not
start unless the following variables were defined in the system.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;FIZZ_PORT_SVC_CRYPTO
&lt;&#x2F;span&gt;&lt;span&gt;FIZZ_JWT_KEY
&lt;&#x2F;span&gt;&lt;span&gt;FIZZ_RANDOM_BYTE_LENGTH
&lt;&#x2F;span&gt;&lt;span&gt;FIZZ_BCRYPT_HASH_ROUNDS
&lt;&#x2F;span&gt;&lt;span&gt;FIZZ_AES_PASSPHRASE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;How do we make sure that the service does not start if any of these environment
variables are missing? And how can we do this with the minimal amount of
maintenance overhead?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introducing-the-fizz-env-module&quot;&gt;Introducing the &lt;code&gt;fizz-env&lt;&#x2F;code&gt; Module&lt;&#x2F;h2&gt;
&lt;p&gt;To begin, let’s create a module for our purposes. We’ll publish our module
to &lt;code&gt;github.com&#x2F;zerotohero-dev&#x2F;fizz-env&lt;&#x2F;code&gt; private git repository:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Switch to our workspace:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$WORKSPACE
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# `fizz-env` is an empty repository:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git clone git@github.com:zerotohero-dev&#x2F;fizz-env.git
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Switch to the project folder:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; fizz-env
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Initialize our module:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;go mod init github.com&#x2F;zerotohero-dev&#x2F;fizz-env
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will result in the following &lt;code&gt;go.mod&lt;&#x2F;code&gt; file that defines our module:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;module github.com&#x2F;zerotohero-dev&#x2F;fizz-env
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;go 1.16
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then let’s create a &lt;code&gt;.&#x2F;pkg&#x2F;env&#x2F;fizz.go&lt;&#x2F;code&gt; file that we’ll work on:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$WORKSPACE&#x2F;fizz-env
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mkdir -p pkg&#x2F;env
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;touch pkg&#x2F;env&#x2F;fizz.go
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then let’s import the packages that we’ll need:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; $WORKSPACE&#x2F;fizz-env&#x2F;pkg&#x2F;env&#x2F;fizz.go
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;os&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;reflect&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-fizzenv-struct&quot;&gt;The &lt;code&gt;FizzEnv&lt;&#x2F;code&gt; Struct&lt;&#x2F;h2&gt;
&lt;p&gt;To reduce potential errors and typos, it’s best to define the environment
variables that we need using a struct that holds these variables as fields.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll name our struct &lt;code&gt;FizzEnv&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; $WORKSPACE&#x2F;fizz-env&#x2F;pkg&#x2F;env&#x2F;fizz.go
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;envCrypto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PortSvcCrypto    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;JwtKey           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RandomByteLength &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BcryptHashRounds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;AesPassphrase    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;FizzEnv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Crypto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;envCrypto
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, for example, if &lt;code&gt;env&lt;&#x2F;code&gt; is a &lt;code&gt;FizzEnv&lt;&#x2F;code&gt;, then &lt;code&gt;env.Crypto.JwtKey&lt;&#x2F;code&gt; will hold the
value of &lt;code&gt;$FIZZ_JWT_KEY&lt;&#x2F;code&gt; environment variable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-factory-function&quot;&gt;The Factory Function&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s also create a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Factory_(object-oriented_programming)&quot;&gt;&lt;strong&gt;factory function&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
to create an instance of &lt;code&gt;FizzEnv&lt;&#x2F;code&gt; and populate the related field values from
the system’s environment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; $WORKSPACE&#x2F;fizz-env&#x2F;pkg&#x2F;env&#x2F;fizz.go
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;FizzEnv &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FizzEnv&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Crypto&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;envCrypto&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PortSvcCrypto&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Getenv&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;FIZZ_PORT_SVC_CRYPTO&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;JwtKey&lt;&#x2F;span&gt;&lt;span&gt;:           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Getenv&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;FIZZ_JWT_KEY&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RandomByteLength&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Getenv&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;FIZZ_RANDOM_BYTE_LENGTH&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BcryptHashRounds&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Getenv&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;FIZZ_BCRYPT_HASH_ROUNDS&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;AesPassphrase&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Getenv&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;FIZZ_AES_PASSPHRASE&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Environment&lt;&#x2F;span&gt;&lt;span&gt;:      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Getenv&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;FIZZ_ENV&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;res
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;sanitizing-the-environment-variables&quot;&gt;Sanitizing the Environment Variables&lt;&#x2F;h2&gt;
&lt;p&gt;Finally, let’s create a &lt;a href=&quot;https:&#x2F;&#x2F;tour.golang.org&#x2F;methods&#x2F;1&quot;&gt;receiver function&lt;&#x2F;a&gt; that traverses and makes
sure that all of the environment variables that we need have been set:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; $WORKSPACE&#x2F;fizz-env&#x2F;pkg&#x2F;env&#x2F;fizz.go
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;FizzEnv&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;SanitizeCrypto&lt;&#x2F;span&gt;&lt;span&gt;()  {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reflect&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ValueOf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Crypto&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NumField&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Field&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;The environment variable that maps to &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39; &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;is not defined.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                ),
&lt;&#x2F;span&gt;&lt;span&gt;            )
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since there could be any number of fields in our struct, we had to
use &lt;a href=&quot;https:&#x2F;&#x2F;blog.golang.org&#x2F;laws-of-reflection&quot;&gt;reflection&lt;&#x2F;a&gt; to iterate across the struct fields to keep
our code maintainable by following the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Open%E2%80%93closed_principle&quot;&gt;open-closed principle&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And that’s pretty much it.&lt;&#x2F;p&gt;
&lt;p&gt;Whenever any of the required environment variables are not defined,
calling &lt;code&gt;env.SanitizeCrypto()&lt;&#x2F;code&gt; on a &lt;code&gt;FizzEnv&lt;&#x2F;code&gt; instance &lt;code&gt;env&lt;&#x2F;code&gt; will cause the
application to crash real loud real fast, which you would prefer rather than the
app running silently despite the necessary environment information that it needs
being missing.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Aside&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Failing early, and failing loudly is also known as
the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fail-fast&quot;&gt;fail-fast principle&lt;&#x2F;a&gt; in software engineering. The
&lt;strong&gt;fail-fast principle&lt;&#x2F;strong&gt; means that you should stop
the current operation as soon as any unexpected error occurs.&lt;&#x2F;p&gt;
&lt;p&gt;Surprisingly, this approach results in a &lt;strong&gt;more stable&lt;&#x2F;strong&gt; solution in the long
run. Why so? Because when you follow this principle, you &lt;strong&gt;tighten the feedback
loop&lt;&#x2F;strong&gt;: Instead of suppressing errors and sweeping things under the rug, you
quickly reveal the defects and fix the failures as early as possible.&lt;&#x2F;p&gt;
&lt;p&gt;In the end, you’ll benefit from this approach greatly.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;our-solution-in-action&quot;&gt;Our Solution in Action&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s use this in a microservice to see our solution in action:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Switch to our workspace:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;$WORKSPACE
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# `fizz-crypto` is an empty repository:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git clone git@github.com:zerotohero-dev&#x2F;fizz-crypto.git
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# We&amp;#39;ll create our files in here:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; fizz-crypto
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Initialize our module:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;go mod init github.com&#x2F;zerotohero-dev&#x2F;fizz-crypto
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will result in the following &lt;code&gt;go.mod&lt;&#x2F;code&gt; file that defines our module:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;module github.com&#x2F;zerotohero-dev&#x2F;fizz-env
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;go 1.16
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, let’s &lt;code&gt;go get&lt;&#x2F;code&gt; our dependency:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;go get github.com&#x2F;zerotohero-dev&#x2F;fizz-env
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we can use our new &lt;code&gt;fizz-env&#x2F;pkg&#x2F;env&lt;&#x2F;code&gt; as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; $WORKSPACE&#x2F;fizz-crypto&#x2F;main.go 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;github.com&#x2F;zerotohero-dev&#x2F;fizz-env&#x2F;pkg&#x2F;env&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Populate an `env.FizzEnv` collection buy parsing the system
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; environment variables:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Make sure that all of the environment variables that 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F;`fizz-crypto` needs have been defined; panic otherwise.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SanitizeCrypto&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Print the value of an environment variable.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;key&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Crypto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;JwtKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since we haven’t defined any environment variables yet, running the above code
on my system results in the following &lt;strong&gt;panic&lt;&#x2F;strong&gt; as expected:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;panic: The environment variable that corresponds to &amp;#39;PortSvcCrypto&amp;#39; 
&lt;&#x2F;span&gt;&lt;span&gt;is not defined.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;goroutine 1 [running]:
&lt;&#x2F;span&gt;&lt;span&gt;github.com&#x2F;zerotohero-dev&#x2F;fizz-env&#x2F;pkg&#x2F;env.FizzEnv.
&lt;&#x2F;span&gt;&lt;span&gt;SanitizeCrypto(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;Users&#x2F;volkan&#x2F;go&#x2F;pkg&#x2F;mod&#x2F;github.com&#x2F;zerotohero-dev&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;fizz-env@v0.1.0&#x2F;pkg&#x2F;env&#x2F;fizz.go:40 +0x30f
&lt;&#x2F;span&gt;&lt;span&gt;main.main()
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;Users&#x2F;volkan&#x2F;Desktop&#x2F;PROJECTS&#x2F;fizz-crypto&#x2F;main.go:22 +0x78
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this article, we’ve seen an approach to ensure that all of the environment
variables that a service needs have been defined before the service starts.&lt;&#x2F;p&gt;
&lt;p&gt;We will use this &lt;code&gt;fizz-env&lt;&#x2F;code&gt; module in all of the &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; microservices
that we’ll be creating.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll also share any improvement to this &lt;code&gt;fizz-env&lt;&#x2F;code&gt; module that’s worth
mentioning as we develop it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;p&gt;Below, you’ll find the &lt;strong&gt;zip archives&lt;&#x2F;strong&gt; of the projects and other related
artifacts that we’ve covered in this article.&lt;&#x2F;p&gt;
&lt;p&gt;Enjoy… And may the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;heres-a-technique-to-ensure-environment-variables-are-set-before-starting-a-microservice&#x2F;0174edce-3b6b-419e-83c2-f4995b317935&#x2F;fizz-crypto.zip&quot;&gt;&lt;code&gt;fizz-crypto&lt;&#x2F;code&gt; (&lt;strong&gt;3KB&lt;&#x2F;strong&gt; zip archive)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;heres-a-technique-to-ensure-environment-variables-are-set-before-starting-a-microservice&#x2F;0174edce-3b6b-419e-83c2-f4995b317935&#x2F;fizz-env.zip&quot;&gt;&lt;code&gt;fizz-env&lt;&#x2F;code&gt; (&lt;strong&gt;2KB&lt;&#x2F;strong&gt; zip archive)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;base64-decoding-a-string-in-go&#x2F;&quot;&gt;Base64 Decoding a String in Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;destructure&#x2F;&quot;&gt;Use Destructuring to Remove Attributes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;getting-the-body-of-an-http-request-with-go&#x2F;&quot;&gt;Getting the Body of an HTTP Request With Go&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;lets-create-a-syslog-logger&#x2F;&quot;&gt;Let’s Create a Syslog Logger&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;make-your-code-leaner&#x2F;&quot;&gt;Make Your Code Leaner By Extracting Method&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;mastodon-101&#x2F;&quot;&gt;Who Else Wants to Have Their Own Mastodon Server?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ How to Ensure Environment Variables Are Set&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;scaling-your-node-api-like-a-boss&#x2F;&quot;&gt;Scaling Your Node.js API Like a Boss&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;talkspiffe-stream-setup&#x2F;&quot;&gt;The Live Stream Dream&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;zshell-startup-files&#x2F;&quot;&gt;.zprofile, .zshrc, .zenv, OMG! What Do I Put Where?!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;tips&#x2F;redirect-index-page&#x2F;&quot;&gt;Redirecting a Static Web Page&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Here Are the Repositories, Tools, and Services We&#x27;ll Use for FizzBuzz Pro</title>
        <published>2021-06-05T00:00:00+00:00</published>
        <updated>2021-06-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/fizzbuzz-pro-repos/"/>
        <id>https://zerotohero.dev/zero-to-prod/fizzbuzz-pro-repos/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/fizzbuzz-pro-repos/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;shopping.png&quot; alt=&quot;Go shopping for microservices.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Go shopping for microservices.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;In this series, we will create &lt;strong&gt;use
case&lt;&#x2F;strong&gt; articles about &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;. Those articles will outline the entire
architecture design, proof of concepts, and development of
&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;&lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;While we are working hard creating stuff, you’ll feel right in the kitchen
👩‍🍳.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is one of those articles where I’m sharing the repository structure and
what kinds of microservices &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; will have.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;repositories&quot;&gt;Repositories&lt;&#x2F;h2&gt;
&lt;p&gt;Here is how I’ve organized the current repositories in &lt;a href=&quot;https:&#x2F;&#x2F;www.git-tower.com&#x2F;&quot;&gt;Tower&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;06&amp;#x2F;Screen-Shot-2021-06-04-at-8.44.36-PM.png&quot; alt=&quot;Current Zero to Hero and FizzBuzz Pro repositories.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Current Zero to Hero and FizzBuzz Pro repositories.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Most of the repositories are &lt;em&gt;empty&lt;&#x2F;em&gt; right now; however, the picture above &lt;em&gt;at
least&lt;&#x2F;em&gt; gives some structure about which services we will initially design.&lt;&#x2F;p&gt;
&lt;p&gt;Let me briefly go over those repositories:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zero-to-hero-design&quot;&gt;&lt;strong&gt;Zero to Hero Design&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;z2h-ghost-tpl&lt;&#x2F;code&gt;: The theme of this very page that you are looking at. &lt;strong&gt;Zero
to Hero&lt;&#x2F;strong&gt; is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TryGhost&#x2F;Ghost&quot;&gt;&lt;strong&gt;Ghost&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;-based learning
management system. This repository contains a customized fork of &lt;strong&gt;Casper&lt;&#x2F;strong&gt;,
the default &lt;strong&gt;Ghost&lt;&#x2F;strong&gt; theme.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fizzbuzz-pro-knowledge-base&quot;&gt;&lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; Knowledge Base&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fizz-buzz&lt;&#x2F;code&gt;: This is where the meat of &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; will be. It will have
study notes, questions, answers, strategy recommendations… anything you need
to become a better competitive programmer to nail that coding interview.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fizzbuzz-pro-devops-and-automation&quot;&gt;&lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; DevOps and Automation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fizz-job-kb&lt;&#x2F;code&gt;: This is
a &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;job&#x2F;&quot;&gt;Kubernetes Job&lt;&#x2F;a&gt;
that fetches the content from the above &lt;code&gt;fizz-buzz&lt;&#x2F;code&gt; repository, does some
preprocessing and conversion on it and uploads it to
an &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;s3&#x2F;&quot;&gt;S3 Bucket&lt;&#x2F;a&gt; for some of the
microservices to pre-populate their local caches
using &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;init-containers&#x2F;&quot;&gt;Init Containers&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fizz-infra&lt;&#x2F;code&gt;: Infrastructure-related configurations, descriptors, manifests,
scripts. This repository will primarily be used by the
[&lt;strong&gt;CI&#x2F;CD&lt;&#x2F;strong&gt;][ci-dd] pipeline.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fizzbuzz-pro-libraries&quot;&gt;&lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; Libraries&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fizz-entity&lt;&#x2F;code&gt;: Data models and entities that all of the microservices share in
common.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fizz-logging&lt;&#x2F;code&gt;: Common logging utilities that all of the microservices share.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fizz-validation&lt;&#x2F;code&gt;: Common validation and sanitization methods that all the
microservices share.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fizz-middleware&lt;&#x2F;code&gt;: HTTP security and tracing middleware that all the
microservices use in common.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fizz-app&lt;&#x2F;code&gt;: Contains microservice application related middlewares and
utilities like &lt;code&gt;Monitor()&lt;&#x2F;code&gt;, &lt;code&gt;ListenAndServe()&lt;&#x2F;code&gt; which decorate and augment
existing functionality.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;fizzbuzz-pro-microservices&quot;&gt;&lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; Microservices&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fizz-idm&lt;&#x2F;code&gt;: Identity management, users, password reminders, account
activation, and the like.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fizz-store&lt;&#x2F;code&gt;: Payment gateway integration.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fizz-crypto&lt;&#x2F;code&gt;: Anything cryptography-related: encryption, decryption, token
generation, token validation, etc.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fizz-mailer&lt;&#x2F;code&gt;: Sends emails from &lt;code&gt;hermes@fizzbuzz.pro&lt;&#x2F;code&gt; to places.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fizz-questions&lt;&#x2F;code&gt;: A microservice to serve questions and answers.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fizz-notes&lt;&#x2F;code&gt;: A microservice that serves additional notes and articles.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;external-services-to-use&quot;&gt;External Services to Use&lt;&#x2F;h2&gt;
&lt;p&gt;We’ll be leveraging third-party “&lt;em&gt;as a service&lt;&#x2F;em&gt;” solutions as much as possible
instead of reinventing the wheel so that we can focus on… well… things
like… actually providing some value.&lt;&#x2F;p&gt;
&lt;p&gt;I haven’t decided on all of them yet, so things may change down the line. And
here are the initial list of services that I think we’ll leverage.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mongodb.com&#x2F;cloud&#x2F;atlas&quot;&gt;&lt;strong&gt;MongoDB Atlas&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
for both the database and also the caching layer.&lt;br &#x2F;&gt;
— I doubt it, but if &lt;strong&gt;caching&lt;&#x2F;strong&gt; becomes a more significant issue, we might
launch an &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;elasticache&#x2F;&quot;&gt;&lt;strong&gt;Amazon ElastiCache&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; cluster
too. Still, there’s no need to use it unless there’s a significant lag that a
caching layer can solve.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mailgun.com&#x2F;&quot;&gt;&lt;strong&gt;Mailgun&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; for sending system
emails and newsletters.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;ecr&#x2F;&quot;&gt;&lt;strong&gt;Amazon Elastic Container Registry&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to
push microservice container images.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;eks&quot;&gt;&lt;strong&gt;Amazon EKS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; for a managed
Kubernetes cluster. We don’t strictly need Kubernetes, but it’ll be fun to
deploy the infrastructure onto a &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;
&lt;em&gt;Kubernetes&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; cluster.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;s3&#x2F;&quot;&gt;&lt;strong&gt;Amazon S3&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, along with
&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;cloudfront&#x2F;&quot;&gt;&lt;strong&gt;Amazon CloudFront&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
to serve the static web apps.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;cloudwatch&#x2F;&quot;&gt;&lt;strong&gt;CloudWatch&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and
&lt;strong&gt;Amazon Container Insights&lt;&#x2F;strong&gt; for monitoring.&lt;br &#x2F;&gt;
— Later on, we might consider a solution like
&lt;a href=&quot;https:&#x2F;&#x2F;www.datadoghq.com&#x2F;&quot;&gt;&lt;strong&gt;DataDog&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; for better visibility and
observability. Still, we’ll initially start with what the &lt;strong&gt;AWS&lt;&#x2F;strong&gt; ecosystem
already provides us.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.papertrail.com&#x2F;&quot;&gt;&lt;strong&gt;Papertrail&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; for log
aggregation.&lt;br &#x2F;&gt;
— Related to that, &lt;a href=&quot;https:&#x2F;&#x2F;www.honeybadger.io&#x2F;&quot;&gt;&lt;strong&gt;Honeybadger&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; for
catching and reporting errors.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-an-oidc-authenticator&#x2F;&quot;&gt;Part 5: Implementing an OIDC Authenticator&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ FizzBuzz Pro Repositories&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This is a long journey, and there’s &lt;strong&gt;a lot&lt;&#x2F;strong&gt; to do. My first focus is to
develop a “&lt;em&gt;minimally delightful&lt;&#x2F;em&gt;” user experience as fast as possible.&lt;&#x2F;p&gt;
&lt;p&gt;I’ll share the entire journey with y’all with all of the design, architecture,
and business decisions with complete transparency: There will be lots of use
case articles and videos to cover how &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; is evolving.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Aside&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Before I forget, the source code will be private; but I’ll share enough of it
to give you ideas and pointers to use as a starting point if you want to create
a similar service.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That being said, that’s all there is to it for today.&lt;&#x2F;p&gt;
&lt;p&gt;Next, I think I’ll start creating some of these services locally. I’ll then
ensure that they run on a local &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; cluster before deploying them to
a staging &lt;strong&gt;EKS&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;&lt;em&gt;Kubernetes&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;
cluster.&lt;&#x2F;p&gt;
&lt;p&gt;And until then… may the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Embracing Daily Reflection</title>
        <published>2021-06-04T00:00:00+00:00</published>
        <updated>2021-06-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/probing-questions/"/>
        <id>https://zerotohero.dev/top-of-mind/probing-questions/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/probing-questions/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;Volkan_Ozcelik_By_asking_myself_probing_questions_I_delve_deepe_e8494425-f36a-4e0d-b320-64efce011b35.png&quot; alt=&quot;Embracing Daily Reflection&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When everything changes, and there’s little time for practically anything, it’s
easy to get caught up in the whirlwind of tasks and responsibilities without
reflecting on our daily experiences.&lt;&#x2F;p&gt;
&lt;p&gt;For the last year or so, I’ve been actively journaling. And I find
self-reflection in my journals a powerful tool for personal growth.&lt;&#x2F;p&gt;
&lt;p&gt;By asking myself probing questions, I delve deeper into my thoughts, emotions,
and actions and, more often than not, gain valuable insights that help me later.&lt;&#x2F;p&gt;
&lt;p&gt;I want to explore some of these questions in this &lt;strong&gt;Top of Mind&lt;&#x2F;strong&gt; with you.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-the-theme-of-the-day&quot;&gt;What Is the Theme of the Day?&lt;&#x2F;h2&gt;
&lt;p&gt;Identifying an overarching theme for the day will help you focus on it and let
you know what to do. Setting your theme establishes a guiding principle that can
shape your mindset and activities throughout the day.&lt;&#x2F;p&gt;
&lt;p&gt;Recognizing your theme helps you align your goals with your actions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-can-i-drop-today&quot;&gt;What Can I Drop Today?&lt;&#x2F;h2&gt;
&lt;p&gt;I believe in “ &lt;strong&gt;&lt;em&gt;Do It Tomorrow&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; “: No, “DIT” is not being lazy. You defer
things to tomorrow to do more important things today. Knowing what &lt;strong&gt;not&lt;&#x2F;strong&gt; to do
is as important ( &lt;em&gt;if not more&lt;&#x2F;em&gt; ) than knowing what to do.&lt;&#x2F;p&gt;
&lt;p&gt;Evaluate your to-do list and allow yourself to drop any non-essential activities
or obligations. Free up time and energy. Create space for more meaningful and
essential tasks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-concrete-actions-will-i-take-toward-my-goal-today&quot;&gt;What concrete actions will I take toward my goal today?&lt;&#x2F;h2&gt;
&lt;p&gt;Progress towards your goals is achieved through &lt;strong&gt;consistent&lt;&#x2F;strong&gt; action. Identify
specific actions today to move closer to your desired outcomes. Break down your
goals into manageable steps and commit to at least one concrete action daily.&lt;&#x2F;p&gt;
&lt;p&gt;Knowing what to do cultivates a sense of purpose and momentum.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-was-the-highly-visible-artifact-of-my-work&quot;&gt;What was the highly-visible artifact of my work?&lt;&#x2F;h2&gt;
&lt;p&gt;Acknowledging the visible artifacts of your efforts reinforces a sense of
accomplishment and motivates you to continue making meaningful contributions.&lt;&#x2F;p&gt;
&lt;p&gt;Realizing the impact you’ve made motivates you further. Also, when you create a
log of your achievements, it will be helpful when you want to look back in time
and admire your list of accomplishments.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-was-the-highly-visible-relationship-trail&quot;&gt;What was the highly-visible relationship trail?&lt;&#x2F;h2&gt;
&lt;p&gt;Our connections and relationships are vital in our personal and professional
lives. Who you know can be much more important than what you know, especially
when your impact grows in the organization.&lt;&#x2F;p&gt;
&lt;p&gt;So, consider your interactions throughout the day and reflect on your impact on
others. Did you provide support, guidance, or inspiration?&lt;&#x2F;p&gt;
&lt;p&gt;Assessing your relationship trail helps you nurture meaningful connections and
fosters a positive social environment.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-are-three-things-i-am-grateful-for-today&quot;&gt;What are three things I am grateful for today?&lt;&#x2F;h2&gt;
&lt;p&gt;These gratitude exercises are a bit corny; however, research after research
demonstrates how important it is to express your gratitude and blessing in your
lives.&lt;&#x2F;p&gt;
&lt;p&gt;So I decided to bite the bullet and answer this question as part of my daily
routine, and &lt;strong&gt;it helps&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can take a moment to identify three things you are grateful for each day.
They can be small moments of joy, supportive relationships, personal
achievements, or simply the beauty of nature. Practicing gratitude fosters
contentment and encourages a perspective of abundance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-made-me-feel-happy-proud-or-fulfilled-yesterday&quot;&gt;What made me feel happy, proud, or fulfilled yesterday?&lt;&#x2F;h2&gt;
&lt;p&gt;This question is also related to the above gratitude question. Again, reflecting
on your positive emotions from the previous day reinforces a sense of
fulfillment and self-worth.&lt;&#x2F;p&gt;
&lt;p&gt;Consider the moments that brought you joy, pride, or a deep sense of
fulfillment. By acknowledging these experiences, you can identify patterns or
activities that contribute to your overall well-being and incorporate more of
them into your life.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-did-i-take-care-of-my-physical-and-emotional-well-being-yesterday&quot;&gt;How did I take care of my physical and emotional well-being yesterday?&lt;&#x2F;h2&gt;
&lt;p&gt;Being a software developer means I spend most of my day sitting comfortably on a
chair, with little to no physical activity. Yet, caring for your physical and
emotional well-being is crucial for a balanced and healthy life.&lt;&#x2F;p&gt;
&lt;p&gt;So this question forces me to asses what I did for my physical and mental health
and then forces me to go out grudgingly, walk for a couple of hours, breathe
fresh air, and enjoy nature without any reservations or commitments.&lt;&#x2F;p&gt;
&lt;p&gt;As its name implies, self-care can only be done by your &lt;strong&gt;self&lt;&#x2F;strong&gt;. Recognize
your need, and take action toward it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-are-my-goals-or-intentions-for-tomorrow&quot;&gt;What are my goals or intentions for tomorrow?&lt;&#x2F;h2&gt;
&lt;p&gt;Looking ahead, set clear goals or intentions for the following day. Consider
what you want to accomplish, how you want to feel, and the actions you need to
take to align with your aspirations.&lt;&#x2F;p&gt;
&lt;p&gt;By visualizing my goals and intentions, I orient myself toward them. That helps
increase the likelihood of achieving them or moving in the right direction.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-can-i-better-manage-my-time-energy-and-resources-tomorrow&quot;&gt;How can I better manage my time, energy, and resources tomorrow?&lt;&#x2F;h2&gt;
&lt;p&gt;Reflecting on how effectively you managed your time, energy, and resources the
previous day is helpful. This reflection enables me to refine and redefine my
approach and correct course when needed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-was-the-most-memorable-or-impactful-moment-of-yesterday&quot;&gt;What was the most memorable or impactful moment of yesterday?&lt;&#x2F;h2&gt;
&lt;p&gt;Human memory is not that tangible. So the earlier I reflect upon something that
has happened, the better. Chances are that I will not remember what was the
memorable thing a week ago. But since yesterday is so close, I try to capture my
impact before it fades away from my memory.&lt;&#x2F;p&gt;
&lt;p&gt;This monologue about what you have achieved and the impact you’ve made can be a
heartwarming conversation. Maybe a challenging situation taught you a valuable
lesson, or you have done an unexpected act of kindness. Reflecting on these
depends on your appreciation of those experiences. And that allows you to carry
your learnings forward.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Incorporating probing questions into your daily journaling practice can lead to
profound personal growth. But it doesn’t have to be a journal per se; if you are
not a writer type, you can sit down, eliminate all distractions and just “think”
about these questions. I’m sure any form of self-reflection will bring you
self-discovery and fulfillment.&lt;&#x2F;p&gt;
&lt;p&gt;And that way, today’s “ &lt;strong&gt;&lt;em&gt;top of mind&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; .“&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Embracing Daily Reflection&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Have You Fizzed that Buzz?</title>
        <published>2021-06-03T00:00:00+00:00</published>
        <updated>2021-06-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0004/"/>
        <id>https://zerotohero.dev/highlights/issue-0004/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0004/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;data-structure.png)&quot; alt=&quot;Have you fizzed that buzz.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Have you fizzed that buzz.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 2024-05-21&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I have archived &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; project for a while. I still have plans
to repurpose it, but it’s not a priority right now. I’ll keep you posted
when I start working on it again, or when I reuse some of its content
and components in other projects.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Welcome to the fourth issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve done &lt;strong&gt;a lot&lt;&#x2F;strong&gt; of stuff this week, some of which you can find as new
articles on &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;&quot;&gt;Zero to Hero&lt;&#x2F;a&gt;, and some are still
brewing and cooking in &lt;strong&gt;Zero to Hero Kitchens&lt;&#x2F;strong&gt; that will reach you in time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hello-from-the-zero-to-hero-kitchens-woman-fried-egg&quot;&gt;Hello from the &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Kitchens 👩‍🍳&lt;&#x2F;h2&gt;
&lt;p&gt;Firstly, I’ve started creating a lot of video content; here’s a quick preview of
what’s in the immediate production pipeline. The range varies from setting up a
development environment to exporting DynamoDB tables… &lt;strong&gt;a lot&lt;&#x2F;strong&gt; of quality
material is coming your way.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;06&amp;#x2F;Screen-Shot-2021-06-03-at-7.30.56-PM.png&quot; alt=&quot;List of video content in the pipeline.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;List of video content in the pipeline.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The items that have green indicators next to them are the videos that have
already been published. The blue row is the one that I’m currently working on.&lt;&#x2F;p&gt;
&lt;p&gt;There’s a lot coming down the pipeline—for example, in the &lt;strong&gt;Setting Up a
Development Environment&lt;&#x2F;strong&gt; video series, I start with brand new default Mac OS
system. There, I step-by-step install and configure my &lt;strong&gt;opinionated&lt;&#x2F;strong&gt; sets of
development tooling, environment, and applications.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fizzbuzz-pro&quot;&gt;FizzBuzz Pro&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; is a sister project cooking in the *
&lt;em&gt;Zero to Hero&lt;&#x2F;em&gt;* kitchens, and I think it deserves its own section.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; will be an app to provide you with algorithmic puzzles and
&lt;strong&gt;tried and tested&lt;&#x2F;strong&gt; solutions to those puzzles, along with outlining
&lt;strong&gt;strategies&lt;&#x2F;strong&gt; that you can reuse, and highlighting common &lt;strong&gt;patterns&lt;&#x2F;strong&gt; that
you can exploit.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It’s no secret that companies are asking &lt;strong&gt;competitive programming questions&lt;&#x2F;strong&gt;
in technical interviews. That’s the current &lt;strong&gt;norm&lt;&#x2F;strong&gt;, rather than the exception.&lt;&#x2F;p&gt;
&lt;p&gt;While I still don’t understand the efficacy of asking algorithmic puzzles in
choosing the best candidate (&lt;em&gt;here’s a [short 3min video][puzzles-mins]
and a &lt;a href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;556452479&#x2F;94cdf5a8f1&quot;&gt;longer 30min “uncut” version of it&lt;&#x2F;a&gt; that I’m ranting about
the subject matter, in case you are interested&lt;&#x2F;em&gt;), apparently the rest of the
industry does not think like me. From startups to big corporations, everyone is
drinking the same kool-aid.&lt;&#x2F;p&gt;
&lt;p&gt;Even worse, these algorithmic puzzles do not measure your aptitude as a software
engineer, they do not measure your technical acumen. They are &lt;strong&gt;robotic&lt;&#x2F;strong&gt;
—inhuman, even. They are merely benchmarks about how fast you can come up with
a solution almost mechanically.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you cannot change the game rules, then you’ll have to play the game by the
rules. But, how?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Mastering competitive programming is &lt;strong&gt;not&lt;&#x2F;strong&gt; easy. Even if you have learned *
&lt;em&gt;data structures&lt;&#x2F;em&gt;* and &lt;strong&gt;algorithms&lt;&#x2F;strong&gt; fundamentals in your college years, you’ll
soon realize that &lt;strong&gt;competitive programming&lt;&#x2F;strong&gt; requires a &lt;strong&gt;much&lt;&#x2F;strong&gt; different
mindset; a &lt;strong&gt;unique&lt;&#x2F;strong&gt; way of thinking and approaching problems.&lt;&#x2F;p&gt;
&lt;p&gt;But, there’s a bright side to it: Although it’s &lt;strong&gt;flocking hard work&lt;&#x2F;strong&gt; to study
these questions—to the point that you’d rather want to have a root canal
instead of balancing yet another binary tree, every single day—you can still
be pro at competitive programming.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; will help you to get better with the
game—Well, not right now, but when it’s launched—we are working hard on it.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt; is a greenfield project, and as I continue developing and
productizing it, I will be sharing the entire process with y’all.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I will keep you posted about &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;’s entire development process.&lt;&#x2F;p&gt;
&lt;p&gt;Right now, there’s only an ascii-art placeholder on the website, but things will
change real fast real soon.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2021&#x2F;06&#x2F;Screen-Shot-2021-06-03-at-8.13.38-AM.png&quot; alt=&quot;FizzBuzz Pro as of Early June 2021&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The thing is, you don’t have to be an algorithm wizard; you don’t have to be a
data structures genius to nail a technical interview. You just need to *
&lt;em&gt;practice&lt;&#x2F;em&gt;* and &lt;strong&gt;see&lt;&#x2F;strong&gt; the &lt;strong&gt;patterns&lt;&#x2F;strong&gt; and &lt;strong&gt;similarities&lt;&#x2F;strong&gt; between various
kinds of questions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2021&#x2F;06&#x2F;practice.jpg&quot; alt=&quot;Practice (~via https:&#x2F;&#x2F;tapas.io&#x2F;episode&#x2F;923459)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;, I can, and I will help you with
seeing the common patterns and similarities between various questions. I’ll help
you realize ways and techniques to approach them; and I’ll provide you with
enough tooling to nail any algorithmic problem that’ll be thrown at you.&lt;&#x2F;p&gt;
&lt;p&gt;Yes, “&lt;strong&gt;patterns&lt;&#x2F;strong&gt;”… that’s something that I can help.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Practice&lt;&#x2F;strong&gt;… however, is something to do on your own. You’ll have to allocate
&lt;strong&gt;focused&lt;&#x2F;strong&gt; and &lt;strong&gt;uninterrupted&lt;&#x2F;strong&gt; block of two hours &lt;strong&gt;every day&lt;&#x2F;strong&gt; (&lt;em&gt;weekends
included&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The only way to flex your competitive programming brain muscles is through *
&lt;em&gt;practice&lt;&#x2F;em&gt;*. I’m sorry, and &lt;strong&gt;there are no shortcuts&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;random-though-of-the-week&quot;&gt;Random Though of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;Have you ever doubted yourself? Like, have you ever had that nagging thought
that you may fail this time, or you are undeserving your achievements?&lt;&#x2F;p&gt;
&lt;p&gt;Well, you are not alone. And you can &lt;strong&gt;constructively&lt;&#x2F;strong&gt; channel those thoughts
and feelings to be more productive.&lt;&#x2F;p&gt;
&lt;p&gt;For example, instead of pushing back and shying away from experiences that make
you uncomfortable, embrace them. See them as opportunities to learn. Who cares
if you fail; you learned a lot, and you now know where to grow: There’s always
room for growth.&lt;&#x2F;p&gt;
&lt;p&gt;This might sound harsh, and it’s okay not to be the most intelligent person in
the room. Have the courage to ask about what you don’t know. That
will—ironically—make you a more confident person. And your confidence will
transform you into a person that everyone goes for advice.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, cherish feedback. Yes, it’s sometimes hard to digest feedback from
people that you are doing something wrong or not showing the desired
behavior—who are them after all?—well, they are the people who care about
you; they want to see you improve, and they wholeheartedly believe that you can.&lt;&#x2F;p&gt;
&lt;p&gt;Never assume malice. Cherish the feedback, thank the feedback giver, and &lt;strong&gt;take
your time&lt;&#x2F;strong&gt; to reflect on and plan out how you can be an even better version of
yourself based on all that feedback.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recently-on-zero-to-hero&quot;&gt;Recently on &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Other than that, most of the work we did was under the hood.&lt;&#x2F;p&gt;
&lt;p&gt;More content is on its way and it’ll be ready for your reading and viewing
pleasure in the upcoming weeks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s do a &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; roundup this time:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cast.ai&#x2F;blog&#x2F;aws-eks-vs-ecs-vs-fargate-where-to-manage-your-kubernetes&#x2F;&quot;&gt;Žilvinas Urbonas writes about AWS EKS vs. ECS vs. Fargate: Where to manage your Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;the-phi&#x2F;understanding-the-kubeconfig-3ef43e8716d&quot;&gt;Samarth Deyagond on understanding the .kubeconfig&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;karmab&#x2F;kcli&quot;&gt;&lt;code&gt;kcli&lt;&#x2F;code&gt; is a m anagement tool for libvirt&#x2F;aws&#x2F;gcp&#x2F;kubevirt&#x2F;openstack&#x2F;ovirt&#x2F;vsphere&#x2F;packet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Know Thyself</title>
        <published>2021-05-29T00:00:00+00:00</published>
        <updated>2021-05-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0003/"/>
        <id>https://zerotohero.dev/highlights/issue-0003/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0003/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;Volkan_zelik_introspection_fff39537-a2d6-468a-95c1-b1c1994c7c59.png&quot; alt=&quot;Know thyself.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Know thyself.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;lots-of-new-things-cooking-in-the-kitchen-woman-fried-egg&quot;&gt;Lots of New Things Cooking in the Kitchen 👩‍🍳,&lt;&#x2F;h2&gt;
&lt;p&gt;Welcome to the third issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;This week has been a total rush with many articles and content and some
functional and visual updates.&lt;&#x2F;p&gt;
&lt;p&gt;Ah, I’ve &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;&quot;&gt;updated the about page too&lt;&#x2F;a&gt;. The
page describes what &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; is and where it is heading towards. You can
also
find &lt;a href=&quot;https:&#x2F;&#x2F;vimeo.com&#x2F;v0lkan&#x2F;zero-to-hero&quot;&gt;a video of me talking about it&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There is a new &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;&quot;&gt;&lt;strong&gt;Tutorials&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; section where I’ll write and talk
about actual production projects that real people use. It will &lt;strong&gt;not&lt;&#x2F;strong&gt; be a
sandbox “&lt;em&gt;restaurant rating React app&lt;&#x2F;em&gt;” or a yet “’nother” &lt;em&gt;to-do list&lt;&#x2F;em&gt;“ clone.
I’ll develop and talk about &lt;strong&gt;real&lt;&#x2F;strong&gt;, **living **, &lt;strong&gt;evolving&lt;&#x2F;strong&gt; &lt;strong&gt;production
apps&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;&quot;&gt;in the &lt;strong&gt;use cases&lt;&#x2F;strong&gt; section&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;These &lt;strong&gt;use cases&lt;&#x2F;strong&gt; will be as real as it gets. We’ll together learn how to
design, deploy, develop, secure, scale up, and maintain the application for
real-life use. It’ll be so much fun! I’m really excited about this.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Additionally, I will take my notes to create separate articles and videos
about any tool, technology, and foundational knowledge that I use in those
&lt;strong&gt;use cases&lt;&#x2F;strong&gt;. I will provide enough learning material to deep dive for the
interested.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;Along with the rapid development of technology, it’s getting harder and harder
to do everything by yourself. You inevitably find yourself having to work with
each other to establish a shared vision.&lt;&#x2F;p&gt;
&lt;p&gt;By that token, even when you are an individual contributor, you’ll find yourself
having to &lt;strong&gt;convince&lt;&#x2F;strong&gt;, &lt;strong&gt;persuade&lt;&#x2F;strong&gt;, &lt;strong&gt;guide&lt;&#x2F;strong&gt;, and &lt;strong&gt;coach&lt;&#x2F;strong&gt; others.&lt;&#x2F;p&gt;
&lt;p&gt;That also means that regardless of tenure, expertise, or title, everyone has to
act as a leader in some way, shape, or form to succeed in today’s multi-faceted
work culture.&lt;&#x2F;p&gt;
&lt;p&gt;To be a good leader, you’d need to &lt;strong&gt;know how you lead&lt;&#x2F;strong&gt;; and to understand how
you lead, you’d need to &lt;strong&gt;self-reflect&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It might sound coming from the mouth of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pythia&quot;&gt;the oracle of
Delphi&lt;&#x2F;a&gt; (&lt;em&gt;and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Know_thyself&quot;&gt;it
actually is&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;) and a bit
wishy-washy, but knowing how you lead starts with &lt;strong&gt;knowing yourself&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So how do you know yourself? Well, that’s obviously personal, but there are
certain key areas that you can focus on and there are specific questions that
you might want to seek answers to.&lt;&#x2F;p&gt;
&lt;p&gt;You can group those areas under five main categories.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Self-awareness&lt;&#x2F;li&gt;
&lt;li&gt;Self-regulation&lt;&#x2F;li&gt;
&lt;li&gt;Self-motivation&lt;&#x2F;li&gt;
&lt;li&gt;Empathy&lt;&#x2F;li&gt;
&lt;li&gt;Influence&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Of course, there are &lt;strong&gt;many&lt;&#x2F;strong&gt; more, but focusing on these five and improving
your emotional maturity on these five tangents will help you the most.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s look at these topics with a larger lens.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-awareness&quot;&gt;Self-awareness&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Self-awareness&lt;&#x2F;strong&gt; is knowing your strengths, weaknesses, desires, and values.
It is also knowing how you are influenced by others and how you influence
others.&lt;&#x2F;p&gt;
&lt;p&gt;When you are self-aware, you are confident, you can realistically (&lt;em&gt;and often
brutally&lt;&#x2F;em&gt;) self-assess your behaviors. You have an insatiable thirst for
constructive criticism.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-regulation&quot;&gt;Self-regulation&lt;&#x2F;h3&gt;
&lt;p&gt;Related to &lt;em&gt;self-awareness&lt;&#x2F;em&gt;, &lt;strong&gt;self-regulation&lt;&#x2F;strong&gt; is controlling disruptive
impulsive and moods that may prevent you from actualizing your potential.&lt;&#x2F;p&gt;
&lt;p&gt;When you self-regulate, you observe and understand how you feel, but you don’t
let that feeling define your behavior. You maintain your &lt;strong&gt;integrity&lt;&#x2F;strong&gt; and *
&lt;em&gt;trustworthiness&lt;&#x2F;em&gt;* no matter how dire the circumstances are.&lt;&#x2F;p&gt;
&lt;p&gt;When you learn yourself, and by extension, learn how to &lt;strong&gt;regulate&lt;&#x2F;strong&gt; yourself,
you’ll be comfortable with ambiguity and change.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;self-motivation&quot;&gt;Self-motivation&lt;&#x2F;h3&gt;
&lt;p&gt;Self-motivation is how it sounds: It’s a passion for achievement for the sake of
achievement. You don’t do your best for money, fame, visibility, promotion, or
anything else. You do your best, and you are at your best because you simply
cannot think of any other way.&lt;&#x2F;p&gt;
&lt;p&gt;When you are self-motivated, you have an infinite passion and energy for
improvement. You’ll maintain your optimism in the face of failure.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;empathy&quot;&gt;Empathy&lt;&#x2F;h3&gt;
&lt;p&gt;You can write books about &lt;strong&gt;empathy&lt;&#x2F;strong&gt;, and it’s a skill that’s the toughest to
master. And like any skill, you can master it when you constantly observe,
modify, and change your behavioral patterns.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Empathy&lt;&#x2F;strong&gt; is, at its core, is understanding people’s emotional setups.&lt;&#x2F;p&gt;
&lt;p&gt;That will help you become a better leader who can understand and develop others.
You will become more &lt;strong&gt;perceptive&lt;&#x2F;strong&gt; to people’s identities and understand the
nuances in cross-cultural differences in how people act.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Empathy&lt;&#x2F;strong&gt; (&lt;em&gt;not charisma, not power, not anything else but empathy&lt;&#x2F;em&gt;) is the
force that attracts and retains people around you.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;influence&quot;&gt;Influence&lt;&#x2F;h3&gt;
&lt;p&gt;Again, you can write books about how to &lt;strong&gt;influence&lt;&#x2F;strong&gt; people, how to negotiate,
how to convince. Yet, at its very core, you can define &lt;strong&gt;influence&lt;&#x2F;strong&gt; as building
enough impact around you to move people towards a shared vision that you desire.&lt;&#x2F;p&gt;
&lt;p&gt;When you learn how you influence, you’ll be better and effective in &lt;strong&gt;leading
change&lt;&#x2F;strong&gt;. You’ll be more persuasive; you’ll be amazed at how extensive your
network has become. You’ll see that you are building and leading teams
naturally.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;simplenetes-io&#x2F;simplenetes&quot;&gt;&lt;strong&gt;Simplenetes&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is a simple
and opinionated alternative to Kubernetes, especially useful for small (&lt;em&gt;&amp;lt;20
nodes&lt;&#x2F;em&gt;) clusters. The project is still in beta, yet it looks promising.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;velero.io&#x2F;&quot;&gt;&lt;strong&gt;Velero&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is an open-source tool to safely back up and
restore, perform disaster recovery, and migrate Kubernetes cluster resources
and persistent volumes.&lt;&#x2F;li&gt;
&lt;li&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;draftkings-engineering&#x2F;making-strides-toward-serverless-eb959d75d029&quot;&gt;**Making Strides Toward Serverless
**&lt;&#x2F;a&gt;,
Matt is writing about the “&lt;em&gt;serverless&lt;&#x2F;em&gt;” deployment model, the &lt;em&gt;integration
points&lt;&#x2F;em&gt; to your &lt;strong&gt;serverless&lt;&#x2F;strong&gt; architecture, &lt;strong&gt;serverless&lt;&#x2F;strong&gt; functions, and
various patterns for serverless adoption.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 3: Know Thyself&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Only Thing That doesn&#x27;t Change is Change Itself</title>
        <published>2021-05-19T00:00:00+00:00</published>
        <updated>2021-05-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0002/"/>
        <id>https://zerotohero.dev/highlights/issue-0002/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0002/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1199&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;change.png&quot; alt=&quot;Find the balance in the change.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Find the balance in the change.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;hey-wave&quot;&gt;Hey 👋,&lt;&#x2F;h2&gt;
&lt;p&gt;Welcome to the second issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;For those who are
new, &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;about&#x2F;a-new-hope&#x2F;&quot;&gt;there has been a lot of flux recently&lt;&#x2F;a&gt;,
and things are slowly settling down. I’ve set a personal goal to create one of
these newsletters every week regardless of whether there’s new content on the
platform.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s begin with this week’s random thought: &lt;strong&gt;Change&lt;&#x2F;strong&gt;, and **Change Management
**, which is something that deeply resonates with me recently.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;When dealing with change, what are certain obstacles you may face, and more
importantly, how can you overcome them? Let’s see.&lt;&#x2F;p&gt;
&lt;p&gt;The first obstacle that you may face is related to the scope of the change. When
you are dealing with change, more often than not, some &lt;strong&gt;work&lt;&#x2F;strong&gt; needs to be
done.&lt;&#x2F;p&gt;
&lt;p&gt;Humans are Optimist Primes: We underestimate how hard a transformative change
can be. So make sure to set &lt;strong&gt;realistic&lt;&#x2F;strong&gt; expectations. Make sure to put enough
time buffer around your expectations. Double that buffer time, then double it
once more: Yes, we are “&lt;em&gt;that bad&lt;&#x2F;em&gt;” at estimating things.&lt;&#x2F;p&gt;
&lt;p&gt;The second hurdle you’ll face is the sheer amount of work that you realize needs
to be done. The good thing is, you don’t have to do that all at once.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t attempt to do everything and be everything all at once.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Take an &lt;strong&gt;incremental&lt;&#x2F;strong&gt; approach. You move mountains one boulder at a time.
Launch a series of &lt;strong&gt;small&lt;&#x2F;strong&gt;, &lt;strong&gt;realistically attainable&lt;&#x2F;strong&gt; projects.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Change&lt;&#x2F;strong&gt; is often not a path you walk alone: If several people or groups of
people are going to help you, make sure you &lt;strong&gt;communicate&lt;&#x2F;strong&gt; your plans. Ensure
that no work is unnecessarily duplicated; everyone knows how they will
contribute to your transformational idea. Make sure that they &lt;strong&gt;clearly&lt;&#x2F;strong&gt;
understand how the change will affect them.&lt;&#x2F;p&gt;
&lt;p&gt;One more thing: &lt;strong&gt;Be transparent&lt;&#x2F;strong&gt;. Don’t hide the reason behind the importance
of this change (&lt;em&gt;to you and to everyone else&lt;&#x2F;em&gt;). &lt;strong&gt;Share&lt;&#x2F;strong&gt; what you can.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Sharing&lt;&#x2F;strong&gt; means exposing yourself; exposing yourself will—high
likely—inspire the people around you. They will support you even more.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;recently-on-zero-to-hero&quot;&gt;Recently on &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This week was hectic, so there are not many articles going on.&lt;&#x2F;p&gt;
&lt;p&gt;I have drafted an article about learning the Go programming language,
step-by-step, incrementally, but it’s not ready yet.&lt;&#x2F;p&gt;
&lt;p&gt;Stay tuned; I’ll publish it sometime around next week, hopefully.&lt;&#x2F;p&gt;
&lt;p&gt;I’m also planning to make small stylistic changes to the design for your reading
and learning experience. So things will get even better.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;iconic.app&#x2F;&quot;&gt;iconic.app&lt;&#x2F;a&gt;: Free, high-quality icons for your next project, from
arrows to buildings, to devices.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;redketchup.io&#x2F;&quot;&gt;RedKetchup&lt;&#x2F;a&gt;: Free online tools to work on images, videos, and
icons.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vimond&#x2F;replay&quot;&gt;Replay&lt;&#x2F;a&gt;: A React video player facilitating adaptive stream playback
with custom UI and a React-friendly API.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0012&#x2F;&quot;&gt;Issue 12: What’s Your Plan&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>What&#x27;s Your Plan?</title>
        <published>2021-04-13T00:00:00+00:00</published>
        <updated>2021-04-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/highlights/issue-0012/"/>
        <id>https://zerotohero.dev/highlights/issue-0012/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/highlights/issue-0012/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;Volkan_zelik_Doctor_reviewing_a_chart_henna_on_hand_with_fine_d_cb0ccbf1-36a7-40fd-a6db-fc5a2d2047a5.png&quot; alt=&quot;Your plan is your roadmap to success.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Your plan is your roadmap to success.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Welcome to the twelfth issue of &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; Highlights.&lt;&#x2F;p&gt;
&lt;p&gt;The last two weeks were full of articles, screencasts, videos, and
infrastructure development. Let’s have an overview.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kuberneters-gonna-kubernete&quot;&gt;Kuberneters Gonna Kubernete&lt;&#x2F;h2&gt;
&lt;p&gt;There’s &lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;a 13-minute video about the journey of a microservice: from
source code to full-blown deployment&lt;&#x2F;a&gt; that I’m sure you’ll
like.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-on-the-horizon-woman-fried-egg&quot;&gt;What’s on the Horizon 👩‍🍳&lt;&#x2F;h2&gt;
&lt;p&gt;Right now, I’m working on the &lt;strong&gt;IDM&lt;&#x2F;strong&gt; APIs of &lt;strong&gt;FizzBuzz Pro&lt;&#x2F;strong&gt;: Your typical
login, registration, signup flow.&lt;&#x2F;p&gt;
&lt;p&gt;Once they are done, I’ll create a &lt;strong&gt;Stripe integration&lt;&#x2F;strong&gt; to enable
subscriptions.&lt;&#x2F;p&gt;
&lt;p&gt;As always, &lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;I’ll be live-streaming the progress on &lt;strong&gt;Twitch&lt;&#x2F;strong&gt; as much as
I can&lt;&#x2F;a&gt;, so &lt;a href=&quot;https:&#x2F;&#x2F;twitch.tv&#x2F;VadidekiVolkan&quot;&gt;&lt;strong&gt;follow me on Twitch&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to get notified as soon as
I start working on real-life production challenges.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;random-thought-of-the-week&quot;&gt;Random Thought of the Week&lt;&#x2F;h2&gt;
&lt;p&gt;Everyone has a list of things that they want to get better at. But the problem
with those lists are, they won’t complete themselves. You have to find the
&lt;strong&gt;focus&lt;&#x2F;strong&gt; and &lt;strong&gt;discipline&lt;&#x2F;strong&gt; to work on them. It all boils down to forming and
establishing habits.&lt;&#x2F;p&gt;
&lt;p&gt;The good news is, you can establish a habit of regularly moving towards your
goal by taking a step-by-step approach. Here’s how:&lt;&#x2F;p&gt;
&lt;p&gt;Start with the future result that you’d like to achieve. Then &lt;strong&gt;articulate&lt;&#x2F;strong&gt;
&lt;em&gt;why&lt;&#x2F;em&gt; that is important to you. Knowing your purpose helps you keep your
motivation high.&lt;&#x2F;p&gt;
&lt;p&gt;Next, define the measure of success. What does &lt;strong&gt;progress&lt;&#x2F;strong&gt; mean in this
context?
What does achieving your goal looks like? How will you know if you are making
progress at all?&lt;&#x2F;p&gt;
&lt;p&gt;After that, &lt;strong&gt;ground yourself&lt;&#x2F;strong&gt;; make a commitment, sign a pact with yourself
in however way you like—Some people want to print their vision and display it
on their wall; some use sticky notes and daily calendar reminders. It is all up
to you: Have a mechanism to constantly &lt;strong&gt;remind&lt;&#x2F;strong&gt; you why you do what you do.
Make yourself &lt;strong&gt;aware&lt;&#x2F;strong&gt; of your &lt;strong&gt;intention&lt;&#x2F;strong&gt;, your &lt;strong&gt;commitment&lt;&#x2F;strong&gt;, and your
&lt;strong&gt;desired future&lt;&#x2F;strong&gt; regularly.&lt;&#x2F;p&gt;
&lt;p&gt;Ah, one final thing. &lt;strong&gt;Celebrate your wins&lt;&#x2F;strong&gt;, no matter how small they are.
Any progress is worth celebrating.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;look-what-i-ve-found&quot;&gt;Look What I’ve Found&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things that grabbed my attention this week.&lt;&#x2F;p&gt;
&lt;p&gt;I typically don’t share these anywhere else.&lt;&#x2F;p&gt;
&lt;p&gt;Exclusively hand-picked for you 👌. Enjoy.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;josephprichard.github.io&#x2F;Pathfinder&#x2F;&quot;&gt;&lt;strong&gt;PathFinder&lt;&#x2F;strong&gt; is a nice app to visualize path-finding algorithms&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fengyuanchen.github.io&#x2F;viewerjs&#x2F;&quot;&gt;&lt;strong&gt;Viewer.js&lt;&#x2F;strong&gt; is &lt;strong&gt;JavaScript&lt;&#x2F;strong&gt; image viewer with a hell lot of
functionality baked in&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;purecss.io&#x2F;&quot;&gt;&lt;strong&gt;Pure.css&lt;&#x2F;strong&gt; is a robust, minimalist CSS framework that hit 2.0
recently&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;thanks-a-lot-heart&quot;&gt;Thanks a Lot ❤️&lt;&#x2F;h2&gt;
&lt;p&gt;That’s all for this week. Next week, I’ll gather more unique content and
resources.&lt;&#x2F;p&gt;
&lt;p&gt;So, until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0001&#x2F;&quot;&gt;Issue 1: Hello World, Hello Stars, Hello Universe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0002&#x2F;&quot;&gt;Issue 2: The Only Thing That doesn’t Change is Change Itself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0003&#x2F;&quot;&gt;Issue 3: Know Thyself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0004&#x2F;&quot;&gt;Issue 4: Have You Fizzed that Buzz?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0005&#x2F;&quot;&gt;Issue 5: Be Kind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0006&#x2F;&quot;&gt;Issue 6: Earn the Promotion You Deserve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0007&#x2F;&quot;&gt;Issue 7: Who Else Journals Daily?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0008&#x2F;&quot;&gt;Issue 8: Who Are You?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0009&#x2F;&quot;&gt;Issue 9: How to Make Yourself Heard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0010&#x2F;&quot;&gt;Issue 10: Tough Conversations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0011&#x2F;&quot;&gt;Issue 11: Assemble Your Personal Board of Advisor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Issue 12: What’s Your Plan&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0013&#x2F;&quot;&gt;Issue 13: Nine-to-Five? I Don’t Think So&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0014&#x2F;&quot;&gt;Issue 14: Respect and Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0015&#x2F;&quot;&gt;Issue 15: Pivoting Your Career?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0016&#x2F;&quot;&gt;Issue 16: Ghosted?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0017&#x2F;&quot;&gt;Issue 17: ‘Following Your Passion’ Is Hardly Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0018&#x2F;&quot;&gt;Issue 18: Keep Cam and Carry On&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0019&#x2F;&quot;&gt;Issue 19: Attention, Intention, Compassion&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0020&#x2F;&quot;&gt;Issue 20: Words Matter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0021&#x2F;&quot;&gt;Issue 21: Change Is the Only Constant&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0022&#x2F;&quot;&gt;Issue 22: Overcome the Awkward Feeling of Networking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0023&#x2F;&quot;&gt;Issue 23: Unleash Your Curiosity: Unlock Your Potential as a Leader&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0024&#x2F;&quot;&gt;Issue 24: Interview Done. Radio Silence 🎃 What Now?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0025&#x2F;&quot;&gt;Issue 25: Unlock Your True Potential: Make Your Hard Work Visible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0026&#x2F;&quot;&gt;Issue 26: Winning at Work: Thriving With Difficult Colleagues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;highlights&#x2F;issue-0027&#x2F;&quot;&gt;Issue 27: Promotions Don’t Happen Overnight&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zero to Prod in Half an Hour: Part 5 --- Implementing an OIDC Authenticator</title>
        <published>2021-01-12T00:00:00+00:00</published>
        <updated>2021-01-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/zero-to-prod/implementing-an-oidc-authenticator/"/>
        <id>https://zerotohero.dev/zero-to-prod/implementing-an-oidc-authenticator/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/zero-to-prod/implementing-an-oidc-authenticator/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;oidc.png&quot; alt=&quot;Zero to Prod in Half an Hour: Part 5 --- Implementing an OIDC Authenticator&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Zero to Prod in Half an Hour: Part 5 --- Implementing an OIDC Authenticator&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This lecture will implement the &lt;strong&gt;Authenticator&lt;&#x2F;strong&gt; that we outlined in the
previous lecture. Our authenticator will extend an OIDC provider, and and oauth2
Config. In the upcoming lectures we’ll use this Authenticator to implement
identity management functionality of our app.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h1&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;gFbvD-U8kcI?si=rmUqt0eTj1IZSmZI&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Zero to Prod in Half an Hour: Part 5 --- Implementing an OIDC Authenticator&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Zero to Prod in Half an Hour: Part 5 --- Implementing an OIDC Authenticator&lt;&#x2F;p&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;an-overview-of-fizzbuzz-pro&#x2F;&quot;&gt;Part 1: An Overview of FizzBuzz Pro&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;generating-static-html&#x2F;&quot;&gt;Part 2: Generating Static HTML&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;mutating-the-generated-html-files&#x2F;&quot;&gt;Part 3: Mutating the Generated HTML Files&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;app-authentication-overview&#x2F;&quot;&gt;Part 4: App Authentication Overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Part 5: Implementing an OIDC Authenticator&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;serving-web-pages&#x2F;&quot;&gt;Part 6: Serving Web Pages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;a-mild-introduction-to-middlewares&#x2F;&quot;&gt;Part 7: A Mild Introduction to Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authenticate-all-the-things&#x2F;&quot;&gt;Part 8: Authenticate All the Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;thinking-in-middlewares&#x2F;&quot;&gt;Part 9: Thinking in Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;authentication-and-subscription-middlewares&#x2F;&quot;&gt;Part 10: Authentication and Subscription Middlewares&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;implementing-authentication-handlers&#x2F;&quot;&gt;Part 11: Implementing Authentication Handlers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;the-final-touches&#x2F;&quot;&gt;Part 12: The Final Touches&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;containerizing-our-application&#x2F;&quot;&gt;Part 13: Containerizing Our Application&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;onwards-to-kubernetes&#x2F;&quot;&gt;Part 14: Onwards to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;creating-ecr-repositories&#x2F;&quot;&gt;Creating ECR Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;deploying-a-microservice-to-k8s&#x2F;&quot;&gt;Deploying a Microservice to Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizz-that-buzz&#x2F;&quot;&gt;Fizz that Buzz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-hla&#x2F;&quot;&gt;FizzBuzz Pro High-Level Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;zero-to-prod&#x2F;fizzbuzz-pro-repos&#x2F;&quot;&gt;FizzBuzz Pro Repositories&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;oauth.net&#x2F;2&#x2F;&quot;&gt;OAuth2.0&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;openid.net&#x2F;connect&#x2F;&quot;&gt;OpenID Connect&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;auth0.com&#x2F;docs&quot;&gt;Auth0 Documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;auth0.com&#x2F;docs&#x2F;get-started&#x2F;apis&#x2F;scopes&#x2F;openid-connect-scopes&quot;&gt;OpenID Connect Scopes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read The Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;zero-to-prod-in-30&#x2F;zero-to-prod-in-30.zip&quot;&gt;Download the source code (&lt;em&gt;114kb zip
archive&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Until the next lecture… May the source be with you 🦄.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
