<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Zero to Hero - permissions</title>
    <link rel="self" type="application/atom+xml" href="https://zerotohero.dev/tags/permissions/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://zerotohero.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-11-24T00:00:00+00:00</updated>
    <id>https://zerotohero.dev/tags/permissions/atom.xml</id>
    <entry xml:lang="en">
        <title>Understanding Unix Directory Permissions: A Common Pitfall</title>
        <published>2024-11-24T00:00:00+00:00</published>
        <updated>2024-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan √ñz√ßelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/file-permission/"/>
        <id>https://zerotohero.dev/inbox/file-permission/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/file-permission/">&lt;p&gt;When working with Unix-like systems, you might occasionally encounter situations where you can‚Äôt create files in a directory even though you own it. This usually happens because of a common misunderstanding about how directory permissions work in Unix systems.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;Let‚Äôs look at a real-world example. Consider this output from &lt;code&gt;ls -al&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;drw-------  2 volkan volkan  4096 Nov 15 15:22 .spike
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At first glance, this might seem fine - the owner has read and write permissions (&lt;code&gt;rw-&lt;&#x2F;code&gt;). However, trying to create a file in this directory will fail. Why?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-directory-permissions&quot;&gt;Understanding Directory Permissions&lt;&#x2F;h2&gt;
&lt;p&gt;In Unix systems, directory permissions work differently than file permissions. The permission bits have different meanings when applied to directories:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Read (r)&lt;&#x2F;strong&gt;: Allows listing directory contents&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Write (w)&lt;&#x2F;strong&gt;: Allows creating and deleting files within the directory&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Execute (x)&lt;&#x2F;strong&gt;: Allows accessing the directory and its contents&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The crucial detail here is that the &lt;strong&gt;execute&lt;&#x2F;strong&gt; permission is required to use a directory effectively. Without it, you can‚Äôt:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Enter the directory (&lt;code&gt;cd&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Access files within it&lt;&#x2F;li&gt;
&lt;li&gt;Create new files&lt;&#x2F;li&gt;
&lt;li&gt;Delete existing files&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;breaking-down-the-permission-string&quot;&gt;Breaking Down the Permission String&lt;&#x2F;h2&gt;
&lt;p&gt;Let‚Äôs decode &lt;code&gt;drw-------&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d&lt;&#x2F;code&gt;: This is a directory&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rw-&lt;&#x2F;code&gt;: Owner has read and write permissions, but no execute&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;---&lt;&#x2F;code&gt;: Group has no permissions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;---&lt;&#x2F;code&gt;: Others have no permissions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This translates to mode &lt;code&gt;600&lt;&#x2F;code&gt; in octal notation. However, this is rarely what you want for a directory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h2&gt;
&lt;p&gt;To fix this, you need to add the execute permission for the owner. There are two ways to do this:&lt;&#x2F;p&gt;
&lt;p&gt;Using symbolic mode:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod u+x ~&#x2F;.spike
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or using octal mode (more common):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod 700 ~&#x2F;.spike
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After this change, the permission string will show as &lt;code&gt;drwx------&lt;&#x2F;code&gt;, giving you full control over the directory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;p&gt;For private directories that only you should access:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use mode &lt;code&gt;700&lt;&#x2F;code&gt; (&lt;code&gt;rwx------&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;This gives you full permissions while keeping the directory private&lt;&#x2F;li&gt;
&lt;li&gt;It‚Äôs more secure than &lt;code&gt;777&lt;&#x2F;code&gt; which would allow anyone to access the directory&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For shared directories:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Consider who needs access and adjust group permissions accordingly&lt;&#x2F;li&gt;
&lt;li&gt;Common modes include &lt;code&gt;750&lt;&#x2F;code&gt; (&lt;code&gt;rwxr-x---&lt;&#x2F;code&gt;) for group-readable directories&lt;&#x2F;li&gt;
&lt;li&gt;Always be cautious with world-readable&#x2F;writable permissions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;command-reference&quot;&gt;Command Reference&lt;&#x2F;h2&gt;
&lt;p&gt;Useful commands for managing directory permissions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# View permissions in human-readable format
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ls -al directory_name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# View permissions in numeric format
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;stat -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;%a&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; directory_name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Change permissions using symbolic notation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod u+x directory_name  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Add execute for user
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod g+rx directory_name &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Add read and execute for group
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Change permissions using octal notation
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod 700 directory_name  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# rwx------ (private)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod 750 directory_name  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# rwxr-x--- (group readable)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remember: when working with directories, the execute permission is essential for basic operations. Always ensure it‚Äôs set appropriately for your use case.&lt;&#x2F;p&gt;
&lt;p&gt;Happy permissions managing! üêß&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
