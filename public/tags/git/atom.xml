<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Zero to Hero - git</title>
    <link rel="self" type="application/atom+xml" href="https://zerotohero.dev/tags/git/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://zerotohero.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-12-16T00:00:00+00:00</updated>
    <id>https://zerotohero.dev/tags/git/atom.xml</id>
    <entry xml:lang="en">
        <title>CSR vs Direct Public Key Exchange: When Do You Really Need a CSR?</title>
        <published>2024-12-16T00:00:00+00:00</published>
        <updated>2024-12-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/csr/"/>
        <id>https://zerotohero.dev/inbox/csr/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/csr/">&lt;p&gt;When working with secure systems, a common scenario involves Server A obtaining a certificate signed by Server B (acting as a Certificate Authority, or CA). But if the ultimate goal is to exchange public keys so that JWTs (JSON Web Tokens) signed by Server A can be verified by Server B, you might wonder: &lt;em&gt;Do I really need to use a CSR (Certificate Signing Request)? Can’t I just send my public key directly?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The answer is: &lt;strong&gt;it depends on your use case and trust model&lt;&#x2F;strong&gt;. Here’s a breakdown of why you might still want to use a CSR, and when you can skip it.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;what-is-a-csr&quot;&gt;What Is a CSR?&lt;&#x2F;h2&gt;
&lt;p&gt;A CSR (Certificate Signing Request) is a formal request for a certificate that includes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A Public Key&lt;&#x2F;strong&gt;: The key for which the certificate is requested.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Metadata&lt;&#x2F;strong&gt;: Information such as the organization name, domain, and other identifying details.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A Digital Signature&lt;&#x2F;strong&gt;: The CSR is signed using the private key corresponding to the public key, proving ownership of the key pair.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The CA (Server B in this case) validates the CSR and signs it, issuing a certificate that binds the public key to the metadata and ensures trustworthiness.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;key-differences-csr-vs-direct-public-key-exchange&quot;&gt;Key Differences: CSR vs Direct Public Key Exchange&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-csr-purpose&quot;&gt;&lt;strong&gt;1. CSR Purpose&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A CSR isn’t just about sending a public key. It’s a mechanism to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Verify the &lt;strong&gt;ownership&lt;&#x2F;strong&gt; of the private key.&lt;&#x2F;li&gt;
&lt;li&gt;Attach additional &lt;strong&gt;identity information&lt;&#x2F;strong&gt; (e.g., the name or domain of the entity requesting the certificate).&lt;&#x2F;li&gt;
&lt;li&gt;Enable a &lt;strong&gt;trusted certificate chain&lt;&#x2F;strong&gt;, which simplifies verification in distributed systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-direct-public-key-exchange&quot;&gt;&lt;strong&gt;2. Direct Public Key Exchange&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;You can directly send a public key to Server B without using a CSR. In this approach:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Server B can use the received public key to verify JWTs signed by Server A’s private key.&lt;&#x2F;li&gt;
&lt;li&gt;There’s no built-in identity validation, certificate lifecycle management, or chain of trust.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While this works in certain scenarios, it has limitations and security trade-offs.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;when-to-use-a-csr&quot;&gt;When to Use a CSR&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;advantages-of-using-a-csr&quot;&gt;&lt;strong&gt;Advantages of Using a CSR&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Identity Validation&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The CSR ensures that the entity requesting the certificate (Server A) owns the corresponding private key and has been validated by a trusted CA (Server B).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Certificate Lifecycle Management&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Certificates can be renewed, revoked, and managed systematically. In contrast, a direct public key exchange lacks this infrastructure.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Chain of Trust&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A certificate issued via a CSR establishes a trusted relationship between Server A and Server B. This is especially important in environments with multiple parties or external systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security Best Practices&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using certificates aligns with widely accepted security standards, such as TLS and mutual authentication.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;use-case&quot;&gt;&lt;strong&gt;Use Case&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If Server A and Server B are communicating in a public or distributed environment, or if Server B needs to validate Server A’s identity, &lt;strong&gt;using a CSR and signed certificate is the better choice&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;when-a-direct-public-key-exchange-is-enough&quot;&gt;When a Direct Public Key Exchange Is Enough&lt;&#x2F;h2&gt;
&lt;p&gt;In simpler or controlled environments, you might not need the full CSR process. For example:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Closed Systems&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If Server A and Server B are part of the same internal system, and there’s no need for third-party validation, you can directly exchange public keys.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simplified Trust&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If Server B already trusts Server A, sending the public key directly might be sufficient. Server B can store and use the key to verify JWTs without additional steps.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;No Metadata Needed&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If no identity metadata (e.g., domain name or organization) is required, the CSR adds little value.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;trade-offs&quot;&gt;&lt;strong&gt;Trade-Offs&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No Verification&lt;&#x2F;strong&gt;: Server B must blindly trust the received public key.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No Revocation or Renewal&lt;&#x2F;strong&gt;: Directly exchanged public keys lack lifecycle management.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No Chain of Trust&lt;&#x2F;strong&gt;: There’s no mechanism to validate the authenticity of the public key.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;summary-to-csr-or-not-to-csr&quot;&gt;Summary: To CSR or Not to CSR?&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;Scenario&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;CSR Required?&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;Why&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Public or distributed systems&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;td&gt;Need for identity validation, lifecycle management, and chain of trust.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Closed or internal systems&lt;&#x2F;td&gt;&lt;td&gt;No&lt;&#x2F;td&gt;&lt;td&gt;Trust is already established, and the CSR process adds unnecessary overhead.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Need for lifecycle management (renewal, etc.)&lt;&#x2F;td&gt;&lt;td&gt;Yes&lt;&#x2F;td&gt;&lt;td&gt;Certificates provide systematic management of trust material.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Minimalistic trust exchange&lt;&#x2F;td&gt;&lt;td&gt;No&lt;&#x2F;td&gt;&lt;td&gt;Direct public key exchange is simpler and sufficient for closed systems.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;While skipping the CSR and directly exchanging public keys can work in simpler or internal systems, the CSR process provides essential security, validation, and lifecycle benefits in more complex or public-facing environments. The decision ultimately depends on the &lt;strong&gt;trust model&lt;&#x2F;strong&gt;, &lt;strong&gt;security requirements&lt;&#x2F;strong&gt;, and &lt;strong&gt;operational context&lt;&#x2F;strong&gt; of your system.&lt;&#x2F;p&gt;
&lt;p&gt;For secure systems, especially those that involve public networks or external parties, using a CSR to obtain a signed certificate is the more robust and widely accepted approach.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding `git push origin main`</title>
        <published>2024-12-16T00:00:00+00:00</published>
        <updated>2024-12-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/git-push-origin-main/"/>
        <id>https://zerotohero.dev/inbox/git-push-origin-main/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/git-push-origin-main/">&lt;p&gt;When working with Git, you might frequently encounter the command &lt;code&gt;git push origin main&lt;&#x2F;code&gt;. But what do &lt;code&gt;origin&lt;&#x2F;code&gt; and &lt;code&gt;main&lt;&#x2F;code&gt; actually mean? In this post, we will break down this command and explain its components.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-git-push-origin-main&quot;&gt;What is &lt;code&gt;git push origin main&lt;&#x2F;code&gt;?&lt;&#x2F;h2&gt;
&lt;p&gt;The command &lt;code&gt;git push origin main&lt;&#x2F;code&gt; is used to push changes from your local repository to a remote repository. It consists of three main parts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git push&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: The Git command that initiates the process of sending your commits to a remote repository.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;origin&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: The name of the remote repository.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;main&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: The name of the branch in the remote repository where the changes should be pushed.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Let’s explore each component in detail.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;understanding-origin&quot;&gt;Understanding &lt;code&gt;origin&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;what-is-origin&quot;&gt;What is &lt;code&gt;origin&lt;&#x2F;code&gt;?&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;origin&lt;&#x2F;code&gt; is the default name given to the remote repository when you clone a repository. It acts as a shorthand for the remote repository’s URL (e.g., a repository hosted on GitHub, GitLab, or another Git server).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-is-origin-needed&quot;&gt;Why is &lt;code&gt;origin&lt;&#x2F;code&gt; needed?&lt;&#x2F;h3&gt;
&lt;p&gt;When you execute a command like &lt;code&gt;git push&lt;&#x2F;code&gt;, Git needs to know where to send the changes. &lt;code&gt;origin&lt;&#x2F;code&gt; specifies the remote repository that should receive the changes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;&#x2F;h3&gt;
&lt;p&gt;If you clone a repository using the following command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Git automatically sets up &lt;code&gt;origin&lt;&#x2F;code&gt; to point to the repository at &lt;code&gt;https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git&lt;&#x2F;code&gt;. You can verify this using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git remote -v
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You might see output like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;origin  https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git (fetch)
&lt;&#x2F;span&gt;&lt;span&gt;origin  https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git (push)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;understanding-main&quot;&gt;Understanding &lt;code&gt;main&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;what-is-main&quot;&gt;What is &lt;code&gt;main&lt;&#x2F;code&gt;?&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;main&lt;&#x2F;code&gt; is the name of a branch in your Git repository. By convention, &lt;code&gt;main&lt;&#x2F;code&gt; often serves as the default branch for a repository. It typically contains the latest stable version of the code.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-is-main-needed&quot;&gt;Why is &lt;code&gt;main&lt;&#x2F;code&gt; needed?&lt;&#x2F;h3&gt;
&lt;p&gt;The branch name specifies which branch in the remote repository should receive the changes. Without specifying the branch, Git might use a default branch or require additional configuration.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;custom-branch-names&quot;&gt;Custom Branch Names&lt;&#x2F;h3&gt;
&lt;p&gt;Branches in Git are highly customizable, so your repository might use names like &lt;code&gt;master&lt;&#x2F;code&gt;, &lt;code&gt;development&lt;&#x2F;code&gt;, or &lt;code&gt;feature-branch&lt;&#x2F;code&gt; instead of &lt;code&gt;main&lt;&#x2F;code&gt;. In modern Git repositories, &lt;code&gt;main&lt;&#x2F;code&gt; has become the standard default branch name.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;breaking-down-the-command&quot;&gt;Breaking Down the Command&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s what happens when you run &lt;code&gt;git push origin main&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git push&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Git starts the process of uploading your commits.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;origin&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Git identifies the remote repository to push to.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;main&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Git pushes the commits from your local &lt;code&gt;main&lt;&#x2F;code&gt; branch to the &lt;code&gt;main&lt;&#x2F;code&gt; branch on the remote repository.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;If you’re currently on the &lt;code&gt;main&lt;&#x2F;code&gt; branch locally, the command pushes the changes to the corresponding &lt;code&gt;main&lt;&#x2F;code&gt; branch on the remote repository.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;example-workflow&quot;&gt;Example Workflow&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a practical example to put it all together:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clone a repository:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This sets up &lt;code&gt;origin&lt;&#x2F;code&gt; to point to the remote repository.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Make changes locally:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Hello, Git!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; file.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git add file.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git commit -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Added a greeting to file.txt&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Push changes to the remote repository:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git push origin main
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This sends your commits to the &lt;code&gt;main&lt;&#x2F;code&gt; branch of the remote repository.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;The command &lt;code&gt;git push origin main&lt;&#x2F;code&gt; can be broken down as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git push&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Initiates the process of sending changes to a remote repository.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;origin&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Specifies the remote repository (default name for the remote created when cloning).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;main&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;: Indicates the branch in the remote repository where the changes should be pushed.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Understanding these components helps you use Git more effectively and troubleshoot common issues related to pushing changes.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Debugging Git GPG Signing Issuese</title>
        <published>2024-11-27T00:00:00+00:00</published>
        <updated>2024-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/git-gpg-sign/"/>
        <id>https://zerotohero.dev/inbox/git-gpg-sign/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/git-gpg-sign/">&lt;p&gt;When working with signed Git commits, you might encounter this error:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;error: gpg failed to sign the data:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gpg: skipped &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;[EMAIL]&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;: No secret key
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;[GNUPG:] INV_SGNR 9 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;USER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;[GNUPG:] FAILURE sign 17
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gpg: signing failed: No secret key
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fatal: failed to write commit object
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This error occurs when you try to create a signed Git commit (using the &lt;code&gt;-S&lt;&#x2F;code&gt; flag) but GPG can’t find the corresponding secret key for your email address. Let’s walk through how to diagnose and fix this issue.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;checking-your-gpg-keys&quot;&gt;Checking Your GPG Keys&lt;&#x2F;h2&gt;
&lt;p&gt;First, check if you have any GPG keys installed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gpg --list-secret-keys --keyid-format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;long
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This command will show output similar to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;&#x2F;home&#x2F;user&#x2F;.gnupg&#x2F;pubring.kbx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-------------------------------
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sec   ed25519&#x2F;KEYID 2024-11-06 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FULL_KEYID
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;uid                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ultimate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; User Name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;email@example.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ssb   cv25519&#x2F;SUBKEY 2024-11-06 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;if-you-have-a-key&quot;&gt;If You Have a Key&lt;&#x2F;h2&gt;
&lt;p&gt;If you see output like above, you already have a GPG key. The key ID is the string after “ed25519&#x2F;” in the &lt;code&gt;sec&lt;&#x2F;code&gt; line. You’ll need to configure Git to use this key:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git config --global user.signingkey YOUR_KEY_ID
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Also ensure your Git email matches the GPG key email:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git config --global user.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;your.email@example.com&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;if-you-don-t-have-a-key&quot;&gt;If You Don’t Have a Key&lt;&#x2F;h2&gt;
&lt;p&gt;If no keys are listed, you’ll need to generate a new one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;gpg --full-generate-key
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Follow the prompts to create your key. Make sure to use the same email address that you use with Git.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;additional-configuration&quot;&gt;Additional Configuration&lt;&#x2F;h2&gt;
&lt;p&gt;Sometimes, you might need to explicitly tell Git which GPG program to use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git config --global gpg.program $(which gpg)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;testing-your-configuration&quot;&gt;Testing Your Configuration&lt;&#x2F;h2&gt;
&lt;p&gt;After setting everything up, try creating a signed commit:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git commit -S -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Your commit message&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;troubleshooting-tips&quot;&gt;Troubleshooting Tips&lt;&#x2F;h2&gt;
&lt;p&gt;If you’re still having issues:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Verify your GPG key email matches your Git email&lt;&#x2F;li&gt;
&lt;li&gt;Ensure your GPG key hasn’t expired&lt;&#x2F;li&gt;
&lt;li&gt;Check if your key has signing capability (look for [S] in the key capabilities)&lt;&#x2F;li&gt;
&lt;li&gt;Make sure you’re using the correct key ID&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;alternative-unsigned-commits&quot;&gt;Alternative: Unsigned Commits&lt;&#x2F;h2&gt;
&lt;p&gt;If you need to make a commit without signing (assuming your repository allows it), you can simply omit the &lt;code&gt;-S&lt;&#x2F;code&gt; flag:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git commit -m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Your commit message&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;security-note&quot;&gt;Security Note&lt;&#x2F;h2&gt;
&lt;p&gt;Signing your Git commits adds an extra layer of security by verifying that commits actually came from you. It’s especially important for open-source projects or when working in larger teams. However, make sure to keep your GPG private key secure and never share it with others.&lt;&#x2F;p&gt;
&lt;p&gt;Remember that you can also configure Git to sign all commits by default:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;git config --global commit.gpgsign true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This way, you won’t need to add the &lt;code&gt;-S&lt;&#x2F;code&gt; flag to every commit command.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;GPG signing issues in Git are usually straightforward to fix once you understand the relationship between your GPG keys and Git configuration. The key is to ensure that Git knows which GPG key to use and that the key is properly set up with your correct email address.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Git Comfortable</title>
        <published>2021-10-27T00:00:00+00:00</published>
        <updated>2021-10-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/roadmap/git/"/>
        <id>https://zerotohero.dev/roadmap/git/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/roadmap/git/">&lt;p&gt;{{img(
src=“&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;git.png”,
alt=“Mastering git is one of the best investments you can make as a
developer.”
)}&lt;&#x2F;p&gt;
&lt;p&gt;As a developer, you’ll spend a considerable amount of time
with &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;&quot;&gt;&lt;code&gt;git&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. So the more comfortable you get with it, the
more productive you will be. This page lists learning resources to ramp up
your &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;&quot;&gt;&lt;code&gt;git&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; skills.&lt;&#x2F;p&gt;
&lt;p&gt;For starters, &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;&quot;&gt;The Git Book&lt;&#x2F;a&gt; would be enough to learn
about &lt;code&gt;git&lt;&#x2F;code&gt;. And, &lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;&quot;&gt;&lt;strong&gt;GitHub&lt;&#x2F;strong&gt;’s Help Documentation&lt;&#x2F;a&gt; is
a great place to start &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;&quot;&gt;&lt;strong&gt;GitHub&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. Once you skim through
them, here are a few additional resources that you can use:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;krishnabiradar.com&#x2F;blogs&#x2F;deconstructing-a-git-commit&#x2F;&quot;&gt;Deconstructing a Git Commit&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.deployhq.com&#x2F;git&quot;&gt;DeployHQ: Git Tutorial&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;onlywei.github.io&#x2F;explain-git-with-d3&#x2F;&quot;&gt;Explain Git With D3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arslanbilal&#x2F;git-cheat-sheet&quot;&gt;Git Cheat Sheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;sethrobertson.github.io&#x2F;GitFixUm&#x2F;fixup.html&quot;&gt;Git Fix Up&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jwiegley.github.io&#x2F;git-from-the-bottom-up&#x2F;&quot;&gt;Git From the Bottom Up&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;githowto.com&#x2F;&quot;&gt;Git How To&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www-cs-students.stanford.edu&#x2F;~blynn&#x2F;gitmagic&#x2F;index.html&quot;&gt;Git Magic&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.goodreads.com&#x2F;book&#x2F;show&#x2F;17239270-git-pocket-guide&quot;&gt;Git Pocket Guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;justinhileman.info&#x2F;article&#x2F;git-pretty&#x2F;git-pretty.png&quot;&gt;Git Pretty&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;c&#x2F;DanGitschoolDude&quot;&gt;Git School&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;git-tips&#x2F;tips&quot;&gt;Git Tips&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.atlassian.com&#x2F;git&#x2F;tutorials&quot;&gt;Atlassian: Git Tutorials&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;codewords.recurse.com&#x2F;issues&#x2F;two&#x2F;git-from-the-inside-out&quot;&gt;Git from the Inside Out&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.developintelligence.com&#x2F;blog&#x2F;2015&#x2F;06&#x2F;making-sense-of-git-a-visual-perspective&#x2F;&quot;&gt;Git: a Visual Perspective&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;susam&#x2F;gitpr&quot;&gt;GitPR&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.columbia.edu&#x2F;~zjn2101&#x2F;intermediate-git&#x2F;#1&quot;&gt;Intermediate Git&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learngitbranching.js.org&#x2F;&quot;&gt;Learn Git Branching&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.git-tower.com&#x2F;learn&#x2F;&quot;&gt;Learn Git&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tom.preston-werner.com&#x2F;2009&#x2F;05&#x2F;19&#x2F;the-git-parable.html&quot;&gt;The Git Parable&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;try.github.io&#x2F;&quot;&gt;Try Github&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lostechies.com&#x2F;joshuaflanagan&#x2F;2010&#x2F;09&#x2F;03&#x2F;use-gitk-to-understand-git&#x2F;&quot;&gt;Use &lt;code&gt;gitk&lt;&#x2F;code&gt; to Understand Git&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I guess, that’s more than enough to &lt;strong&gt;git&lt;&#x2F;strong&gt; you started 🙂.&lt;&#x2F;p&gt;
&lt;p&gt;Until next time… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;roadmap&#x2F;&quot;&gt;Be the Next Version of Yourself&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;hack-the-system&#x2F;&quot;&gt;Who Else is Ready to Hack?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;chisel&#x2F;&quot;&gt;Grab Your Chisel and Start Pounding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-fast-remember-more&#x2F;&quot;&gt;Unlock Your Brain’s Power: Learn Fast, Remember More&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;the-art-of-learning&#x2F;&quot;&gt;Master Your Mind: Unleash the Power of Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;bedtime-reading&#x2F;&quot;&gt;Resources Every Developer Must Read: No Exceptions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;knowing-javascript-is-not-good-enough&#x2F;&quot;&gt;Knowing JavaScript Is Not Good Enough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-javascript-the-unconventional-way&#x2F;&quot;&gt;Learn JavaScript the Unconventional Way&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learn-haskell&#x2F;&quot;&gt;Want to Learn JavaScript? Learn Haskell First&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;glossary&#x2F;&quot;&gt;A Glossary of Mostly Developer-Related Things&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Git Comfortable&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;vim&#x2F;&quot;&gt;Master Your Vim-Fu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;one-does-not-simply-terminal&#x2F;&quot;&gt;One Does Not Simply Terminal 👌&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;design-patterns&#x2F;&quot;&gt;Paint Me Like One of Your French Design Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;regexp&#x2F;&quot;&gt;Tame Your Regular Expressions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;security&#x2F;&quot;&gt;Security Is Not Optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;you-need-testing&#x2F;&quot;&gt;You Need Testing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;a-startup-founders-bedtime-reading-list&#x2F;&quot;&gt;A Startup Founder’s Bedtime Reading List&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;color-theory&#x2F;&quot;&gt;Orange Is the New Purple&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;ramp-up-in-user-experience-design&#x2F;&quot;&gt;Ramp Up in User Experience Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;typography&#x2F;&quot;&gt;Get Better at Typography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;roadmap&#x2F;learning-rust&#x2F;&quot;&gt;Exploring Rust as a Go Developer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
</feed>
