<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Zero to Hero - SPIFFE</title>
    <link rel="self" type="application/atom+xml" href="https://zerotohero.dev/tags/spiffe/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://zerotohero.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-12-28T00:00:00+00:00</updated>
    <id>https://zerotohero.dev/tags/spiffe/atom.xml</id>
    <entry xml:lang="en">
        <title>Shamir&#x27;s Secret Sharing Scheme with SPIFFE and SPIKE</title>
        <published>2024-12-28T00:00:00+00:00</published>
        <updated>2024-12-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/spike/shamir-secrets-sharing/"/>
        <id>https://zerotohero.dev/spire/spike/shamir-secrets-sharing/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/spike/shamir-secrets-sharing/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Secure secrets management&lt;&#x2F;strong&gt; is a critical aspect of any modern distributed
system’s infrastructure. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spike&quot;&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;Secure
Production Identity for Key Encryption&lt;&#x2F;em&gt;) is a system that achieves secure
secrets management through a &lt;strong&gt;distributed&lt;&#x2F;strong&gt;, &lt;strong&gt;zero-trust&lt;&#x2F;strong&gt; architecture.&lt;&#x2F;p&gt;
&lt;p&gt;To learn more about &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;, you can visit&lt;a href=&quot;https:&#x2F;&#x2F;spike.ist&#x2F;&quot;&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;’s website&lt;&#x2F;a&gt;
or check out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spike&quot;&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;’s GitHub repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-video-is-a-worth-a-million-words&quot;&gt;A Video is a Worth a Million Words&lt;&#x2F;h2&gt;
&lt;p&gt;Here is a video that goes over what we discuss in this article:&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;&lt;iframe src=&quot;https:&#x2F;&#x2F;player.vimeo.com&#x2F;video&#x2F;1042946784?badge=0&amp;amp;autopause=0&amp;amp;player_id=0&amp;amp;app_id=58479&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture; clipboard-write&quot; style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot; title=&quot;SPIKE’s Shamir Secrets Sharing with SPIFFE mTLS&quot;&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;&lt;script src=&quot;https:&#x2F;&#x2F;player.vimeo.com&#x2F;api&#x2F;player.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;h2 id=&quot;keeping-the-root-key-secret&quot;&gt;Keeping the Root Key Secret&lt;&#x2F;h2&gt;
&lt;p&gt;In &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; architecture, &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; is the central secret store.
&lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; requires a &lt;strong&gt;root key&lt;&#x2F;strong&gt; to save its secrets to its
&lt;em&gt;backing store&lt;&#x2F;em&gt; in encrypted form. That’s why the &lt;strong&gt;root key&lt;&#x2F;strong&gt; is a critical
secret that must always be kept secure.&lt;&#x2F;p&gt;
&lt;p&gt;This article discusses how &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; securely manages the &lt;strong&gt;root key&lt;&#x2F;strong&gt; using
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;&lt;strong&gt;Shamir’s Secret Sharing&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; scheme.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introducing-shamir-s-secret-sharing&quot;&gt;Introducing Shamir’s Secret Sharing&lt;&#x2F;h2&gt;
&lt;p&gt;Our design relies upon several layers of security to ensure the root key remains
secure:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We leverage &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE-based mTLS encryption&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to secure communication
between various &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; components.&lt;&#x2F;li&gt;
&lt;li&gt;We use &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;&lt;strong&gt;Shamir’s Secret Sharing&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to split the root key into
multiple shares. This ensures that no single entity can access the full
key anytime.&lt;&#x2F;li&gt;
&lt;li&gt;The Shamir &lt;strong&gt;shares&lt;&#x2F;strong&gt; are never stored on disk.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s generate one share per Keeper; however, a single share is
not enough to reconstruct the root key. So even in the unlikely event that
a &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; is compromised, the root key remains secure.&lt;&#x2F;li&gt;
&lt;li&gt;Only &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; can compose the root key from the shares; once created,
it remains in the memory. The root key is &lt;strong&gt;never&lt;&#x2F;strong&gt; stored on disk
and &lt;strong&gt;never&lt;&#x2F;strong&gt; leaves the network perimeter.&lt;&#x2F;li&gt;
&lt;li&gt;In addition, there is no API or programmatic access that can reveal the root
key. The attacker will need admin privileges and sophisticated memory forensics
to extract the root key from the &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt;, which is a significant
security barrier.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This article further discusses the architecture and design choices that make
&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;’s &lt;strong&gt;Nexus&lt;&#x2F;strong&gt; and &lt;strong&gt;Keeper&lt;&#x2F;strong&gt; interaction an excellent model for secure
key management.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;How about Disaster Recovery?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the case of all &lt;strong&gt;SPIKE Keepers&lt;&#x2F;strong&gt; simultaneously crashing, the root key is
lost.&lt;&#x2F;p&gt;
&lt;p&gt;We have secure and sophisticated ideas to help teams recover from an unlikely
doomsday scenario by requiring multi-party approval to reconstruct the root
key. Yet, this is a topic for another article.&lt;&#x2F;p&gt;
&lt;p&gt;However, even in this multiple-SPIKE-keepers scenario, a surefire way to
prevent from losing the root key is to increase the number of &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s
to a higher number, say 5 or 7. This way, even if a few &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s
crash, the root key can still be reconstructed.&lt;&#x2F;p&gt;
&lt;p&gt;And when you geographically distribute the &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s, you can ensure
that even a natural disaster won’t take down all the &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s at once.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;spike-architecture-a-brief-overview&quot;&gt;SPIKE Architecture: A Brief Overview&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; system consists of three core components:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;: These are distributed instances responsible for generating
shards (&lt;em&gt;parts of a root key&lt;&#x2F;em&gt;) using &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;Shamir’s Secret Sharing&lt;&#x2F;a&gt;. Each
&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; maintains a piece of the secret, ensuring no single entity
has the full key.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt;: This is the &lt;strong&gt;secrets store&lt;&#x2F;strong&gt; that gathers shards from the
&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s to reconstruct the &lt;code&gt;rootKey&lt;&#x2F;code&gt; during bootstrapping, enabling
secure initialization of its backing store.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SPIKE Pilot&lt;&#x2F;strong&gt;: This is the CLI tool that communicates with &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt;
and manages policies and secrets through the &lt;strong&gt;SPIKE Nexus RESTful mTLS API&lt;&#x2F;strong&gt;.
&lt;strong&gt;SPIKE Pilot&lt;&#x2F;strong&gt; is &lt;strong&gt;not&lt;&#x2F;strong&gt; a part of this article, but it’s an essential
component of the &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; system.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Both components leverage &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; for identity and secure
communication through &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mutual_authentication&quot;&gt;&lt;strong&gt;mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;high-level-design&quot;&gt;High-Level Design&lt;&#x2F;h2&gt;
&lt;p&gt;Here is a high-level overview of the &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; root key management system.
You can open the image in a separate tab for a better view:&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2024&amp;#x2F;spike&amp;#x2F;shamir&amp;#x2F;spike-shamir.jpg&quot; alt=&quot;SPIKE Root Key Partitioning: High-Level Conceptual Diagram&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;SPIKE Root Key Partitioning: High-Level Conceptual Diagram&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This diagram illustrates the the distributed key management
system workflow between &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s and the &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt;. Let me
break down the sequence:&lt;&#x2F;p&gt;
&lt;p&gt;For starters, all connections use &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; mTLS&lt;&#x2F;a&gt; for security.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;starting-spike-keepers-and-spike-nexus&quot;&gt;Starting SPIKE Keepers and SPIKE Nexus&lt;&#x2F;h3&gt;
&lt;p&gt;For &lt;strong&gt;SPIKE Keepers&lt;&#x2F;strong&gt; to know about each other and &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt;, we pass
some configuration information during startup using environment variables
as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# .&#x2F;hack&#x2F;start-nexus.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_PEERS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;{&amp;quot;1&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8443&amp;quot;, \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8543&amp;quot;,&amp;quot;3&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8643&amp;quot;}&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&#x2F;nexus
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here is how each of the keepers start:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# &#x2F;hack&#x2F;start-keeper-1.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_PEERS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;{&amp;quot;1&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8443&amp;quot;, \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8543&amp;quot;,&amp;quot;3&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8643&amp;quot;}&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_TLS_PORT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;:8443&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;1&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&#x2F;keeper
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# &#x2F;hack&#x2F;start-keeper-2.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_PEERS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;{&amp;quot;1&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8443&amp;quot;,\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8543&amp;quot;,&amp;quot;3&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8643&amp;quot;}&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_TLS_PORT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;:8543&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&#x2F;keeper
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# &#x2F;hack&#x2F;start-keeper-3.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_PEERS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;{&amp;quot;1&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8443&amp;quot;,\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;2&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8543&amp;quot;,&amp;quot;3&amp;quot;:&amp;quot;https:&#x2F;&#x2F;localhost:8643&amp;quot;}&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_TLS_PORT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;:8643&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SPIKE_KEEPER_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;3&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;.&#x2F;keeper
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;initial-share-generation-the-top-of-the-diagram&quot;&gt;Initial Share Generation (&lt;em&gt;the top of the diagram&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;Each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; computes a secure random share.&lt;&#x2F;p&gt;
&lt;p&gt;There’s a parallel process where each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Broadcasts its &lt;code&gt;{id, share}&lt;&#x2F;code&gt; to other &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s&lt;&#x2F;li&gt;
&lt;li&gt;Receives shares from other peer &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;root-key-generation-middle-left&quot;&gt;Root Key Generation (&lt;em&gt;middle-left&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; waits until all shards are collected.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; computes a &lt;code&gt;rootKey&lt;&#x2F;code&gt; by &lt;code&gt;XOR&lt;&#x2F;code&gt;ing all collected shards.&lt;&#x2F;li&gt;
&lt;li&gt;This ensures that no single &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; knows the complete key once it
computes its &lt;strong&gt;Shamir Secret Share&lt;&#x2F;strong&gt; from the &lt;code&gt;rootKey&lt;&#x2F;code&gt; and discards the
root key and any intermediate values.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;shamir-secret-sharing&quot;&gt;Shamir Secret Sharing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Takes the rootKey as input&lt;&#x2F;li&gt;
&lt;li&gt;Creates three partitions
&lt;ul&gt;
&lt;li&gt;This will be configurable, but it’s hard-coded to 3 and 2 for now.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Uses &lt;code&gt;threshold = 2&lt;&#x2F;code&gt; (&lt;em&gt;meaning any two shares can reconstruct the &lt;code&gt;rootKey&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; then:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Discards the original root key (&lt;em&gt;security measure&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Keeps only its assigned partition (&lt;em&gt;also a security measure&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Discards knowledge of other partitions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is a more detailed drill-down of the &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; workflow:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Compute Secure Random Share&lt;&#x2F;strong&gt;: Each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; generates a
cryptographically secure random share derived from an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Advanced_Encryption_Standard&quot;&gt;AES-256&lt;&#x2F;a&gt; seed.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Broadcast and Receive&lt;&#x2F;strong&gt;: &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s broadcast their shards (&lt;em&gt;id,
share&lt;&#x2F;em&gt;) to peers and receive shards from them in parallel. Secure
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mutual_authentication&quot;&gt;&lt;strong&gt;mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; ensures the &lt;strong&gt;integrity&lt;&#x2F;strong&gt; and &lt;strong&gt;confidentiality&lt;&#x2F;strong&gt; of these
communications.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Shard Aggregation and Root Key Derivation&lt;&#x2F;strong&gt;: &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; waits until
all shards are gathered, combines them using &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;XOR_cipher&quot;&gt;&lt;code&gt;XOR&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, and derives the
&lt;code&gt;rootKey&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Shamir Secret Sharing&lt;&#x2F;strong&gt;: The derived &lt;code&gt;rootKey&lt;&#x2F;code&gt; is split into &lt;strong&gt;three
partitions&lt;&#x2F;strong&gt;, ensuring only a subset (&lt;em&gt;e.g., 2 out of 3&lt;&#x2F;em&gt;) is required for
reconstruction. &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s discard the &lt;code&gt;rootKey&lt;&#x2F;code&gt; and retain only their
assigned share after generating the shares.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;spike-nexus-bootstrapping-bottom&quot;&gt;SPIKE Nexus Bootstrapping (bottom)&lt;&#x2F;h3&gt;
&lt;p&gt;During startup, &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; fetches &lt;strong&gt;exactly two shards&lt;&#x2F;strong&gt; (&lt;em&gt;and no more&lt;&#x2F;em&gt;)
from its &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; peers. Again, we use &lt;strong&gt;SPIFFE mTLS&lt;&#x2F;strong&gt; for secure
communication.&lt;&#x2F;p&gt;
&lt;p&gt;In the “&lt;em&gt;reconstruct&lt;&#x2F;em&gt;” phase (bottom-right):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; combines the two collected shards.&lt;&#x2F;li&gt;
&lt;li&gt;It uses &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;&lt;em&gt;Shamir Secret Recovery&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; to reconstruct the &lt;code&gt;rootKey&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;It uses the reconstructed key to configure the backing store encryption.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Again, here is a more detailed drill-down of this workflow:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Acquire Shards&lt;&#x2F;strong&gt;: &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; gathers &lt;strong&gt;exactly two shards&lt;&#x2F;strong&gt; from
&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s during the bootstrap phase. This is achieved through
authenticated requests over &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; connections.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Reconstruction&lt;&#x2F;strong&gt;: &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; uses &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;Shamir’s Secret Sharing
Algorithm&lt;&#x2F;a&gt; to reconstruct the &lt;code&gt;rootKey&lt;&#x2F;code&gt; from the collected shards.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Configure Backing Store&lt;&#x2F;strong&gt;: The reconstructed &lt;code&gt;rootKey&lt;&#x2F;code&gt; initializes the
backing store, securing it for further operations.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The following sections will dive deeper into the &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; and
&lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; workflows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-spike-keeper-workflow&quot;&gt;The SPIKE Keeper Workflow&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;initialization&quot;&gt;Initialization&lt;&#x2F;h3&gt;
&lt;p&gt;Each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; generates a random &lt;strong&gt;shard&lt;&#x2F;strong&gt; using a cryptographically
secure seed. Shards are distributed to other &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s using
&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; connections.&lt;&#x2F;p&gt;
&lt;p&gt;The following code snippet illustrates the initialization logic:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;RandomContribution&lt;&#x2F;span&gt;&lt;span&gt;() []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myContributionLock&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myContributionLock&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myContribution&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mySeed&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;crypto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Aes256Seed&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myContribution &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mySeed&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myContribution
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myContribution
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shard-contribution&quot;&gt;Shard Contribution&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s exchange shards with peers using authenticated requests.
The contribution process involves generating a random shard and sending it to
other &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s.&lt;&#x2F;p&gt;
&lt;p&gt;We use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;circl&quot;&gt;Cloudflare’s CIRCL library&lt;&#x2F;a&gt; for secret sharing. &lt;strong&gt;CIRCL&lt;&#x2F;strong&gt; is
a well-maintained, audited, and production-ready library that provides
efficient and secure secret sharing capabilities.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example of shard contribution logic:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Contribute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;workloadapi&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;X509Source&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Peers&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeeperId&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peers &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myId &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;contributeUrl&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;JoinPath&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peer&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;v1&#x2F;store&#x2F;contribute&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Failed to join path: &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ 
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt; 		}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;net&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreateMtlsClientWithPredicate&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;auth&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;IsKeeper&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;contribution &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;RandomContribution&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Shards&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Store&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myId&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;contribution&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;md&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Marshal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reqres&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ShardContributionRequest&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeeperId&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myId&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Shard&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StdEncoding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EncodeToString&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;contribution&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;		})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;net&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;contributeUrl&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;md&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;net&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;contributeUrl&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;md&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shard-validation&quot;&gt;Shard Validation&lt;&#x2F;h3&gt;
&lt;p&gt;Once enough shards are collected, &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; computes the final &lt;code&gt;rootKey&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After this, it computes &lt;strong&gt;Shamir Shares&lt;&#x2F;strong&gt; and discards the &lt;code&gt;rootKey&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After that, it also discards all but one of the &lt;strong&gt;Shamir Shares&lt;&#x2F;strong&gt; it computed
and retains only the one assigned to it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;WaitForShards&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Shards&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;++
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;		})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;too many shards&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Compute the final key.
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;computeFinalKey&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;		
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Compute the Shamir shares off of the final key.
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shares &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;computeShares&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Save only one shard from the shares and
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; discard everything else
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;setInternalShard&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shares&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Self-consistency check to ensure that
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; the reconstructed secret will match
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; the original secret.
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sanityCheck&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shares&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To create shares from the root key, we use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;circl&quot;&gt;Cloudflare’s CIRCL library&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here are the &lt;code&gt;computeFinalKey&lt;&#x2F;code&gt;, &lt;code&gt;computeShares&lt;&#x2F;code&gt;, &lt;code&gt;setInternalShard&lt;&#x2F;code&gt;, and
&lt;code&gt;sanityCheck&lt;&#x2F;code&gt; functions for the sake of completeness:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;computefinalkey&quot;&gt;computeFinalKey&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;computeFinalKey&lt;&#x2F;span&gt;&lt;span&gt;() []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Shards&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;++
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;.([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;^= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shard&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;	})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;computeFinalKey: Not all shards received&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;computeFinalKey: key size mismatch&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;computeshares&quot;&gt;computeShares&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;computeShares&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) (
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;group&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Scalar&lt;&#x2F;span&gt;&lt;span&gt;, []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsharing&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Share&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Initialize parameters
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;group&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;P256
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Need t+1 shares to reconstruct
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Total number of shares
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Create secret from your 32 byte key
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewScalar&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;UnmarshalBinary&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;computeShares: Failed to unmarshal key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ 
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;eerr&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Create deterministic random source using 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; the key itself as seed
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; You could use any other seed value for consistency
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;deterministicRand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;crypto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewDeterministicReader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Create shares
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ss &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsharing&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;deterministicRand&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ss&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Share&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;setinternalshard&quot;&gt;setInternalShard&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;setInternalShard&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shares &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsharing&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Share&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Sort the keys of env.Peers() alphabetically 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; for deterministic shard indexing.
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Peers&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peerKeys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peers&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peers &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peerKeys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peerKeys&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Strings&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peerKeys&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;KeeperId&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Find the index of the current SPIKE Keeper&amp;#39;s ID
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myShard &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;peerKeys &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myId &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Save the shard corresponding to this Keeper
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Shards&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Load&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myId&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myShard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span&gt;.([]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shareVal&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shares&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;				    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MarshalBinary&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SetShard&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shareVal&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;EraseIntermediateShards&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Ensure myShard is stored correctly in the state namespace
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;myShard &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;setInternalShard: id not found&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;sanitycheck&quot;&gt;sanityCheck&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;sanityCheck&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret group&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Scalar&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shares &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsharing&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Share&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;uint&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Need t+1 shares to reconstruct
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reconstructed&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsharing&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Recover&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shares&lt;&#x2F;span&gt;&lt;span&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;computeShares: Failed to recover: &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+ 
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;IsEqual&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reconstructed&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;FatalLn&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;computeShares: recovery failure&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;deterministic-randomness&quot;&gt;Deterministic Randomness&lt;&#x2F;h3&gt;
&lt;p&gt;The astute reader might notice that while computing the shards, we use a
deterministic random source, using the key itself as a seed. This is done to keep
the shard calculation consistent across all &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the relevant code snippet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;deterministicRand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;crypto&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewDeterministicReader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;finalKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ss &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsharing&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;deterministicRand&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here is how the &lt;code&gt;NewDeterministicReader&lt;&#x2F;code&gt; function looks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;DeterministicReader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pos  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;DeterministicReader&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Read&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Generate more deterministic data if needed
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sum256&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span&gt;[:]
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span&gt;:])
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;n
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;NewDeterministicReader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;seed &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;DeterministicReader &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sum256&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;seed&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DeterministicReader&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span&gt;[:],
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-nexus-workflow&quot;&gt;The Nexus Workflow&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;polling-keepers&quot;&gt;Polling Keepers&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; queries Keepers for shards using mTLS:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Tick&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;workloadapi&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;X509Source&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ticker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Ticker&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ticker&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;keepers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Peers&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardsCollected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;[][]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;keeperApiRoot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;keepers &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;				&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;JoinPath&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;keeperApiRoot&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;					&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;store&#x2F;shard&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:=&lt;&#x2F;span&gt;&lt;span&gt; \
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;net&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreateMtlsClientWithPredicate&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;auth&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;IsKeeper&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;md&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Marshal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reqres&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ShardRequest&lt;&#x2F;span&gt;&lt;span&gt;{})
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;net&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;md&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;res reqres&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ShardResponse
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Unmarshal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shard&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;. \
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StdEncoding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;DecodeString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Shard&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardsCollected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardsCollected&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shard&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                )
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardsCollected&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reconstructed&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;secretsharing&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Recover&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;shardsCollected&lt;&#x2F;span&gt;&lt;span&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;binaryRec&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;reconstructed&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MarshalBinary&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Initialize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;binaryRec&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;			}
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Done&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To reconstruct the secrets, we, again use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;circl&quot;&gt;Cloudflare’s CIRCL library&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is how the &lt;code&gt;state.Initialize()&lt;&#x2F;code&gt; and other related functions look, for
completeness:&lt;&#x2F;p&gt;
&lt;p&gt;Here is the &lt;code&gt;state.Initialize()&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Initialize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; No need for a lock; this method is called only 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; once during initial bootstrapping.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;persist&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;InitializeBackend&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here is the &lt;code&gt;persist.InitializeBackend()&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;InitializeBackend&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rootKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;backend&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Backend &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;backendMu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;backendMu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Log&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Info&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;initializeBackend&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;msg&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Initializing backend&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;storeType&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BackendStoreType&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;storeType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;BackendStoreType&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;storeType &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Memory&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NoopStore&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sqlite&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;InitializeSqliteBackend&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;rootKey&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NoopStore&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;threat-analysis&quot;&gt;Threat Analysis&lt;&#x2F;h2&gt;
&lt;p&gt;This system implements a sophisticated approach to root key management with
several layers of security:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;key-distribution-and-access&quot;&gt;Key Distribution and Access&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;spike-keepers&quot;&gt;SPIKE Keepers&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Generate and distribute shares of the root key.&lt;&#x2F;li&gt;
&lt;li&gt;Never have access to the complete key except transiently during initialization.&lt;&#x2F;li&gt;
&lt;li&gt;After setup, each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; retains only its own Shamir share, which is
not enough to reconstruct the root key.&lt;&#x2F;li&gt;
&lt;li&gt;All other key material is &lt;strong&gt;securely erased&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;spike-nexus&quot;&gt;SPIKE Nexus&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Reconstructs the root key from Shamir shares during initialization&lt;&#x2F;li&gt;
&lt;li&gt;Uses the key to configure SQLite (&lt;em&gt;or other backing store&lt;&#x2F;em&gt;) encryption&lt;&#x2F;li&gt;
&lt;li&gt;Has no programmatic interface to access the root key&lt;&#x2F;li&gt;
&lt;li&gt;The root key exists only in the SQLite driver’s memory space for encryption
operations.&lt;&#x2F;li&gt;
&lt;li&gt;The root key material is not directly accessible, even through the
application code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;randomness-in-shamir-s-secret-sharing&quot;&gt;Randomness in Shamir’s Secret Sharing&lt;&#x2F;h3&gt;
&lt;p&gt;At first glance, this might look like a security weakness, but it’s not.
Here’s why:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;entropy-source&quot;&gt;Entropy Source&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;finalKey&lt;&#x2F;code&gt; is derived from &lt;code&gt;XOR&lt;&#x2F;code&gt;ing multiple 32-byte random contributions&lt;&#x2F;li&gt;
&lt;li&gt;If at least one &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; provides true randomness, &lt;code&gt;finalKey&lt;&#x2F;code&gt; will be
random.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;32 bytes = 256 bits&lt;&#x2F;code&gt; of entropy  is cryptographically sufficient&lt;&#x2F;li&gt;
&lt;li&gt;Even in the unlikely event that some &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s are malicious, they
can’t predict or control the &lt;code&gt;finalKey&lt;&#x2F;code&gt; value as long as one
&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; is honest.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;independence&quot;&gt;Independence&lt;&#x2F;h4&gt;
&lt;p&gt;We’re using the same value (&lt;em&gt;i.e., &lt;code&gt;finalKey&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;) for both:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The secret that gets shared (via scalar conversion)&lt;&#x2F;li&gt;
&lt;li&gt;The seed for deterministic randomness in share generation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This coupling is okay because:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Shamir Secret Sharing algorithm’s security doesn’t depend on hiding the
secret value. In contrast, what matters is the unpredictability of share
generation&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;circl&quot;&gt;&lt;code&gt;CIRCL&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;’s implementation uses the deterministic random only for
generating polynomial coefficients.The coefficients need to be consistent
across keepers but don’t need to be independent from the secret.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;circl&quot;&gt;CIRCL’s implementation&lt;&#x2F;a&gt;, the deterministic random is used to generate
the polynomial coefficients. The security of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;Shamir’s Secret Sharing&lt;&#x2F;a&gt;
relies on the polynomial evaluation, &lt;strong&gt;not&lt;&#x2F;strong&gt; the “&lt;em&gt;security by obscurity&lt;&#x2F;em&gt;”
of hiding these coefficients. Therefore, as long as we have sufficient entropy
for unique evaluations, the scheme remains secure.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;security-properties&quot;&gt;Security Properties&lt;&#x2F;h3&gt;
&lt;p&gt;The system provides strong security through:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;access-control&quot;&gt;Access Control&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Requires multiple &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; shares for key reconstruction&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE workload attestation&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; ensures only legitimate instances
participate mTLS secures all network communication&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;key-protection&quot;&gt;Key Protection&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;No component retains the complete key in accessible form
&lt;ul&gt;
&lt;li&gt;The original root key is immediately discarded after sharing&lt;&#x2F;li&gt;
&lt;li&gt;Each Keeper only maintains knowledge of its own partition and discards the
rest&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;While the key exists in &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt;’s process memory for backing store
operations, accessing it would require:
&lt;ul&gt;
&lt;li&gt;Root privileges on the host system&lt;&#x2F;li&gt;
&lt;li&gt;Memory inspection capabilities&lt;&#x2F;li&gt;
&lt;li&gt;Ability to locate and extract key material from SQLite driver memory space&lt;&#x2F;li&gt;
&lt;li&gt;Sophisticated forensics tools&lt;&#x2F;li&gt;
&lt;li&gt;Knowledge of the SQLite encryption algorithm and key derivation process&lt;&#x2F;li&gt;
&lt;li&gt;Which makes it highly unlikely to compromise the root key&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In addition, &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; run on a hardened, secure host with
strict access controls, audit logging, and monitoring because &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;’s
threat model assumes that once an attacker has access to the host system,
the system’s security is already compromised.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spike.ist&#x2F;#&#x2F;architecture&#x2F;security-model&quot;&gt;In &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;’s security model&lt;&#x2F;a&gt;, the primary trust boundary is
at the machine level. Once the machine is compromised, hardening &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;
components will provide diminishing returns. In that regard, physical and
OS-level hardening is crucial.&lt;&#x2F;p&gt;
&lt;p&gt;In essence, the security model relies on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE workload attestation&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; to ensure only legitimate
&lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; instances can gather shares, and only legitimate &lt;strong&gt;SPIKE
Keeper&lt;&#x2F;strong&gt; instances can contribute shares.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Network isolation&lt;&#x2F;strong&gt; and &lt;strong&gt;mTLS&lt;&#x2F;strong&gt; to prevent unauthorized access&lt;&#x2F;li&gt;
&lt;li&gt;The requirement that an attacker would need to compromise multiple
&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s to reconstruct the key independently.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s never maintaining the complete root key except transiently
during initialization.&lt;&#x2F;li&gt;
&lt;li&gt;Each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; only knowing its own Shamir share after initialization,
which is not enough to reconstruct the root key.&lt;&#x2F;li&gt;
&lt;li&gt;Or compromise the &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; host and gain root access to try extracting
the root key from memory using sophisticated forensics tools,
searching for the key material in the SQLite driver memory space.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;compromise-resistance&quot;&gt;Compromise Resistance&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Compromising a single &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; yields only one share, which is
insufficient to reconstruct the root key.&lt;&#x2F;li&gt;
&lt;li&gt;Compromising &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; application code doesn’t expose the key.&lt;&#x2F;li&gt;
&lt;li&gt;It would require both multiple &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; compromises &lt;strong&gt;AND&lt;&#x2F;strong&gt;
system-level access to extract key material, which is a very high bar for
attackers and is highly unlikely to happen.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;secure-connectivity&quot;&gt;Secure Connectivity&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;SPIFFE mTLS&lt;&#x2F;a&gt; secures &lt;strong&gt;all communication channels&lt;&#x2F;strong&gt;, ensuring
&lt;strong&gt;identity verification&lt;&#x2F;strong&gt; and preventing eavesdropping or tampering.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;shamir-s-secret-sharing&quot;&gt;Shamir’s Secret Sharing&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;Shamir’s Secret Sharing&lt;&#x2F;a&gt; ensures the &lt;em&gt;root key&lt;&#x2F;em&gt; is divided into
multiple &lt;em&gt;shards&lt;&#x2F;em&gt;, with reconstruction requiring a predefined threshold of
shards. In &lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;’s implementation:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The root key is split into &lt;strong&gt;three&lt;&#x2F;strong&gt; shards (&lt;em&gt;configurable&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Reconstruction requires &lt;strong&gt;two out of three&lt;&#x2F;strong&gt; shards (&lt;em&gt;configurable&lt;&#x2F;em&gt;),
balancing &lt;strong&gt;redundancy&lt;&#x2F;strong&gt; and &lt;strong&gt;security&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This model ensures that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;No single &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; can compromise the root key.&lt;&#x2F;li&gt;
&lt;li&gt;Even if one &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; is compromised, the root key remains secure.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;zero-trust-principles&quot;&gt;Zero-Trust Principles&lt;&#x2F;h4&gt;
&lt;p&gt;This architecture adheres to the following &lt;strong&gt;zero-trust principles&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Least Privilege&lt;&#x2F;strong&gt;: &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s only manage their shards; they cannot
reconstruct the root key. During bootstrapping and disaster recovery, they may
require additional shards from their peer &lt;strong&gt;SPIKE Keepers&lt;&#x2F;strong&gt;. However, that
will be temporary, and the material will be securely erased once the operation
is complete.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Boundary Enforcement&lt;&#x2F;strong&gt;: It’s important to highlight that the &lt;strong&gt;root key never
leaves the network perimeter&lt;&#x2F;strong&gt;. Only shards cross the network boundary and
only through secure &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mutual_authentication&quot;&gt;&lt;strong&gt;mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; connections. Even in the very unlikely case
of a connection compromise, the shards are cryptographically secure and useless
without the other shards.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Identity-Based Access&lt;&#x2F;strong&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE SVIDs&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; are used to authenticate
and authorize all communications.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;spiffe-and-spire-integration&quot;&gt;SPIFFE and SPIRE Integration&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;SPIFFE Runtime Environment&lt;&#x2F;em&gt;) provides &lt;strong&gt;workload attestation&lt;&#x2F;strong&gt;
and &lt;strong&gt;identity issuance&lt;&#x2F;strong&gt;. Each &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt;
receive a unique &lt;em&gt;SPIFFE Verifiable Identity Document&lt;&#x2F;em&gt; (&lt;strong&gt;SVID&lt;&#x2F;strong&gt;), enabling:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Secure &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mutual_authentication&quot;&gt;&lt;strong&gt;mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; connections between components.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Workload identity attestation&lt;&#x2F;strong&gt; to ensure only authorized entities
participate in shard management.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;additional-security-measures&quot;&gt;Additional Security Measures&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mutual Authentication&lt;&#x2F;strong&gt;: Every interaction between &lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt;s and
&lt;strong&gt;SPIKE Nexus&lt;&#x2F;strong&gt; is secured by &lt;strong&gt;mTLS&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Shard Validation&lt;&#x2F;strong&gt;: Shards are validated before use to prevent malicious
tampering.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Sanity Checks&lt;&#x2F;strong&gt;: Reconstruction includes checks to ensure the recovered
secret matches expectations.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The architecture’s zero-trust design ensures that no single
&lt;strong&gt;SPIKE Keeper&lt;&#x2F;strong&gt; can compromise the &lt;code&gt;rootKey&lt;&#x2F;code&gt; while also providing
threshold-based reconstruction that balances redundancy with strict security.&lt;&#x2F;p&gt;
&lt;p&gt;Since the number of keepers and the minimum number of shares required for
reconstruction are configurable, this design can be adapted to the user’s risk
tolerance and security requirements.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;-based workload
attestation&lt;&#x2F;a&gt; and secure &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mutual_authentication&quot;&gt;&lt;strong&gt;mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; communication work together to
enhance the overall security posture.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt;’s &lt;strong&gt;Nexus&lt;&#x2F;strong&gt; and &lt;strong&gt;Keeper&lt;&#x2F;strong&gt; architecture exemplifies how modern
distributed systems can securely manage secrets without compromising
availability or scalability.&lt;&#x2F;p&gt;
&lt;p&gt;By leveraging &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;&lt;strong&gt;Shamir’s Secret Sharing&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
and a &lt;strong&gt;zero-trust&lt;&#x2F;strong&gt; design, we ensure that the root key, and, therefore, the
secrets, remain protected against a wide range of threats.&lt;&#x2F;p&gt;
&lt;p&gt;This approach is secure and pragmatic, offering a scalable solution for managing
and sharing sensitive material in any distributed system. So, the content
presented here can have applications beyond the use case covered in this article.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references-and-further-reading&quot;&gt;References and Further Reading&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;spike&quot;&gt;SPIKE&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spike.ist&#x2F;&quot;&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; Website&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spike&quot;&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; Source Code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spike.ist&#x2F;#&#x2F;architecture&#x2F;security-model&quot;&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; Security Model&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spike.ist&#x2F;#&#x2F;presentations&#x2F;README&quot;&gt;&lt;strong&gt;SPIKE&lt;&#x2F;strong&gt; Presentations and Demos&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;spiffe-and-spire&quot;&gt;SPIFFE and SPIRE&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spiffe-about&#x2F;spiffe-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; Concepts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;&quot;&gt;mTLS with &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;spire-rocks&#x2F;&quot;&gt;Setting Up &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; on &lt;strong&gt;EKS&lt;&#x2F;strong&gt; in Less Than Ten Minutes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;security-and-cryptography&quot;&gt;Security and Cryptography&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;Shamir’s Secret Sharing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;circl&quot;&gt;Cloudflare’s CIRCL Library&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Advanced_Encryption_Standard&quot;&gt;Advanced Encryption Standard (AES)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mutual_authentication&quot;&gt;Mutual Authentication (mTLS)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;XOR_cipher&quot;&gt;XOR Cipher&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Establishing SPIFFE Federation Between Kubernetes Clusters</title>
        <published>2024-12-16T00:00:00+00:00</published>
        <updated>2024-12-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/spiffe-federation/"/>
        <id>https://zerotohero.dev/inbox/spiffe-federation/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/spiffe-federation/">&lt;p&gt;SPIFFE (Secure Production Identity Framework For Everyone) provides a robust framework for service identity across distributed systems. When using SPIFFE with SPIRE (SPIFFE Runtime Environment) in Kubernetes clusters, it’s common to have multiple trust domains. To enable secure communication between these domains, you need to establish SPIFFE federation by exchanging and trusting each other’s trust bundles.&lt;&#x2F;p&gt;
&lt;p&gt;In this blog post, we’ll walk through the steps to establish SPIFFE federation between two Kubernetes clusters with separate trust domains.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;scenario-overview&quot;&gt;Scenario Overview&lt;&#x2F;h2&gt;
&lt;p&gt;Assume you have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Server A with a trust domain &lt;code&gt;trustdomainA&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Server B with a trust domain &lt;code&gt;trustdomainB&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Both servers are running SPIRE to manage identities. To enable federation, the servers need to exchange and trust each other’s trust bundles.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-1-export-the-trust-bundle&quot;&gt;Step 1: Export the Trust Bundle&lt;&#x2F;h2&gt;
&lt;p&gt;Each SPIRE server has its own trust bundle, which includes the root CA certificate for its trust domain. Start by exporting the trust bundle from Server B:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spire-server bundle show -format spiffe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This command will output the trust bundle for &lt;code&gt;trustdomainB&lt;&#x2F;code&gt; in SPIFFE format. Save this output to a file (e.g., &lt;code&gt;trust-bundleB.pem&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-2-configure-federation-in-server-a&quot;&gt;Step 2: Configure Federation in Server A&lt;&#x2F;h2&gt;
&lt;p&gt;Next, configure Server A to trust &lt;code&gt;trustdomainB&lt;&#x2F;code&gt;. To do this, you’ll use the exported trust bundle from Server B.&lt;&#x2F;p&gt;
&lt;p&gt;Add the trust bundle to Server A’s configuration:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spire-server bundle set -format spiffe -id spiffe:&#x2F;&#x2F;trustdomainB -path &#x2F;path&#x2F;to&#x2F;trust-bundleB.pem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This command tells Server A to trust the root CA from &lt;code&gt;trustdomainB&lt;&#x2F;code&gt;. Update Server A’s &lt;code&gt;spire-server.conf&lt;&#x2F;code&gt; file if needed to reflect the federation relationship with &lt;code&gt;trustdomainB&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-3-validate-the-trust-relationship&quot;&gt;Step 3: Validate the Trust Relationship&lt;&#x2F;h2&gt;
&lt;p&gt;After configuration, Server A will validate any SPIFFE identity (SVID) from &lt;code&gt;trustdomainB&lt;&#x2F;code&gt; by checking its signature against the root CA in the trust bundle.&lt;&#x2F;p&gt;
&lt;p&gt;When Server A encounters an identity from &lt;code&gt;trustdomainB&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It verifies the SVID’s signature&lt;&#x2F;li&gt;
&lt;li&gt;If the signature is valid and matches the root CA from &lt;code&gt;trustdomainB&lt;&#x2F;code&gt;, the identity is trusted&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;step-4-establish-bi-directional-trust-optional&quot;&gt;Step 4: Establish Bi-Directional Trust (Optional)&lt;&#x2F;h2&gt;
&lt;p&gt;If you want Server B to trust identities from &lt;code&gt;trustdomainA&lt;&#x2F;code&gt;, repeat the process in reverse:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Export the trust bundle from Server A:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spire-server bundle show -format spiffe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Configure Server B to trust the exported bundle by adding it to &lt;code&gt;trustdomainA&lt;&#x2F;code&gt;:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spire-server bundle set -format spiffe -id spiffe:&#x2F;&#x2F;trustdomainA -path &#x2F;path&#x2F;to&#x2F;trust-bundleA.pem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, both servers trust each other’s identities, enabling mutual federation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;key-considerations&quot;&gt;Key Considerations&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;bundle-rotation&quot;&gt;Bundle Rotation&lt;&#x2F;h3&gt;
&lt;p&gt;If the root CA in a trust domain is rotated, the updated trust bundle must be shared with the other server to maintain trust.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;unique-spiffe-ids&quot;&gt;Unique SPIFFE IDs&lt;&#x2F;h3&gt;
&lt;p&gt;Ensure that SPIFFE IDs are unique across trust domains to avoid collisions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;secure-transport&quot;&gt;Secure Transport&lt;&#x2F;h3&gt;
&lt;p&gt;Always exchange trust bundles securely to prevent tampering.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;By following these steps, you can establish SPIFFE federation between two Kubernetes clusters with distinct trust domains. This enables secure identity-based communication across distributed systems, a critical component for modern cloud-native applications.&lt;&#x2F;p&gt;
&lt;p&gt;SPIFFE federation simplifies the management of service identity across multiple clusters and trust domains, allowing you to focus on building secure and scalable applications.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Customizing SPIRE Agent SPIFFE IDs: A Deep Dive</title>
        <published>2024-12-02T00:00:00+00:00</published>
        <updated>2024-12-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/spire-agent-spiffeid/"/>
        <id>https://zerotohero.dev/inbox/spire-agent-spiffeid/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/spire-agent-spiffeid/">&lt;p&gt;When working with SPIRE (the SPIFFE Runtime Environment), you might notice that your agent SPIFFE IDs follow a standard pattern like &lt;code&gt;spiffe:&#x2F;&#x2F;trust-domain&#x2F;spire-agent&lt;&#x2F;code&gt;. But what if you need to customize this identifier? Let’s explore how SPIRE handles agent SPIFFE ID assignment and how you can configure it to meet your needs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;default-behavior&quot;&gt;Default Behavior&lt;&#x2F;h2&gt;
&lt;p&gt;By default, SPIRE Server generates agent SPIFFE IDs using a simple pattern:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;spiffe:&#x2F;&#x2F;{trust_domain}&#x2F;spire-agent
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For example, with a trust domain of &lt;code&gt;spike.ist&lt;&#x2F;code&gt;, you’ll see entries like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;Entry ID         : c3d0ecbf-38b1-4a0c-86ac-67d181503f9d
&lt;&#x2F;span&gt;&lt;span&gt;SPIFFE ID       : spiffe:&#x2F;&#x2F;spike.ist&#x2F;spire-agent
&lt;&#x2F;span&gt;&lt;span&gt;Parent ID       : spiffe:&#x2F;&#x2F;spike.ist&#x2F;spire&#x2F;agent&#x2F;join_token&#x2F;a098731b-14a8-4ef3-b2ff-b63c2cc9f985
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This default &lt;code&gt;&#x2F;spire-agent&lt;&#x2F;code&gt; path component is hard-coded in SPIRE Server when no custom configuration is provided.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;customizing-agent-spiffe-ids&quot;&gt;Customizing Agent SPIFFE IDs&lt;&#x2F;h2&gt;
&lt;p&gt;You can customize the agent SPIFFE ID path using the &lt;code&gt;agent_path_template&lt;&#x2F;code&gt; configuration option in your SPIRE Server configuration. Here’s how:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    trust_domain = &amp;quot;spike.ist&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    agent_path_template = &amp;quot;&#x2F;custom-agents&#x2F;{{ .AgentID }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    # ... other server configuration
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;available-template-variables&quot;&gt;Available Template Variables&lt;&#x2F;h3&gt;
&lt;p&gt;The template system supports different variables depending on your attestation method:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;with-x509-pop-attestation&quot;&gt;With X509 PoP Attestation&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.NodeName&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.AgentID&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.TrustDomain&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;with-join-token-attestation&quot;&gt;With Join Token Attestation&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.AgentID&lt;&#x2F;code&gt; (a UUID)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.TrustDomain&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note that join token attestation provides fewer variables since it doesn’t collect node-specific information during the attestation process.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example-templates&quot;&gt;Example Templates&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Using AgentID with join token attestation:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;agent_path_template = &amp;quot;&#x2F;nodes&#x2F;{{ .AgentID }}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;# Results in: spiffe:&#x2F;&#x2F;spike.ist&#x2F;nodes&#x2F;c3d0ecbf-38b1-4a0c-86ac-67d181503f9d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Combining multiple path components:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;agent_path_template = &amp;quot;&#x2F;datacenter&#x2F;primary&#x2F;agent&#x2F;{{ .AgentID }}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;considerations&quot;&gt;Considerations&lt;&#x2F;h2&gt;
&lt;p&gt;When choosing your agent path template:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Consider the attestation method you’re using and available variables&lt;&#x2F;li&gt;
&lt;li&gt;Ensure the template will generate unique identifiers for each agent&lt;&#x2F;li&gt;
&lt;li&gt;Keep the paths meaningful and organized for your environment&lt;&#x2F;li&gt;
&lt;li&gt;Remember that changing the template will affect new agent registrations, not existing ones&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;While SPIRE provides a sensible default for agent SPIFFE IDs, the ability to customize them using &lt;code&gt;agent_path_template&lt;&#x2F;code&gt; gives you flexibility in organizing and identifying your agents. Whether you’re using X509 PoP or join token attestation, you can create a naming scheme that fits your infrastructure’s needs.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Securely Generating and Storing SPIRE Agent Tokens</title>
        <published>2024-12-02T00:00:00+00:00</published>
        <updated>2024-12-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/spire-agent-token-generation/"/>
        <id>https://zerotohero.dev/inbox/spire-agent-token-generation/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/spire-agent-token-generation/">&lt;p&gt;SPIRE (the SPIFFE Runtime Environment) requires tokens for agent authentication. Here’s a secure way to generate and store these tokens using bash scripting.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;When working with SPIRE, we often need to generate agent tokens and store them for later use. The default &lt;code&gt;spire-server token generate&lt;&#x2F;code&gt; command outputs tokens with a “Token: “ prefix, which isn’t always ideal for automation or direct use in configuration files.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s a bash script that generates a SPIRE agent token, strips unnecessary prefixes, and stores it securely:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#    \\ SPIKE: Keep your secrets secret with SPIFFE.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;#  \\\\\ Copyright 2024-present SPIKE contributors.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# \\\\\\\ SPDX-License-Identifier: Apache-2.0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TOKEN_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;agent-token.txt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Generate token and strip the &amp;quot;Token: &amp;quot; prefix
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spire-server token generate -spiffeID spiffe:&#x2F;&#x2F;spike.ist&#x2F;spire-agent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;#39;s&#x2F;^Token: &#x2F;&#x2F;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TOKEN_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: Failed to generate token&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Verify file was created and is not empty
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;-s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TOKEN_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Error: Token file is empty or was not created&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;# Set restrictive permissions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;chmod 600 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TOKEN_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Token successfully generated and saved to $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;TOKEN_FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;How It Works&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Token Generation&lt;&#x2F;strong&gt;: The script uses &lt;code&gt;spire-server token generate&lt;&#x2F;code&gt; to create a new token with a specific SPIFFE ID.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Text Processing&lt;&#x2F;strong&gt;: A &lt;code&gt;sed&lt;&#x2F;code&gt; command strips the “Token: “ prefix from the output:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x27;s&#x2F;^Token: &#x2F;&#x2F;&#x27;&lt;&#x2F;code&gt; replaces “Token: “ at the start of the line with nothing&lt;&#x2F;li&gt;
&lt;li&gt;The clean token is then redirected to the output file&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Error Handling&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Checks if token generation succeeded&lt;&#x2F;li&gt;
&lt;li&gt;Verifies the output file exists and isn’t empty&lt;&#x2F;li&gt;
&lt;li&gt;Returns meaningful error messages&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Security&lt;&#x2F;strong&gt;: Sets file permissions to 600 (read&#x2F;write for owner only) to protect the token&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Save the script as &lt;code&gt;generate-agent-token.sh&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Make it executable: &lt;code&gt;chmod +x generate-agent-token.sh&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Run it: &lt;code&gt;.&#x2F;generate-agent-token.sh&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The token will be saved in &lt;code&gt;agent-token.txt&lt;&#x2F;code&gt; in the current directory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;best-practices&quot;&gt;Best Practices&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Always use restrictive file permissions for token files&lt;&#x2F;li&gt;
&lt;li&gt;Store tokens in a secure location&lt;&#x2F;li&gt;
&lt;li&gt;Never commit tokens to version control&lt;&#x2F;li&gt;
&lt;li&gt;Consider using environment variables or secure vaults for production environments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This script provides a secure and automated way to generate and store SPIRE agent tokens. By removing the prefix and implementing proper error handling, it makes token management more reliable and automation-friendly.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding SPIFFE Source Management in go-spiffe</title>
        <published>2024-12-01T00:00:00+00:00</published>
        <updated>2024-12-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/go-spiffe-source/"/>
        <id>https://zerotohero.dev/inbox/go-spiffe-source/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/go-spiffe-source/">&lt;p&gt;When working with the go-spiffe library, one common question developers face is how to properly manage SPIFFE sources. Specifically, should you create a new source for each request, or can you maintain a long-living source? Let’s dive into how source management works in go-spiffe and explore best practices for your applications.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-lifecycle-of-a-spiffe-source&quot;&gt;The Lifecycle of a SPIFFE Source&lt;&#x2F;h2&gt;
&lt;p&gt;A SPIFFE source, created using &lt;code&gt;workloadapi.NewX509Source()&lt;&#x2F;code&gt;, is designed to be a long-living component in your application. When you create a source, several important things happen behind the scenes:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The source establishes a streaming connection to the Workload API&lt;&#x2F;li&gt;
&lt;li&gt;It automatically receives and caches X.509-SVID updates&lt;&#x2F;li&gt;
&lt;li&gt;It maintains the connection and handles credential rotation&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;best-practices-for-source-management&quot;&gt;Best Practices for Source Management&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s how you should typically set up a source in your application:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cancel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;WithTimeout&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Background&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;cancel&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;workloadapi&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewX509Source&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Fatal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Use the source throughout your application&amp;#39;s lifetime
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;do-s&quot;&gt;Do’s:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Create the source once during application startup&lt;&#x2F;li&gt;
&lt;li&gt;Reuse the same source throughout your application’s lifetime&lt;&#x2F;li&gt;
&lt;li&gt;Close the source when shutting down your application&lt;&#x2F;li&gt;
&lt;li&gt;Handle errors appropriately during source creation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;don-ts&quot;&gt;Don’ts:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Don’t create and close sources for each request&lt;&#x2F;li&gt;
&lt;li&gt;Avoid creating multiple unnecessary sources&lt;&#x2F;li&gt;
&lt;li&gt;Don’t ignore source cleanup on application shutdown&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why-long-living-sources-matter&quot;&gt;Why Long-Living Sources Matter&lt;&#x2F;h2&gt;
&lt;p&gt;The streaming connection maintained by the source ensures that your application always has valid credentials. The library handles all the complexity of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Certificate rotation&lt;&#x2F;li&gt;
&lt;li&gt;Trust bundle updates&lt;&#x2F;li&gt;
&lt;li&gt;Connection maintenance&lt;&#x2F;li&gt;
&lt;li&gt;Automatic retry on failures&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This means you don’t need to worry about manually refreshing credentials or managing trust material updates. The library takes care of all of this for you.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;common-pitfalls&quot;&gt;Common Pitfalls&lt;&#x2F;h2&gt;
&lt;p&gt;One common mistake is creating a new source for each request. This is inefficient and can lead to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unnecessary connection overhead&lt;&#x2F;li&gt;
&lt;li&gt;Increased latency in your applications&lt;&#x2F;li&gt;
&lt;li&gt;Higher resource utilization&lt;&#x2F;li&gt;
&lt;li&gt;Potential rate limiting from the Workload API&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Understanding how to properly manage SPIFFE sources is crucial for building reliable applications with go-spiffe. By following these best practices, you can ensure your application handles identity and authentication efficiently and securely.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: create your source once, use it throughout your application’s lifetime, and let go-spiffe handle the complex task of managing your identity credentials.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;Note: This post assumes familiarity with basic SPIFFE concepts and the go-spiffe library. For more information about SPIFFE and go-spiffe, visit the official documentation.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>SPIFFE IDs and Human Identity: Bridging the Gapl</title>
        <published>2024-11-27T00:00:00+00:00</published>
        <updated>2024-11-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/spiffe-human-identity/"/>
        <id>https://zerotohero.dev/inbox/spiffe-human-identity/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/spiffe-human-identity/">&lt;h1 id=&quot;&quot;&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;In the world of zero-trust security and service mesh architectures, SPIFFE (Secure Production Identity Framework for Everyone) has emerged as a crucial standard for managing workload identities. However, a common question arises: How do you handle human identity in a SPIFFE-based system?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;understanding-the-challenge&quot;&gt;Understanding the Challenge&lt;&#x2F;h2&gt;
&lt;p&gt;SPIFFE was designed specifically for machine-to-machine authentication and workload identity. It provides a standardized way to identify and authenticate workloads across different platforms and environments. However, human identity management presents unique challenges and requirements that don’t perfectly align with SPIFFE’s primary use case.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;potential-approaches&quot;&gt;Potential Approaches&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s explore several approaches to bridge the gap between human identity and SPIFFE-based systems.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-workload-based-approach&quot;&gt;1. Workload-Based Approach&lt;&#x2F;h3&gt;
&lt;p&gt;The most straightforward solution is to keep human identity separate and focus on assigning SPIFFE IDs to the services that humans interact with. In this model:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;User-facing services receive SPIFFE IDs&lt;&#x2F;li&gt;
&lt;li&gt;Human authentication is handled by these services&lt;&#x2F;li&gt;
&lt;li&gt;The services then interact with other workloads using their SPIFFE identities&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For example, a web portal might have a SPIFFE ID like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;spiffe:&#x2F;&#x2F;domain.com&#x2F;portal&#x2F;user-auth-service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach maintains a clear separation between human identity management and workload identity.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-identity-provider-integration&quot;&gt;2. Identity Provider Integration&lt;&#x2F;h3&gt;
&lt;p&gt;Another approach involves creating a bridge between existing Identity Provider (IdP) systems and SPIFFE-based workloads:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Keep human authentication in traditional IdP systems&lt;&#x2F;li&gt;
&lt;li&gt;Implement a bridge service with a SPIFFE ID&lt;&#x2F;li&gt;
&lt;li&gt;The bridge service validates human credentials and facilitates access to SPIFFE-authenticated services&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A bridge service might have a SPIFFE ID like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;spiffe:&#x2F;&#x2F;domain.com&#x2F;auth&#x2F;human-idp-bridge
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach leverages existing IAM infrastructure while enabling integration with SPIFFE-based systems.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-federated-identity-not-recommended&quot;&gt;3. Federated Identity (Not Recommended)&lt;&#x2F;h3&gt;
&lt;p&gt;While it’s technically possible to represent humans using SPIFFE IDs by creating a special trust domain:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#fdf4c1aa;&quot;&gt;&lt;code&gt;&lt;span&gt;spiffe:&#x2F;&#x2F;humans.domain.com&#x2F;users&#x2F;username
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This approach is generally not recommended because:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It goes against SPIFFE’s intended design&lt;&#x2F;li&gt;
&lt;li&gt;It lacks support for human-specific identity management features&lt;&#x2F;li&gt;
&lt;li&gt;It might create confusion between human and workload identities&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;best-practices-and-recommendations&quot;&gt;Best Practices and Recommendations&lt;&#x2F;h2&gt;
&lt;p&gt;When dealing with human identity in SPIFFE-based systems:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Keep human authentication separate from workload identity&lt;&#x2F;li&gt;
&lt;li&gt;Use established IAM solutions for human identity management&lt;&#x2F;li&gt;
&lt;li&gt;Focus SPIFFE IDs on the services and workloads that humans interact with&lt;&#x2F;li&gt;
&lt;li&gt;Implement proper access controls at the service level&lt;&#x2F;li&gt;
&lt;li&gt;Maintain clear documentation about how human identity maps to workload access&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;While SPIFFE provides excellent solutions for workload identity, it’s important to recognize its limitations when it comes to human identity management. Instead of trying to force human identity into SPIFFE, focus on building proper integrations between human IAM systems and SPIFFE-authenticated workloads.&lt;&#x2F;p&gt;
&lt;p&gt;By maintaining this separation while building proper bridges between systems, you can create a robust and secure identity management system that serves both human and machine authentication needs effectively.&lt;&#x2F;p&gt;
&lt;p&gt;Remember: The goal isn’t to make SPIFFE handle human identity, but rather to create a cohesive system where human and workload identity management work together seamlessly.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Building an ACL System for SPIFFE-based Secrets Store</title>
        <published>2024-11-24T00:00:00+00:00</published>
        <updated>2024-11-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/inbox/spiffe-acl/"/>
        <id>https://zerotohero.dev/inbox/spiffe-acl/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/inbox/spiffe-acl/">&lt;p&gt;Managing secrets in a microservices environment is challenging. While tools like HashiCorp Vault are excellent, sometimes you need a lighter solution that integrates deeply with your existing SPIFFE-based identity system. In this post, we’ll build an ACL (Access Control List) system for a SPIFFE-aware secrets store.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;In a SPIFFE-enabled infrastructure, each workload has a unique SPIFFE ID. For example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spiffe:&#x2F;&#x2F;example.org&#x2F;web-server&#x2F;prod&#x2F;001&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;spiffe:&#x2F;&#x2F;example.org&#x2F;payment-service&#x2F;staging&#x2F;002&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These IDs authenticate workloads, but we need authorization too. Which secrets can each workload access? How do we manage these permissions at scale?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;design-goals&quot;&gt;Design Goals&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Pattern-Based Access&lt;&#x2F;strong&gt;: Allow policies using SPIFFE ID patterns and path patterns&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Simple but Powerful&lt;&#x2F;strong&gt;: Keep the API simple while supporting complex use cases&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Integration Ready&lt;&#x2F;strong&gt;: Easy to integrate with existing SPIFFE&#x2F;SPIRE deployments&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Developer Friendly&lt;&#x2F;strong&gt;: Clear API design with intuitive client usage&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;api-design&quot;&gt;API Design&lt;&#x2F;h2&gt;
&lt;p&gt;We’ll organize our API endpoints logically:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Authentication endpoints
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlAuthInit  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;auth&#x2F;init&amp;quot;     
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlAuthLogin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;auth&#x2F;login&amp;quot;    
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Store endpoints
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlStoreSecrets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;store&#x2F;secrets&amp;quot;          
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlStoreSecret  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;store&#x2F;secrets&#x2F;{path:*}&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlStoreList    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;store&#x2F;list&#x2F;{path:*}&amp;quot;    
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Access Control endpoints
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlAclPolicies   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;store&#x2F;acl&#x2F;policies&amp;quot;      
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlAclPolicyByID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;store&#x2F;acl&#x2F;policies&#x2F;{id}&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;urlAclCheck      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&#x2F;v1&#x2F;store&#x2F;acl&#x2F;check&amp;quot;         
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;core-components&quot;&gt;Core Components&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-policy-definition&quot;&gt;1. Policy Definition&lt;&#x2F;h3&gt;
&lt;p&gt;A policy connects SPIFFE ID patterns to secret paths:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Policy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ID              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;id&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;name&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SpiffeIDPattern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;spiffe_id_pattern&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PathPattern     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;path_pattern&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Permissions     &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;permissions&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreatedAt       time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;created_at&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreatedBy       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;`json:&amp;quot;created_by&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Example policy:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;web-servers-prod&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spiffe_id_pattern&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spiffe:&#x2F;&#x2F;example.org&#x2F;web-server&#x2F;prod&#x2F;.*&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;path_pattern&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;secrets&#x2F;web&#x2F;prod&#x2F;*&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;permissions&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;read&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;list&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-server-implementation&quot;&gt;2. Server Implementation&lt;&#x2F;h3&gt;
&lt;p&gt;The server handles policy management and access checking:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ACLService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policies sync&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Map
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ACLService&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;CheckAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ResponseWriter&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Request&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;CheckAccessRequest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewDecoder&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Body&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Decode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Error&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;StatusBadRequest&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matchingPolicies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;allowed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policies&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span&gt;{}) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Policy&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Check SPIFFE ID pattern
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matched&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;regexp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MatchString&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SpiffeIDPattern&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SpiffeID&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;|| !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matched &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Check path pattern
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matched&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Match&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PathPattern&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matched &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Check permissions
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;perm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Permissions &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;perm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Action &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matchingPolicies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matchingPolicies&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;allowed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewEncoder&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Encode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CheckAccessResponse&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Allowed&lt;&#x2F;span&gt;&lt;span&gt;:          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;allowed&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;MatchingPolicies&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;matchingPolicies&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-client-sdk&quot;&gt;3. Client SDK&lt;&#x2F;h3&gt;
&lt;p&gt;A clean client SDK makes integration easy:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;ACLClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;baseURL    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;httpClient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Client
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;ACLClient&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;CheckAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spiffeID&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;action &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;CheckAccessResponse&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CheckAccessRequest&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SpiffeID&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;spiffeID&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;:     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Action&lt;&#x2F;span&gt;&lt;span&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Marshal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;marshaling request: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;httpReq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewRequestWithContext&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;POST&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&#x2F;v1&#x2F;store&#x2F;acl&#x2F;check&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;baseURL&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewReader&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Errorf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;creating request: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; ... handle response ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;usage-examples&quot;&gt;Usage Examples&lt;&#x2F;h2&gt;
&lt;p&gt;Here’s how to use the system:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Create a policy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NewACLClient&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;localhost:8080&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;policy&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreatePolicy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CreatePolicyRequest&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;:            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;web-servers&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;SpiffeIDPattern&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spiffe:&#x2F;&#x2F;example.org&#x2F;web-server&#x2F;.*&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;PathPattern&lt;&#x2F;span&gt;&lt;span&gt;:     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;secrets&#x2F;web&#x2F;*&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Permissions&lt;&#x2F;span&gt;&lt;span&gt;:     []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;read&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;list&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; Check access
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;resp&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;CheckAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;spiffe:&#x2F;&#x2F;example.org&#x2F;web-server&#x2F;001&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;secrets&#x2F;web&#x2F;config&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;read&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Access allowed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;\n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;resp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Allowed&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;production-considerations&quot;&gt;Production Considerations&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;&#x2F;strong&gt;: Replace &lt;code&gt;sync.Map&lt;&#x2F;code&gt; with a proper database&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Caching&lt;&#x2F;strong&gt;: Add policy cache with TTL&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Monitoring&lt;&#x2F;strong&gt;: Add metrics for policy evaluations&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Audit Logging&lt;&#x2F;strong&gt;: Log all access checks&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Rate Limiting&lt;&#x2F;strong&gt;: Protect the API from abuse&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;security-considerations&quot;&gt;Security Considerations&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Pattern Validation&lt;&#x2F;strong&gt;: Validate SPIFFE ID patterns strictly&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Least Privilege&lt;&#x2F;strong&gt;: Start with minimal permissions&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Policy Versioning&lt;&#x2F;strong&gt;: Consider versioning policies&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Audit Trail&lt;&#x2F;strong&gt;: Log all policy changes&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Regular Reviews&lt;&#x2F;strong&gt;: Implement policy review processes&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This SPIFFE-aware ACL system provides a solid foundation for securing your secrets store. It’s simple enough to understand quickly but flexible enough to handle complex access patterns. The pattern-based matching makes it easy to manage permissions at scale.&lt;&#x2F;p&gt;
&lt;p&gt;Remember to adapt the implementation based on your specific needs. You might want to add features like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Policy inheritance&lt;&#x2F;li&gt;
&lt;li&gt;Temporary access grants&lt;&#x2F;li&gt;
&lt;li&gt;More sophisticated pattern matching&lt;&#x2F;li&gt;
&lt;li&gt;Integration with external policy engines&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The complete code is available in the examples above. Feel free to use and modify it for your needs!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;This post is part of our series on SPIFFE-based infrastructure. Stay tuned for more posts about secrets management, workload identity, and secure service-to-service communication.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Keep Your Secrets... Secret: Introducing VMware Secrets Manager</title>
        <published>2023-08-16T00:00:00+00:00</published>
        <updated>2023-08-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/keep-your-secrets/"/>
        <id>https://zerotohero.dev/top-of-mind/keep-your-secrets/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/keep-your-secrets/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;VSecM-1.png&quot; alt=&quot;Keep Your Secrets… Secret: Introducing VMware Secrets Manager&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the ever-evolving landscape of cloud-native applications, secrets management
is critical to ensuring sensitive information’s security and integrity. While
several solutions are available, the recent shift in HashiCorp’s licensing
towards a Business Source License (BSL) has raised concerns and sparked
discussions within the community.&lt;&#x2F;p&gt;
&lt;p&gt;As the lead architect of &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;&lt;strong&gt;VMware Secrets Manager&lt;&#x2F;strong&gt; (&lt;strong&gt;&lt;em&gt;VSecM&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;)&lt;&#x2F;a&gt;,
I’d like to take this opportunity to introduce our solution, which offers a robust,
flexible, and &lt;strong&gt;permissive&lt;&#x2F;strong&gt; alternative to HashiCorp’s Vault.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;⭐️ Star Us on GitHub ⭐️&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you find value in our approach and want to help others discover this
outstanding technology, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vmware-tanzu&#x2F;secrets-manager&quot;&gt;&lt;strong&gt;star our GitHub
repository&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. Your support helps
increase visibility and encourages more collaboration and innovation within the
community.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;a-new-licensing-landscape&quot;&gt;A New Licensing Landscape&lt;&#x2F;h2&gt;
&lt;p&gt;HashiCorp’s decision to adopt a Business Source License has been viewed by some
as a restrictive move. The BSL, unlike open-source licenses, imposes certain
limitations and conditions that may not align with the needs and values of all
organizations and developers.&lt;&#x2F;p&gt;
&lt;p&gt;In contrast, &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;&lt;strong&gt;VMware Secrets Manager&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is licensed under
the BSD 2-Clause License, a permissive open-source license that encourages
collaboration, innovation, and freedom of use.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vmware-secrets-manager-a-closer-look&quot;&gt;VMware Secrets Manager: A Closer Look&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;VSecM&lt;&#x2F;strong&gt; is designed with modern developers and DevOps professionals in mind.
Here’s why it stands out:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ease of Use&lt;&#x2F;strong&gt;: With a &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;quickstart&#x2F;&quot;&gt;&lt;strong&gt;Quickstart Guide&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,
intuitive &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;cli&#x2F;&quot;&gt;&lt;strong&gt;CLI&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, and developer-friendly
&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;sdk&#x2F;&quot;&gt;&lt;strong&gt;SDK&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, &lt;strong&gt;VSecM&lt;&#x2F;strong&gt; simplifies secrets management
without compromising security.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes Is a First-Class Citizen&lt;&#x2F;strong&gt;: &lt;strong&gt;VSecM&lt;&#x2F;strong&gt; seamlessly integrates with
Kubernetes, leveraging &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
for authentication and offering flexible secret storage and transformation
options.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Community Engagement&lt;&#x2F;strong&gt;: We believe in open collaboration and
community-driven development. Our &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;contributing&#x2F;&quot;&gt;&lt;strong&gt;Contributing Guide&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
invites developers to get involved, ask questions, and contribute to the project.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Secure by Default&lt;&#x2F;strong&gt;: &lt;strong&gt;VSecM&lt;&#x2F;strong&gt; offers advanced security features, including
encryption, manual master secret setting, and integration with various backing
stores.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;join-the-future-of-secrets-management&quot;&gt;Join the Future of Secrets Management&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;VMware Secrets Manager&lt;&#x2F;strong&gt; is more than just a tool; it’s a community-driven
project that aims to redefine secrets management in a cloud-native world. We
invite you to explore &lt;strong&gt;VSecM&lt;&#x2F;strong&gt;, contribute to its growth, and join us in
shaping the future of secure and resilient applications.&lt;&#x2F;p&gt;
&lt;p&gt;Whether you’re a developer looking to contribute or an organization seeking a
flexible and secure solution for secrets management, &lt;strong&gt;VSecM&lt;&#x2F;strong&gt; offers a
welcoming and innovative platform.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;this-is-just-the-beginning-a-vision-for-the-future&quot;&gt;This is Just the Beginning: A Vision for the Future&lt;&#x2F;h3&gt;
&lt;p&gt;At &lt;strong&gt;VMware Secrets Manager&lt;&#x2F;strong&gt;, we believe in continuous innovation and growth.
Our &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;roadmap&quot;&gt;&lt;strong&gt;roadmap&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is a testament to our
commitment to delivering cutting-edge solutions that meet the evolving needs of
the cloud-native community.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s a glimpse of what’s on the horizon:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stability and Usability Enhancements&lt;&#x2F;strong&gt;: Upcoming releases focus on improving
stability, documentation, build automation, and overall user experience.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Innovative Features&lt;&#x2F;strong&gt;: From Secretless VSecM to machine-readable logs,
performance improvements, and large-scale secret ingestion, we’re pushing the
boundaries of what’s possible in secrets management.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Integration and Compatibility&lt;&#x2F;strong&gt;: Future iterations include integration with
AWS KMS, Azure Key Vault, Google Cloud KMS, and even HashiCorp Vault,
expanding the reach and compatibility of VSecM.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Community Development and Collaboration&lt;&#x2F;strong&gt;: We’re investing in community
development efforts, multi-cluster secret federation, and creating
abstractions to make cloud integrations easier.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Our roadmap is not just a plan; it’s a promise to our users and contributors
that we have a lot planned for the future of VMware Secrets Manager. We’re
excited about the journey ahead and invite you to be a part of it.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;⭐️ Star Us on GitHub ⭐️&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you find value in our approach and want to help others discover this
outstanding technology, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vmware-tanzu&#x2F;secrets-manager&quot;&gt;&lt;strong&gt;star our GitHub repository&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
Your support helps increase visibility and encourages more collaboration and
innovation within the community.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;help-us-shape-the-future&quot;&gt;Help Us Shape the Future&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;&lt;strong&gt;Start your journey with VMware Secrets Manager today&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
and unlock the potential of cloud-native secrets management.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Keep Your Secrets… Secret&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;vmware-secrets-manager&#x2F;&quot;&gt;Long Live Aegis!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Long Live Aegis!</title>
        <published>2023-08-03T00:00:00+00:00</published>
        <updated>2023-08-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/top-of-mind/vmware-secrets-manager/"/>
        <id>https://zerotohero.dev/top-of-mind/vmware-secrets-manager/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/top-of-mind/vmware-secrets-manager/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;aegis.png&quot; alt=&quot;Long Live Aegis!&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Dear community,&lt;&#x2F;p&gt;
&lt;p&gt;I am thrilled to share an update with all of you. &lt;strong&gt;Aegis&lt;&#x2F;strong&gt; has transformed and
landed into its new home! It is now entering a phase as **VMware Secrets Manager
** for Cloud-Native workloads!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vmware-tanzu&#x2F;secrets-manager&quot;&gt;Please learn more about our project in the repository
following this link&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Also, &lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;&quot;&gt;stay updated with us on our website at &lt;strong&gt;vsecm.com&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;coming-up-next&quot;&gt;Coming Up Next&lt;&#x2F;h2&gt;
&lt;p&gt;This change represents more than just a new name. It symbolizes our unwavering
dedication to pushing boundaries, fostering innovation, and delivering reliable
solutions for your cloud-native workloads.&lt;&#x2F;p&gt;
&lt;p&gt;As things settle down, we’re already busy planning our steps. You can keep track
of our progress.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;roadmap&#x2F;&quot;&gt;Follow our plans in our roadmap page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We aim to provide how the project will proceed as transparently as possible. Of
course, our contribution cadence and frequency depend on the availability and
commitment of our core contributors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;stronger-together&quot;&gt;Stronger Together&lt;&#x2F;h2&gt;
&lt;p&gt;While Aegis has served us well, &lt;strong&gt;VMware Secrets Manager&lt;&#x2F;strong&gt; under VMware Tanzu
GitHub organization opens up possibilities. It brings us closer to fulfilling
our promise of offering you an efficient, secure, and cutting-edge cloud-native
Secrets Management solution.&lt;&#x2F;p&gt;
&lt;p&gt;We are thrilled about this chapter and eagerly anticipate serving you, our
community, as we move forward. Your contributions and feedback mean the world to
us.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;who-else-wants-to-contribute&quot;&gt;Who Else Wants to Contribute?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vsecm.com&#x2F;docs&#x2F;community&#x2F;&quot;&gt;Feel free to reach out if you’re interested in contributing to &lt;strong&gt;VMware Secrets
Manager&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Stay tuned for updates and developments as we continue on this journey.&lt;&#x2F;p&gt;
&lt;p&gt;Thank you very much for your support!&lt;&#x2F;p&gt;
&lt;p&gt;Turtle power 🐢⚡️.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;catch-22&#x2F;&quot;&gt;Catch 22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;consume-less&#x2F;&quot;&gt;Consume Less&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;craft-captivating-documentation&#x2F;&quot;&gt;Craft Captivating Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;keep-your-secrets&#x2F;&quot;&gt;Keep Your Secrets… Secret&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;later-does-not-exist&#x2F;&quot;&gt;‘Later’ Does Not Exist&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;perception-pivot&#x2F;&quot;&gt;Transform Feedback into Professional Mastery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;probing-questions&#x2F;&quot;&gt;Embracing Daily Reflection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;psst-you-dont-have-to-use-medium&#x2F;&quot;&gt;Psst… You Don’t Have to Use Medium&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;reshape-your-workspace&#x2F;&quot;&gt;Reshape Your Workspace, Reshape Your Future&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;secrets&#x2F;&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;the-dream-job&#x2F;&quot;&gt;Build Strong Connections to Land Your Dream Job&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;trust&#x2F;&quot;&gt;Trust Cultivates a Cohesive Team&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Long Live Aegis!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;write-to-forget&#x2F;&quot;&gt;Write to Forget&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;closure&#x2F;&quot;&gt;Closure&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;top-of-mind&#x2F;new-z2h-design&#x2F;&quot;&gt;The New Zero to Hero Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE</title>
        <published>2022-10-19T00:00:00+00:00</published>
        <updated>2022-10-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/register/"/>
        <id>https://zerotohero.dev/spire/mtls/register/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/register/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;mutual-1.png&quot; alt=&quot;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;For SPIRE to be able to attest workloads and distribute &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s to them, we’ll
have to register the nodes and the workloads to &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;. That’s what this
section is all about.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;MsfArABWs9E?si=JHzL1tHkBc9e-XHe&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Concepts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spire&#x2F;blob&#x2F;main&#x2F;support&#x2F;k8s&#x2F;k8s-workload-registrar&#x2F;README.md&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Kubernetes Workload Registrar&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spire-controller-manager&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Controller Manager&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 6: Rolling out SPIRE to the Cluster</title>
        <published>2022-10-19T00:00:00+00:00</published>
        <updated>2022-10-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/rollout/"/>
        <id>https://zerotohero.dev/spire/mtls/rollout/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/rollout/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;secure.png&quot; alt=&quot;mTLS With SPIRE: Part 6: Rolling out SPIRE to the Clusters&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 6: Rolling out SPIRE to the Clusters&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;To establish an identity control plane, we’ll need &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;. This section will
deploy &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; to the clusters.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;e4ZW022OBOE?si=B5cL8hs9e1WDAvl6&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 6: Rolling out SPIRE to the Clusters&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 6: Rolling out SPIRE to the Clusters&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Concepts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;try&#x2F;getting-started-k8s&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Kubernetes Quickstart&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;deploying&#x2F;spire_server&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Server Configuration Reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 5: Containerizing the Client App</title>
        <published>2022-08-19T00:00:00+00:00</published>
        <updated>2022-08-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/bundle-client/"/>
        <id>https://zerotohero.dev/spire/mtls/bundle-client/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/bundle-client/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;severcloud.png&quot; alt=&quot;mTLS With SPIRE: Part 5: Containerizing the Client App&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We’ll continue creating creating container images and deploying the client app
to the cluster too, then observe how the client and server communicate with each
other within the pods.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;tpxRI7XuctE?si=_ao-WI6Hd3wAKdLm&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 5: Containerizing the Client&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 4: Containerizing the Server Appp</title>
        <published>2022-08-19T00:00:00+00:00</published>
        <updated>2022-08-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/bundle-server/"/>
        <id>https://zerotohero.dev/spire/mtls/bundle-server/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/bundle-server/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;containers.png&quot; alt=&quot;mTLS With SPIRE: Part 4: Containerizing the Server App&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This section will bundle the server application, create and image out of it,
create deployment manifests, and deploy it into the cluster.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;VuT5zaZwq2Y?si=9nVhMhb_QdzHWYyj&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 4: Containerizing the Server App&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.docker.com&#x2F;&quot;&gt;&lt;strong&gt;Docker&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;opencontainers.org&#x2F;&quot;&gt;Open Container Initiative (&lt;strong&gt;&lt;em&gt;OCI&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;build&#x2F;building&#x2F;multi-stage&#x2F;&quot;&gt;Multistage Builds&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;builder&#x2F;&quot;&gt;Dockerfile Reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GoogleContainerTools&#x2F;distroless&quot;&gt;Distroless Container Images&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;registry&#x2F;&quot;&gt;Docker Registry&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;deployment&#x2F;&quot;&gt;Deployments&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;services-networking&#x2F;service&#x2F;&quot;&gt;Services&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;metallb.universe.tf&#x2F;&quot;&gt;&lt;strong&gt;MetalLB&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; (&lt;em&gt;this is the LoadBalancer we used
in this video series&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 3: Creating the Client Appp</title>
        <published>2022-08-19T00:00:00+00:00</published>
        <updated>2022-08-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/client-app/"/>
        <id>https://zerotohero.dev/spire/mtls/client-app/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/client-app/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;client-server.png&quot; alt=&quot;mTLS With SPIRE: Part 3: Creating the Client App&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This section will create the client app and establish connectivity between the
client and the server. The connectivity is insecure: There is no &lt;strong&gt;mTLS&lt;&#x2F;strong&gt;
security yet—we’ll come to that later.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;zp1JiA2Kni8?si=XhDNihlicw7pJGFb&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 3: Creating the Client App&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS</title>
        <published>2022-08-19T00:00:00+00:00</published>
        <updated>2022-08-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/end-to-end/"/>
        <id>https://zerotohero.dev/spire/mtls/end-to-end/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/end-to-end/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;connectivity.png&quot; alt=&quot;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In this final video of this series, we’ll exchance trust bundles between two *
&lt;em&gt;SPIRE&lt;&#x2F;em&gt;* servers to enable cross-cluster &lt;strong&gt;mTLS&lt;&#x2F;strong&gt; connectivity between workloads
that reside in different clusters.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;YaRI-U8czBI?si=om4iKvw2rGHB6gCu&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;architecture&#x2F;federation&#x2F;readme&#x2F;&quot;&gt;Deploying a Federated &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Architecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;persistent-volumes&#x2F;&quot;&gt;Kubernetes Persistent Volumes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;microk8s.io&#x2F;&quot;&gt;Microk8s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Setting Up SPIRE on EKS in Less Than Ten Minutes</title>
        <published>2021-12-18T00:00:00+00:00</published>
        <updated>2021-12-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/spire-rocks/"/>
        <id>https://zerotohero.dev/spire/spire-rocks/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/spire-rocks/">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;size&#x2F;w1200&#x2F;2024&#x2F;03&#x2F;trust.png&quot; alt=&quot;Setting Up SPIRE on EKS in Less Than Ten Minutes&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Psst… 🔎 Looking for &lt;strong&gt;GopherCon, 2021, TR&lt;&#x2F;strong&gt; resources? Say no more:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;GopherCon TR, Dec, 2021: &lt;em&gt;Friends Don’t Let Friends Hard-Code Their Secrets&lt;&#x2F;em&gt;
&lt;ul&gt;
&lt;li&gt;✴️ &lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;gophercon-tr-dec-2021&#x2F;SPIRE-gophercon-TR-Dec-2021.pdf&quot;&gt;&lt;strong&gt;Slides&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;✴️ &lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;gophercon-tr-dec-2021&#x2F;SPIRE-gophercon-TR-Dec-2021-src.zip&quot;&gt;&lt;strong&gt;Source Code&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is a video recording of the demo we made too:&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;n-hXWL5BgHg?si=ymLdQTIJlid0v8QH&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS Using Spire Under Three Minutes&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS Using Spire Under Three Minutes&lt;&#x2F;p&gt;
&lt;p&gt;Make sure you watch the longer video below, and read the rest of the article
too.&lt;&#x2F;p&gt;
&lt;p&gt;Enjoy, and may the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;⚠️ Important ⚠️&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you are new to &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;downloads&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, &lt;strong&gt;read the rest of the article
first&lt;&#x2F;strong&gt; before watching the video.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;&#x2F;h2&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;FUDsXgrnI2c?si=TAvLj-iXXmDDQWg0&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;Setting Up SPIRE on EKS in Less Than Ten Minutes&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;Setting Up SPIRE on EKS in Less Than Ten Minutes&lt;&#x2F;p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;This article will look at what &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; are. Then, we’ll explore
why managing identities and &lt;strong&gt;Trust&lt;&#x2F;strong&gt; at scale is a tough challenge and how to
solve it in a repeatable, scalable, and platform-agnostic way.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;spiffe-spire-logo-small.png&quot; alt=&quot;SPIFFE and SPIRE Logos&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;SPIFFE and SPIRE Logos&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In the video that accompanies this article, you’ll see how you can configure
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; on an &lt;strong&gt;AWS EKS&lt;&#x2F;strong&gt; Kubernetes cluster. Then we’ll ensure that it can
fetch &lt;strong&gt;SPIFFE ID&lt;&#x2F;strong&gt; documents (&lt;em&gt;or &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s&lt;&#x2F;em&gt;) from the &lt;strong&gt;SPIRE Server&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;SVID&lt;&#x2F;strong&gt;s, which stand for &lt;em&gt;SPIFFE verifiable identity document&lt;&#x2F;em&gt;, are
specially-crafted &lt;strong&gt;X.509 Certificates&lt;&#x2F;strong&gt; that the &lt;strong&gt;Workloads&lt;&#x2F;strong&gt; can use to
authenticate with each other.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;**SVIDs Rotate Automatically&lt;&#x2F;p&gt;
&lt;p&gt;SVID**s are short-lived, their lifetime is 1 hour by default, and they are
renewed every 30 minutes so that you don’t run out of SVIDs due to TTL.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;But before going any further, it’s better to clarify all this buzzword bingo—I
mean, what is a “&lt;strong&gt;workload&lt;&#x2F;strong&gt;”?—what the heck is and &lt;strong&gt;SVID&lt;&#x2F;strong&gt;? Why do we even
need it? Can we eat it 😁?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-a-workload&quot;&gt;What is a Workload?&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s start with something familiar: The &lt;strong&gt;workload&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;workload&lt;&#x2F;strong&gt;, in the context of &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;, is anything that
does a computation.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Portable and Platform-Agnostic&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In Cloud-Native terms, a &lt;strong&gt;workload&lt;&#x2F;strong&gt; is an integrated stack of application,
middleware, and operating system that accomplishes a computing task. A workload
is &lt;strong&gt;portable&lt;&#x2F;strong&gt; and &lt;strong&gt;platform-agnostic&lt;&#x2F;strong&gt;. A workload, or a collection of
workloads makes up a &lt;strong&gt;business service&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Let us take the project that we have been developing so far, for example. In
that case, the &lt;strong&gt;idm&lt;&#x2F;strong&gt;, &lt;strong&gt;crypto&lt;&#x2F;strong&gt;, &lt;strong&gt;mailer&lt;&#x2F;strong&gt;, &lt;strong&gt;questions&lt;&#x2F;strong&gt;, and &lt;strong&gt;store&lt;&#x2F;strong&gt;
pods that expose RESTful APIs in our Kubernetes cluster are all &lt;strong&gt;workload&lt;&#x2F;strong&gt;s.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;➜  ~ kubectl get po
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;NAME                         READY   STATUS    RESTARTS   AGE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;client-649db6b744-g85wb      1&#x2F;1     Running   0          23d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;crypto-66d75ccdbf-k2khl      1&#x2F;1     Running   0          31d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;idm-b9497f654-r7qg6          1&#x2F;1     Running   0          31d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;mailer-6d5c745b87-nz9dt      1&#x2F;1     Running   0          31d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;questions-67d5559dd9-dglc6   1&#x2F;1     Running   0          31d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;store-74bd85799b-w5xx9       1&#x2F;1     Running   0          31d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pods in our FizzBuzz Pro production cluster.&lt;&#x2F;p&gt;
&lt;p&gt;Workloads will often need to communicate; they must send API requests to
different downstream workloads and receive API responses.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;Screen-Shot-2021-10-09-at-7.27.39-AM.png&quot; alt=&quot;FizzBuzz Pro email verification flow.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;FizzBuzz Pro email verification flow.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In the above sequence diagram, the &lt;strong&gt;idm&lt;&#x2F;strong&gt; workload talks to the &lt;strong&gt;crypto&lt;&#x2F;strong&gt;
workload to get a verification token. Then, the &lt;strong&gt;idm&lt;&#x2F;strong&gt; workload talks to the *
&lt;em&gt;mailer&lt;&#x2F;em&gt;* workload to relay that token in an email message.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Workload == Service&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;One more thing before I move further: In this article, and also in the video
that accompanies this article, I use the terms &lt;strong&gt;workloads&lt;&#x2F;strong&gt; and &lt;strong&gt;services&lt;&#x2F;strong&gt;
interchangeably. Our microservices &lt;strong&gt;are&lt;&#x2F;strong&gt; our workloads, don’t get confused.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Within the context of this article, a &lt;strong&gt;workload&lt;&#x2F;strong&gt; or &lt;strong&gt;service&lt;&#x2F;strong&gt; is a process
that lives on a physical or virtual machine and does some form of meaningful
computation. Workloads often communicate and exchange information through
protocols like &lt;strong&gt;RESTful API&lt;&#x2F;strong&gt;s, &lt;strong&gt;protocol buffers&lt;&#x2F;strong&gt;, &lt;strong&gt;domain sockets&lt;&#x2F;strong&gt;, or
other inter-process communication mechanisms.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hope-is-not-a-security-posture&quot;&gt;“&lt;em&gt;Hope&lt;&#x2F;em&gt;” Is Not a Security Posture&lt;&#x2F;h2&gt;
&lt;p&gt;The problem is, how do we &lt;strong&gt;secure&lt;&#x2F;strong&gt; this communication channel between the
workloads that we have?&lt;&#x2F;p&gt;
&lt;p&gt;One way to take care of this is to create a large enough &lt;strong&gt;trust boundary&lt;&#x2F;strong&gt; to
know that the network is trusted. Then you &lt;strong&gt;hope&lt;&#x2F;strong&gt; no malicious parties can get
inside this secured zone to attack your services.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;network.png&quot; alt=&quot;A subset of FizzBuzz Pro microservices&amp;#x27; network boundaries.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;A subset of FizzBuzz Pro microservices&amp;#x27; network boundaries.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;If we look into the above network boundary diagram, the &lt;strong&gt;mailer&lt;&#x2F;strong&gt; and **crypto
** services are inside a private network; they don’t expose any public APIs. We
&lt;strong&gt;hope&lt;&#x2F;strong&gt; this could be enough to secure them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Hope&lt;&#x2F;strong&gt; is not the best strategy in terms of hardening your security posture. I
won’t dive into too much detail in this article, and there are so many ways *
&lt;em&gt;hope&lt;&#x2F;em&gt;* as a security strategy can go wrong.&lt;&#x2F;p&gt;
&lt;p&gt;To give a single example, though, assume we have another pod here (&lt;em&gt;see the
diagram below&lt;&#x2F;em&gt;). This pod is a &lt;strong&gt;web-ui&lt;&#x2F;strong&gt; pod that has nothing to do with mailer
and crypto. Therefore, it should not know about these services and not care that
they exist at all.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;Screen-Shot-2021-10-09-at-8.11.10-AM.png&quot; alt=&quot;A brand new web UI pod, reaching larger parts of the network than it should.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;A brand new web UI pod, reaching larger parts of the network than it should.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Can you &lt;strong&gt;hope&lt;&#x2F;strong&gt; that this service will not start talking to the crypto service,
generate random tokens? Can you ensure there isn’t a vulnerability in a
dependency that it uses? How about &lt;em&gt;a dependency of a dependency of a
dependency… 🐢&lt;&#x2F;em&gt;? Can you be sure that the code is free of &lt;em&gt;logic errors&lt;&#x2F;em&gt;? Can
you be sure that the pod will not start acting weirdly all of a sudden?&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;code-reviews.jpeg&quot; alt=&quot;This is why code reviews are a good thing.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;This is why code reviews are a good thing.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Can you &lt;strong&gt;hope&lt;&#x2F;strong&gt; that nothing like this could happen?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Hope&lt;&#x2F;strong&gt; is &lt;strong&gt;not&lt;&#x2F;strong&gt; a strategy. Instead, it would be best if you hardened the
communication between these workloads. That way, only the intended parties could
talk to each other. No one else in the network could manipulate this
communication.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zero-trust&quot;&gt;Zero Trust&lt;&#x2F;h2&gt;
&lt;p&gt;That’s where the concept of &lt;strong&gt;Zero Trust&lt;&#x2F;strong&gt; comes into play. Again, you can learn
more about it in the &lt;strong&gt;References and Further Reading&lt;&#x2F;strong&gt; section at the end of
this article, but in essence, &lt;strong&gt;Zero Trust&lt;&#x2F;strong&gt; means that &lt;em&gt;you cannot trust the
network&lt;&#x2F;em&gt;. Therefore, you should assume that your network is insecure and is
breached by default.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Zero Trust&lt;&#x2F;strong&gt; is a network security model based on a strict identity
verification process. The &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Zero_trust_security_model&quot;&gt;&lt;em&gt;&lt;strong&gt;Zero Trust&lt;&#x2F;strong&gt; Security
Model&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; dictates that
only authenticated and authorized workloads can talk to other &lt;strong&gt;authenticated&lt;&#x2F;strong&gt;
and &lt;strong&gt;authorized&lt;&#x2F;strong&gt; workloads.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some of the key motivations behind the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Zero_trust_security_model&quot;&gt;&lt;em&gt;&lt;strong&gt;Zero Trust&lt;&#x2F;strong&gt; Security
Model&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Users, devices, applications, and data are moving outside trust boundaries all
the time. Now it’s near impossible to do perimeter-based protection.&lt;&#x2F;li&gt;
&lt;li&gt;“&lt;em&gt;Trust but verify&lt;&#x2F;em&gt;” is no longer an option, as targeted, advanced threats
constantly move inside the corporate perimeter.&lt;&#x2F;li&gt;
&lt;li&gt;The network has become a complex mess with the introduction of cloud apps and
the Internet of Things. The increased risk is not compatible with traditional
access-control-list-oriented network security models.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-cia-triad-man-in-suit&quot;&gt;The CIA Triad 🕴&lt;&#x2F;h2&gt;
&lt;p&gt;Then, the question reduces to “&lt;em&gt;how do we ensure workload-to-workload
communication where the network is untrustworthy?&lt;&#x2F;em&gt;”.&lt;&#x2F;p&gt;
&lt;p&gt;So how do we secure service-to-service communication then?&lt;&#x2F;p&gt;
&lt;p&gt;This puzzle has three parts to solve, also known as the &lt;strong&gt;CIA&lt;&#x2F;strong&gt; Triad: *
&lt;em&gt;Confidentiality&lt;&#x2F;em&gt;*, &lt;strong&gt;Authenticity&lt;&#x2F;strong&gt;, and &lt;strong&gt;Integrity&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Confidentiality&lt;&#x2F;strong&gt;: The workload-to-workload communication should be on a
secure channel that no one else can listen to.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Integrity&lt;&#x2F;strong&gt;: The message that is being sent from one workload has not been
tampered with. The data is complete, accurate, and hasn’t been altered by anyone
else.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Authenticity&lt;&#x2F;strong&gt;: The sender of the data is the workload who claims it is. It is
not some other service that’s trying to impersonate the original service.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;cia-triad.png&quot; alt=&quot;The CIA triad.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;The CIA triad.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;x-509-digital-certificates&quot;&gt;X.509 Digital Certificates&lt;&#x2F;h2&gt;
&lt;p&gt;There are well-established, industry-standard ways of solving the puzzle. We can
establish &lt;strong&gt;confidentiality&lt;&#x2F;strong&gt;, verify &lt;strong&gt;integrity&lt;&#x2F;strong&gt;, and ensure &lt;strong&gt;authenticity&lt;&#x2F;strong&gt;
in an industry-standard way.&lt;&#x2F;p&gt;
&lt;p&gt;The most common way is to use asymmetric cryptography and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;X.509&quot;&gt;&lt;strong&gt;X.509 Digital
Certificates&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;. Again, I’m not going into
too much detail about certificates and certificate chains. Check out the
reference material at the end of this article for a deeper drill-down on the
subject matter.&lt;&#x2F;p&gt;
&lt;p&gt;For the context of this article, we need to know that when two workloads have
each other’s &lt;strong&gt;X.509&lt;&#x2F;strong&gt; public keys, they can establish a secure communication
channel. Then, they can talk to each other through this secure communication
channel.&lt;&#x2F;p&gt;
&lt;p&gt;Moreover, they can prove the message’s authenticity and integrity by digitally
signing the message with their private key.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, they can ensure the confidentiality of the communication channel by
encrypting the payload with the receiver’s public key.&lt;&#x2F;p&gt;
&lt;p&gt;How these mechanisms work varies by the algorithm and implementation, and it’s a
bit more involved than the quick summary outlined above. Suppose we sacrifice a
little bit of rigor for clarity. In that case, we can say that when you have
your &lt;em&gt;Certificates of Trust&lt;&#x2F;em&gt;, you can ensure &lt;strong&gt;confidentiality&lt;&#x2F;strong&gt;, &lt;strong&gt;integrity&lt;&#x2F;strong&gt;,
and &lt;strong&gt;authenticity&lt;&#x2F;strong&gt; in your &lt;strong&gt;workload-to-workload communications&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;meet-spiffe&quot;&gt;Meet &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The following outstanding question is: “&lt;em&gt;Since they are so helpful, how do we
create these &lt;strong&gt;X.509&lt;&#x2F;strong&gt; Certificates?&lt;&#x2F;em&gt;”&lt;&#x2F;p&gt;
&lt;p&gt;Other questions one might wonder are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Since these certificates ensure secure service-to-service communication, it’s
a good idea to rotate them frequently. How do we do that?&lt;&#x2F;li&gt;
&lt;li&gt;And also, it’s a good idea to invalidate them if some of these certificates
leak. How can we do it?&lt;&#x2F;li&gt;
&lt;li&gt;Also, how do we optimize and automate the process the certificate rotation and
expiration?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Why automate? Because &lt;strong&gt;security and humans do not mix well together&lt;&#x2F;strong&gt;. So we
better &lt;strong&gt;automate&lt;&#x2F;strong&gt; this entire certificate generation, rotation, revocation,
and invalidation process &lt;strong&gt;without needing any human intervention&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That’s where &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; comes into play.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;, &lt;em&gt;the Secure Production Identity Framework For Everyone&lt;&#x2F;em&gt;, provides a
&lt;strong&gt;secure identity&lt;&#x2F;strong&gt;, in the form of a specially crafted &lt;strong&gt;x.509 certificate&lt;&#x2F;strong&gt;,
to every workload in your production environment.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Short-Lived Keys&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The heart of the &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; specifications is the one that defines short-lived
cryptographic identity documents – called &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s via a simple API. Workloads
can then use these identity documents when authenticating to other workloads.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; is a set of &lt;strong&gt;open-source specifications&lt;&#x2F;strong&gt; for a framework capable of
&lt;strong&gt;bootstrapping&lt;&#x2F;strong&gt; and issuing &lt;strong&gt;identity&lt;&#x2F;strong&gt; to services anywhere without
depending on any specific platform.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;There Are&lt;&#x2F;strong&gt; &lt;strong&gt;JWT SVIDs, Too&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There are other ways &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; provides identity documents too, but in this
article, we’ll talk about &lt;strong&gt;X.509&lt;&#x2F;strong&gt; identities only. More specifically, &lt;strong&gt;X.509
SPIFFE Verifiable Identity documents&lt;&#x2F;strong&gt; or &lt;strong&gt;SVIDs&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;spiffe-key-elements&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; Key Elements&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; has the following key components:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;SPIFFE ID&lt;&#x2F;strong&gt;, how a software service’s &lt;strong&gt;name&lt;&#x2F;strong&gt; (&lt;em&gt;or &lt;strong&gt;identity&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;) is
represented.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;SPIFFE Verifiable Identity Document&lt;&#x2F;strong&gt; (&lt;strong&gt;&lt;em&gt;SVID&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;), a cryptographically
verifiable document used to prove a service’s identity to a peer.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;SPIFFE Workload API&lt;&#x2F;strong&gt;, a simple node-local API that services use to
obtain their identities without the need for authentication.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;SPIFFE Trust Bundle&lt;&#x2F;strong&gt;, a format for representing the collection of
public keys in use by a given &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; issuing authority.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;SPIFFE Federation&lt;&#x2F;strong&gt;, a simple mechanism by which &lt;em&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; Trust Bundles&lt;&#x2F;em&gt;
can be shared.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;benefits-of-using-spiffe&quot;&gt;Benefits of Using &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;By using &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;, you won’t need to maintain application-level authentication
information.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;No Tokens, No Problem&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Think about it. That’s something &lt;strong&gt;BIG&lt;&#x2F;strong&gt;:&lt;br &#x2F;&gt;
You won’t need a unique secret service key or a special token for your
workload to prove its identity anymore.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In addition, &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; is a platform-agnostic standard, so you avoid vendor
lock-in by using it across your clusters.&lt;&#x2F;p&gt;
&lt;p&gt;And since &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; is an open standard, you can interact with any application
or service that supports &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; without having to modify your codebase or
your application configuration.&lt;&#x2F;p&gt;
&lt;p&gt;Moreover, &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; solves the automating the credential creation problem that
we mentioned before. It is an open standard that establishes how these &lt;strong&gt;SVID
x.509 Certificates&lt;&#x2F;strong&gt; are &lt;strong&gt;created&lt;&#x2F;strong&gt;, &lt;strong&gt;defined&lt;&#x2F;strong&gt;, &lt;strong&gt;rotated&lt;&#x2F;strong&gt;, &lt;strong&gt;verified&lt;&#x2F;strong&gt;,
and &lt;strong&gt;invalidated&lt;&#x2F;strong&gt; automatically without needing human intervention.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Caching and Performance&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The workloads periodically receive updated identity documents (i.e., &lt;strong&gt;SVID&lt;&#x2F;strong&gt;
s) as certificates expire or the configuration changes. The &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; agent *
&lt;em&gt;preloads&lt;&#x2F;em&gt;* the identities for all workloads it may host. This preload operation
minimizes the impact of server downtime on the availability of the Workload API.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In addition to all these, you won’t have to assume that your network is secure
because the &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s will ensure the security and integrity of
service-to-service communication that the services have.&lt;&#x2F;p&gt;
&lt;p&gt;That’s a great advantage because maintaining network access control list and
firewall rules is &lt;strong&gt;cumbersome&lt;&#x2F;strong&gt;. It is prone to &lt;strong&gt;human errors&lt;&#x2F;strong&gt;,
time-consuming, and &lt;strong&gt;impractical&lt;&#x2F;strong&gt; when your network boundaries and the network
overlays you use change all the time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hello-spire&quot;&gt;Hello, &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Okay, that was &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;. But, what is
&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;{{img(
src=“&#x2F;images&#x2F;2021&#x2F;10&#x2F;keymaker.png”,
alt=“SPIFFE defines how to make keys; SPIRE is the key maker.”
)}&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;About SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; is a set of standards, what implements those standards? That’s
where &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; comes into play.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; is a production-ready reference implementation of &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; does its job by &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;#workload-attestation&quot;&gt;performing &lt;strong&gt;node&lt;&#x2F;strong&gt; and &lt;strong&gt;workload&lt;&#x2F;strong&gt;
&lt;strong&gt;attestation&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
This way, it reliably and securely identifies workloads and issues them &lt;strong&gt;SVID&lt;&#x2F;strong&gt;
s (&lt;em&gt;SPIFFE Verfifiables IDs&lt;&#x2F;em&gt;), which are nothing but specialized &lt;em&gt;X.509
Certificates&lt;&#x2F;em&gt;. The workloads, then, can use them to prove their identity.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;attestation.png&quot; alt=&quot;Workload attestation.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Workload attestation.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;You’ll see an example of how this attestation flow works in the video I’ve added
to the beginning of this article.&lt;&#x2F;p&gt;
&lt;p&gt;If you want a quick summary, workload attestation is a process where the
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; agent relies on locally trusted workload attributes. These attributes
can be as process&#x2F;group ID or container runtime metadata. Some examples of these
metadata include the pod names, namespaces, service accounts, and the like.&lt;&#x2F;p&gt;
&lt;p&gt;After all, if our cluster’s &lt;strong&gt;Kubernetes API&lt;&#x2F;strong&gt; can &lt;strong&gt;attest&lt;&#x2F;strong&gt; that our workload
pod has a particular &lt;strong&gt;name&lt;&#x2F;strong&gt;, with certain &lt;strong&gt;tags&lt;&#x2F;strong&gt;, managed by a specific *
&lt;em&gt;service account&lt;&#x2F;em&gt;*, in a given &lt;strong&gt;namespace&lt;&#x2F;strong&gt;, in a known &lt;strong&gt;cluster&lt;&#x2F;strong&gt;… that is
enough information to identify this workload.&lt;&#x2F;p&gt;
&lt;p&gt;This way, the workload will not need to provide a secret key to prove its
authenticity. Instead, we shift the trust and responsibility of establishing the
workload’s authenticity to the orchestration framework (&lt;em&gt;&lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt; in this
case&lt;&#x2F;em&gt;). By talking to Kubernetes APIs, we can verify, with confidence, that this
workload pod is what it claims it is.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Node and Workload Registration&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;One thing that I’ve been conveniently hiding so far, is, you have to *
&lt;em&gt;register&lt;&#x2F;em&gt;* nodes and workloads before you can attest them. For the interested,
this document outlines the details of
&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;deploying&#x2F;registering&#x2F;&quot;&gt;how workloads are registered with &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; IDs in the
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; server&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;detective-female-sign-spire-agents&quot;&gt;🕵️‍♀️ SPIRE Agents&lt;&#x2F;h2&gt;
&lt;p&gt;There is a single &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; &lt;strong&gt;Agent&lt;&#x2F;strong&gt; on each &lt;strong&gt;Node&lt;&#x2F;strong&gt;. The agents talk to the
&lt;strong&gt;SPIRE Server&lt;&#x2F;strong&gt;. Multiple workloads on the node talk to the same agent using the
&lt;strong&gt;SPIFFE Workload API&lt;&#x2F;strong&gt; to receive their &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;server_and_agent.png&quot; alt=&quot;SPIRE Server and Agent architecture.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;SPIRE Server and Agent architecture.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;registering-a-workload&quot;&gt;Registering a Workload&lt;&#x2F;h2&gt;
&lt;p&gt;For &lt;strong&gt;workloads&lt;&#x2F;strong&gt; to receive &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s, they need to be &lt;strong&gt;registered&lt;&#x2F;strong&gt; first.&lt;&#x2F;p&gt;
&lt;p&gt;There are several ways to register a workload: Either an operator registers your
workloads to the &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; server, and then the operator manually provisions the
workloads. Or you can automate this step entirely in your &lt;strong&gt;CI Pipeline&lt;&#x2F;strong&gt;: Your
&lt;strong&gt;CI&#x2F;CD&lt;&#x2F;strong&gt; orchestration tool can &lt;strong&gt;register&lt;&#x2F;strong&gt; the workloads to the &lt;strong&gt;SPIRE
Server&lt;&#x2F;strong&gt; and &lt;strong&gt;deploy&lt;&#x2F;strong&gt; them to your cluster.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;You Define Your Attestors During Registration&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;Workload Registration&lt;&#x2F;strong&gt; step is also where you specify your workload
attestors to the SPIRE server. Then the &lt;strong&gt;SPIRE Agent&lt;&#x2F;strong&gt; will use those attestors
to assign an identity to your workload and assign them &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After the workoad registration is complete, workloads will bind to the spire
agent’s &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unix_domain_socket&quot;&gt;&lt;strong&gt;domain socket&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
and regularly fetch &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s.&lt;&#x2F;p&gt;
&lt;p&gt;And that’s all about it. After a successful registration, &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; takes care
of the certificate initialization, assignment, revocation, and rotation problems
when everything is set up, each of which is hard to solve individually.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;go-spiffe&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;go-spiffe&quot;&gt;&lt;strong&gt;go-spiffe&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; is a library that can
make the “fetching &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s from the &lt;strong&gt;SPIRE Agent&lt;&#x2F;strong&gt;” part much painless
(&lt;em&gt;among other abstractions&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;turtle-secret-zero&quot;&gt;🐢 Secret Zero&lt;&#x2F;h2&gt;
&lt;p&gt;What makes &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; stand out is that it solves what’s called the
“&lt;strong&gt;&lt;em&gt;secret zero&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;” problem. In a nutshell, the problem statement goes as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Enabling access control to service requires a secret such as an API key or
password.&lt;&#x2F;li&gt;
&lt;li&gt;That key or password needs to be protected, so you encrypt the key.&lt;&#x2F;li&gt;
&lt;li&gt;But then you have to watch the decryption key that you’ll use to get your
service key back.&lt;&#x2F;li&gt;
&lt;li&gt;So you put the decryption key to a Keystore.&lt;&#x2F;li&gt;
&lt;li&gt;But then you’ll have to protect the Keystore’s master key.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And this goes on and on. Ultimately, protecting access to one secret results in
a new secret you need to save.&lt;&#x2F;p&gt;
&lt;p&gt;Which begs the following question: “&lt;em&gt;Who protects the &lt;strong&gt;secret zero&lt;&#x2F;strong&gt;—the
ultimate secret—that gives the keys to the entire kingdom?&lt;&#x2F;em&gt;”.&lt;&#x2F;p&gt;
&lt;p&gt;Rest assured, we’ll get there. Just 🐻 with me for a while.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;turtle-it-s-secrets-all-the-way-down&quot;&gt;🐢 It’s Secrets all the Way Down&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Identity&lt;&#x2F;strong&gt; and &lt;strong&gt;Authentication&lt;&#x2F;strong&gt; go hand-in-hand. Claiming an identity is
useless unless you can &lt;strong&gt;authenticate&lt;&#x2F;strong&gt; that identity and &lt;strong&gt;prove&lt;&#x2F;strong&gt; with
confidence that the identity is indeed what it claims to be.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;turtles.jpeg&quot; alt=&quot;Turtles all the way down.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;Turtles all the way down.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;One way to authenticate an identity is to provide a secret key or a password
along with the identity. Then a second independent identity management service
can verify this identity. In certain other implementations, services can use
hard-coded secret service keys to identify themselves.&lt;&#x2F;p&gt;
&lt;p&gt;In either case, to prove the identity, you need a &lt;strong&gt;secret&lt;&#x2F;strong&gt;. But this secret is
&lt;strong&gt;vital&lt;&#x2F;strong&gt; because if an attacker gets a hold of this secret, they can
authenticate as the service holding the secret.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Do Not Hard-Code Your Secrets&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That’s why hard-coding the secret inside the source code or baking it on a
virtual machine image such as an AWS AMI is not a good idea.&lt;&#x2F;p&gt;
&lt;p&gt;Also, although the &lt;a href=&quot;https:&#x2F;&#x2F;12factor.net&#x2F;&quot;&gt;Twelve Factor App Methodology&lt;&#x2F;a&gt;
encourages it, storing secrets in the workload as environment variables can
cause security problems (especially, in form of leaked environment variables
inside the aggregated log streams)—Apps should ideally keep their secrets in
&lt;strong&gt;temporary&lt;&#x2F;strong&gt; memory-mounted volumes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A better way is to put the secret into a &lt;strong&gt;Keystore&lt;&#x2F;strong&gt;, let the service
authenticate with the secret store, and let the service get it from the key
store.&lt;&#x2F;p&gt;
&lt;p&gt;A third-party orchestration system can authenticate with the Keystore by
unlocking the Keystore using the Keystore’s master key. Then it can fetch the
secret key that the service will use. Then inject it as a read-only, in-memory
configuration volume to the service and then lock the Keystore so that no one
else can reach it.&lt;&#x2F;p&gt;
&lt;p&gt;But then, how do we protect the Keystore’s master key? Because if an evil
attacker gets it from our orchestration system somehow, then we are at square
zero; they will get all the keys to all the services.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.vaultproject.io&#x2F;&quot;&gt;HashiCorp &lt;strong&gt;Vault&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, for example, attempts to
solve this problem using
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir%27s_Secret_Sharing&quot;&gt;&lt;strong&gt;Shamir’s Secret Sharing Algorithm&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Vault&lt;&#x2F;strong&gt; splits the key into three or more parts; if you don’t provide either
all the parts or the majority of the parts (&lt;em&gt;depending on how you set up Vault&lt;&#x2F;em&gt;),
Vault will not unlock.&lt;&#x2F;p&gt;
&lt;p&gt;So it makes getting the key harder, but still, it’s just pushing the problem one
level down, not entirely solving it.&lt;&#x2F;p&gt;
&lt;p&gt;No matter how hard it is, if you get the three master keys from wherever they
are stored, you can generate what Vault calls the “&lt;strong&gt;&lt;em&gt;unseal key&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;.” Then, you
gain access to the entire kingdom again.&lt;&#x2F;p&gt;
&lt;p&gt;To add more security, you can use Vault’s “&lt;em&gt;&lt;strong&gt;auto unseal&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;” feature and
delegate the providing and rotating of the unseal key to a &lt;em&gt;bare metal&lt;&#x2F;em&gt; or
*cloud_ &lt;strong&gt;HSM&lt;&#x2F;strong&gt;. But now, you’ll need to protect the HSM’s master key because
reaching it will give access to Vault’s unseal key, which will provide access to
all of your service secret keys.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;turtle-solving-the-bottom-turtle&quot;&gt;🐢 Solving the Bottom Turtle&lt;&#x2F;h2&gt;
&lt;p&gt;Do you see the issue here?&lt;&#x2F;p&gt;
&lt;p&gt;Managing secrets at scale requires effective &lt;strong&gt;access control&lt;&#x2F;strong&gt;; implementing
access control requires &lt;strong&gt;validating identity&lt;&#x2F;strong&gt;. That’s because without
providing a valid identity, it will be “&lt;em&gt;public access&lt;&#x2F;em&gt;,” which defeats the
entire purpose of using secret keys in the first place. Yet, proving identity
requires possession of &lt;strong&gt;yet another secret&lt;&#x2F;strong&gt;—That’s akin to stacking one
turtle atop another. It’s &lt;strong&gt;turtles all the way down&lt;&#x2F;strong&gt; 🐢.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;turtle-1.jpeg&quot; alt=&quot;A turtle in the bottom of the ocean (a &amp;#x27;bottom turtle&amp;#x27;?).&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;A turtle in the bottom of the ocean (a &amp;#x27;bottom turtle&amp;#x27;?).&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;🐢 &lt;strong&gt;Turtles All the Way Down&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;“&lt;strong&gt;Turtles all the way down&lt;&#x2F;strong&gt;”&lt;&#x2F;em&gt; is an expression of the problem of infinite
recursion. The saying alludes to the mythological idea of a World Turtle that
supports a flat earth on its back. It suggests that this turtle rests on the
back of an even larger turtle, which itself is part of a column of increasingly
large turtles that continues ad infinitum.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Protecting one secret requires coming up with some way to protect another
secret, which then requires protecting that secret, and so on.&lt;&#x2F;p&gt;
&lt;p&gt;That’s why improperly designed secrets management solutions have a master key
that unlocks everything. All a hacker needs to do is either steal or guess this
one master password to access everything. This master password is
&lt;strong&gt;secret zero&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This approach is equivalent to locking all of your keys in a drawer and then
putting the key of the drawer under the flower pot in your backyard—don’t do
that 🙃.&lt;&#x2F;p&gt;
&lt;p&gt;To break this loop, we need to find a &lt;strong&gt;&lt;em&gt;bottom turtle&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;, that is, some secret
that provides access to the rest of the secrets we need for authentication and
access control.&lt;&#x2F;p&gt;
&lt;p&gt;The next section is about how to find the &lt;strong&gt;bottom turtle&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-shift-of-trust&quot;&gt;The Shift of Trust&lt;&#x2F;h2&gt;
&lt;p&gt;A better solution to &lt;strong&gt;secret zero&lt;&#x2F;strong&gt; is a tad counterintuitive:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What If I Told You…&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Instead of securing the secret zero, what if we didn’t use any secret at all?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As it happens, we can avoid the &lt;strong&gt;secret zero&lt;&#x2F;strong&gt; problems entirely by leveraging
&lt;strong&gt;authenticators&lt;&#x2F;strong&gt; that work with the &lt;strong&gt;underlying infrastructure&lt;&#x2F;strong&gt; to
authenticate the access to your secrets.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;Screen-Shot-2021-10-09-at-8.49.47-AM.png&quot; alt=&quot;No secrets, no problem.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;No secrets, no problem.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;, this authentication process is called &lt;strong&gt;attestation&lt;&#x2F;strong&gt;. You
&lt;strong&gt;attest&lt;&#x2F;strong&gt; both the &lt;strong&gt;nodes&lt;&#x2F;strong&gt; and also the &lt;strong&gt;workloads&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;**What are Nodes?&lt;&#x2F;p&gt;
&lt;p&gt;Nodes** are virtual or physical machines, and &lt;strong&gt;workloads&lt;&#x2F;strong&gt; are processes
running on these nodes either directly or inside a container in a pod.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To verify that a workload is authorized for a particular identity,
&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;#workload-attestation&quot;&gt;the &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; agent performs
&lt;strong&gt;workload attestation&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;.
During &lt;strong&gt;workload attestation&lt;&#x2F;strong&gt;, workload’s attributes are read from the kernel
or other trusted components on the local system. Then, the &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; agent
matches the attributes against configured identities and provides each workload
with all the identities for which it is authorized.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Two Workloads Can Share the Same ID&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note that workload-identity association is a many-to-many relationship: A
workload may be authorized for zero or more identities. Similarly, zero or more
workloads can be associated with a single identity.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For example, if the Kubernetes &lt;strong&gt;api-server&lt;&#x2F;strong&gt; can verify that your pod has a
name &lt;strong&gt;idm&lt;&#x2F;strong&gt;, living inside a cluster named &lt;strong&gt;fizz-cluster&lt;&#x2F;strong&gt; using a service
account named &lt;strong&gt;fizz-sa&lt;&#x2F;strong&gt; under a namespace &lt;strong&gt;fizz&lt;&#x2F;strong&gt;; that is adequate
identifying information to &lt;strong&gt;prove&lt;&#x2F;strong&gt; the identity of the &lt;strong&gt;idm&lt;&#x2F;strong&gt; pod with
confidence. So even if the pod does not provide any secret, the &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;
&lt;strong&gt;workload attestor&lt;&#x2F;strong&gt; plugin can verify the identity of the idm pod by talking to
Kubernetes APIs.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Root of Trust&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;During the workload &lt;strong&gt;attestation&lt;&#x2F;strong&gt; process (&lt;em&gt;as exemplified above&lt;&#x2F;em&gt;),
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; establishes a &lt;strong&gt;Root of Trust&lt;&#x2F;strong&gt;. It builds an automated solution
around workload identity. This identity then forms the foundation for all the
interactions that require authentication and authorization.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;there-s-no-spoon&quot;&gt;There’s No Spoon&lt;&#x2F;h2&gt;
&lt;p&gt;In other words, when you use &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;, you shift the burden of trust from the
Keystore to the operating system’s kernel, the cloud provider APIs, the
orchestration framework, or to a mixture of all of these.&lt;&#x2F;p&gt;
&lt;p&gt;It’s a good time to re-intruduce the &lt;strong&gt;&lt;em&gt;SPIRE workload attestation&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt; diagram.
Pay attention to how the &lt;strong&gt;workload attestor&lt;&#x2F;strong&gt; uses different plugins to use *
&lt;em&gt;kubelet&lt;&#x2F;em&gt;* for Kubernetes-native workloads, and the linux &lt;strong&gt;kernel&lt;&#x2F;strong&gt; for other
workloads. &lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;planning&#x2F;extending&#x2F;&quot;&gt;This &lt;strong&gt;plugin-based&lt;&#x2F;strong&gt;
architecture&lt;&#x2F;a&gt; is one of
the reasons why &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; is so easy to extend.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;2021&#x2F;10&#x2F;attestation-1.png&quot; alt=&quot;SPIRE workload attestation.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;How the &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; workload attestation works is—at a very high&#x2F;conceptual
level—similar to how the &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AWSEC2&#x2F;latest&#x2F;UserGuide&#x2F;ec2-instance-metadata.html&quot;&gt;&lt;em&gt;&lt;strong&gt;AWS Instance Metadata&lt;&#x2F;strong&gt;
API&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;
works or how the instance metadata API of any other cloud provider functions.&lt;&#x2F;p&gt;
&lt;p&gt;In a similar fashion to the &lt;em&gt;AWS Instance Metadata API&lt;&#x2F;em&gt;, the
&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;#workload-registration&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; &lt;strong&gt;Workload API&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;
does not require that a calling workload have any knowledge of its own identity
or possess any authentication token when calling the API. Using the Instance
Metadata API means your application does not need not co-deploy any
authentication secrets with the workload:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;There’s no spoon&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;2021&amp;#x2F;10&amp;#x2F;Screen-Shot-2021-10-09-at-9.07.00-AM.png&quot; alt=&quot;SPIRE workload attestation.&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;SPIRE workload attestation.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Unlike these other APIs, however, the &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Workload API is
&lt;strong&gt;platform-agnostic&lt;&#x2F;strong&gt;. In addition, it can identify running services at the
&lt;strong&gt;process level&lt;&#x2F;strong&gt; and &lt;strong&gt;kernel level&lt;&#x2F;strong&gt;, making it suitable for use with
container schedulers such as &lt;strong&gt;Kubernetes&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Having learned the basics of &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;, let’s look at some use
cases from companies that use &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; on scale production.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;use-cases&quot;&gt;Use Cases&lt;&#x2F;h2&gt;
&lt;p&gt;Here are some examples of real-life use cases that talk about &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; out in the wild.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=o98SFmW4akQ&quot;&gt;Using &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; in Production at Uber&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.crowdcast.io&#x2F;e&#x2F;pin-spiffe&quot;&gt;Overcoming the identity crisis at Pinterest with &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;x642wq7lbpY&quot;&gt;10 Lessons From Migrating to &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; After 10 Years Of Service Identity at Square&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;nZXCbiS6wfE&quot;&gt;Passport App: The role of &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; in return to work solution&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;vX8SS5wQuY8&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; at GitHub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;4pfY0uFW7yk&quot;&gt;Securing Kafka with &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;xgzQEb9hbMI?t=222&quot;&gt;Attesting Istio Workload Identities with &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;xgzQEb9hbMI?t=1606&quot;&gt;Parsec and &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=eCLTdSp4JzE&quot;&gt;Cloud-Native Identity Management&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;H5IlmYmEDKk?t=2585&quot;&gt;Using &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; to ensure secure communications across hybrid infrastructure services&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=1TlEO0xO8jw&amp;amp;list=PLWsNZXV-gXVY_br7I8gz9q0Fijk4DoUxG&amp;amp;index=8&amp;amp;t=0s&quot;&gt;Securing Grey Matter: &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&#x2F;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; in a Hybrid Mesh&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=TfnU1xD9EFY&quot;&gt;Building Zero Trust-based Authentication in Healthcare with &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;TOjb_imYuLE&quot;&gt;Lessons Learned: Designing Scalable, PKI-based Authentication With &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; at ByteDance&#x2F;TikTok&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;use-the-source&quot;&gt;Use The Source&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assets.zerotohero.dev&#x2F;spire-rocks&#x2F;3092102c-18cf-4658-b918-862d93ca2ec2&#x2F;fizz-infra.zip&quot;&gt;Here’s the zip archive of the project that we’ve used in the
demo video&lt;&#x2F;a&gt;
(&lt;em&gt;32KB&lt;&#x2F;em&gt;). There are other manifest files that are not part of the demo. Yet, I’m
keeping them to give a more complete view of the system that we are working
with.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Aside&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the source code archive, I have not included Kubernetes Secret manifests
for obvious reasons—also, after reading this article, who needs secrets
anyway.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;¯\_(ツ)_&#x2F;¯&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;references-and-further-reading&quot;&gt;References and Further Reading&lt;&#x2F;h2&gt;
&lt;p&gt;Here is some additional “&lt;em&gt;bedtime reading&lt;&#x2F;em&gt;” for those who want to dig into the
concept further.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kubernetes-concepts-covered-in-the-video&quot;&gt;Kubernetes Concepts Covered in the Video&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;eks&#x2F;&quot;&gt;Amazon Elastic Kubernetes Service (&lt;strong&gt;&lt;em&gt;EKS&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;overview&#x2F;working-with-objects&#x2F;namespaces&#x2F;&quot;&gt;&lt;strong&gt;Namespace&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;daemonset&#x2F;&quot;&gt;&lt;strong&gt;DaemonSet&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;statefulset&#x2F;&quot;&gt;&lt;strong&gt;StatefulSet&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;configure-pod-container&#x2F;configure-service-account&#x2F;&quot;&gt;Configure &lt;strong&gt;ServiceAccount&lt;&#x2F;strong&gt;s for &lt;strong&gt;Pod&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;reference&#x2F;access-authn-authz&#x2F;rbac&#x2F;&quot;&gt;Using &lt;strong&gt;RBAC&lt;&#x2F;strong&gt; Authorization&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@hajsanad&#x2F;kubernetes-token-review-and-authentication-56e06cc55ed3&quot;&gt;Kubernetes &lt;strong&gt;Token Review API&lt;&#x2F;strong&gt; and &lt;strong&gt;Authentication&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;configmap&#x2F;&quot;&gt;&lt;strong&gt;ConfigMap&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;secret&#x2F;&quot;&gt;&lt;strong&gt;Secret&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;tasks&#x2F;configure-pod-container&#x2F;configure-liveness-readiness-startup-probes&#x2F;&quot;&gt;Configure &lt;strong&gt;Liveness&lt;&#x2F;strong&gt;, &lt;strong&gt;Readiness&lt;&#x2F;strong&gt;, and &lt;strong&gt;Startup&lt;&#x2F;strong&gt; Probes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;services-networking&#x2F;service&#x2F;&quot;&gt;&lt;strong&gt;Service&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;controllers&#x2F;deployment&#x2F;&quot;&gt;&lt;strong&gt;Deployment&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;&quot;&gt;&lt;strong&gt;Pod&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;persistent-volumes&#x2F;&quot;&gt;&lt;strong&gt;Persistent Volume&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;storage&#x2F;volumes&#x2F;&quot;&gt;&lt;strong&gt;Volume&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;architecture&#x2F;nodes&#x2F;&quot;&gt;&lt;strong&gt;Node&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;spiffe-and-spire-fundamentals&quot;&gt;SPIFFE and SPIRE Fundamentals&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spiffe-about&#x2F;spiffe-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; Concepts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Concepts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spiffe&#x2F;blob&#x2F;main&#x2F;standards&#x2F;SPIFFE_Workload_API.md&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; Workload API&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;deploying&#x2F;svids&#x2F;&quot;&gt;Working With &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;planning&#x2F;extending&#x2F;&quot;&gt;Extending &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;go-spiffe&quot;&gt;&lt;strong&gt;go-spiffe&lt;&#x2F;strong&gt;: Golang Library for &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; Support&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;key-concepts&quot;&gt;Key Concepts&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;csrc.nist.gov&#x2F;publications&#x2F;detail&#x2F;sp&#x2F;800-207&#x2F;final&quot;&gt;&lt;strong&gt;Zero Trust&lt;&#x2F;strong&gt; Architecture&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Zero_trust_security_model&quot;&gt;&lt;strong&gt;Zero Trust&lt;&#x2F;strong&gt; Security Model&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Trust_boundary&quot;&gt;Trust Boundary&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Information_security&quot;&gt;Information Security&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Public_key_infrastructure&quot;&gt;Public Key Infrastructure (&lt;em&gt;PKI&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;knowledge.digicert.com&#x2F;solution&#x2F;SO16297.html&quot;&gt;How Certificate Chains Work&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;protocol-buffers&quot;&gt;Protocol Buffers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;grpc.io&#x2F;&quot;&gt;&lt;strong&gt;gRPC&lt;&#x2F;strong&gt;: A Universal RPC Framework&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unix_domain_socket&quot;&gt;Unix Domain Sockets&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Inter-process_communication&quot;&gt;Inter-Process Communication&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.redhat.com&#x2F;en&#x2F;topics&#x2F;devops&#x2F;what-is-ci-cd&quot;&gt;What is CI&#x2F;CD?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;algorithms-and-standards&quot;&gt;Algorithms and Standards&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;X.509&quot;&gt;X.509&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;spiffe&#x2F;blob&#x2F;main&#x2F;standards&#x2F;X509-SVID.md&quot;&gt;X.509 &lt;strong&gt;SVID&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shamir&amp;#x27;s_Secret_Sharing&quot;&gt;Shamir’s Secret Sharing Algorithm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Certificate_revocation_list&quot;&gt;Certificate Revocation Lists (&lt;em&gt;CRL&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;people.csail.mit.edu&#x2F;rivest&#x2F;pubs&#x2F;Riv98b.pdf&quot;&gt;Can we eliminate &lt;strong&gt;CRL&lt;&#x2F;strong&gt;s?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;related-technologies&quot;&gt;Related Technologies&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.vaultproject.io&#x2F;docs&#x2F;concepts&#x2F;seal&quot;&gt;How Vault Seals&#x2F;Unseals Using Shamir’s Secret Sharing Algorithm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hardware_security_module&quot;&gt;&lt;strong&gt;HSM&lt;&#x2F;strong&gt;: Hardware Security Module&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;cloudhsm&#x2F;&quot;&gt;AWS Cloud HSM&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;IBM&#x2F;istio-spire&quot;&gt;Istio identity with &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.openpolicyagent.org&#x2F;&quot;&gt;&lt;strong&gt;OPA&lt;&#x2F;strong&gt;: Open Policy Agent&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;certificate.transparency.dev&#x2F;&quot;&gt;Certificate Transparency&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AWSEC2&#x2F;latest&#x2F;UserGuide&#x2F;ec2-instance-metadata.html&quot;&gt;AWS Instance Metadata and User Data&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;eks&#x2F;&quot;&gt;Amazon &lt;strong&gt;EKS&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;AWSEC2&#x2F;latest&#x2F;UserGuide&#x2F;AMIs.html&quot;&gt;Amazon Machine Images (&lt;em&gt;AMI&lt;&#x2F;em&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;security&#x2F;encryption-in-transit&#x2F;application-layer-transport-security&#x2F;&quot;&gt;ALTS: Application Layer Transport Security&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;engineering.fb.com&#x2F;2019&#x2F;05&#x2F;29&#x2F;security&#x2F;service-encryption&#x2F;&quot;&gt;Building Facebook’s Service Encryption&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=15H5uCj1hlE&quot;&gt;Automated Bootstrapping of Secrets &amp;amp; Identity in the Cloud&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;12factor.net&#x2F;&quot;&gt;The Twelve Factor App&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;key-terms&quot;&gt;Key Terms&lt;&#x2F;h2&gt;
&lt;p&gt;Here is an non-exhaustive list of the key terms and phrases covered in this
article and video. Of course, if you check the **References and Further Reading
** section above, you will find a lot more. Yet, it’s an excellent start to get
acquainted with these and do more profound research around them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zero-trust-1&quot;&gt;Zero Trust&lt;&#x2F;h3&gt;
&lt;p&gt;A security concept centered on the idea that organizations should not
automatically trust anything based on whether a service is running inside or
outside a network boundary and must verify everything trying to connect to its
systems before granting access.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;authentication&quot;&gt;Authentication&lt;&#x2F;h3&gt;
&lt;p&gt;The process of verifying the identity of a user or a system. Answers: “What are
you?”.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;authorization&quot;&gt;Authorization&lt;&#x2F;h3&gt;
&lt;p&gt;The process of determining the permissions of a user or a system over a
resource. Answers: “What can you do?”.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;node-worker&quot;&gt;Node&#x2F;Worker&lt;&#x2F;h3&gt;
&lt;p&gt;A logical or physical entity that runs computational workloads.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;workload&quot;&gt;Workload&lt;&#x2F;h3&gt;
&lt;p&gt;A workload is a single piece of software deployed with a particular
configuration for a single purpose that can consist of multiple running
instances, all of which perform the same task.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;attestation&quot;&gt;Attestation&lt;&#x2F;h3&gt;
&lt;p&gt;In the context of &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;, attestation is asserting specific properties of a
&lt;strong&gt;Node&lt;&#x2F;strong&gt; or &lt;strong&gt;Workload&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;spiffe-id&quot;&gt;SPIFFE ID&lt;&#x2F;h3&gt;
&lt;p&gt;A string that uniquely identifies a workload, e.g.
&lt;code&gt;spiffe:&#x2F;&#x2F;fizzbuzz.pro&#x2F;service&#x2F;idm&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;svid-spiffe-verifiable-identity-document&quot;&gt;SVID (&lt;em&gt;SPIFFE Verifiable Identity Document&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;A document with which a workload proves its identity. An &lt;strong&gt;SVID&lt;&#x2F;strong&gt; contains a
&lt;strong&gt;SPIFFE ID&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;trust-bootstrap&quot;&gt;Trust Bootstrap&lt;&#x2F;h3&gt;
&lt;p&gt;Establishing Trust in a service or system.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;trust-domain&quot;&gt;Trust Domain&lt;&#x2F;h3&gt;
&lt;p&gt;Corresponds to the Trust Root of a system. A &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; &lt;strong&gt;trust domain&lt;&#x2F;strong&gt; is an
identity namespace that is backed by an issuing authority.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;root-of-trust&quot;&gt;Root of Trust&lt;&#x2F;h3&gt;
&lt;p&gt;A source in which another trust is built on.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;signing&quot;&gt;Signing&lt;&#x2F;h3&gt;
&lt;p&gt;The addition of a digital signature for verifying the authenticity of a message
or document.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mutual-tls-mtls&quot;&gt;Mutual TLS (&lt;em&gt;mTLS&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;A cryptographic protocol that ensures that the network traffic is both secure
and trusted in both directions between a client and server.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;public-key-cryptography-asymmetric-cryptography&quot;&gt;Public-key cryptography (&lt;em&gt;asymmetric cryptography&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;A cryptographic system that uses pairs of keys (&lt;em&gt;&lt;strong&gt;private&lt;&#x2F;strong&gt; keys and &lt;strong&gt;public&lt;&#x2F;strong&gt;
keys&lt;&#x2F;em&gt;). One key encrypts data, while the other key is used to decrypt the data.
&lt;strong&gt;For example, X.509 Digital Certificates&lt;&#x2F;strong&gt; are created using public-key
cryptography.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pki-public-key-infrastructure&quot;&gt;PKI (&lt;em&gt;Public Key Infrastructure&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;A set of policies, procedures, and tools used to create, manage, and distribute
digital certificates.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;x-509&quot;&gt;X.509&lt;&#x2F;h3&gt;
&lt;p&gt;A widely used standard format for public-key certificates. These certificates
are used in many internet protocols, including TLS&#x2F;SSL.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;x509-svid&quot;&gt;X509-SVID&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;strong&gt;X.509&lt;&#x2F;strong&gt; representation of an &lt;strong&gt;SVID&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kernel&quot;&gt;Kernel&lt;&#x2F;h3&gt;
&lt;p&gt;The central part of an operating system, which manages the memory, CPU, and
device operations.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hardening&quot;&gt;Hardening&lt;&#x2F;h3&gt;
&lt;p&gt;The process of putting a system through a sequence of actions to increase its
security posture, including patching, updating configuration, and limiting
network access.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hardware-security-module-hsm&quot;&gt;Hardware Security Module (&lt;em&gt;HSM&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;A dedicated cryptographic processor designed to manage and safeguard sensitive
keys.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;key-management-service-kms&quot;&gt;Key Management Service (&lt;em&gt;KMS&lt;&#x2F;em&gt;)&lt;&#x2F;h3&gt;
&lt;p&gt;A system that manages cryptographic keys. It deals with generating, exchange,
storing, and revocation of keys.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this article, we’ve seen how hard it is to manage service identity across
clusters at scale. We also had a demo video showing how you can install
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; on an &lt;strong&gt;AWS EKS&lt;&#x2F;strong&gt; Kubernetes cluster. In the video, we also consumed
the &lt;strong&gt;SPIRE Agent&lt;&#x2F;strong&gt;’s &lt;strong&gt;Workload API&lt;&#x2F;strong&gt;s to get &lt;strong&gt;SVID&lt;&#x2F;strong&gt;s in no time.&lt;&#x2F;p&gt;
&lt;p&gt;When it comes to identity federation, &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; and its reference implementation
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; solve many cross-cutting concerns. Some of these common
problems are &lt;strong&gt;secret management&lt;&#x2F;strong&gt;, secret creation, secret sharing, and
&lt;strong&gt;secret invalidation&lt;&#x2F;strong&gt;. With &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;, you don’t need to trust the network or
create firewall rules and access control lists.&lt;&#x2F;p&gt;
&lt;p&gt;Using the foundation that we created in this article, we’ll create a service to
service &lt;strong&gt;mTLS&lt;&#x2F;strong&gt; communication channel in the follow-up articles.&lt;&#x2F;p&gt;
&lt;p&gt;Until then… May the source be with you 🦄.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;section-contents&quot;&gt;Section Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ Setting Up SPIRE on EKS in Less Than Ten Minutes&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;spike&#x2F;shamir-secrets-sharing&#x2F;&quot;&gt;Shamir’s Secret Sharing Scheme with SPIFFE and SPIKE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;&quot;&gt;mTLS with SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 1: Introduction</title>
        <published>2021-10-19T00:00:00+00:00</published>
        <updated>2021-10-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/intro/"/>
        <id>https://zerotohero.dev/spire/mtls/intro/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/intro/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;cluster-arch.png&quot; alt=&quot;mTLS With SPIRE: Part 1: Introduction&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This video will introduce the cluster architecture and talk about what we are
planning to achieve by the end of the video series.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;xvfjZpZtOdo?si=rl2EJYZLOucc0Ijc&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 1: Introduction&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;spire-rocks&#x2F;&quot;&gt;Setting Up &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; on EKS in Less
Than Ten Minutes&lt;&#x2F;a&gt; (&lt;em&gt;read this first&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Public_key_infrastructure&quot;&gt;Public Key Infrastructure (&lt;strong&gt;&lt;em&gt;PKI&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Transport_Layer_Security&quot;&gt;Transport Layer Security (&lt;strong&gt;&lt;em&gt;TLS&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mutual_authentication&quot;&gt;Mutual Transport Layer Security (&lt;strong&gt;&lt;em&gt;mTLS&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;X.509&quot;&gt;&lt;strong&gt;X.509&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;home&#x2F;&quot;&gt;Kubernetes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;containers&#x2F;&quot;&gt;Containers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;workloads&#x2F;pods&#x2F;&quot;&gt;Pods&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;grpc.io&#x2F;&quot;&gt;&lt;strong&gt;gRPC&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;&quot;&gt;&lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spiffe-about&#x2F;overview&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;architecture&#x2F;federation&#x2F;readme&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Federation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 2: Creating the Server App</title>
        <published>2021-10-19T00:00:00+00:00</published>
        <updated>2021-10-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/server-app/"/>
        <id>https://zerotohero.dev/spire/mtls/server-app/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/server-app/">&lt;h2 id=&quot;mtls-with-spire-part-2-creating-the-server-app&quot;&gt;mTLS With SPIRE: Part 2 — Creating the Server App&lt;&#x2F;h2&gt;

&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;server-app.png&quot; alt=&quot;mTLS With SPIRE: Part 2: Creating the Server App&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We’ll start by creating a server application. Once the server is ready, we’ll
continue with the client application on the next video.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;sNqJxFE7eR8?si=hFxATeHr6n1_OGPx&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 2: Creating the Server App&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;&quot;&gt;&lt;strong&gt;Go&lt;&#x2F;strong&gt; Programming Language&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;blog&#x2F;using-go-modules&quot;&gt;Using &lt;strong&gt;Go&lt;&#x2F;strong&gt; Modules&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bash_(Unix_shell)&quot;&gt;&lt;strong&gt;Bash&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;grpc.io&#x2F;&quot;&gt;&lt;strong&gt;gRPC&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 9: Configuring the Client to User SPIRE mTLS</title>
        <published>2021-10-19T00:00:00+00:00</published>
        <updated>2021-10-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/setup-client/"/>
        <id>https://zerotohero.dev/spire/mtls/setup-client/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/setup-client/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;almost-there.png&quot; alt=&quot;mTLS With SPIRE: Part 9: Configuring the Client to User SPIRE mTLS&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to User SPIRE mTLS&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We are almost there! Once we configure the client to use &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; mTLS, the
client and the server can talk securely within a single cluster. In the
following video, we’ll move the client to a different cluster and federate the
&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; servers to establish cross-clsuter &lt;strong&gt;mTLS&lt;&#x2F;strong&gt; too.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;5Onh7nR6xcs?si=q7SvMuDqZAxIhaRl&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 9: Configuring the Client to User SPIRE mTLS&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to User SPIRE mTLS&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;read-the-source&quot;&gt;Read the Source&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zerotohero-dev&#x2F;spire-mtls&quot;&gt;Access the source code and other related assets from &lt;strong&gt;Zero to Hero&lt;&#x2F;strong&gt; GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>mTLS With SPIRE: Part 8 --- Configuring the Server to Use SPIRE mTLS</title>
        <published>2021-10-19T00:00:00+00:00</published>
        <updated>2021-10-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Volkan Özçelik
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://zerotohero.dev/spire/mtls/setup-server/"/>
        <id>https://zerotohero.dev/spire/mtls/setup-server/</id>
        
        <content type="html" xml:base="https://zerotohero.dev/spire/mtls/setup-server/">
&lt;div class=&quot;z2h-image&quot;&gt;
    &lt;p class=&quot;img&quot;&gt;&lt;img src=&quot;&amp;#x2F;images&amp;#x2F;size&amp;#x2F;w1200&amp;#x2F;2024&amp;#x2F;03&amp;#x2F;server.png&quot; alt=&quot;mTLS With SPIRE: Part 8: Configuring the Server to User SPIRE mTLS&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
    &lt;p class=&quot;alt&quot; style=&quot;text-align: center; font-style: italic;
      margin-top: -1.125em;
      font-size: 1em;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to User SPIRE mTLS&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Now that we have &lt;strong&gt;SPIRE&lt;&#x2F;strong&gt;, our server application can use it to establish an
&lt;strong&gt;mTLS&lt;&#x2F;strong&gt; connectivity.&lt;&#x2F;p&gt;
&lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
  &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;8mbVPEl9iio?si=NI0rkjX-7mXX1AkB&quot;
    frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; 
    encrypted-media; gyroscope; picture-in-picture; web-share&quot;
    referrerpolicy=&quot;strict-origin-when-cross-origin&quot;
    allowfullscreen
    style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot;
    title=&quot;mTLS With SPIRE: Part 8: Configuring the Server to User SPIRE mTLS&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;mTLS With SPIRE: Part 8: Configuring the Server to User SPIRE mTLS&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;playlist&quot;&gt;Playlist&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;intro&#x2F;&quot;&gt;mTLS With SPIRE: Part 1: Introduction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;server-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 2: Creating the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;client-app&#x2F;&quot;&gt;mTLS With SPIRE: Part 3: Creating the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-server&#x2F;&quot;&gt;mTLS With SPIRE: Part 4: Containerizing the Server App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;bundle-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 5: Containerizing the Client App&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;rollout&#x2F;&quot;&gt;mTLS With SPIRE: Part 6: Rolling Out SPIRE to the Cluster&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;register&#x2F;&quot;&gt;mTLS With SPIRE: Part 7: Registering Nodes and Workloads to SPIRE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;▶ mTLS With SPIRE: Part 8: Configuring the Server to Use SPIRE mTLS&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;setup-client&#x2F;&quot;&gt;mTLS With SPIRE: Part 9: Configuring the Client to Use SPIRE mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zerotohero.dev&#x2F;spire&#x2F;mtls&#x2F;end-to-end&#x2F;&quot;&gt;mTLS With SPIRE: Part 10: Establishing Cross-Cluster mTLS&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-and-technologies-mentioned&quot;&gt;Tools and Technologies Mentioned&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the tools and technologies that were mentioned in the video, along with
related articles and other helpful links.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spiffe.io&#x2F;docs&#x2F;latest&#x2F;spire-about&#x2F;spire-concepts&#x2F;&quot;&gt;&lt;strong&gt;SPIRE&lt;&#x2F;strong&gt; Concepts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;microk8s.io&#x2F;&quot;&gt;MicroK8s&lt;&#x2F;a&gt; (&lt;em&gt;the Kubernetes variant that we used in these videos&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spiffe&#x2F;go-spiffe&quot;&gt;go-spiffe: Go Library for &lt;strong&gt;SPIFFE&lt;&#x2F;strong&gt; Support&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;auth0.com&#x2F;docs&#x2F;get-started&#x2F;identity-fundamentals&#x2F;authentication-and-authorization&quot;&gt;Authentication and Authorization&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.redhat.com&#x2F;en&#x2F;topics&#x2F;microservices&#x2F;what-is-a-service-mesh&quot;&gt;What’s a Service Mesh&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;istio.io&#x2F;&quot;&gt;&lt;strong&gt;istio&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.openpolicyagent.org&#x2F;&quot;&gt;Open Policy Agent (&lt;strong&gt;&lt;em&gt;OPA&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.envoyproxy.io&#x2F;&quot;&gt;&lt;strong&gt;Envoy&lt;&#x2F;strong&gt; Proxy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.envoyproxy.io&#x2F;docs&#x2F;envoy&#x2F;latest&#x2F;configuration&#x2F;security&#x2F;secret&quot;&gt;&lt;strong&gt;Envoy&lt;&#x2F;strong&gt; Secret Discovery Service&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
</feed>
